
SWD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028c8  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002a60  08002a60  00003a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a78  08002a78  00004014  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002a78  08002a78  00003a78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002a80  08002a80  00004014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a80  08002a80  00003a80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002a84  08002a84  00003a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08002a88  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000041bc  20000014  08002a9c  00004014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200041d0  08002a9c  000041d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001091e  00000000  00000000  00004044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000293d  00000000  00000000  00014962  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000810d  00000000  00000000  0001729f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cf8  00000000  00000000  0001f3b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009ed  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000178c2  00000000  00000000  00020a95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001405a  00000000  00000000  00038357  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00095e03  00000000  00000000  0004c3b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000e21b4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002238  00000000  00000000  000e21f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000053  00000000  00000000  000e4430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000014 	.word	0x20000014
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002a48 	.word	0x08002a48

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000018 	.word	0x20000018
 80001d4:	08002a48 	.word	0x08002a48

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001ec:	f000 b988 	b.w	8000500 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	468e      	mov	lr, r1
 8000210:	4604      	mov	r4, r0
 8000212:	4688      	mov	r8, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d962      	bls.n	80002e4 <__udivmoddi4+0xdc>
 800021e:	fab2 f682 	clz	r6, r2
 8000222:	b14e      	cbz	r6, 8000238 <__udivmoddi4+0x30>
 8000224:	f1c6 0320 	rsb	r3, r6, #32
 8000228:	fa01 f806 	lsl.w	r8, r1, r6
 800022c:	fa20 f303 	lsr.w	r3, r0, r3
 8000230:	40b7      	lsls	r7, r6
 8000232:	ea43 0808 	orr.w	r8, r3, r8
 8000236:	40b4      	lsls	r4, r6
 8000238:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800023c:	fa1f fc87 	uxth.w	ip, r7
 8000240:	fbb8 f1fe 	udiv	r1, r8, lr
 8000244:	0c23      	lsrs	r3, r4, #16
 8000246:	fb0e 8811 	mls	r8, lr, r1, r8
 800024a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024e:	fb01 f20c 	mul.w	r2, r1, ip
 8000252:	429a      	cmp	r2, r3
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0x62>
 8000256:	18fb      	adds	r3, r7, r3
 8000258:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800025c:	f080 80ea 	bcs.w	8000434 <__udivmoddi4+0x22c>
 8000260:	429a      	cmp	r2, r3
 8000262:	f240 80e7 	bls.w	8000434 <__udivmoddi4+0x22c>
 8000266:	3902      	subs	r1, #2
 8000268:	443b      	add	r3, r7
 800026a:	1a9a      	subs	r2, r3, r2
 800026c:	b2a3      	uxth	r3, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800027a:	fb00 fc0c 	mul.w	ip, r0, ip
 800027e:	459c      	cmp	ip, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x8e>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000288:	f080 80d6 	bcs.w	8000438 <__udivmoddi4+0x230>
 800028c:	459c      	cmp	ip, r3
 800028e:	f240 80d3 	bls.w	8000438 <__udivmoddi4+0x230>
 8000292:	443b      	add	r3, r7
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029a:	eba3 030c 	sub.w	r3, r3, ip
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40f3      	lsrs	r3, r6
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xb6>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb0>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa2>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x14c>
 80002c6:	4573      	cmp	r3, lr
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xc8>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 8105 	bhi.w	80004da <__udivmoddi4+0x2d2>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4690      	mov	r8, r2
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e5      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002de:	e9c5 4800 	strd	r4, r8, [r5]
 80002e2:	e7e2      	b.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f000 8090 	beq.w	800040a <__udivmoddi4+0x202>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f040 80a4 	bne.w	800043c <__udivmoddi4+0x234>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	0c03      	lsrs	r3, r0, #16
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	b280      	uxth	r0, r0
 80002fe:	b2bc      	uxth	r4, r7
 8000300:	2101      	movs	r1, #1
 8000302:	fbb2 fcfe 	udiv	ip, r2, lr
 8000306:	fb0e 221c 	mls	r2, lr, ip, r2
 800030a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030e:	fb04 f20c 	mul.w	r2, r4, ip
 8000312:	429a      	cmp	r2, r3
 8000314:	d907      	bls.n	8000326 <__udivmoddi4+0x11e>
 8000316:	18fb      	adds	r3, r7, r3
 8000318:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x11c>
 800031e:	429a      	cmp	r2, r3
 8000320:	f200 80e0 	bhi.w	80004e4 <__udivmoddi4+0x2dc>
 8000324:	46c4      	mov	ip, r8
 8000326:	1a9b      	subs	r3, r3, r2
 8000328:	fbb3 f2fe 	udiv	r2, r3, lr
 800032c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000330:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000334:	fb02 f404 	mul.w	r4, r2, r4
 8000338:	429c      	cmp	r4, r3
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x144>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x142>
 8000344:	429c      	cmp	r4, r3
 8000346:	f200 80ca 	bhi.w	80004de <__udivmoddi4+0x2d6>
 800034a:	4602      	mov	r2, r0
 800034c:	1b1b      	subs	r3, r3, r4
 800034e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x98>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa0e f401 	lsl.w	r4, lr, r1
 8000364:	fa20 f306 	lsr.w	r3, r0, r6
 8000368:	fa2e fe06 	lsr.w	lr, lr, r6
 800036c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	fa1f fc87 	uxth.w	ip, r7
 800037a:	fbbe f0f9 	udiv	r0, lr, r9
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	fb09 ee10 	mls	lr, r9, r0, lr
 8000384:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000388:	fb00 fe0c 	mul.w	lr, r0, ip
 800038c:	45a6      	cmp	lr, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x1a0>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800039a:	f080 809c 	bcs.w	80004d6 <__udivmoddi4+0x2ce>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8099 	bls.w	80004d6 <__udivmoddi4+0x2ce>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 040e 	sub.w	r4, r4, lr
 80003ac:	fa1f fe83 	uxth.w	lr, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c0:	45a4      	cmp	ip, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1ce>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003ca:	f080 8082 	bcs.w	80004d2 <__udivmoddi4+0x2ca>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d97f      	bls.n	80004d2 <__udivmoddi4+0x2ca>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	fba0 ec02 	umull	lr, ip, r0, r2
 80003e2:	4564      	cmp	r4, ip
 80003e4:	4673      	mov	r3, lr
 80003e6:	46e1      	mov	r9, ip
 80003e8:	d362      	bcc.n	80004b0 <__udivmoddi4+0x2a8>
 80003ea:	d05f      	beq.n	80004ac <__udivmoddi4+0x2a4>
 80003ec:	b15d      	cbz	r5, 8000406 <__udivmoddi4+0x1fe>
 80003ee:	ebb8 0203 	subs.w	r2, r8, r3
 80003f2:	eb64 0409 	sbc.w	r4, r4, r9
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	fa22 f301 	lsr.w	r3, r2, r1
 80003fe:	431e      	orrs	r6, r3
 8000400:	40cc      	lsrs	r4, r1
 8000402:	e9c5 6400 	strd	r6, r4, [r5]
 8000406:	2100      	movs	r1, #0
 8000408:	e74f      	b.n	80002aa <__udivmoddi4+0xa2>
 800040a:	fbb1 fcf2 	udiv	ip, r1, r2
 800040e:	0c01      	lsrs	r1, r0, #16
 8000410:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000414:	b280      	uxth	r0, r0
 8000416:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800041a:	463b      	mov	r3, r7
 800041c:	4638      	mov	r0, r7
 800041e:	463c      	mov	r4, r7
 8000420:	46b8      	mov	r8, r7
 8000422:	46be      	mov	lr, r7
 8000424:	2620      	movs	r6, #32
 8000426:	fbb1 f1f7 	udiv	r1, r1, r7
 800042a:	eba2 0208 	sub.w	r2, r2, r8
 800042e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000432:	e766      	b.n	8000302 <__udivmoddi4+0xfa>
 8000434:	4601      	mov	r1, r0
 8000436:	e718      	b.n	800026a <__udivmoddi4+0x62>
 8000438:	4610      	mov	r0, r2
 800043a:	e72c      	b.n	8000296 <__udivmoddi4+0x8e>
 800043c:	f1c6 0220 	rsb	r2, r6, #32
 8000440:	fa2e f302 	lsr.w	r3, lr, r2
 8000444:	40b7      	lsls	r7, r6
 8000446:	40b1      	lsls	r1, r6
 8000448:	fa20 f202 	lsr.w	r2, r0, r2
 800044c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000450:	430a      	orrs	r2, r1
 8000452:	fbb3 f8fe 	udiv	r8, r3, lr
 8000456:	b2bc      	uxth	r4, r7
 8000458:	fb0e 3318 	mls	r3, lr, r8, r3
 800045c:	0c11      	lsrs	r1, r2, #16
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb08 f904 	mul.w	r9, r8, r4
 8000466:	40b0      	lsls	r0, r6
 8000468:	4589      	cmp	r9, r1
 800046a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046e:	b280      	uxth	r0, r0
 8000470:	d93e      	bls.n	80004f0 <__udivmoddi4+0x2e8>
 8000472:	1879      	adds	r1, r7, r1
 8000474:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000478:	d201      	bcs.n	800047e <__udivmoddi4+0x276>
 800047a:	4589      	cmp	r9, r1
 800047c:	d81f      	bhi.n	80004be <__udivmoddi4+0x2b6>
 800047e:	eba1 0109 	sub.w	r1, r1, r9
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fb09 f804 	mul.w	r8, r9, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	b292      	uxth	r2, r2
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	4542      	cmp	r2, r8
 8000496:	d229      	bcs.n	80004ec <__udivmoddi4+0x2e4>
 8000498:	18ba      	adds	r2, r7, r2
 800049a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800049e:	d2c4      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a0:	4542      	cmp	r2, r8
 80004a2:	d2c2      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a4:	f1a9 0102 	sub.w	r1, r9, #2
 80004a8:	443a      	add	r2, r7
 80004aa:	e7be      	b.n	800042a <__udivmoddi4+0x222>
 80004ac:	45f0      	cmp	r8, lr
 80004ae:	d29d      	bcs.n	80003ec <__udivmoddi4+0x1e4>
 80004b0:	ebbe 0302 	subs.w	r3, lr, r2
 80004b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b8:	3801      	subs	r0, #1
 80004ba:	46e1      	mov	r9, ip
 80004bc:	e796      	b.n	80003ec <__udivmoddi4+0x1e4>
 80004be:	eba7 0909 	sub.w	r9, r7, r9
 80004c2:	4449      	add	r1, r9
 80004c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004cc:	fb09 f804 	mul.w	r8, r9, r4
 80004d0:	e7db      	b.n	800048a <__udivmoddi4+0x282>
 80004d2:	4673      	mov	r3, lr
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1ce>
 80004d6:	4650      	mov	r0, sl
 80004d8:	e766      	b.n	80003a8 <__udivmoddi4+0x1a0>
 80004da:	4608      	mov	r0, r1
 80004dc:	e6fd      	b.n	80002da <__udivmoddi4+0xd2>
 80004de:	443b      	add	r3, r7
 80004e0:	3a02      	subs	r2, #2
 80004e2:	e733      	b.n	800034c <__udivmoddi4+0x144>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	443b      	add	r3, r7
 80004ea:	e71c      	b.n	8000326 <__udivmoddi4+0x11e>
 80004ec:	4649      	mov	r1, r9
 80004ee:	e79c      	b.n	800042a <__udivmoddi4+0x222>
 80004f0:	eba1 0109 	sub.w	r1, r1, r9
 80004f4:	46c4      	mov	ip, r8
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fb09 f804 	mul.w	r8, r9, r4
 80004fe:	e7c4      	b.n	800048a <__udivmoddi4+0x282>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000504:	b500      	push	{lr}
 8000506:	b085      	sub	sp, #20

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000508:	2300      	movs	r3, #0
 800050a:	9300      	str	r3, [sp, #0]
 800050c:	9301      	str	r3, [sp, #4]
 800050e:	9302      	str	r3, [sp, #8]
 8000510:	9303      	str	r3, [sp, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000512:	4815      	ldr	r0, [pc, #84]	@ (8000568 <MX_ADC1_Init+0x64>)
 8000514:	4a15      	ldr	r2, [pc, #84]	@ (800056c <MX_ADC1_Init+0x68>)
 8000516:	6002      	str	r2, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000518:	6043      	str	r3, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800051a:	6083      	str	r3, [r0, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800051c:	6103      	str	r3, [r0, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800051e:	2201      	movs	r2, #1
 8000520:	7602      	strb	r2, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000522:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000526:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
 800052a:	62c1      	str	r1, [r0, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 800052c:	f04f 61c0 	mov.w	r1, #100663296	@ 0x6000000
 8000530:	6281      	str	r1, [r0, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000532:	60c3      	str	r3, [r0, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000534:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000536:	f880 2030 	strb.w	r2, [r0, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800053a:	6142      	str	r2, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800053c:	f000 fc98 	bl	8000e70 <HAL_ADC_Init>
 8000540:	b960      	cbnz	r0, 800055c <MX_ADC1_Init+0x58>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000542:	2301      	movs	r3, #1
 8000544:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 1;
 8000546:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8000548:	2304      	movs	r3, #4
 800054a:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800054c:	4669      	mov	r1, sp
 800054e:	4806      	ldr	r0, [pc, #24]	@ (8000568 <MX_ADC1_Init+0x64>)
 8000550:	f000 fdb0 	bl	80010b4 <HAL_ADC_ConfigChannel>
 8000554:	b928      	cbnz	r0, 8000562 <MX_ADC1_Init+0x5e>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000556:	b005      	add	sp, #20
 8000558:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800055c:	f000 f9c2 	bl	80008e4 <Error_Handler>
 8000560:	e7ef      	b.n	8000542 <MX_ADC1_Init+0x3e>
    Error_Handler();
 8000562:	f000 f9bf 	bl	80008e4 <Error_Handler>
}
 8000566:	e7f6      	b.n	8000556 <MX_ADC1_Init+0x52>
 8000568:	20000090 	.word	0x20000090
 800056c:	40012000 	.word	0x40012000

08000570 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000570:	b530      	push	{r4, r5, lr}
 8000572:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000574:	2300      	movs	r3, #0
 8000576:	9303      	str	r3, [sp, #12]
 8000578:	9304      	str	r3, [sp, #16]
 800057a:	9305      	str	r3, [sp, #20]
 800057c:	9306      	str	r3, [sp, #24]
 800057e:	9307      	str	r3, [sp, #28]
  if(adcHandle->Instance==ADC1)
 8000580:	6802      	ldr	r2, [r0, #0]
 8000582:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000586:	f503 3390 	add.w	r3, r3, #73728	@ 0x12000
 800058a:	429a      	cmp	r2, r3
 800058c:	d001      	beq.n	8000592 <HAL_ADC_MspInit+0x22>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800058e:	b009      	add	sp, #36	@ 0x24
 8000590:	bd30      	pop	{r4, r5, pc}
 8000592:	4604      	mov	r4, r0
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000594:	2500      	movs	r5, #0
 8000596:	9501      	str	r5, [sp, #4]
 8000598:	f503 338c 	add.w	r3, r3, #71680	@ 0x11800
 800059c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800059e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80005a2:	645a      	str	r2, [r3, #68]	@ 0x44
 80005a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80005a6:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 80005aa:	9201      	str	r2, [sp, #4]
 80005ac:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ae:	9502      	str	r5, [sp, #8]
 80005b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005b2:	f042 0201 	orr.w	r2, r2, #1
 80005b6:	631a      	str	r2, [r3, #48]	@ 0x30
 80005b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ba:	f003 0301 	and.w	r3, r3, #1
 80005be:	9302      	str	r3, [sp, #8]
 80005c0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80005c2:	2302      	movs	r3, #2
 80005c4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005c6:	2303      	movs	r3, #3
 80005c8:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ca:	a903      	add	r1, sp, #12
 80005cc:	4810      	ldr	r0, [pc, #64]	@ (8000610 <HAL_ADC_MspInit+0xa0>)
 80005ce:	f000 ffdb 	bl	8001588 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream0;
 80005d2:	4810      	ldr	r0, [pc, #64]	@ (8000614 <HAL_ADC_MspInit+0xa4>)
 80005d4:	4b10      	ldr	r3, [pc, #64]	@ (8000618 <HAL_ADC_MspInit+0xa8>)
 80005d6:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80005d8:	6045      	str	r5, [r0, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80005da:	6085      	str	r5, [r0, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80005dc:	60c5      	str	r5, [r0, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80005de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80005e2:	6103      	str	r3, [r0, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80005e4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80005e8:	6143      	str	r3, [r0, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80005ea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005ee:	6183      	str	r3, [r0, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80005f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80005f4:	61c3      	str	r3, [r0, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80005f6:	6205      	str	r5, [r0, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80005f8:	6245      	str	r5, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80005fa:	f000 ff29 	bl	8001450 <HAL_DMA_Init>
 80005fe:	b918      	cbnz	r0, 8000608 <HAL_ADC_MspInit+0x98>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000600:	4b04      	ldr	r3, [pc, #16]	@ (8000614 <HAL_ADC_MspInit+0xa4>)
 8000602:	63a3      	str	r3, [r4, #56]	@ 0x38
 8000604:	639c      	str	r4, [r3, #56]	@ 0x38
}
 8000606:	e7c2      	b.n	800058e <HAL_ADC_MspInit+0x1e>
      Error_Handler();
 8000608:	f000 f96c 	bl	80008e4 <Error_Handler>
 800060c:	e7f8      	b.n	8000600 <HAL_ADC_MspInit+0x90>
 800060e:	bf00      	nop
 8000610:	40020000 	.word	0x40020000
 8000614:	20000030 	.word	0x20000030
 8000618:	40026410 	.word	0x40026410

0800061c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800061c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800061e:	b08b      	sub	sp, #44	@ 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000620:	2400      	movs	r4, #0
 8000622:	9405      	str	r4, [sp, #20]
 8000624:	9406      	str	r4, [sp, #24]
 8000626:	9407      	str	r4, [sp, #28]
 8000628:	9408      	str	r4, [sp, #32]
 800062a:	9409      	str	r4, [sp, #36]	@ 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800062c:	9401      	str	r4, [sp, #4]
 800062e:	4b38      	ldr	r3, [pc, #224]	@ (8000710 <MX_GPIO_Init+0xf4>)
 8000630:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000632:	f042 0204 	orr.w	r2, r2, #4
 8000636:	631a      	str	r2, [r3, #48]	@ 0x30
 8000638:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800063a:	f002 0204 	and.w	r2, r2, #4
 800063e:	9201      	str	r2, [sp, #4]
 8000640:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000642:	9402      	str	r4, [sp, #8]
 8000644:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000646:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800064a:	631a      	str	r2, [r3, #48]	@ 0x30
 800064c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800064e:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8000652:	9202      	str	r2, [sp, #8]
 8000654:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000656:	9403      	str	r4, [sp, #12]
 8000658:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800065a:	f042 0201 	orr.w	r2, r2, #1
 800065e:	631a      	str	r2, [r3, #48]	@ 0x30
 8000660:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000662:	f002 0201 	and.w	r2, r2, #1
 8000666:	9203      	str	r2, [sp, #12]
 8000668:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800066a:	9404      	str	r4, [sp, #16]
 800066c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800066e:	f042 0202 	orr.w	r2, r2, #2
 8000672:	631a      	str	r2, [r3, #48]	@ 0x30
 8000674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000676:	f003 0302 	and.w	r3, r3, #2
 800067a:	9304      	str	r3, [sp, #16]
 800067c:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_PIN_GPIO_Port, LED_PIN_Pin, GPIO_PIN_RESET);
 800067e:	4f25      	ldr	r7, [pc, #148]	@ (8000714 <MX_GPIO_Init+0xf8>)
 8000680:	4622      	mov	r2, r4
 8000682:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000686:	4638      	mov	r0, r7
 8000688:	f001 f862 	bl	8001750 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_PIN_Pin */
  GPIO_InitStruct.Pin = LED_PIN_Pin;
 800068c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000690:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000692:	2601      	movs	r6, #1
 8000694:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000696:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000698:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LED_PIN_GPIO_Port, &GPIO_InitStruct);
 800069a:	a905      	add	r1, sp, #20
 800069c:	4638      	mov	r0, r7
 800069e:	f000 ff73 	bl	8001588 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80006a2:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80006a6:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006a8:	2503      	movs	r5, #3
 80006aa:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ac:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006ae:	a905      	add	r1, sp, #20
 80006b0:	4638      	mov	r0, r7
 80006b2:	f000 ff69 	bl	8001588 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80006b6:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006b8:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ba:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80006bc:	a905      	add	r1, sp, #20
 80006be:	4816      	ldr	r0, [pc, #88]	@ (8000718 <MX_GPIO_Init+0xfc>)
 80006c0:	f000 ff62 	bl	8001588 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY_Pin */
  GPIO_InitStruct.Pin = KEY_Pin;
 80006c4:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006c6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80006ca:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006cc:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 80006ce:	4e13      	ldr	r6, [pc, #76]	@ (800071c <MX_GPIO_Init+0x100>)
 80006d0:	a905      	add	r1, sp, #20
 80006d2:	4630      	mov	r0, r6
 80006d4:	f000 ff58 	bl	8001588 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA4 PA5
                           PA6 PA7 PA8 PA9
                           PA10 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80006d8:	f649 73fc 	movw	r3, #40956	@ 0x9ffc
 80006dc:	9305      	str	r3, [sp, #20]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006de:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e0:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e2:	a905      	add	r1, sp, #20
 80006e4:	4630      	mov	r0, r6
 80006e6:	f000 ff4f 	bl	8001588 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB3 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80006ea:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80006ee:	9305      	str	r3, [sp, #20]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006f0:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f2:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006f4:	a905      	add	r1, sp, #20
 80006f6:	480a      	ldr	r0, [pc, #40]	@ (8000720 <MX_GPIO_Init+0x104>)
 80006f8:	f000 ff46 	bl	8001588 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80006fc:	4622      	mov	r2, r4
 80006fe:	4621      	mov	r1, r4
 8000700:	2006      	movs	r0, #6
 8000702:	f000 fe01 	bl	8001308 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000706:	2006      	movs	r0, #6
 8000708:	f000 fe0e 	bl	8001328 <HAL_NVIC_EnableIRQ>

}
 800070c:	b00b      	add	sp, #44	@ 0x2c
 800070e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000710:	40023800 	.word	0x40023800
 8000714:	40020800 	.word	0x40020800
 8000718:	40021c00 	.word	0x40021c00
 800071c:	40020000 	.word	0x40020000
 8000720:	40020400 	.word	0x40020400

08000724 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_tx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8000724:	b508      	push	{r3, lr}
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000726:	480c      	ldr	r0, [pc, #48]	@ (8000758 <MX_I2S2_Init+0x34>)
 8000728:	4b0c      	ldr	r3, [pc, #48]	@ (800075c <MX_I2S2_Init+0x38>)
 800072a:	6003      	str	r3, [r0, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 800072c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000730:	6043      	str	r3, [r0, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000732:	2300      	movs	r3, #0
 8000734:	6083      	str	r3, [r0, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 8000736:	2203      	movs	r2, #3
 8000738:	60c2      	str	r2, [r0, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800073a:	6103      	str	r3, [r0, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 800073c:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8000740:	6142      	str	r2, [r0, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000742:	6183      	str	r3, [r0, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000744:	61c3      	str	r3, [r0, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000746:	2301      	movs	r3, #1
 8000748:	6203      	str	r3, [r0, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800074a:	f001 f81f 	bl	800178c <HAL_I2S_Init>
 800074e:	b900      	cbnz	r0, 8000752 <MX_I2S2_Init+0x2e>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000750:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000752:	f000 f8c7 	bl	80008e4 <Error_Handler>
}
 8000756:	e7fb      	b.n	8000750 <MX_I2S2_Init+0x2c>
 8000758:	20000138 	.word	0x20000138
 800075c:	40003800 	.word	0x40003800

08000760 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000764:	b08e      	sub	sp, #56	@ 0x38

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000766:	2300      	movs	r3, #0
 8000768:	9309      	str	r3, [sp, #36]	@ 0x24
 800076a:	930a      	str	r3, [sp, #40]	@ 0x28
 800076c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800076e:	930c      	str	r3, [sp, #48]	@ 0x30
 8000770:	930d      	str	r3, [sp, #52]	@ 0x34
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000772:	9303      	str	r3, [sp, #12]
 8000774:	9304      	str	r3, [sp, #16]
 8000776:	9305      	str	r3, [sp, #20]
 8000778:	9306      	str	r3, [sp, #24]
 800077a:	9307      	str	r3, [sp, #28]
 800077c:	9308      	str	r3, [sp, #32]
  if(i2sHandle->Instance==SPI2)
 800077e:	6802      	ldr	r2, [r0, #0]
 8000780:	4b32      	ldr	r3, [pc, #200]	@ (800084c <HAL_I2S_MspInit+0xec>)
 8000782:	429a      	cmp	r2, r3
 8000784:	d002      	beq.n	800078c <HAL_I2S_MspInit+0x2c>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000786:	b00e      	add	sp, #56	@ 0x38
 8000788:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800078c:	4604      	mov	r4, r0
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800078e:	2301      	movs	r3, #1
 8000790:	9303      	str	r3, [sp, #12]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000792:	23c0      	movs	r3, #192	@ 0xc0
 8000794:	9305      	str	r3, [sp, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 16;
 8000796:	2310      	movs	r3, #16
 8000798:	9304      	str	r3, [sp, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800079a:	2302      	movs	r3, #2
 800079c:	9306      	str	r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800079e:	a803      	add	r0, sp, #12
 80007a0:	f001 fe86 	bl	80024b0 <HAL_RCCEx_PeriphCLKConfig>
 80007a4:	2800      	cmp	r0, #0
 80007a6:	d14a      	bne.n	800083e <HAL_I2S_MspInit+0xde>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80007a8:	2500      	movs	r5, #0
 80007aa:	9501      	str	r5, [sp, #4]
 80007ac:	4b28      	ldr	r3, [pc, #160]	@ (8000850 <HAL_I2S_MspInit+0xf0>)
 80007ae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80007b0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80007b4:	641a      	str	r2, [r3, #64]	@ 0x40
 80007b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80007b8:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80007bc:	9201      	str	r2, [sp, #4]
 80007be:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c0:	9502      	str	r5, [sp, #8]
 80007c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80007c4:	f042 0202 	orr.w	r2, r2, #2
 80007c8:	631a      	str	r2, [r3, #48]	@ 0x30
 80007ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007cc:	f003 0302 	and.w	r3, r3, #2
 80007d0:	9302      	str	r3, [sp, #8]
 80007d2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80007d4:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 80007d8:	9309      	str	r3, [sp, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007da:	f04f 0802 	mov.w	r8, #2
 80007de:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e2:	950b      	str	r5, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e4:	950c      	str	r5, [sp, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80007e6:	2305      	movs	r3, #5
 80007e8:	930d      	str	r3, [sp, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ea:	4f1a      	ldr	r7, [pc, #104]	@ (8000854 <HAL_I2S_MspInit+0xf4>)
 80007ec:	a909      	add	r1, sp, #36	@ 0x24
 80007ee:	4638      	mov	r0, r7
 80007f0:	f000 feca 	bl	8001588 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80007f4:	f44f 4680 	mov.w	r6, #16384	@ 0x4000
 80007f8:	9609      	str	r6, [sp, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007fa:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fe:	950b      	str	r5, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000800:	950c      	str	r5, [sp, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000802:	2306      	movs	r3, #6
 8000804:	930d      	str	r3, [sp, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000806:	a909      	add	r1, sp, #36	@ 0x24
 8000808:	4638      	mov	r0, r7
 800080a:	f000 febd 	bl	8001588 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 800080e:	4812      	ldr	r0, [pc, #72]	@ (8000858 <HAL_I2S_MspInit+0xf8>)
 8000810:	4b12      	ldr	r3, [pc, #72]	@ (800085c <HAL_I2S_MspInit+0xfc>)
 8000812:	6003      	str	r3, [r0, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8000814:	6045      	str	r5, [r0, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000816:	2340      	movs	r3, #64	@ 0x40
 8000818:	6083      	str	r3, [r0, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800081a:	60c5      	str	r5, [r0, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800081c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000820:	6103      	str	r3, [r0, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000822:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000826:	6143      	str	r3, [r0, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000828:	6186      	str	r6, [r0, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 800082a:	61c5      	str	r5, [r0, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800082c:	6205      	str	r5, [r0, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800082e:	6245      	str	r5, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000830:	f000 fe0e 	bl	8001450 <HAL_DMA_Init>
 8000834:	b930      	cbnz	r0, 8000844 <HAL_I2S_MspInit+0xe4>
    __HAL_LINKDMA(i2sHandle,hdmatx,hdma_spi2_tx);
 8000836:	4b08      	ldr	r3, [pc, #32]	@ (8000858 <HAL_I2S_MspInit+0xf8>)
 8000838:	63a3      	str	r3, [r4, #56]	@ 0x38
 800083a:	639c      	str	r4, [r3, #56]	@ 0x38
}
 800083c:	e7a3      	b.n	8000786 <HAL_I2S_MspInit+0x26>
      Error_Handler();
 800083e:	f000 f851 	bl	80008e4 <Error_Handler>
 8000842:	e7b1      	b.n	80007a8 <HAL_I2S_MspInit+0x48>
      Error_Handler();
 8000844:	f000 f84e 	bl	80008e4 <Error_Handler>
 8000848:	e7f5      	b.n	8000836 <HAL_I2S_MspInit+0xd6>
 800084a:	bf00      	nop
 800084c:	40003800 	.word	0x40003800
 8000850:	40023800 	.word	0x40023800
 8000854:	40020400 	.word	0x40020400
 8000858:	200000d8 	.word	0x200000d8
 800085c:	40026070 	.word	0x40026070

08000860 <HAL_GPIO_EXTI_Callback>:
  }
}

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
	if (GPIO_Pin == KEY_Pin) {
 8000860:	2801      	cmp	r0, #1
 8000862:	d000      	beq.n	8000866 <HAL_GPIO_EXTI_Callback+0x6>
 8000864:	4770      	bx	lr
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000866:	b508      	push	{r3, lr}
		HAL_GPIO_TogglePin(LED_PIN_GPIO_Port, LED_PIN_Pin);
 8000868:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800086c:	4801      	ldr	r0, [pc, #4]	@ (8000874 <HAL_GPIO_EXTI_Callback+0x14>)
 800086e:	f000 ff75 	bl	800175c <HAL_GPIO_TogglePin>
	}
	return;
}
 8000872:	bd08      	pop	{r3, pc}
 8000874:	40020800 	.word	0x40020800

08000878 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000878:	b508      	push	{r3, lr}
	static uint16_t i = 0;
	i++;
 800087a:	4a08      	ldr	r2, [pc, #32]	@ (800089c <HAL_ADC_ConvCpltCallback+0x24>)
 800087c:	8813      	ldrh	r3, [r2, #0]
 800087e:	3301      	adds	r3, #1
 8000880:	b29b      	uxth	r3, r3
 8000882:	8013      	strh	r3, [r2, #0]
	if (i==10){
 8000884:	2b0a      	cmp	r3, #10
 8000886:	d000      	beq.n	800088a <HAL_ADC_ConvCpltCallback+0x12>
		HAL_GPIO_TogglePin(LED_PIN_GPIO_Port, LED_PIN_Pin);
		i = 0;
	}
}
 8000888:	bd08      	pop	{r3, pc}
		HAL_GPIO_TogglePin(LED_PIN_GPIO_Port, LED_PIN_Pin);
 800088a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800088e:	4804      	ldr	r0, [pc, #16]	@ (80008a0 <HAL_ADC_ConvCpltCallback+0x28>)
 8000890:	f000 ff64 	bl	800175c <HAL_GPIO_TogglePin>
		i = 0;
 8000894:	4b01      	ldr	r3, [pc, #4]	@ (800089c <HAL_ADC_ConvCpltCallback+0x24>)
 8000896:	2200      	movs	r2, #0
 8000898:	801a      	strh	r2, [r3, #0]
}
 800089a:	e7f5      	b.n	8000888 <HAL_ADC_ConvCpltCallback+0x10>
 800089c:	20000180 	.word	0x20000180
 80008a0:	40020800 	.word	0x40020800

080008a4 <HAL_I2S_TxHalfCpltCallback>:

void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
	curr_in_buffer = &(IN_BUFFER[BUFFER_SIZE/2]);
 80008a4:	4b03      	ldr	r3, [pc, #12]	@ (80008b4 <HAL_I2S_TxHalfCpltCallback+0x10>)
 80008a6:	4a04      	ldr	r2, [pc, #16]	@ (80008b8 <HAL_I2S_TxHalfCpltCallback+0x14>)
 80008a8:	601a      	str	r2, [r3, #0]
	curr_out_buffer = &(OUT_BUFFER[0]);
 80008aa:	4b04      	ldr	r3, [pc, #16]	@ (80008bc <HAL_I2S_TxHalfCpltCallback+0x18>)
 80008ac:	4a04      	ldr	r2, [pc, #16]	@ (80008c0 <HAL_I2S_TxHalfCpltCallback+0x1c>)
 80008ae:	601a      	str	r2, [r3, #0]
}
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop
 80008b4:	20000004 	.word	0x20000004
 80008b8:	20003184 	.word	0x20003184
 80008bc:	20000000 	.word	0x20000000
 80008c0:	20000184 	.word	0x20000184

080008c4 <HAL_I2S_TxCpltCallback>:

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
	curr_in_buffer = &(IN_BUFFER[0]);
 80008c4:	4b03      	ldr	r3, [pc, #12]	@ (80008d4 <HAL_I2S_TxCpltCallback+0x10>)
 80008c6:	4a04      	ldr	r2, [pc, #16]	@ (80008d8 <HAL_I2S_TxCpltCallback+0x14>)
 80008c8:	601a      	str	r2, [r3, #0]
	curr_out_buffer = &(OUT_BUFFER[BUFFER_SIZE/2]);
 80008ca:	4b04      	ldr	r3, [pc, #16]	@ (80008dc <HAL_I2S_TxCpltCallback+0x18>)
 80008cc:	4a04      	ldr	r2, [pc, #16]	@ (80008e0 <HAL_I2S_TxCpltCallback+0x1c>)
 80008ce:	601a      	str	r2, [r3, #0]
}
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop
 80008d4:	20000004 	.word	0x20000004
 80008d8:	20002184 	.word	0x20002184
 80008dc:	20000000 	.word	0x20000000
 80008e0:	20001184 	.word	0x20001184

080008e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008e4:	b508      	push	{r3, lr}
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008e6:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
		HAL_GPIO_WritePin(LED_PIN_GPIO_Port, LED_PIN_Pin, GPIO_PIN_SET);
 80008e8:	4c53      	ldr	r4, [pc, #332]	@ (8000a38 <Error_Handler+0x154>)
 80008ea:	2201      	movs	r2, #1
 80008ec:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008f0:	4620      	mov	r0, r4
 80008f2:	f000 ff2d 	bl	8001750 <HAL_GPIO_WritePin>
		HAL_Delay(125);
 80008f6:	207d      	movs	r0, #125	@ 0x7d
 80008f8:	f000 fa0c 	bl	8000d14 <HAL_Delay>
		HAL_GPIO_WritePin(LED_PIN_GPIO_Port, LED_PIN_Pin, GPIO_PIN_RESET);
 80008fc:	2200      	movs	r2, #0
 80008fe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000902:	4620      	mov	r0, r4
 8000904:	f000 ff24 	bl	8001750 <HAL_GPIO_WritePin>
		HAL_Delay(125);
 8000908:	207d      	movs	r0, #125	@ 0x7d
 800090a:	f000 fa03 	bl	8000d14 <HAL_Delay>

		HAL_GPIO_WritePin(LED_PIN_GPIO_Port, LED_PIN_Pin, GPIO_PIN_SET);
 800090e:	2201      	movs	r2, #1
 8000910:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000914:	4620      	mov	r0, r4
 8000916:	f000 ff1b 	bl	8001750 <HAL_GPIO_WritePin>
		HAL_Delay(125);
 800091a:	207d      	movs	r0, #125	@ 0x7d
 800091c:	f000 f9fa 	bl	8000d14 <HAL_Delay>
		HAL_GPIO_WritePin(LED_PIN_GPIO_Port, LED_PIN_Pin, GPIO_PIN_RESET);
 8000920:	2200      	movs	r2, #0
 8000922:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000926:	4620      	mov	r0, r4
 8000928:	f000 ff12 	bl	8001750 <HAL_GPIO_WritePin>
		HAL_Delay(125);
 800092c:	207d      	movs	r0, #125	@ 0x7d
 800092e:	f000 f9f1 	bl	8000d14 <HAL_Delay>

		HAL_GPIO_WritePin(LED_PIN_GPIO_Port, LED_PIN_Pin, GPIO_PIN_SET);
 8000932:	2201      	movs	r2, #1
 8000934:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000938:	4620      	mov	r0, r4
 800093a:	f000 ff09 	bl	8001750 <HAL_GPIO_WritePin>
		HAL_Delay(125);
 800093e:	207d      	movs	r0, #125	@ 0x7d
 8000940:	f000 f9e8 	bl	8000d14 <HAL_Delay>
		HAL_GPIO_WritePin(LED_PIN_GPIO_Port, LED_PIN_Pin, GPIO_PIN_RESET);
 8000944:	2200      	movs	r2, #0
 8000946:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800094a:	4620      	mov	r0, r4
 800094c:	f000 ff00 	bl	8001750 <HAL_GPIO_WritePin>
		HAL_Delay(125);
 8000950:	207d      	movs	r0, #125	@ 0x7d
 8000952:	f000 f9df 	bl	8000d14 <HAL_Delay>

		HAL_GPIO_WritePin(LED_PIN_GPIO_Port, LED_PIN_Pin, GPIO_PIN_SET);
 8000956:	2201      	movs	r2, #1
 8000958:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800095c:	4620      	mov	r0, r4
 800095e:	f000 fef7 	bl	8001750 <HAL_GPIO_WritePin>
		HAL_Delay(250);
 8000962:	20fa      	movs	r0, #250	@ 0xfa
 8000964:	f000 f9d6 	bl	8000d14 <HAL_Delay>
		HAL_GPIO_WritePin(LED_PIN_GPIO_Port, LED_PIN_Pin, GPIO_PIN_RESET);
 8000968:	2200      	movs	r2, #0
 800096a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800096e:	4620      	mov	r0, r4
 8000970:	f000 feee 	bl	8001750 <HAL_GPIO_WritePin>
		HAL_Delay(250);
 8000974:	20fa      	movs	r0, #250	@ 0xfa
 8000976:	f000 f9cd 	bl	8000d14 <HAL_Delay>

		HAL_GPIO_WritePin(LED_PIN_GPIO_Port, LED_PIN_Pin, GPIO_PIN_SET);
 800097a:	2201      	movs	r2, #1
 800097c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000980:	4620      	mov	r0, r4
 8000982:	f000 fee5 	bl	8001750 <HAL_GPIO_WritePin>
		HAL_Delay(250);
 8000986:	20fa      	movs	r0, #250	@ 0xfa
 8000988:	f000 f9c4 	bl	8000d14 <HAL_Delay>
		HAL_GPIO_WritePin(LED_PIN_GPIO_Port, LED_PIN_Pin, GPIO_PIN_RESET);
 800098c:	2200      	movs	r2, #0
 800098e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000992:	4620      	mov	r0, r4
 8000994:	f000 fedc 	bl	8001750 <HAL_GPIO_WritePin>
		HAL_Delay(250);
 8000998:	20fa      	movs	r0, #250	@ 0xfa
 800099a:	f000 f9bb 	bl	8000d14 <HAL_Delay>

		HAL_GPIO_WritePin(LED_PIN_GPIO_Port, LED_PIN_Pin, GPIO_PIN_SET);
 800099e:	2201      	movs	r2, #1
 80009a0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009a4:	4620      	mov	r0, r4
 80009a6:	f000 fed3 	bl	8001750 <HAL_GPIO_WritePin>
		HAL_Delay(250);
 80009aa:	20fa      	movs	r0, #250	@ 0xfa
 80009ac:	f000 f9b2 	bl	8000d14 <HAL_Delay>
		HAL_GPIO_WritePin(LED_PIN_GPIO_Port, LED_PIN_Pin, GPIO_PIN_RESET);
 80009b0:	2200      	movs	r2, #0
 80009b2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009b6:	4620      	mov	r0, r4
 80009b8:	f000 feca 	bl	8001750 <HAL_GPIO_WritePin>
		HAL_Delay(250);
 80009bc:	20fa      	movs	r0, #250	@ 0xfa
 80009be:	f000 f9a9 	bl	8000d14 <HAL_Delay>

		HAL_GPIO_WritePin(LED_PIN_GPIO_Port, LED_PIN_Pin, GPIO_PIN_SET);
 80009c2:	2201      	movs	r2, #1
 80009c4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009c8:	4620      	mov	r0, r4
 80009ca:	f000 fec1 	bl	8001750 <HAL_GPIO_WritePin>
		HAL_Delay(125);
 80009ce:	207d      	movs	r0, #125	@ 0x7d
 80009d0:	f000 f9a0 	bl	8000d14 <HAL_Delay>
		HAL_GPIO_WritePin(LED_PIN_GPIO_Port, LED_PIN_Pin, GPIO_PIN_RESET);
 80009d4:	2200      	movs	r2, #0
 80009d6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009da:	4620      	mov	r0, r4
 80009dc:	f000 feb8 	bl	8001750 <HAL_GPIO_WritePin>
		HAL_Delay(125);
 80009e0:	207d      	movs	r0, #125	@ 0x7d
 80009e2:	f000 f997 	bl	8000d14 <HAL_Delay>

		HAL_GPIO_WritePin(LED_PIN_GPIO_Port, LED_PIN_Pin, GPIO_PIN_SET);
 80009e6:	2201      	movs	r2, #1
 80009e8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009ec:	4620      	mov	r0, r4
 80009ee:	f000 feaf 	bl	8001750 <HAL_GPIO_WritePin>
		HAL_Delay(125);
 80009f2:	207d      	movs	r0, #125	@ 0x7d
 80009f4:	f000 f98e 	bl	8000d14 <HAL_Delay>
		HAL_GPIO_WritePin(LED_PIN_GPIO_Port, LED_PIN_Pin, GPIO_PIN_RESET);
 80009f8:	2200      	movs	r2, #0
 80009fa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009fe:	4620      	mov	r0, r4
 8000a00:	f000 fea6 	bl	8001750 <HAL_GPIO_WritePin>
		HAL_Delay(125);
 8000a04:	207d      	movs	r0, #125	@ 0x7d
 8000a06:	f000 f985 	bl	8000d14 <HAL_Delay>

		HAL_GPIO_WritePin(LED_PIN_GPIO_Port, LED_PIN_Pin, GPIO_PIN_SET);
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a10:	4620      	mov	r0, r4
 8000a12:	f000 fe9d 	bl	8001750 <HAL_GPIO_WritePin>
		HAL_Delay(125);
 8000a16:	207d      	movs	r0, #125	@ 0x7d
 8000a18:	f000 f97c 	bl	8000d14 <HAL_Delay>
		HAL_GPIO_WritePin(LED_PIN_GPIO_Port, LED_PIN_Pin, GPIO_PIN_RESET);
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a22:	4620      	mov	r0, r4
 8000a24:	f000 fe94 	bl	8001750 <HAL_GPIO_WritePin>
		HAL_Delay(125);
 8000a28:	207d      	movs	r0, #125	@ 0x7d
 8000a2a:	f000 f973 	bl	8000d14 <HAL_Delay>

		HAL_Delay(1000);
 8000a2e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a32:	f000 f96f 	bl	8000d14 <HAL_Delay>
	while (1) {
 8000a36:	e757      	b.n	80008e8 <Error_Handler+0x4>
 8000a38:	40020800 	.word	0x40020800

08000a3c <SystemClock_Config>:
{
 8000a3c:	b500      	push	{lr}
 8000a3e:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a40:	2230      	movs	r2, #48	@ 0x30
 8000a42:	2100      	movs	r1, #0
 8000a44:	a808      	add	r0, sp, #32
 8000a46:	f001 ffd3 	bl	80029f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	9303      	str	r3, [sp, #12]
 8000a4e:	9304      	str	r3, [sp, #16]
 8000a50:	9305      	str	r3, [sp, #20]
 8000a52:	9306      	str	r3, [sp, #24]
 8000a54:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PLL_PLLM_CONFIG(8);
 8000a56:	4a1f      	ldr	r2, [pc, #124]	@ (8000ad4 <SystemClock_Config+0x98>)
 8000a58:	6851      	ldr	r1, [r2, #4]
 8000a5a:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8000a5e:	f041 0108 	orr.w	r1, r1, #8
 8000a62:	6051      	str	r1, [r2, #4]
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8000a64:	6851      	ldr	r1, [r2, #4]
 8000a66:	f421 0180 	bic.w	r1, r1, #4194304	@ 0x400000
 8000a6a:	6051      	str	r1, [r2, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a6c:	9301      	str	r3, [sp, #4]
 8000a6e:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8000a70:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8000a74:	6411      	str	r1, [r2, #64]	@ 0x40
 8000a76:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8000a78:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8000a7c:	9201      	str	r2, [sp, #4]
 8000a7e:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a80:	9302      	str	r3, [sp, #8]
 8000a82:	4a15      	ldr	r2, [pc, #84]	@ (8000ad8 <SystemClock_Config+0x9c>)
 8000a84:	6811      	ldr	r1, [r2, #0]
 8000a86:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 8000a8a:	6011      	str	r1, [r2, #0]
 8000a8c:	6812      	ldr	r2, [r2, #0]
 8000a8e:	f402 4240 	and.w	r2, r2, #49152	@ 0xc000
 8000a92:	9202      	str	r2, [sp, #8]
 8000a94:	9a02      	ldr	r2, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a96:	2202      	movs	r2, #2
 8000a98:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	920b      	str	r2, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a9e:	2210      	movs	r2, #16
 8000aa0:	920c      	str	r2, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000aa2:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000aa4:	930f      	str	r3, [sp, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aa6:	a808      	add	r0, sp, #32
 8000aa8:	f001 fa02 	bl	8001eb0 <HAL_RCC_OscConfig>
 8000aac:	b968      	cbnz	r0, 8000aca <SystemClock_Config+0x8e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aae:	230f      	movs	r3, #15
 8000ab0:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ab6:	9105      	str	r1, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ab8:	9106      	str	r1, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aba:	9107      	str	r1, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000abc:	a803      	add	r0, sp, #12
 8000abe:	f001 fc47 	bl	8002350 <HAL_RCC_ClockConfig>
 8000ac2:	b920      	cbnz	r0, 8000ace <SystemClock_Config+0x92>
}
 8000ac4:	b015      	add	sp, #84	@ 0x54
 8000ac6:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000aca:	f7ff ff0b 	bl	80008e4 <Error_Handler>
    Error_Handler();
 8000ace:	f7ff ff09 	bl	80008e4 <Error_Handler>
 8000ad2:	bf00      	nop
 8000ad4:	40023800 	.word	0x40023800
 8000ad8:	40007000 	.word	0x40007000

08000adc <main>:
{
 8000adc:	b508      	push	{r3, lr}
  HAL_Init();
 8000ade:	f000 f8f9 	bl	8000cd4 <HAL_Init>
  SystemClock_Config();
 8000ae2:	f7ff ffab 	bl	8000a3c <SystemClock_Config>
  MX_GPIO_Init();
 8000ae6:	f7ff fd99 	bl	800061c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000aea:	f7ff fd0b 	bl	8000504 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000aee:	f000 f855 	bl	8000b9c <MX_TIM2_Init>
  MX_I2S2_Init();
 8000af2:	f7ff fe17 	bl	8000724 <MX_I2S2_Init>
  HAL_TIM_Base_Start(&htim2);
 8000af6:	4809      	ldr	r0, [pc, #36]	@ (8000b1c <main+0x40>)
 8000af8:	f001 fdfc 	bl	80026f4 <HAL_TIM_Base_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)curr_in_buffer, BUFFER_SIZE/2);
 8000afc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000b00:	4b07      	ldr	r3, [pc, #28]	@ (8000b20 <main+0x44>)
 8000b02:	6819      	ldr	r1, [r3, #0]
 8000b04:	4807      	ldr	r0, [pc, #28]	@ (8000b24 <main+0x48>)
 8000b06:	f000 f9df 	bl	8000ec8 <HAL_ADC_Start_DMA>
  HAL_I2S_Transmit_DMA(&hi2s2, (uint16_t*)curr_out_buffer, BUFFER_SIZE);
 8000b0a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000b0e:	4b06      	ldr	r3, [pc, #24]	@ (8000b28 <main+0x4c>)
 8000b10:	6819      	ldr	r1, [r3, #0]
 8000b12:	4806      	ldr	r0, [pc, #24]	@ (8000b2c <main+0x50>)
 8000b14:	f000 ff08 	bl	8001928 <HAL_I2S_Transmit_DMA>
	while (1) {
 8000b18:	e7fe      	b.n	8000b18 <main+0x3c>
 8000b1a:	bf00      	nop
 8000b1c:	20004184 	.word	0x20004184
 8000b20:	20000004 	.word	0x20000004
 8000b24:	20000090 	.word	0x20000090
 8000b28:	20000000 	.word	0x20000000
 8000b2c:	20000138 	.word	0x20000138

08000b30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b30:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b32:	2100      	movs	r1, #0
 8000b34:	9100      	str	r1, [sp, #0]
 8000b36:	4b0b      	ldr	r3, [pc, #44]	@ (8000b64 <HAL_MspInit+0x34>)
 8000b38:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000b3a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000b3e:	645a      	str	r2, [r3, #68]	@ 0x44
 8000b40:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000b42:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8000b46:	9200      	str	r2, [sp, #0]
 8000b48:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b4a:	9101      	str	r1, [sp, #4]
 8000b4c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000b4e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000b52:	641a      	str	r2, [r3, #64]	@ 0x40
 8000b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b5a:	9301      	str	r3, [sp, #4]
 8000b5c:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b5e:	b002      	add	sp, #8
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	40023800 	.word	0x40023800

08000b68 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000b68:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY_Pin);
 8000b6a:	2001      	movs	r0, #1
 8000b6c:	f000 fe00 	bl	8001770 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000b70:	bd08      	pop	{r3, pc}

08000b72 <DMA1_Stream4_IRQHandler>:

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8000b72:	4770      	bx	lr

08000b74 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000b74:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */
	HAL_GPIO_TogglePin(LED_PIN_GPIO_Port, LED_PIN_Pin);
 8000b76:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b7a:	4802      	ldr	r0, [pc, #8]	@ (8000b84 <DMA2_Stream0_IRQHandler+0x10>)
 8000b7c:	f000 fdee 	bl	800175c <HAL_GPIO_TogglePin>
  /* USER CODE END DMA2_Stream0_IRQn 0 */
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000b80:	bd08      	pop	{r3, pc}
 8000b82:	bf00      	nop
 8000b84:	40020800 	.word	0x40020800

08000b88 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b88:	4a03      	ldr	r2, [pc, #12]	@ (8000b98 <SystemInit+0x10>)
 8000b8a:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8000b8e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b92:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b96:	4770      	bx	lr
 8000b98:	e000ed00 	.word	0xe000ed00

08000b9c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000b9c:	b500      	push	{lr}
 8000b9e:	b087      	sub	sp, #28

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	9302      	str	r3, [sp, #8]
 8000ba4:	9303      	str	r3, [sp, #12]
 8000ba6:	9304      	str	r3, [sp, #16]
 8000ba8:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000baa:	9300      	str	r3, [sp, #0]
 8000bac:	9301      	str	r3, [sp, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bae:	4815      	ldr	r0, [pc, #84]	@ (8000c04 <MX_TIM2_Init+0x68>)
 8000bb0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000bb4:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 0;
 8000bb6:	6043      	str	r3, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bb8:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 332;
 8000bba:	f44f 72a6 	mov.w	r2, #332	@ 0x14c
 8000bbe:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bc0:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bc2:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000bc4:	f001 fe1e 	bl	8002804 <HAL_TIM_Base_Init>
 8000bc8:	b998      	cbnz	r0, 8000bf2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bce:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000bd0:	a902      	add	r1, sp, #8
 8000bd2:	480c      	ldr	r0, [pc, #48]	@ (8000c04 <MX_TIM2_Init+0x68>)
 8000bd4:	f001 fe4f 	bl	8002876 <HAL_TIM_ConfigClockSource>
 8000bd8:	b970      	cbnz	r0, 8000bf8 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000bda:	2320      	movs	r3, #32
 8000bdc:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bde:	2300      	movs	r3, #0
 8000be0:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000be2:	4669      	mov	r1, sp
 8000be4:	4807      	ldr	r0, [pc, #28]	@ (8000c04 <MX_TIM2_Init+0x68>)
 8000be6:	f001 fec5 	bl	8002974 <HAL_TIMEx_MasterConfigSynchronization>
 8000bea:	b940      	cbnz	r0, 8000bfe <MX_TIM2_Init+0x62>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000bec:	b007      	add	sp, #28
 8000bee:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000bf2:	f7ff fe77 	bl	80008e4 <Error_Handler>
 8000bf6:	e7e8      	b.n	8000bca <MX_TIM2_Init+0x2e>
    Error_Handler();
 8000bf8:	f7ff fe74 	bl	80008e4 <Error_Handler>
 8000bfc:	e7ed      	b.n	8000bda <MX_TIM2_Init+0x3e>
    Error_Handler();
 8000bfe:	f7ff fe71 	bl	80008e4 <Error_Handler>
}
 8000c02:	e7f3      	b.n	8000bec <MX_TIM2_Init+0x50>
 8000c04:	20004184 	.word	0x20004184

08000c08 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM2)
 8000c08:	6803      	ldr	r3, [r0, #0]
 8000c0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c0e:	d000      	beq.n	8000c12 <HAL_TIM_Base_MspInit+0xa>
 8000c10:	4770      	bx	lr
{
 8000c12:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c14:	2300      	movs	r3, #0
 8000c16:	9301      	str	r3, [sp, #4]
 8000c18:	4b05      	ldr	r3, [pc, #20]	@ (8000c30 <HAL_TIM_Base_MspInit+0x28>)
 8000c1a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000c1c:	f042 0201 	orr.w	r2, r2, #1
 8000c20:	641a      	str	r2, [r3, #64]	@ 0x40
 8000c22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c24:	f003 0301 	and.w	r3, r3, #1
 8000c28:	9301      	str	r3, [sp, #4]
 8000c2a:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000c2c:	b002      	add	sp, #8
 8000c2e:	4770      	bx	lr
 8000c30:	40023800 	.word	0x40023800

08000c34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c34:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c6c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c38:	f7ff ffa6 	bl	8000b88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c3c:	480c      	ldr	r0, [pc, #48]	@ (8000c70 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c3e:	490d      	ldr	r1, [pc, #52]	@ (8000c74 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c40:	4a0d      	ldr	r2, [pc, #52]	@ (8000c78 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c44:	e002      	b.n	8000c4c <LoopCopyDataInit>

08000c46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c4a:	3304      	adds	r3, #4

08000c4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c50:	d3f9      	bcc.n	8000c46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c52:	4a0a      	ldr	r2, [pc, #40]	@ (8000c7c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c54:	4c0a      	ldr	r4, [pc, #40]	@ (8000c80 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c58:	e001      	b.n	8000c5e <LoopFillZerobss>

08000c5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c5c:	3204      	adds	r2, #4

08000c5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c60:	d3fb      	bcc.n	8000c5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c62:	f001 fecd 	bl	8002a00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c66:	f7ff ff39 	bl	8000adc <main>
  bx  lr    
 8000c6a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c6c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c74:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000c78:	08002a88 	.word	0x08002a88
  ldr r2, =_sbss
 8000c7c:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000c80:	200041d0 	.word	0x200041d0

08000c84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c84:	e7fe      	b.n	8000c84 <ADC_IRQHandler>
	...

08000c88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c88:	b510      	push	{r4, lr}
 8000c8a:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c8c:	4b0e      	ldr	r3, [pc, #56]	@ (8000cc8 <HAL_InitTick+0x40>)
 8000c8e:	781a      	ldrb	r2, [r3, #0]
 8000c90:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c94:	fbb3 f3f2 	udiv	r3, r3, r2
 8000c98:	4a0c      	ldr	r2, [pc, #48]	@ (8000ccc <HAL_InitTick+0x44>)
 8000c9a:	6810      	ldr	r0, [r2, #0]
 8000c9c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000ca0:	f000 fb46 	bl	8001330 <HAL_SYSTICK_Config>
 8000ca4:	b968      	cbnz	r0, 8000cc2 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ca6:	2c0f      	cmp	r4, #15
 8000ca8:	d901      	bls.n	8000cae <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000caa:	2001      	movs	r0, #1
 8000cac:	e00a      	b.n	8000cc4 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cae:	2200      	movs	r2, #0
 8000cb0:	4621      	mov	r1, r4
 8000cb2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000cb6:	f000 fb27 	bl	8001308 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cba:	4b05      	ldr	r3, [pc, #20]	@ (8000cd0 <HAL_InitTick+0x48>)
 8000cbc:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000cbe:	2000      	movs	r0, #0
 8000cc0:	e000      	b.n	8000cc4 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000cc2:	2001      	movs	r0, #1
}
 8000cc4:	bd10      	pop	{r4, pc}
 8000cc6:	bf00      	nop
 8000cc8:	2000000c 	.word	0x2000000c
 8000ccc:	20000008 	.word	0x20000008
 8000cd0:	20000010 	.word	0x20000010

08000cd4 <HAL_Init>:
{
 8000cd4:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cd6:	4b0b      	ldr	r3, [pc, #44]	@ (8000d04 <HAL_Init+0x30>)
 8000cd8:	681a      	ldr	r2, [r3, #0]
 8000cda:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000cde:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000ce6:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ce8:	681a      	ldr	r2, [r3, #0]
 8000cea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000cee:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cf0:	2003      	movs	r0, #3
 8000cf2:	f000 faf7 	bl	80012e4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cf6:	200f      	movs	r0, #15
 8000cf8:	f7ff ffc6 	bl	8000c88 <HAL_InitTick>
  HAL_MspInit();
 8000cfc:	f7ff ff18 	bl	8000b30 <HAL_MspInit>
}
 8000d00:	2000      	movs	r0, #0
 8000d02:	bd08      	pop	{r3, pc}
 8000d04:	40023c00 	.word	0x40023c00

08000d08 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000d08:	4b01      	ldr	r3, [pc, #4]	@ (8000d10 <HAL_GetTick+0x8>)
 8000d0a:	6818      	ldr	r0, [r3, #0]
}
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	200041cc 	.word	0x200041cc

08000d14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d14:	b538      	push	{r3, r4, r5, lr}
 8000d16:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000d18:	f7ff fff6 	bl	8000d08 <HAL_GetTick>
 8000d1c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d1e:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 8000d22:	d002      	beq.n	8000d2a <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d24:	4b04      	ldr	r3, [pc, #16]	@ (8000d38 <HAL_Delay+0x24>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d2a:	f7ff ffed 	bl	8000d08 <HAL_GetTick>
 8000d2e:	1b40      	subs	r0, r0, r5
 8000d30:	42a0      	cmp	r0, r4
 8000d32:	d3fa      	bcc.n	8000d2a <HAL_Delay+0x16>
  {
  }
}
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop
 8000d38:	2000000c 	.word	0x2000000c

08000d3c <ADC_Init>:
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000d3c:	4b4a      	ldr	r3, [pc, #296]	@ (8000e68 <ADC_Init+0x12c>)
 8000d3e:	685a      	ldr	r2, [r3, #4]
 8000d40:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8000d44:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000d46:	685a      	ldr	r2, [r3, #4]
 8000d48:	6841      	ldr	r1, [r0, #4]
 8000d4a:	430a      	orrs	r2, r1
 8000d4c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000d4e:	6802      	ldr	r2, [r0, #0]
 8000d50:	6853      	ldr	r3, [r2, #4]
 8000d52:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000d56:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000d58:	6802      	ldr	r2, [r0, #0]
 8000d5a:	6853      	ldr	r3, [r2, #4]
 8000d5c:	6901      	ldr	r1, [r0, #16]
 8000d5e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8000d62:	6053      	str	r3, [r2, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000d64:	6802      	ldr	r2, [r0, #0]
 8000d66:	6853      	ldr	r3, [r2, #4]
 8000d68:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 8000d6c:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000d6e:	6802      	ldr	r2, [r0, #0]
 8000d70:	6853      	ldr	r3, [r2, #4]
 8000d72:	6881      	ldr	r1, [r0, #8]
 8000d74:	430b      	orrs	r3, r1
 8000d76:	6053      	str	r3, [r2, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000d78:	6802      	ldr	r2, [r0, #0]
 8000d7a:	6893      	ldr	r3, [r2, #8]
 8000d7c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000d80:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000d82:	6802      	ldr	r2, [r0, #0]
 8000d84:	6893      	ldr	r3, [r2, #8]
 8000d86:	68c1      	ldr	r1, [r0, #12]
 8000d88:	430b      	orrs	r3, r1
 8000d8a:	6093      	str	r3, [r2, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000d8c:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8000d8e:	4b37      	ldr	r3, [pc, #220]	@ (8000e6c <ADC_Init+0x130>)
 8000d90:	429a      	cmp	r2, r3
 8000d92:	d057      	beq.n	8000e44 <ADC_Init+0x108>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000d94:	6802      	ldr	r2, [r0, #0]
 8000d96:	6893      	ldr	r3, [r2, #8]
 8000d98:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8000d9c:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000d9e:	6802      	ldr	r2, [r0, #0]
 8000da0:	6893      	ldr	r3, [r2, #8]
 8000da2:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8000da4:	430b      	orrs	r3, r1
 8000da6:	6093      	str	r3, [r2, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000da8:	6802      	ldr	r2, [r0, #0]
 8000daa:	6893      	ldr	r3, [r2, #8]
 8000dac:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8000db0:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000db2:	6802      	ldr	r2, [r0, #0]
 8000db4:	6893      	ldr	r3, [r2, #8]
 8000db6:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8000db8:	430b      	orrs	r3, r1
 8000dba:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000dbc:	6802      	ldr	r2, [r0, #0]
 8000dbe:	6893      	ldr	r3, [r2, #8]
 8000dc0:	f023 0302 	bic.w	r3, r3, #2
 8000dc4:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000dc6:	6802      	ldr	r2, [r0, #0]
 8000dc8:	6893      	ldr	r3, [r2, #8]
 8000dca:	7e01      	ldrb	r1, [r0, #24]
 8000dcc:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8000dd0:	6093      	str	r3, [r2, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8000dd2:	f890 3020 	ldrb.w	r3, [r0, #32]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d03f      	beq.n	8000e5a <ADC_Init+0x11e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000dda:	6802      	ldr	r2, [r0, #0]
 8000ddc:	6853      	ldr	r3, [r2, #4]
 8000dde:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000de2:	6053      	str	r3, [r2, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000de4:	6802      	ldr	r2, [r0, #0]
 8000de6:	6853      	ldr	r3, [r2, #4]
 8000de8:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8000dec:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000dee:	6801      	ldr	r1, [r0, #0]
 8000df0:	684b      	ldr	r3, [r1, #4]
 8000df2:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 8000df4:	3a01      	subs	r2, #1
 8000df6:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 8000dfa:	604b      	str	r3, [r1, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000dfc:	6802      	ldr	r2, [r0, #0]
 8000dfe:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8000e00:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8000e04:	62d3      	str	r3, [r2, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000e06:	6801      	ldr	r1, [r0, #0]
 8000e08:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 8000e0a:	69c2      	ldr	r2, [r0, #28]
 8000e0c:	3a01      	subs	r2, #1
 8000e0e:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8000e12:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000e14:	6802      	ldr	r2, [r0, #0]
 8000e16:	6893      	ldr	r3, [r2, #8]
 8000e18:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8000e1c:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000e1e:	6802      	ldr	r2, [r0, #0]
 8000e20:	6893      	ldr	r3, [r2, #8]
 8000e22:	f890 1030 	ldrb.w	r1, [r0, #48]	@ 0x30
 8000e26:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 8000e2a:	6093      	str	r3, [r2, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000e2c:	6802      	ldr	r2, [r0, #0]
 8000e2e:	6893      	ldr	r3, [r2, #8]
 8000e30:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000e34:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000e36:	6802      	ldr	r2, [r0, #0]
 8000e38:	6893      	ldr	r3, [r2, #8]
 8000e3a:	6941      	ldr	r1, [r0, #20]
 8000e3c:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8000e40:	6093      	str	r3, [r2, #8]
}
 8000e42:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000e44:	6802      	ldr	r2, [r0, #0]
 8000e46:	6893      	ldr	r3, [r2, #8]
 8000e48:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8000e4c:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000e4e:	6802      	ldr	r2, [r0, #0]
 8000e50:	6893      	ldr	r3, [r2, #8]
 8000e52:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8000e56:	6093      	str	r3, [r2, #8]
 8000e58:	e7b0      	b.n	8000dbc <ADC_Init+0x80>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000e5a:	6802      	ldr	r2, [r0, #0]
 8000e5c:	6853      	ldr	r3, [r2, #4]
 8000e5e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000e62:	6053      	str	r3, [r2, #4]
 8000e64:	e7ca      	b.n	8000dfc <ADC_Init+0xc0>
 8000e66:	bf00      	nop
 8000e68:	40012300 	.word	0x40012300
 8000e6c:	0f000001 	.word	0x0f000001

08000e70 <HAL_ADC_Init>:
  if (hadc == NULL)
 8000e70:	b338      	cbz	r0, 8000ec2 <HAL_ADC_Init+0x52>
{
 8000e72:	b510      	push	{r4, lr}
 8000e74:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000e76:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8000e78:	b143      	cbz	r3, 8000e8c <HAL_ADC_Init+0x1c>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000e7a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000e7c:	f013 0f10 	tst.w	r3, #16
 8000e80:	d00b      	beq.n	8000e9a <HAL_ADC_Init+0x2a>
    tmp_hal_status = HAL_ERROR;
 8000e82:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8000e84:	2300      	movs	r3, #0
 8000e86:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8000e8a:	bd10      	pop	{r4, pc}
    HAL_ADC_MspInit(hadc);
 8000e8c:	f7ff fb70 	bl	8000570 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8000e90:	2300      	movs	r3, #0
 8000e92:	6463      	str	r3, [r4, #68]	@ 0x44
    hadc->Lock = HAL_UNLOCKED;
 8000e94:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
 8000e98:	e7ef      	b.n	8000e7a <HAL_ADC_Init+0xa>
    ADC_STATE_CLR_SET(hadc->State,
 8000e9a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000e9c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000ea0:	f023 0302 	bic.w	r3, r3, #2
 8000ea4:	f043 0302 	orr.w	r3, r3, #2
 8000ea8:	6423      	str	r3, [r4, #64]	@ 0x40
    ADC_Init(hadc);
 8000eaa:	4620      	mov	r0, r4
 8000eac:	f7ff ff46 	bl	8000d3c <ADC_Init>
    ADC_CLEAR_ERRORCODE(hadc);
 8000eb0:	2000      	movs	r0, #0
 8000eb2:	6460      	str	r0, [r4, #68]	@ 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8000eb4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000eb6:	f023 0303 	bic.w	r3, r3, #3
 8000eba:	f043 0301 	orr.w	r3, r3, #1
 8000ebe:	6423      	str	r3, [r4, #64]	@ 0x40
 8000ec0:	e7e0      	b.n	8000e84 <HAL_ADC_Init+0x14>
    return HAL_ERROR;
 8000ec2:	2001      	movs	r0, #1
}
 8000ec4:	4770      	bx	lr
	...

08000ec8 <HAL_ADC_Start_DMA>:
{
 8000ec8:	b510      	push	{r4, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	4613      	mov	r3, r2
  __IO uint32_t counter = 0U;
 8000ece:	2200      	movs	r2, #0
 8000ed0:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8000ed2:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8000ed6:	2a01      	cmp	r2, #1
 8000ed8:	f000 8090 	beq.w	8000ffc <HAL_ADC_Start_DMA+0x134>
 8000edc:	4604      	mov	r4, r0
 8000ede:	2201      	movs	r2, #1
 8000ee0:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000ee4:	6802      	ldr	r2, [r0, #0]
 8000ee6:	6890      	ldr	r0, [r2, #8]
 8000ee8:	f010 0f01 	tst.w	r0, #1
 8000eec:	d113      	bne.n	8000f16 <HAL_ADC_Start_DMA+0x4e>
    __HAL_ADC_ENABLE(hadc);
 8000eee:	6890      	ldr	r0, [r2, #8]
 8000ef0:	f040 0001 	orr.w	r0, r0, #1
 8000ef4:	6090      	str	r0, [r2, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000ef6:	4a42      	ldr	r2, [pc, #264]	@ (8001000 <HAL_ADC_Start_DMA+0x138>)
 8000ef8:	6810      	ldr	r0, [r2, #0]
 8000efa:	4a42      	ldr	r2, [pc, #264]	@ (8001004 <HAL_ADC_Start_DMA+0x13c>)
 8000efc:	fba2 2000 	umull	r2, r0, r2, r0
 8000f00:	0c80      	lsrs	r0, r0, #18
 8000f02:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8000f06:	9001      	str	r0, [sp, #4]
    while (counter != 0U)
 8000f08:	e002      	b.n	8000f10 <HAL_ADC_Start_DMA+0x48>
      counter--;
 8000f0a:	9801      	ldr	r0, [sp, #4]
 8000f0c:	3801      	subs	r0, #1
 8000f0e:	9001      	str	r0, [sp, #4]
    while (counter != 0U)
 8000f10:	9801      	ldr	r0, [sp, #4]
 8000f12:	2800      	cmp	r0, #0
 8000f14:	d1f9      	bne.n	8000f0a <HAL_ADC_Start_DMA+0x42>
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8000f16:	6822      	ldr	r2, [r4, #0]
 8000f18:	6890      	ldr	r0, [r2, #8]
 8000f1a:	f410 7f80 	tst.w	r0, #256	@ 0x100
 8000f1e:	d003      	beq.n	8000f28 <HAL_ADC_Start_DMA+0x60>
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000f20:	6890      	ldr	r0, [r2, #8]
 8000f22:	f420 7080 	bic.w	r0, r0, #256	@ 0x100
 8000f26:	6090      	str	r0, [r2, #8]
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000f28:	6822      	ldr	r2, [r4, #0]
 8000f2a:	6890      	ldr	r0, [r2, #8]
 8000f2c:	f010 0f01 	tst.w	r0, #1
 8000f30:	d059      	beq.n	8000fe6 <HAL_ADC_Start_DMA+0x11e>
    ADC_STATE_CLR_SET(hadc->State,
 8000f32:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8000f34:	f420 60e0 	bic.w	r0, r0, #1792	@ 0x700
 8000f38:	f020 0001 	bic.w	r0, r0, #1
 8000f3c:	f440 7080 	orr.w	r0, r0, #256	@ 0x100
 8000f40:	6420      	str	r0, [r4, #64]	@ 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000f42:	6852      	ldr	r2, [r2, #4]
 8000f44:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8000f48:	d005      	beq.n	8000f56 <HAL_ADC_Start_DMA+0x8e>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000f4a:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8000f4c:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8000f50:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8000f54:	6422      	str	r2, [r4, #64]	@ 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f56:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8000f58:	f412 5f80 	tst.w	r2, #4096	@ 0x1000
 8000f5c:	d033      	beq.n	8000fc6 <HAL_ADC_Start_DMA+0xfe>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000f5e:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8000f60:	f022 0206 	bic.w	r2, r2, #6
 8000f64:	6462      	str	r2, [r4, #68]	@ 0x44
    __HAL_UNLOCK(hadc);
 8000f66:	2200      	movs	r2, #0
 8000f68:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000f6c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8000f6e:	4826      	ldr	r0, [pc, #152]	@ (8001008 <HAL_ADC_Start_DMA+0x140>)
 8000f70:	63d0      	str	r0, [r2, #60]	@ 0x3c
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000f72:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8000f74:	4825      	ldr	r0, [pc, #148]	@ (800100c <HAL_ADC_Start_DMA+0x144>)
 8000f76:	6410      	str	r0, [r2, #64]	@ 0x40
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000f78:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8000f7a:	4825      	ldr	r0, [pc, #148]	@ (8001010 <HAL_ADC_Start_DMA+0x148>)
 8000f7c:	64d0      	str	r0, [r2, #76]	@ 0x4c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000f7e:	6822      	ldr	r2, [r4, #0]
 8000f80:	f06f 0022 	mvn.w	r0, #34	@ 0x22
 8000f84:	6010      	str	r0, [r2, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000f86:	6820      	ldr	r0, [r4, #0]
 8000f88:	6842      	ldr	r2, [r0, #4]
 8000f8a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8000f8e:	6042      	str	r2, [r0, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8000f90:	6820      	ldr	r0, [r4, #0]
 8000f92:	6882      	ldr	r2, [r0, #8]
 8000f94:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000f98:	6082      	str	r2, [r0, #8]
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000f9a:	6820      	ldr	r0, [r4, #0]
 8000f9c:	460a      	mov	r2, r1
 8000f9e:	f100 014c 	add.w	r1, r0, #76	@ 0x4c
 8000fa2:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8000fa4:	f000 faba 	bl	800151c <HAL_DMA_Start_IT>
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000fa8:	4b1a      	ldr	r3, [pc, #104]	@ (8001014 <HAL_ADC_Start_DMA+0x14c>)
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f013 0f1f 	tst.w	r3, #31
 8000fb0:	d10c      	bne.n	8000fcc <HAL_ADC_Start_DMA+0x104>
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8000fb2:	6823      	ldr	r3, [r4, #0]
 8000fb4:	689a      	ldr	r2, [r3, #8]
 8000fb6:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 8000fba:	d11d      	bne.n	8000ff8 <HAL_ADC_Start_DMA+0x130>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000fbc:	689a      	ldr	r2, [r3, #8]
 8000fbe:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	e018      	b.n	8000ff8 <HAL_ADC_Start_DMA+0x130>
      ADC_CLEAR_ERRORCODE(hadc);
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	6462      	str	r2, [r4, #68]	@ 0x44
 8000fca:	e7cc      	b.n	8000f66 <HAL_ADC_Start_DMA+0x9e>
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000fcc:	6823      	ldr	r3, [r4, #0]
 8000fce:	4a12      	ldr	r2, [pc, #72]	@ (8001018 <HAL_ADC_Start_DMA+0x150>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d111      	bne.n	8000ff8 <HAL_ADC_Start_DMA+0x130>
 8000fd4:	689a      	ldr	r2, [r3, #8]
 8000fd6:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 8000fda:	d10d      	bne.n	8000ff8 <HAL_ADC_Start_DMA+0x130>
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000fdc:	689a      	ldr	r2, [r3, #8]
 8000fde:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8000fe2:	609a      	str	r2, [r3, #8]
 8000fe4:	e008      	b.n	8000ff8 <HAL_ADC_Start_DMA+0x130>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fe6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000fe8:	f043 0310 	orr.w	r3, r3, #16
 8000fec:	6423      	str	r3, [r4, #64]	@ 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fee:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8000ff0:	f043 0301 	orr.w	r3, r3, #1
 8000ff4:	6463      	str	r3, [r4, #68]	@ 0x44
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ff6:	2000      	movs	r0, #0
}
 8000ff8:	b002      	add	sp, #8
 8000ffa:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8000ffc:	2002      	movs	r0, #2
 8000ffe:	e7fb      	b.n	8000ff8 <HAL_ADC_Start_DMA+0x130>
 8001000:	20000008 	.word	0x20000008
 8001004:	431bde83 	.word	0x431bde83
 8001008:	08001041 	.word	0x08001041
 800100c:	0800101f 	.word	0x0800101f
 8001010:	0800102b 	.word	0x0800102b
 8001014:	40012300 	.word	0x40012300
 8001018:	40012000 	.word	0x40012000

0800101c <HAL_ADC_ConvHalfCpltCallback>:
}
 800101c:	4770      	bx	lr

0800101e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800101e:	b508      	push	{r3, lr}
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001020:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 8001022:	f7ff fffb 	bl	800101c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001026:	bd08      	pop	{r3, pc}

08001028 <HAL_ADC_ErrorCallback>:
}
 8001028:	4770      	bx	lr

0800102a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800102a:	b508      	push	{r3, lr}
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800102c:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 800102e:	2340      	movs	r3, #64	@ 0x40
 8001030:	6403      	str	r3, [r0, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001032:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8001034:	f043 0304 	orr.w	r3, r3, #4
 8001038:	6443      	str	r3, [r0, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800103a:	f7ff fff5 	bl	8001028 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800103e:	bd08      	pop	{r3, pc}

08001040 <ADC_DMAConvCplt>:
{
 8001040:	b508      	push	{r3, lr}
 8001042:	4603      	mov	r3, r0
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001044:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001046:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8001048:	f012 0f50 	tst.w	r2, #80	@ 0x50
 800104c:	d125      	bne.n	800109a <ADC_DMAConvCplt+0x5a>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800104e:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8001050:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001054:	6403      	str	r3, [r0, #64]	@ 0x40
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001056:	6803      	ldr	r3, [r0, #0]
 8001058:	689a      	ldr	r2, [r3, #8]
 800105a:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 800105e:	d119      	bne.n	8001094 <ADC_DMAConvCplt+0x54>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001060:	7e02      	ldrb	r2, [r0, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001062:	b9ba      	cbnz	r2, 8001094 <ADC_DMAConvCplt+0x54>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001064:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001066:	f412 0f70 	tst.w	r2, #15728640	@ 0xf00000
 800106a:	d003      	beq.n	8001074 <ADC_DMAConvCplt+0x34>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800106c:	689a      	ldr	r2, [r3, #8]
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800106e:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8001072:	d10f      	bne.n	8001094 <ADC_DMAConvCplt+0x54>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001074:	685a      	ldr	r2, [r3, #4]
 8001076:	f022 0220 	bic.w	r2, r2, #32
 800107a:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800107c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800107e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001082:	6403      	str	r3, [r0, #64]	@ 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001084:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8001086:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 800108a:	d103      	bne.n	8001094 <ADC_DMAConvCplt+0x54>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800108c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800108e:	f043 0301 	orr.w	r3, r3, #1
 8001092:	6403      	str	r3, [r0, #64]	@ 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 8001094:	f7ff fbf0 	bl	8000878 <HAL_ADC_ConvCpltCallback>
}
 8001098:	bd08      	pop	{r3, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800109a:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 800109c:	f012 0f10 	tst.w	r2, #16
 80010a0:	d104      	bne.n	80010ac <ADC_DMAConvCplt+0x6c>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80010a2:	6b82      	ldr	r2, [r0, #56]	@ 0x38
 80010a4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80010a6:	4618      	mov	r0, r3
 80010a8:	4790      	blx	r2
}
 80010aa:	e7f5      	b.n	8001098 <ADC_DMAConvCplt+0x58>
      HAL_ADC_ErrorCallback(hadc);
 80010ac:	f7ff ffbc 	bl	8001028 <HAL_ADC_ErrorCallback>
 80010b0:	e7f2      	b.n	8001098 <ADC_DMAConvCplt+0x58>
	...

080010b4 <HAL_ADC_ConfigChannel>:
{
 80010b4:	b430      	push	{r4, r5}
 80010b6:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 80010b8:	2200      	movs	r2, #0
 80010ba:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 80010bc:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 80010c0:	2a01      	cmp	r2, #1
 80010c2:	f000 80c0 	beq.w	8001246 <HAL_ADC_ConfigChannel+0x192>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2201      	movs	r2, #1
 80010ca:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 80010ce:	680a      	ldr	r2, [r1, #0]
 80010d0:	2a09      	cmp	r2, #9
 80010d2:	d940      	bls.n	8001156 <HAL_ADC_ConfigChannel+0xa2>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80010d4:	6804      	ldr	r4, [r0, #0]
 80010d6:	68e0      	ldr	r0, [r4, #12]
 80010d8:	b292      	uxth	r2, r2
 80010da:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80010de:	3a1e      	subs	r2, #30
 80010e0:	f04f 0c07 	mov.w	ip, #7
 80010e4:	fa0c f202 	lsl.w	r2, ip, r2
 80010e8:	ea20 0202 	bic.w	r2, r0, r2
 80010ec:	60e2      	str	r2, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80010ee:	681c      	ldr	r4, [r3, #0]
 80010f0:	68e0      	ldr	r0, [r4, #12]
 80010f2:	880a      	ldrh	r2, [r1, #0]
 80010f4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80010f8:	3a1e      	subs	r2, #30
 80010fa:	688d      	ldr	r5, [r1, #8]
 80010fc:	fa05 f202 	lsl.w	r2, r5, r2
 8001100:	4302      	orrs	r2, r0
 8001102:	60e2      	str	r2, [r4, #12]
  if (sConfig->Rank < 7U)
 8001104:	684a      	ldr	r2, [r1, #4]
 8001106:	2a06      	cmp	r2, #6
 8001108:	d83c      	bhi.n	8001184 <HAL_ADC_ConfigChannel+0xd0>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800110a:	681c      	ldr	r4, [r3, #0]
 800110c:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 800110e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001112:	3a05      	subs	r2, #5
 8001114:	f04f 0c1f 	mov.w	ip, #31
 8001118:	fa0c f202 	lsl.w	r2, ip, r2
 800111c:	ea20 0202 	bic.w	r2, r0, r2
 8001120:	6362      	str	r2, [r4, #52]	@ 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001122:	681c      	ldr	r4, [r3, #0]
 8001124:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8001126:	684a      	ldr	r2, [r1, #4]
 8001128:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800112c:	3a05      	subs	r2, #5
 800112e:	f8b1 c000 	ldrh.w	ip, [r1]
 8001132:	fa0c f202 	lsl.w	r2, ip, r2
 8001136:	4302      	orrs	r2, r0
 8001138:	6362      	str	r2, [r4, #52]	@ 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800113a:	6818      	ldr	r0, [r3, #0]
 800113c:	4a43      	ldr	r2, [pc, #268]	@ (800124c <HAL_ADC_ConfigChannel+0x198>)
 800113e:	4290      	cmp	r0, r2
 8001140:	d050      	beq.n	80011e4 <HAL_ADC_ConfigChannel+0x130>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001142:	6818      	ldr	r0, [r3, #0]
 8001144:	4a41      	ldr	r2, [pc, #260]	@ (800124c <HAL_ADC_ConfigChannel+0x198>)
 8001146:	4290      	cmp	r0, r2
 8001148:	d059      	beq.n	80011fe <HAL_ADC_ConfigChannel+0x14a>
  __HAL_UNLOCK(hadc);
 800114a:	2000      	movs	r0, #0
 800114c:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c
}
 8001150:	b002      	add	sp, #8
 8001152:	bc30      	pop	{r4, r5}
 8001154:	4770      	bx	lr
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001156:	6804      	ldr	r4, [r0, #0]
 8001158:	6920      	ldr	r0, [r4, #16]
 800115a:	b292      	uxth	r2, r2
 800115c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001160:	f04f 0c07 	mov.w	ip, #7
 8001164:	fa0c f202 	lsl.w	r2, ip, r2
 8001168:	ea20 0202 	bic.w	r2, r0, r2
 800116c:	6122      	str	r2, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800116e:	681c      	ldr	r4, [r3, #0]
 8001170:	6920      	ldr	r0, [r4, #16]
 8001172:	880a      	ldrh	r2, [r1, #0]
 8001174:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001178:	688d      	ldr	r5, [r1, #8]
 800117a:	fa05 f202 	lsl.w	r2, r5, r2
 800117e:	4302      	orrs	r2, r0
 8001180:	6122      	str	r2, [r4, #16]
 8001182:	e7bf      	b.n	8001104 <HAL_ADC_ConfigChannel+0x50>
  else if (sConfig->Rank < 13U)
 8001184:	2a0c      	cmp	r2, #12
 8001186:	d816      	bhi.n	80011b6 <HAL_ADC_ConfigChannel+0x102>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001188:	681d      	ldr	r5, [r3, #0]
 800118a:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 800118c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001190:	3a23      	subs	r2, #35	@ 0x23
 8001192:	241f      	movs	r4, #31
 8001194:	fa04 f202 	lsl.w	r2, r4, r2
 8001198:	ea20 0202 	bic.w	r2, r0, r2
 800119c:	632a      	str	r2, [r5, #48]	@ 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800119e:	681d      	ldr	r5, [r3, #0]
 80011a0:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 80011a2:	684a      	ldr	r2, [r1, #4]
 80011a4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80011a8:	3a23      	subs	r2, #35	@ 0x23
 80011aa:	880c      	ldrh	r4, [r1, #0]
 80011ac:	fa04 f202 	lsl.w	r2, r4, r2
 80011b0:	4302      	orrs	r2, r0
 80011b2:	632a      	str	r2, [r5, #48]	@ 0x30
 80011b4:	e7c1      	b.n	800113a <HAL_ADC_ConfigChannel+0x86>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80011b6:	681d      	ldr	r5, [r3, #0]
 80011b8:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 80011ba:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80011be:	3a41      	subs	r2, #65	@ 0x41
 80011c0:	241f      	movs	r4, #31
 80011c2:	fa04 f202 	lsl.w	r2, r4, r2
 80011c6:	ea20 0202 	bic.w	r2, r0, r2
 80011ca:	62ea      	str	r2, [r5, #44]	@ 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80011cc:	681d      	ldr	r5, [r3, #0]
 80011ce:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 80011d0:	684a      	ldr	r2, [r1, #4]
 80011d2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80011d6:	3a41      	subs	r2, #65	@ 0x41
 80011d8:	880c      	ldrh	r4, [r1, #0]
 80011da:	fa04 f202 	lsl.w	r2, r4, r2
 80011de:	4302      	orrs	r2, r0
 80011e0:	62ea      	str	r2, [r5, #44]	@ 0x2c
 80011e2:	e7aa      	b.n	800113a <HAL_ADC_ConfigChannel+0x86>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80011e4:	680a      	ldr	r2, [r1, #0]
 80011e6:	2a12      	cmp	r2, #18
 80011e8:	d1ab      	bne.n	8001142 <HAL_ADC_ConfigChannel+0x8e>
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80011ea:	4a19      	ldr	r2, [pc, #100]	@ (8001250 <HAL_ADC_ConfigChannel+0x19c>)
 80011ec:	6850      	ldr	r0, [r2, #4]
 80011ee:	f420 0000 	bic.w	r0, r0, #8388608	@ 0x800000
 80011f2:	6050      	str	r0, [r2, #4]
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80011f4:	6850      	ldr	r0, [r2, #4]
 80011f6:	f440 0080 	orr.w	r0, r0, #4194304	@ 0x400000
 80011fa:	6050      	str	r0, [r2, #4]
 80011fc:	e7a1      	b.n	8001142 <HAL_ADC_ConfigChannel+0x8e>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80011fe:	680a      	ldr	r2, [r1, #0]
 8001200:	4814      	ldr	r0, [pc, #80]	@ (8001254 <HAL_ADC_ConfigChannel+0x1a0>)
 8001202:	4282      	cmp	r2, r0
 8001204:	d001      	beq.n	800120a <HAL_ADC_ConfigChannel+0x156>
 8001206:	2a11      	cmp	r2, #17
 8001208:	d19f      	bne.n	800114a <HAL_ADC_ConfigChannel+0x96>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800120a:	4a11      	ldr	r2, [pc, #68]	@ (8001250 <HAL_ADC_ConfigChannel+0x19c>)
 800120c:	6850      	ldr	r0, [r2, #4]
 800120e:	f420 0080 	bic.w	r0, r0, #4194304	@ 0x400000
 8001212:	6050      	str	r0, [r2, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001214:	6850      	ldr	r0, [r2, #4]
 8001216:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800121a:	6050      	str	r0, [r2, #4]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800121c:	6809      	ldr	r1, [r1, #0]
 800121e:	4a0d      	ldr	r2, [pc, #52]	@ (8001254 <HAL_ADC_ConfigChannel+0x1a0>)
 8001220:	4291      	cmp	r1, r2
 8001222:	d192      	bne.n	800114a <HAL_ADC_ConfigChannel+0x96>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001224:	4a0c      	ldr	r2, [pc, #48]	@ (8001258 <HAL_ADC_ConfigChannel+0x1a4>)
 8001226:	6812      	ldr	r2, [r2, #0]
 8001228:	490c      	ldr	r1, [pc, #48]	@ (800125c <HAL_ADC_ConfigChannel+0x1a8>)
 800122a:	fba1 1202 	umull	r1, r2, r1, r2
 800122e:	0c92      	lsrs	r2, r2, #18
 8001230:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001234:	0052      	lsls	r2, r2, #1
 8001236:	9201      	str	r2, [sp, #4]
      while (counter != 0U)
 8001238:	9a01      	ldr	r2, [sp, #4]
 800123a:	2a00      	cmp	r2, #0
 800123c:	d085      	beq.n	800114a <HAL_ADC_ConfigChannel+0x96>
        counter--;
 800123e:	9a01      	ldr	r2, [sp, #4]
 8001240:	3a01      	subs	r2, #1
 8001242:	9201      	str	r2, [sp, #4]
 8001244:	e7f8      	b.n	8001238 <HAL_ADC_ConfigChannel+0x184>
  __HAL_LOCK(hadc);
 8001246:	2002      	movs	r0, #2
 8001248:	e782      	b.n	8001150 <HAL_ADC_ConfigChannel+0x9c>
 800124a:	bf00      	nop
 800124c:	40012000 	.word	0x40012000
 8001250:	40012300 	.word	0x40012300
 8001254:	10000012 	.word	0x10000012
 8001258:	20000008 	.word	0x20000008
 800125c:	431bde83 	.word	0x431bde83

08001260 <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8001260:	2800      	cmp	r0, #0
 8001262:	db07      	blt.n	8001274 <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001264:	f000 021f 	and.w	r2, r0, #31
 8001268:	0940      	lsrs	r0, r0, #5
 800126a:	2301      	movs	r3, #1
 800126c:	4093      	lsls	r3, r2
 800126e:	4a02      	ldr	r2, [pc, #8]	@ (8001278 <__NVIC_EnableIRQ+0x18>)
 8001270:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	e000e100 	.word	0xe000e100

0800127c <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 800127c:	2800      	cmp	r0, #0
 800127e:	db08      	blt.n	8001292 <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001280:	0109      	lsls	r1, r1, #4
 8001282:	b2c9      	uxtb	r1, r1
 8001284:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8001288:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 800128c:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8001290:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001292:	f000 000f 	and.w	r0, r0, #15
 8001296:	0109      	lsls	r1, r1, #4
 8001298:	b2c9      	uxtb	r1, r1
 800129a:	4b01      	ldr	r3, [pc, #4]	@ (80012a0 <__NVIC_SetPriority+0x24>)
 800129c:	5419      	strb	r1, [r3, r0]
  }
}
 800129e:	4770      	bx	lr
 80012a0:	e000ed14 	.word	0xe000ed14

080012a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012a4:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012a6:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012aa:	f1c0 0c07 	rsb	ip, r0, #7
 80012ae:	f1bc 0f04 	cmp.w	ip, #4
 80012b2:	bf28      	it	cs
 80012b4:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012b8:	1d03      	adds	r3, r0, #4
 80012ba:	2b06      	cmp	r3, #6
 80012bc:	d90f      	bls.n	80012de <NVIC_EncodePriority+0x3a>
 80012be:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c0:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 80012c4:	fa0e f00c 	lsl.w	r0, lr, ip
 80012c8:	ea21 0100 	bic.w	r1, r1, r0
 80012cc:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012ce:	fa0e fe03 	lsl.w	lr, lr, r3
 80012d2:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 80012d6:	ea41 0002 	orr.w	r0, r1, r2
 80012da:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012de:	2300      	movs	r3, #0
 80012e0:	e7ee      	b.n	80012c0 <NVIC_EncodePriority+0x1c>
	...

080012e4 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012e4:	4a07      	ldr	r2, [pc, #28]	@ (8001304 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80012e6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012e8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80012ec:	041b      	lsls	r3, r3, #16
 80012ee:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012f0:	0200      	lsls	r0, r0, #8
 80012f2:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012f6:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80012f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8001300:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001302:	4770      	bx	lr
 8001304:	e000ed00 	.word	0xe000ed00

08001308 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001308:	b510      	push	{r4, lr}
 800130a:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800130c:	4b05      	ldr	r3, [pc, #20]	@ (8001324 <HAL_NVIC_SetPriority+0x1c>)
 800130e:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001310:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8001314:	f7ff ffc6 	bl	80012a4 <NVIC_EncodePriority>
 8001318:	4601      	mov	r1, r0
 800131a:	4620      	mov	r0, r4
 800131c:	f7ff ffae 	bl	800127c <__NVIC_SetPriority>
}
 8001320:	bd10      	pop	{r4, pc}
 8001322:	bf00      	nop
 8001324:	e000ed00 	.word	0xe000ed00

08001328 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001328:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800132a:	f7ff ff99 	bl	8001260 <__NVIC_EnableIRQ>
}
 800132e:	bd08      	pop	{r3, pc}

08001330 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001330:	3801      	subs	r0, #1
 8001332:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8001336:	d20b      	bcs.n	8001350 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001338:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800133c:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800133e:	4a05      	ldr	r2, [pc, #20]	@ (8001354 <HAL_SYSTICK_Config+0x24>)
 8001340:	21f0      	movs	r1, #240	@ 0xf0
 8001342:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001346:	2000      	movs	r0, #0
 8001348:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800134a:	2207      	movs	r2, #7
 800134c:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800134e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001350:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001352:	4770      	bx	lr
 8001354:	e000ed00 	.word	0xe000ed00

08001358 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001358:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800135a:	6805      	ldr	r5, [r0, #0]
 800135c:	682c      	ldr	r4, [r5, #0]
 800135e:	f424 2480 	bic.w	r4, r4, #262144	@ 0x40000
 8001362:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001364:	6804      	ldr	r4, [r0, #0]
 8001366:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001368:	6883      	ldr	r3, [r0, #8]
 800136a:	2b40      	cmp	r3, #64	@ 0x40
 800136c:	d005      	beq.n	800137a <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 800136e:	6803      	ldr	r3, [r0, #0]
 8001370:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8001372:	6803      	ldr	r3, [r0, #0]
 8001374:	60da      	str	r2, [r3, #12]
  }
}
 8001376:	bc30      	pop	{r4, r5}
 8001378:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 800137a:	6803      	ldr	r3, [r0, #0]
 800137c:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 800137e:	6803      	ldr	r3, [r0, #0]
 8001380:	60d9      	str	r1, [r3, #12]
 8001382:	e7f8      	b.n	8001376 <DMA_SetConfig+0x1e>

08001384 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001384:	b410      	push	{r4}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001386:	6803      	ldr	r3, [r0, #0]
 8001388:	b2d9      	uxtb	r1, r3
 800138a:	3910      	subs	r1, #16
 800138c:	4a0a      	ldr	r2, [pc, #40]	@ (80013b8 <DMA_CalcBaseAndBitshift+0x34>)
 800138e:	fba2 4201 	umull	r4, r2, r2, r1
 8001392:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001394:	4c09      	ldr	r4, [pc, #36]	@ (80013bc <DMA_CalcBaseAndBitshift+0x38>)
 8001396:	5ca2      	ldrb	r2, [r4, r2]
 8001398:	65c2      	str	r2, [r0, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800139a:	295f      	cmp	r1, #95	@ 0x5f
 800139c:	d907      	bls.n	80013ae <DMA_CalcBaseAndBitshift+0x2a>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800139e:	f36f 0309 	bfc	r3, #0, #10
 80013a2:	3304      	adds	r3, #4
 80013a4:	6583      	str	r3, [r0, #88]	@ 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 80013a6:	6d80      	ldr	r0, [r0, #88]	@ 0x58
 80013a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80013ac:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80013ae:	f36f 0309 	bfc	r3, #0, #10
 80013b2:	6583      	str	r3, [r0, #88]	@ 0x58
 80013b4:	e7f7      	b.n	80013a6 <DMA_CalcBaseAndBitshift+0x22>
 80013b6:	bf00      	nop
 80013b8:	aaaaaaab 	.word	0xaaaaaaab
 80013bc:	08002a70 	.word	0x08002a70

080013c0 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80013c0:	6a83      	ldr	r3, [r0, #40]	@ 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80013c2:	6982      	ldr	r2, [r0, #24]
 80013c4:	b992      	cbnz	r2, 80013ec <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d00a      	beq.n	80013e0 <DMA_CheckFifoParam+0x20>
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	d002      	beq.n	80013d4 <DMA_CheckFifoParam+0x14>
 80013ce:	b10b      	cbz	r3, 80013d4 <DMA_CheckFifoParam+0x14>
 80013d0:	2000      	movs	r0, #0
 80013d2:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80013d4:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80013d6:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 80013da:	d128      	bne.n	800142e <DMA_CheckFifoParam+0x6e>
  HAL_StatusTypeDef status = HAL_OK;
 80013dc:	2000      	movs	r0, #0
 80013de:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80013e0:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80013e2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80013e6:	d024      	beq.n	8001432 <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 80013e8:	2000      	movs	r0, #0
 80013ea:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80013ec:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 80013f0:	d009      	beq.n	8001406 <DMA_CheckFifoParam+0x46>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80013f2:	2b02      	cmp	r3, #2
 80013f4:	d925      	bls.n	8001442 <DMA_CheckFifoParam+0x82>
 80013f6:	2b03      	cmp	r3, #3
 80013f8:	d125      	bne.n	8001446 <DMA_CheckFifoParam+0x86>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80013fa:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80013fc:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8001400:	d123      	bne.n	800144a <DMA_CheckFifoParam+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
 8001402:	2000      	movs	r0, #0
 8001404:	4770      	bx	lr
    switch (tmp)
 8001406:	2b03      	cmp	r3, #3
 8001408:	d803      	bhi.n	8001412 <DMA_CheckFifoParam+0x52>
 800140a:	e8df f003 	tbb	[pc, r3]
 800140e:	0414      	.short	0x0414
 8001410:	0a14      	.short	0x0a14
 8001412:	2000      	movs	r0, #0
 8001414:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001416:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001418:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 800141c:	d10d      	bne.n	800143a <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 800141e:	2000      	movs	r0, #0
 8001420:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001422:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001424:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001428:	d009      	beq.n	800143e <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 800142a:	2000      	movs	r0, #0
 800142c:	4770      	bx	lr
        status = HAL_ERROR;
 800142e:	2001      	movs	r0, #1
 8001430:	4770      	bx	lr
        status = HAL_ERROR;
 8001432:	2001      	movs	r0, #1
 8001434:	4770      	bx	lr
      status = HAL_ERROR;
 8001436:	2001      	movs	r0, #1
 8001438:	4770      	bx	lr
        status = HAL_ERROR;
 800143a:	2001      	movs	r0, #1
 800143c:	4770      	bx	lr
        status = HAL_ERROR;
 800143e:	2001      	movs	r0, #1
 8001440:	4770      	bx	lr
      status = HAL_ERROR;
 8001442:	2001      	movs	r0, #1
 8001444:	4770      	bx	lr
    switch (tmp)
 8001446:	2000      	movs	r0, #0
 8001448:	4770      	bx	lr
      {
        status = HAL_ERROR;
 800144a:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 800144c:	4770      	bx	lr
	...

08001450 <HAL_DMA_Init>:
{
 8001450:	b570      	push	{r4, r5, r6, lr}
 8001452:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001454:	f7ff fc58 	bl	8000d08 <HAL_GetTick>
  if(hdma == NULL)
 8001458:	2c00      	cmp	r4, #0
 800145a:	d05b      	beq.n	8001514 <HAL_DMA_Init+0xc4>
 800145c:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 800145e:	2302      	movs	r3, #2
 8001460:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  __HAL_UNLOCK(hdma);
 8001464:	2300      	movs	r3, #0
 8001466:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  __HAL_DMA_DISABLE(hdma);
 800146a:	6822      	ldr	r2, [r4, #0]
 800146c:	6813      	ldr	r3, [r2, #0]
 800146e:	f023 0301 	bic.w	r3, r3, #1
 8001472:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001474:	6823      	ldr	r3, [r4, #0]
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	f012 0f01 	tst.w	r2, #1
 800147c:	d00a      	beq.n	8001494 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800147e:	f7ff fc43 	bl	8000d08 <HAL_GetTick>
 8001482:	1b43      	subs	r3, r0, r5
 8001484:	2b05      	cmp	r3, #5
 8001486:	d9f5      	bls.n	8001474 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001488:	2320      	movs	r3, #32
 800148a:	6563      	str	r3, [r4, #84]	@ 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800148c:	2003      	movs	r0, #3
 800148e:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
}
 8001492:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 8001494:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001496:	4920      	ldr	r1, [pc, #128]	@ (8001518 <HAL_DMA_Init+0xc8>)
 8001498:	4011      	ands	r1, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800149a:	6862      	ldr	r2, [r4, #4]
 800149c:	68a0      	ldr	r0, [r4, #8]
 800149e:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014a0:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014a2:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014a4:	6920      	ldr	r0, [r4, #16]
 80014a6:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014a8:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014aa:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014ac:	69a0      	ldr	r0, [r4, #24]
 80014ae:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 80014b0:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014b2:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 80014b4:	6a20      	ldr	r0, [r4, #32]
 80014b6:	4302      	orrs	r2, r0
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014b8:	430a      	orrs	r2, r1
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80014ba:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80014bc:	2904      	cmp	r1, #4
 80014be:	d01e      	beq.n	80014fe <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 80014c0:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 80014c2:	6826      	ldr	r6, [r4, #0]
 80014c4:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80014c6:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 80014ca:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80014cc:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80014ce:	2b04      	cmp	r3, #4
 80014d0:	d107      	bne.n	80014e2 <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 80014d2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80014d4:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80014d6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80014d8:	b11b      	cbz	r3, 80014e2 <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80014da:	4620      	mov	r0, r4
 80014dc:	f7ff ff70 	bl	80013c0 <DMA_CheckFifoParam>
 80014e0:	b990      	cbnz	r0, 8001508 <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 80014e2:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80014e4:	4620      	mov	r0, r4
 80014e6:	f7ff ff4d 	bl	8001384 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014ea:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80014ec:	233f      	movs	r3, #63	@ 0x3f
 80014ee:	4093      	lsls	r3, r2
 80014f0:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014f2:	2000      	movs	r0, #0
 80014f4:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80014f6:	2301      	movs	r3, #1
 80014f8:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  return HAL_OK;
 80014fc:	e7c9      	b.n	8001492 <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80014fe:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8001500:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8001502:	4301      	orrs	r1, r0
 8001504:	430a      	orrs	r2, r1
 8001506:	e7db      	b.n	80014c0 <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001508:	2340      	movs	r3, #64	@ 0x40
 800150a:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_READY;
 800150c:	2001      	movs	r0, #1
 800150e:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
        return HAL_ERROR; 
 8001512:	e7be      	b.n	8001492 <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 8001514:	2001      	movs	r0, #1
 8001516:	e7bc      	b.n	8001492 <HAL_DMA_Init+0x42>
 8001518:	f010803f 	.word	0xf010803f

0800151c <HAL_DMA_Start_IT>:
{
 800151c:	b538      	push	{r3, r4, r5, lr}
 800151e:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001520:	6d85      	ldr	r5, [r0, #88]	@ 0x58
  __HAL_LOCK(hdma);
 8001522:	f890 0034 	ldrb.w	r0, [r0, #52]	@ 0x34
 8001526:	2801      	cmp	r0, #1
 8001528:	d02b      	beq.n	8001582 <HAL_DMA_Start_IT+0x66>
 800152a:	2001      	movs	r0, #1
 800152c:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8001530:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
 8001534:	b2c0      	uxtb	r0, r0
 8001536:	2801      	cmp	r0, #1
 8001538:	d004      	beq.n	8001544 <HAL_DMA_Start_IT+0x28>
    __HAL_UNLOCK(hdma);	  
 800153a:	2300      	movs	r3, #0
 800153c:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    status = HAL_BUSY;
 8001540:	2002      	movs	r0, #2
}
 8001542:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8001544:	2002      	movs	r0, #2
 8001546:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800154a:	2000      	movs	r0, #0
 800154c:	6560      	str	r0, [r4, #84]	@ 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800154e:	4620      	mov	r0, r4
 8001550:	f7ff ff02 	bl	8001358 <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001554:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001556:	233f      	movs	r3, #63	@ 0x3f
 8001558:	4093      	lsls	r3, r2
 800155a:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800155c:	6822      	ldr	r2, [r4, #0]
 800155e:	6813      	ldr	r3, [r2, #0]
 8001560:	f043 0316 	orr.w	r3, r3, #22
 8001564:	6013      	str	r3, [r2, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8001566:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001568:	b123      	cbz	r3, 8001574 <HAL_DMA_Start_IT+0x58>
      hdma->Instance->CR  |= DMA_IT_HT;
 800156a:	6822      	ldr	r2, [r4, #0]
 800156c:	6813      	ldr	r3, [r2, #0]
 800156e:	f043 0308 	orr.w	r3, r3, #8
 8001572:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8001574:	6822      	ldr	r2, [r4, #0]
 8001576:	6813      	ldr	r3, [r2, #0]
 8001578:	f043 0301 	orr.w	r3, r3, #1
 800157c:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800157e:	2000      	movs	r0, #0
 8001580:	e7df      	b.n	8001542 <HAL_DMA_Start_IT+0x26>
  __HAL_LOCK(hdma);
 8001582:	2002      	movs	r0, #2
 8001584:	e7dd      	b.n	8001542 <HAL_DMA_Start_IT+0x26>
	...

08001588 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001588:	2300      	movs	r3, #0
 800158a:	2b0f      	cmp	r3, #15
 800158c:	f200 80d7 	bhi.w	800173e <HAL_GPIO_Init+0x1b6>
{
 8001590:	b570      	push	{r4, r5, r6, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	e065      	b.n	8001662 <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001596:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001598:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 800159c:	2403      	movs	r4, #3
 800159e:	fa04 f40e 	lsl.w	r4, r4, lr
 80015a2:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015a6:	68cc      	ldr	r4, [r1, #12]
 80015a8:	fa04 f40e 	lsl.w	r4, r4, lr
 80015ac:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 80015ae:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015b0:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015b2:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015b6:	684a      	ldr	r2, [r1, #4]
 80015b8:	f3c2 1200 	ubfx	r2, r2, #4, #1
 80015bc:	409a      	lsls	r2, r3
 80015be:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 80015c0:	6042      	str	r2, [r0, #4]
 80015c2:	e05c      	b.n	800167e <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015c4:	08dc      	lsrs	r4, r3, #3
 80015c6:	3408      	adds	r4, #8
 80015c8:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015cc:	f003 0507 	and.w	r5, r3, #7
 80015d0:	00ad      	lsls	r5, r5, #2
 80015d2:	f04f 0e0f 	mov.w	lr, #15
 80015d6:	fa0e fe05 	lsl.w	lr, lr, r5
 80015da:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015de:	690a      	ldr	r2, [r1, #16]
 80015e0:	40aa      	lsls	r2, r5
 80015e2:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 80015e6:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 80015ea:	e05c      	b.n	80016a6 <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015ec:	2204      	movs	r2, #4
 80015ee:	e000      	b.n	80015f2 <HAL_GPIO_Init+0x6a>
 80015f0:	2200      	movs	r2, #0
 80015f2:	fa02 f20e 	lsl.w	r2, r2, lr
 80015f6:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015f8:	3402      	adds	r4, #2
 80015fa:	4d51      	ldr	r5, [pc, #324]	@ (8001740 <HAL_GPIO_Init+0x1b8>)
 80015fc:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001600:	4a50      	ldr	r2, [pc, #320]	@ (8001744 <HAL_GPIO_Init+0x1bc>)
 8001602:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8001604:	ea6f 020c 	mvn.w	r2, ip
 8001608:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800160c:	684e      	ldr	r6, [r1, #4]
 800160e:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 8001612:	d001      	beq.n	8001618 <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 8001614:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8001618:	4c4a      	ldr	r4, [pc, #296]	@ (8001744 <HAL_GPIO_Init+0x1bc>)
 800161a:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 800161c:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 800161e:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001622:	684e      	ldr	r6, [r1, #4]
 8001624:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 8001628:	d001      	beq.n	800162e <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 800162a:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 800162e:	4c45      	ldr	r4, [pc, #276]	@ (8001744 <HAL_GPIO_Init+0x1bc>)
 8001630:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 8001632:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8001634:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001638:	684e      	ldr	r6, [r1, #4]
 800163a:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 800163e:	d001      	beq.n	8001644 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8001640:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8001644:	4c3f      	ldr	r4, [pc, #252]	@ (8001744 <HAL_GPIO_Init+0x1bc>)
 8001646:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001648:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 800164a:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800164c:	684d      	ldr	r5, [r1, #4]
 800164e:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 8001652:	d001      	beq.n	8001658 <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 8001654:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 8001658:	4c3a      	ldr	r4, [pc, #232]	@ (8001744 <HAL_GPIO_Init+0x1bc>)
 800165a:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800165c:	3301      	adds	r3, #1
 800165e:	2b0f      	cmp	r3, #15
 8001660:	d86b      	bhi.n	800173a <HAL_GPIO_Init+0x1b2>
    ioposition = 0x01U << position;
 8001662:	2201      	movs	r2, #1
 8001664:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001666:	680c      	ldr	r4, [r1, #0]
 8001668:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 800166c:	ea32 0404 	bics.w	r4, r2, r4
 8001670:	d1f4      	bne.n	800165c <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001672:	684c      	ldr	r4, [r1, #4]
 8001674:	f004 0403 	and.w	r4, r4, #3
 8001678:	3c01      	subs	r4, #1
 800167a:	2c01      	cmp	r4, #1
 800167c:	d98b      	bls.n	8001596 <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800167e:	684a      	ldr	r2, [r1, #4]
 8001680:	f002 0203 	and.w	r2, r2, #3
 8001684:	2a03      	cmp	r2, #3
 8001686:	d009      	beq.n	800169c <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 8001688:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800168a:	005d      	lsls	r5, r3, #1
 800168c:	2203      	movs	r2, #3
 800168e:	40aa      	lsls	r2, r5
 8001690:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001694:	688a      	ldr	r2, [r1, #8]
 8001696:	40aa      	lsls	r2, r5
 8001698:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 800169a:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800169c:	684a      	ldr	r2, [r1, #4]
 800169e:	f002 0203 	and.w	r2, r2, #3
 80016a2:	2a02      	cmp	r2, #2
 80016a4:	d08e      	beq.n	80015c4 <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 80016a6:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016a8:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80016ac:	2203      	movs	r2, #3
 80016ae:	fa02 f20e 	lsl.w	r2, r2, lr
 80016b2:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016b6:	684a      	ldr	r2, [r1, #4]
 80016b8:	f002 0203 	and.w	r2, r2, #3
 80016bc:	fa02 f20e 	lsl.w	r2, r2, lr
 80016c0:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 80016c2:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016c4:	684a      	ldr	r2, [r1, #4]
 80016c6:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 80016ca:	d0c7      	beq.n	800165c <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016cc:	2200      	movs	r2, #0
 80016ce:	9201      	str	r2, [sp, #4]
 80016d0:	4a1d      	ldr	r2, [pc, #116]	@ (8001748 <HAL_GPIO_Init+0x1c0>)
 80016d2:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 80016d4:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 80016d8:	6454      	str	r4, [r2, #68]	@ 0x44
 80016da:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80016dc:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80016e0:	9201      	str	r2, [sp, #4]
 80016e2:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80016e4:	089c      	lsrs	r4, r3, #2
 80016e6:	1ca5      	adds	r5, r4, #2
 80016e8:	4a15      	ldr	r2, [pc, #84]	@ (8001740 <HAL_GPIO_Init+0x1b8>)
 80016ea:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016ee:	f003 0e03 	and.w	lr, r3, #3
 80016f2:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80016f6:	220f      	movs	r2, #15
 80016f8:	fa02 f20e 	lsl.w	r2, r2, lr
 80016fc:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001700:	4a12      	ldr	r2, [pc, #72]	@ (800174c <HAL_GPIO_Init+0x1c4>)
 8001702:	4290      	cmp	r0, r2
 8001704:	f43f af74 	beq.w	80015f0 <HAL_GPIO_Init+0x68>
 8001708:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800170c:	4290      	cmp	r0, r2
 800170e:	d00e      	beq.n	800172e <HAL_GPIO_Init+0x1a6>
 8001710:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001714:	4290      	cmp	r0, r2
 8001716:	d00c      	beq.n	8001732 <HAL_GPIO_Init+0x1aa>
 8001718:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800171c:	4290      	cmp	r0, r2
 800171e:	d00a      	beq.n	8001736 <HAL_GPIO_Init+0x1ae>
 8001720:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001724:	4290      	cmp	r0, r2
 8001726:	f43f af61 	beq.w	80015ec <HAL_GPIO_Init+0x64>
 800172a:	2207      	movs	r2, #7
 800172c:	e761      	b.n	80015f2 <HAL_GPIO_Init+0x6a>
 800172e:	2201      	movs	r2, #1
 8001730:	e75f      	b.n	80015f2 <HAL_GPIO_Init+0x6a>
 8001732:	2202      	movs	r2, #2
 8001734:	e75d      	b.n	80015f2 <HAL_GPIO_Init+0x6a>
 8001736:	2203      	movs	r2, #3
 8001738:	e75b      	b.n	80015f2 <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 800173a:	b002      	add	sp, #8
 800173c:	bd70      	pop	{r4, r5, r6, pc}
 800173e:	4770      	bx	lr
 8001740:	40013800 	.word	0x40013800
 8001744:	40013c00 	.word	0x40013c00
 8001748:	40023800 	.word	0x40023800
 800174c:	40020000 	.word	0x40020000

08001750 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001750:	b10a      	cbz	r2, 8001756 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001752:	6181      	str	r1, [r0, #24]
 8001754:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001756:	0409      	lsls	r1, r1, #16
 8001758:	6181      	str	r1, [r0, #24]
  }
}
 800175a:	4770      	bx	lr

0800175c <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800175c:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800175e:	ea01 0203 	and.w	r2, r1, r3
 8001762:	ea21 0103 	bic.w	r1, r1, r3
 8001766:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800176a:	6181      	str	r1, [r0, #24]
}
 800176c:	4770      	bx	lr
	...

08001770 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001770:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001772:	4b05      	ldr	r3, [pc, #20]	@ (8001788 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8001774:	695b      	ldr	r3, [r3, #20]
 8001776:	4203      	tst	r3, r0
 8001778:	d100      	bne.n	800177c <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 800177a:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800177c:	4b02      	ldr	r3, [pc, #8]	@ (8001788 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 800177e:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001780:	f7ff f86e 	bl	8000860 <HAL_GPIO_EXTI_Callback>
}
 8001784:	e7f9      	b.n	800177a <HAL_GPIO_EXTI_IRQHandler+0xa>
 8001786:	bf00      	nop
 8001788:	40013c00 	.word	0x40013c00

0800178c <HAL_I2S_Init>:
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800178c:	2800      	cmp	r0, #0
 800178e:	f000 80be 	beq.w	800190e <HAL_I2S_Init+0x182>
{
 8001792:	b538      	push	{r3, r4, r5, lr}
 8001794:	4604      	mov	r4, r0
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001796:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800179a:	2b00      	cmp	r3, #0
 800179c:	d051      	beq.n	8001842 <HAL_I2S_Init+0xb6>
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800179e:	2202      	movs	r2, #2
 80017a0:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80017a4:	6821      	ldr	r1, [r4, #0]
 80017a6:	69cb      	ldr	r3, [r1, #28]
 80017a8:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80017ac:	f023 030f 	bic.w	r3, r3, #15
 80017b0:	61cb      	str	r3, [r1, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80017b2:	6823      	ldr	r3, [r4, #0]
 80017b4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80017b6:	6963      	ldr	r3, [r4, #20]
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d069      	beq.n	8001890 <HAL_I2S_Init+0x104>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80017bc:	68e3      	ldr	r3, [r4, #12]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d146      	bne.n	8001850 <HAL_I2S_Init+0xc4>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80017c2:	2510      	movs	r5, #16
      /* Packet length is 32 bits */
      packetlength = 32U;
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80017c4:	68a3      	ldr	r3, [r4, #8]
 80017c6:	2b20      	cmp	r3, #32
 80017c8:	d800      	bhi.n	80017cc <HAL_I2S_Init+0x40>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80017ca:	006d      	lsls	r5, r5, #1
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80017cc:	2001      	movs	r0, #1
 80017ce:	f000 ff27 	bl	8002620 <HAL_RCCEx_GetPeriphCLKFreq>
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80017d2:	6923      	ldr	r3, [r4, #16]
 80017d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80017d8:	d03c      	beq.n	8001854 <HAL_I2S_Init+0xc8>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80017da:	fbb0 f0f5 	udiv	r0, r0, r5
 80017de:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80017e2:	0043      	lsls	r3, r0, #1
 80017e4:	6962      	ldr	r2, [r4, #20]
 80017e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80017ea:	3305      	adds	r3, #5
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80017ec:	4a49      	ldr	r2, [pc, #292]	@ (8001914 <HAL_I2S_Init+0x188>)
 80017ee:	fba2 2303 	umull	r2, r3, r2, r3

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80017f2:	f3c3 02c0 	ubfx	r2, r3, #3, #1

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80017f6:	ebc2 03d3 	rsb	r3, r2, r3, lsr #3
 80017fa:	085b      	lsrs	r3, r3, #1

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80017fc:	0211      	lsls	r1, r2, #8
    i2sdiv = 2U;
    i2sodd = 0U;
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80017fe:	1e9a      	subs	r2, r3, #2
 8001800:	2afd      	cmp	r2, #253	@ 0xfd
 8001802:	d83f      	bhi.n	8001884 <HAL_I2S_Init+0xf8>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001804:	6922      	ldr	r2, [r4, #16]
 8001806:	430a      	orrs	r2, r1
 8001808:	6821      	ldr	r1, [r4, #0]
 800180a:	431a      	orrs	r2, r3
 800180c:	620a      	str	r2, [r1, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800180e:	6821      	ldr	r1, [r4, #0]
 8001810:	69cb      	ldr	r3, [r1, #28]
 8001812:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8001816:	f023 030f 	bic.w	r3, r3, #15
 800181a:	6862      	ldr	r2, [r4, #4]
 800181c:	68a0      	ldr	r0, [r4, #8]
 800181e:	4302      	orrs	r2, r0
 8001820:	68e0      	ldr	r0, [r4, #12]
 8001822:	4302      	orrs	r2, r0
 8001824:	69a0      	ldr	r0, [r4, #24]
 8001826:	4302      	orrs	r2, r0
 8001828:	4313      	orrs	r3, r2
 800182a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800182e:	61cb      	str	r3, [r1, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001830:	6a23      	ldr	r3, [r4, #32]
 8001832:	2b01      	cmp	r3, #1
 8001834:	d02e      	beq.n	8001894 <HAL_I2S_Init+0x108>
    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001836:	2000      	movs	r0, #0
 8001838:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800183a:	2301      	movs	r3, #1
 800183c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41

  return HAL_OK;
}
 8001840:	bd38      	pop	{r3, r4, r5, pc}
    hi2s->Lock = HAL_UNLOCKED;
 8001842:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001846:	4b34      	ldr	r3, [pc, #208]	@ (8001918 <HAL_I2S_Init+0x18c>)
 8001848:	6343      	str	r3, [r0, #52]	@ 0x34
    HAL_I2S_MspInit(hi2s);
 800184a:	f7fe ff89 	bl	8000760 <HAL_I2S_MspInit>
 800184e:	e7a6      	b.n	800179e <HAL_I2S_Init+0x12>
      packetlength = 32U;
 8001850:	2520      	movs	r5, #32
 8001852:	e7b7      	b.n	80017c4 <HAL_I2S_Init+0x38>
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001854:	68e3      	ldr	r3, [r4, #12]
 8001856:	b153      	cbz	r3, 800186e <HAL_I2S_Init+0xe2>
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001858:	00ad      	lsls	r5, r5, #2
 800185a:	fbb0 f0f5 	udiv	r0, r0, r5
 800185e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001862:	0043      	lsls	r3, r0, #1
 8001864:	6962      	ldr	r2, [r4, #20]
 8001866:	fbb3 f3f2 	udiv	r3, r3, r2
 800186a:	3305      	adds	r3, #5
 800186c:	e7be      	b.n	80017ec <HAL_I2S_Init+0x60>
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800186e:	00ed      	lsls	r5, r5, #3
 8001870:	fbb0 f0f5 	udiv	r0, r0, r5
 8001874:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001878:	0043      	lsls	r3, r0, #1
 800187a:	6962      	ldr	r2, [r4, #20]
 800187c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001880:	3305      	adds	r3, #5
 8001882:	e7b3      	b.n	80017ec <HAL_I2S_Init+0x60>
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001884:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8001886:	f043 0310 	orr.w	r3, r3, #16
 800188a:	6463      	str	r3, [r4, #68]	@ 0x44
    return  HAL_ERROR;
 800188c:	2001      	movs	r0, #1
 800188e:	e7d7      	b.n	8001840 <HAL_I2S_Init+0xb4>
    i2sodd = 0U;
 8001890:	2100      	movs	r1, #0
 8001892:	e7b7      	b.n	8001804 <HAL_I2S_Init+0x78>
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001894:	4b21      	ldr	r3, [pc, #132]	@ (800191c <HAL_I2S_Init+0x190>)
 8001896:	6363      	str	r3, [r4, #52]	@ 0x34
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001898:	6822      	ldr	r2, [r4, #0]
 800189a:	4b21      	ldr	r3, [pc, #132]	@ (8001920 <HAL_I2S_Init+0x194>)
 800189c:	429a      	cmp	r2, r3
 800189e:	d01f      	beq.n	80018e0 <HAL_I2S_Init+0x154>
 80018a0:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80018a4:	69d3      	ldr	r3, [r2, #28]
 80018a6:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80018aa:	f023 030f 	bic.w	r3, r3, #15
 80018ae:	61d3      	str	r3, [r2, #28]
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80018b0:	6822      	ldr	r2, [r4, #0]
 80018b2:	4b1b      	ldr	r3, [pc, #108]	@ (8001920 <HAL_I2S_Init+0x194>)
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d015      	beq.n	80018e4 <HAL_I2S_Init+0x158>
 80018b8:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80018bc:	2302      	movs	r3, #2
 80018be:	6213      	str	r3, [r2, #32]
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80018c0:	6822      	ldr	r2, [r4, #0]
 80018c2:	4b17      	ldr	r3, [pc, #92]	@ (8001920 <HAL_I2S_Init+0x194>)
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d00f      	beq.n	80018e8 <HAL_I2S_Init+0x15c>
 80018c8:	f04f 2540 	mov.w	r5, #1073758208	@ 0x40004000
 80018cc:	69eb      	ldr	r3, [r5, #28]
 80018ce:	b29b      	uxth	r3, r3
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80018d0:	6862      	ldr	r2, [r4, #4]
 80018d2:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 80018d6:	d009      	beq.n	80018ec <HAL_I2S_Init+0x160>
 80018d8:	b9ba      	cbnz	r2, 800190a <HAL_I2S_Init+0x17e>
      tmp = I2S_MODE_SLAVE_RX;
 80018da:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80018de:	e007      	b.n	80018f0 <HAL_I2S_Init+0x164>
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80018e0:	4a10      	ldr	r2, [pc, #64]	@ (8001924 <HAL_I2S_Init+0x198>)
 80018e2:	e7df      	b.n	80018a4 <HAL_I2S_Init+0x118>
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80018e4:	4a0f      	ldr	r2, [pc, #60]	@ (8001924 <HAL_I2S_Init+0x198>)
 80018e6:	e7e9      	b.n	80018bc <HAL_I2S_Init+0x130>
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80018e8:	4d0e      	ldr	r5, [pc, #56]	@ (8001924 <HAL_I2S_Init+0x198>)
 80018ea:	e7ef      	b.n	80018cc <HAL_I2S_Init+0x140>
      tmp = I2S_MODE_SLAVE_RX;
 80018ec:	f44f 7080 	mov.w	r0, #256	@ 0x100
                         (uint16_t)hi2s->Init.Standard   | \
 80018f0:	f8b4 c008 	ldrh.w	ip, [r4, #8]
                         (uint16_t)hi2s->Init.DataFormat | \
 80018f4:	89a1      	ldrh	r1, [r4, #12]
                         (uint16_t)hi2s->Init.CPOL);
 80018f6:	8b22      	ldrh	r2, [r4, #24]
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80018f8:	ea40 000c 	orr.w	r0, r0, ip
 80018fc:	4301      	orrs	r1, r0
 80018fe:	430a      	orrs	r2, r1
 8001900:	4313      	orrs	r3, r2
 8001902:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001906:	61eb      	str	r3, [r5, #28]
 8001908:	e795      	b.n	8001836 <HAL_I2S_Init+0xaa>
      tmp = I2S_MODE_SLAVE_TX;
 800190a:	2000      	movs	r0, #0
 800190c:	e7f0      	b.n	80018f0 <HAL_I2S_Init+0x164>
    return HAL_ERROR;
 800190e:	2001      	movs	r0, #1
}
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	cccccccd 	.word	0xcccccccd
 8001918:	08001a9f 	.word	0x08001a9f
 800191c:	08001cd9 	.word	0x08001cd9
 8001920:	40003800 	.word	0x40003800
 8001924:	40003400 	.word	0x40003400

08001928 <HAL_I2S_Transmit_DMA>:
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8001928:	2900      	cmp	r1, #0
 800192a:	d059      	beq.n	80019e0 <HAL_I2S_Transmit_DMA+0xb8>
{
 800192c:	b538      	push	{r3, r4, r5, lr}
 800192e:	4604      	mov	r4, r0
  if ((pData == NULL) || (Size == 0U))
 8001930:	2a00      	cmp	r2, #0
 8001932:	d057      	beq.n	80019e4 <HAL_I2S_Transmit_DMA+0xbc>
  {
    return  HAL_ERROR;
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 8001934:	f894 5041 	ldrb.w	r5, [r4, #65]	@ 0x41
 8001938:	b2ed      	uxtb	r5, r5
 800193a:	2d01      	cmp	r5, #1
 800193c:	d154      	bne.n	80019e8 <HAL_I2S_Transmit_DMA+0xc0>
  {
    return HAL_BUSY;
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800193e:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8001942:	b2db      	uxtb	r3, r3
 8001944:	2b01      	cmp	r3, #1
 8001946:	d051      	beq.n	80019ec <HAL_I2S_Transmit_DMA+0xc4>
 8001948:	2301      	movs	r3, #1
 800194a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 800194e:	2303      	movs	r3, #3
 8001950:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001954:	2300      	movs	r3, #0
 8001956:	6463      	str	r3, [r4, #68]	@ 0x44
  hi2s->pTxBuffPtr = pData;
 8001958:	6261      	str	r1, [r4, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800195a:	6823      	ldr	r3, [r4, #0]
 800195c:	69db      	ldr	r3, [r3, #28]
 800195e:	f003 0307 	and.w	r3, r3, #7

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8001962:	2b03      	cmp	r3, #3
 8001964:	d004      	beq.n	8001970 <HAL_I2S_Transmit_DMA+0x48>
 8001966:	2b05      	cmp	r3, #5
 8001968:	d002      	beq.n	8001970 <HAL_I2S_Transmit_DMA+0x48>
    hi2s->TxXferSize = (Size << 1U);
    hi2s->TxXferCount = (Size << 1U);
  }
  else
  {
    hi2s->TxXferSize = Size;
 800196a:	8522      	strh	r2, [r4, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 800196c:	8562      	strh	r2, [r4, #42]	@ 0x2a
 800196e:	e003      	b.n	8001978 <HAL_I2S_Transmit_DMA+0x50>
    hi2s->TxXferSize = (Size << 1U);
 8001970:	0052      	lsls	r2, r2, #1
 8001972:	b292      	uxth	r2, r2
 8001974:	8522      	strh	r2, [r4, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 8001976:	8562      	strh	r2, [r4, #42]	@ 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8001978:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800197a:	4a1d      	ldr	r2, [pc, #116]	@ (80019f0 <HAL_I2S_Transmit_DMA+0xc8>)
 800197c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 800197e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8001980:	4a1c      	ldr	r2, [pc, #112]	@ (80019f4 <HAL_I2S_Transmit_DMA+0xcc>)
 8001982:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8001984:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8001986:	4a1c      	ldr	r2, [pc, #112]	@ (80019f8 <HAL_I2S_Transmit_DMA+0xd0>)
 8001988:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
                                 (uint32_t)hi2s->pTxBuffPtr,
                                 (uint32_t)&hi2s->Instance->DR,
 800198a:	6822      	ldr	r2, [r4, #0]
                                 hi2s->TxXferSize))
 800198c:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800198e:	b29b      	uxth	r3, r3
 8001990:	320c      	adds	r2, #12
 8001992:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8001994:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8001996:	f7ff fdc1 	bl	800151c <HAL_DMA_Start_IT>
 800199a:	b9a8      	cbnz	r0, 80019c8 <HAL_I2S_Transmit_DMA+0xa0>

    __HAL_UNLOCK(hi2s);
    return HAL_ERROR;
  }

  __HAL_UNLOCK(hi2s);
 800199c:	2300      	movs	r3, #0
 800199e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 80019a2:	6823      	ldr	r3, [r4, #0]
 80019a4:	685a      	ldr	r2, [r3, #4]
 80019a6:	f012 0f02 	tst.w	r2, #2
 80019aa:	d103      	bne.n	80019b4 <HAL_I2S_Transmit_DMA+0x8c>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80019ac:	685a      	ldr	r2, [r3, #4]
 80019ae:	f042 0202 	orr.w	r2, r2, #2
 80019b2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 80019b4:	6823      	ldr	r3, [r4, #0]
 80019b6:	69da      	ldr	r2, [r3, #28]
 80019b8:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 80019bc:	d113      	bne.n	80019e6 <HAL_I2S_Transmit_DMA+0xbe>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80019be:	69da      	ldr	r2, [r3, #28]
 80019c0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80019c4:	61da      	str	r2, [r3, #28]
 80019c6:	e00e      	b.n	80019e6 <HAL_I2S_Transmit_DMA+0xbe>
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80019c8:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80019ca:	f043 0308 	orr.w	r3, r3, #8
 80019ce:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 80019d0:	2301      	movs	r3, #1
 80019d2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2s);
 80019d6:	2300      	movs	r3, #0
 80019d8:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    return HAL_ERROR;
 80019dc:	4628      	mov	r0, r5
 80019de:	e002      	b.n	80019e6 <HAL_I2S_Transmit_DMA+0xbe>
    return  HAL_ERROR;
 80019e0:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 80019e2:	4770      	bx	lr
    return  HAL_ERROR;
 80019e4:	2001      	movs	r0, #1
}
 80019e6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_BUSY;
 80019e8:	2002      	movs	r0, #2
 80019ea:	e7fc      	b.n	80019e6 <HAL_I2S_Transmit_DMA+0xbe>
  __HAL_LOCK(hi2s);
 80019ec:	2002      	movs	r0, #2
 80019ee:	e7fa      	b.n	80019e6 <HAL_I2S_Transmit_DMA+0xbe>
 80019f0:	080019fd 	.word	0x080019fd
 80019f4:	08001a3f 	.word	0x08001a3f
 80019f8:	08001b6f 	.word	0x08001b6f

080019fc <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80019fc:	b508      	push	{r3, lr}

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 80019fe:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 8001a00:	f7fe ff50 	bl	80008a4 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8001a04:	bd08      	pop	{r3, pc}

08001a06 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001a06:	b508      	push	{r3, lr}
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001a08:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 8001a0a:	6803      	ldr	r3, [r0, #0]
 8001a0c:	8812      	ldrh	r2, [r2, #0]
 8001a0e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8001a10:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8001a12:	3302      	adds	r3, #2
 8001a14:	6243      	str	r3, [r0, #36]	@ 0x24
  hi2s->TxXferCount--;
 8001a16:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8001a18:	b29b      	uxth	r3, r3
 8001a1a:	3b01      	subs	r3, #1
 8001a1c:	b29b      	uxth	r3, r3
 8001a1e:	8543      	strh	r3, [r0, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8001a20:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	b103      	cbz	r3, 8001a28 <I2S_Transmit_IT+0x22>
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001a26:	bd08      	pop	{r3, pc}
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001a28:	6802      	ldr	r2, [r0, #0]
 8001a2a:	6853      	ldr	r3, [r2, #4]
 8001a2c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8001a30:	6053      	str	r3, [r2, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8001a32:	2301      	movs	r3, #1
 8001a34:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    HAL_I2S_TxCpltCallback(hi2s);
 8001a38:	f7fe ff44 	bl	80008c4 <HAL_I2S_TxCpltCallback>
}
 8001a3c:	e7f3      	b.n	8001a26 <I2S_Transmit_IT+0x20>

08001a3e <I2S_DMATxCplt>:
{
 8001a3e:	b508      	push	{r3, lr}
 8001a40:	4603      	mov	r3, r0
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8001a42:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  if (hdma->Init.Mode == DMA_NORMAL)
 8001a44:	69db      	ldr	r3, [r3, #28]
 8001a46:	b94b      	cbnz	r3, 8001a5c <I2S_DMATxCplt+0x1e>
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8001a48:	6802      	ldr	r2, [r0, #0]
 8001a4a:	6853      	ldr	r3, [r2, #4]
 8001a4c:	f023 0302 	bic.w	r3, r3, #2
 8001a50:	6053      	str	r3, [r2, #4]
    hi2s->TxXferCount = 0U;
 8001a52:	2300      	movs	r3, #0
 8001a54:	8543      	strh	r3, [r0, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8001a56:	2301      	movs	r3, #1
 8001a58:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
  HAL_I2S_TxCpltCallback(hi2s);
 8001a5c:	f7fe ff32 	bl	80008c4 <HAL_I2S_TxCpltCallback>
}
 8001a60:	bd08      	pop	{r3, pc}

08001a62 <HAL_I2S_RxCpltCallback>:
}
 8001a62:	4770      	bx	lr

08001a64 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8001a64:	b508      	push	{r3, lr}
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001a66:	6803      	ldr	r3, [r0, #0]
 8001a68:	68da      	ldr	r2, [r3, #12]
 8001a6a:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001a6c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8001a6e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001a70:	3302      	adds	r3, #2
 8001a72:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8001a74:	8e43      	ldrh	r3, [r0, #50]	@ 0x32
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	3b01      	subs	r3, #1
 8001a7a:	b29b      	uxth	r3, r3
 8001a7c:	8643      	strh	r3, [r0, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8001a7e:	8e43      	ldrh	r3, [r0, #50]	@ 0x32
 8001a80:	b29b      	uxth	r3, r3
 8001a82:	b103      	cbz	r3, 8001a86 <I2S_Receive_IT+0x22>
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001a84:	bd08      	pop	{r3, pc}
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001a86:	6802      	ldr	r2, [r0, #0]
 8001a88:	6853      	ldr	r3, [r2, #4]
 8001a8a:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 8001a8e:	6053      	str	r3, [r2, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8001a90:	2301      	movs	r3, #1
 8001a92:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    HAL_I2S_RxCpltCallback(hi2s);
 8001a96:	f7ff ffe4 	bl	8001a62 <HAL_I2S_RxCpltCallback>
}
 8001a9a:	e7f3      	b.n	8001a84 <I2S_Receive_IT+0x20>

08001a9c <HAL_I2S_ErrorCallback>:
}
 8001a9c:	4770      	bx	lr

08001a9e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001a9e:	b510      	push	{r4, lr}
 8001aa0:	b084      	sub	sp, #16
 8001aa2:	4604      	mov	r4, r0
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001aa4:	6802      	ldr	r2, [r0, #0]
 8001aa6:	6893      	ldr	r3, [r2, #8]
 8001aa8:	9303      	str	r3, [sp, #12]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001aaa:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	2b04      	cmp	r3, #4
 8001ab2:	d006      	beq.n	8001ac2 <I2S_IRQHandler+0x24>
      HAL_I2S_ErrorCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001ab4:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	2b03      	cmp	r3, #3
 8001abc:	d02c      	beq.n	8001b18 <I2S_IRQHandler+0x7a>
#else
      HAL_I2S_ErrorCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001abe:	b004      	add	sp, #16
 8001ac0:	bd10      	pop	{r4, pc}
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001ac2:	9b03      	ldr	r3, [sp, #12]
 8001ac4:	f013 0f01 	tst.w	r3, #1
 8001ac8:	d003      	beq.n	8001ad2 <I2S_IRQHandler+0x34>
 8001aca:	6853      	ldr	r3, [r2, #4]
 8001acc:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8001ad0:	d11f      	bne.n	8001b12 <I2S_IRQHandler+0x74>
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001ad2:	9b03      	ldr	r3, [sp, #12]
 8001ad4:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8001ad8:	d0ec      	beq.n	8001ab4 <I2S_IRQHandler+0x16>
 8001ada:	6823      	ldr	r3, [r4, #0]
 8001adc:	685a      	ldr	r2, [r3, #4]
 8001ade:	f012 0f20 	tst.w	r2, #32
 8001ae2:	d0e7      	beq.n	8001ab4 <I2S_IRQHandler+0x16>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001ae4:	685a      	ldr	r2, [r3, #4]
 8001ae6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001aea:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001aec:	2300      	movs	r3, #0
 8001aee:	9301      	str	r3, [sp, #4]
 8001af0:	6823      	ldr	r3, [r4, #0]
 8001af2:	68da      	ldr	r2, [r3, #12]
 8001af4:	9201      	str	r2, [sp, #4]
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	9301      	str	r3, [sp, #4]
 8001afa:	9b01      	ldr	r3, [sp, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8001afc:	2301      	movs	r3, #1
 8001afe:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001b02:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8001b04:	f043 0302 	orr.w	r3, r3, #2
 8001b08:	6463      	str	r3, [r4, #68]	@ 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8001b0a:	4620      	mov	r0, r4
 8001b0c:	f7ff ffc6 	bl	8001a9c <HAL_I2S_ErrorCallback>
 8001b10:	e7d0      	b.n	8001ab4 <I2S_IRQHandler+0x16>
      I2S_Receive_IT(hi2s);
 8001b12:	f7ff ffa7 	bl	8001a64 <I2S_Receive_IT>
 8001b16:	e7dc      	b.n	8001ad2 <I2S_IRQHandler+0x34>
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001b18:	9b03      	ldr	r3, [sp, #12]
 8001b1a:	f013 0f02 	tst.w	r3, #2
 8001b1e:	d004      	beq.n	8001b2a <I2S_IRQHandler+0x8c>
 8001b20:	6823      	ldr	r3, [r4, #0]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001b28:	d11d      	bne.n	8001b66 <I2S_IRQHandler+0xc8>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001b2a:	9b03      	ldr	r3, [sp, #12]
 8001b2c:	f013 0f08 	tst.w	r3, #8
 8001b30:	d0c5      	beq.n	8001abe <I2S_IRQHandler+0x20>
 8001b32:	6823      	ldr	r3, [r4, #0]
 8001b34:	685a      	ldr	r2, [r3, #4]
 8001b36:	f012 0f20 	tst.w	r2, #32
 8001b3a:	d0c0      	beq.n	8001abe <I2S_IRQHandler+0x20>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001b3c:	685a      	ldr	r2, [r3, #4]
 8001b3e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8001b42:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001b44:	2300      	movs	r3, #0
 8001b46:	9302      	str	r3, [sp, #8]
 8001b48:	6823      	ldr	r3, [r4, #0]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	9302      	str	r3, [sp, #8]
 8001b4e:	9b02      	ldr	r3, [sp, #8]
      hi2s->State = HAL_I2S_STATE_READY;
 8001b50:	2301      	movs	r3, #1
 8001b52:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001b56:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8001b58:	f043 0304 	orr.w	r3, r3, #4
 8001b5c:	6463      	str	r3, [r4, #68]	@ 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8001b5e:	4620      	mov	r0, r4
 8001b60:	f7ff ff9c 	bl	8001a9c <HAL_I2S_ErrorCallback>
}
 8001b64:	e7ab      	b.n	8001abe <I2S_IRQHandler+0x20>
      I2S_Transmit_IT(hi2s);
 8001b66:	4620      	mov	r0, r4
 8001b68:	f7ff ff4d 	bl	8001a06 <I2S_Transmit_IT>
 8001b6c:	e7dd      	b.n	8001b2a <I2S_IRQHandler+0x8c>

08001b6e <I2S_DMAError>:
{
 8001b6e:	b508      	push	{r3, lr}
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8001b70:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8001b72:	6802      	ldr	r2, [r0, #0]
 8001b74:	6853      	ldr	r3, [r2, #4]
 8001b76:	f023 0303 	bic.w	r3, r3, #3
 8001b7a:	6053      	str	r3, [r2, #4]
  hi2s->TxXferCount = 0U;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	8543      	strh	r3, [r0, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 8001b80:	8643      	strh	r3, [r0, #50]	@ 0x32
  hi2s->State = HAL_I2S_STATE_READY;
 8001b82:	2301      	movs	r3, #1
 8001b84:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8001b88:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8001b8a:	f043 0308 	orr.w	r3, r3, #8
 8001b8e:	6443      	str	r3, [r0, #68]	@ 0x44
  HAL_I2S_ErrorCallback(hi2s);
 8001b90:	f7ff ff84 	bl	8001a9c <HAL_I2S_ErrorCallback>
}
 8001b94:	bd08      	pop	{r3, pc}

08001b96 <HAL_I2SEx_TxRxCpltCallback>:
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8001b96:	4770      	bx	lr

08001b98 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8001b98:	b508      	push	{r3, lr}
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8001b9a:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8001b9c:	1c9a      	adds	r2, r3, #2
 8001b9e:	6242      	str	r2, [r0, #36]	@ 0x24
 8001ba0:	6802      	ldr	r2, [r0, #0]
 8001ba2:	881b      	ldrh	r3, [r3, #0]
 8001ba4:	60d3      	str	r3, [r2, #12]
  hi2s->TxXferCount--;
 8001ba6:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	3b01      	subs	r3, #1
 8001bac:	b29b      	uxth	r3, r3
 8001bae:	8543      	strh	r3, [r0, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8001bb0:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8001bb2:	b29b      	uxth	r3, r3
 8001bb4:	b93b      	cbnz	r3, 8001bc6 <I2SEx_TxISR_I2S+0x2e>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001bb6:	6802      	ldr	r2, [r0, #0]
 8001bb8:	6853      	ldr	r3, [r2, #4]
 8001bba:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8001bbe:	6053      	str	r3, [r2, #4]

    if (hi2s->RxXferCount == 0U)
 8001bc0:	8e43      	ldrh	r3, [r0, #50]	@ 0x32
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	b103      	cbz	r3, 8001bc8 <I2SEx_TxISR_I2S+0x30>
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001bc6:	bd08      	pop	{r3, pc}
      hi2s->State = HAL_I2S_STATE_READY;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001bce:	f7ff ffe2 	bl	8001b96 <HAL_I2SEx_TxRxCpltCallback>
}
 8001bd2:	e7f8      	b.n	8001bc6 <I2SEx_TxISR_I2S+0x2e>

08001bd4 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8001bd4:	b508      	push	{r3, lr}
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8001bd6:	6802      	ldr	r2, [r0, #0]
 8001bd8:	4b15      	ldr	r3, [pc, #84]	@ (8001c30 <I2SEx_RxISR_I2SExt+0x5c>)
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d01c      	beq.n	8001c18 <I2SEx_RxISR_I2SExt+0x44>
 8001bde:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001be2:	68da      	ldr	r2, [r3, #12]
 8001be4:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001be6:	1c99      	adds	r1, r3, #2
 8001be8:	62c1      	str	r1, [r0, #44]	@ 0x2c
 8001bea:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8001bec:	8e43      	ldrh	r3, [r0, #50]	@ 0x32
 8001bee:	b29b      	uxth	r3, r3
 8001bf0:	3b01      	subs	r3, #1
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	8643      	strh	r3, [r0, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8001bf6:	8e43      	ldrh	r3, [r0, #50]	@ 0x32
 8001bf8:	b29b      	uxth	r3, r3
 8001bfa:	b963      	cbnz	r3, 8001c16 <I2SEx_RxISR_I2SExt+0x42>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001bfc:	6802      	ldr	r2, [r0, #0]
 8001bfe:	4b0c      	ldr	r3, [pc, #48]	@ (8001c30 <I2SEx_RxISR_I2SExt+0x5c>)
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d00c      	beq.n	8001c1e <I2SEx_RxISR_I2SExt+0x4a>
 8001c04:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8001c08:	6853      	ldr	r3, [r2, #4]
 8001c0a:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 8001c0e:	6053      	str	r3, [r2, #4]

    if (hi2s->TxXferCount == 0U)
 8001c10:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	b12b      	cbz	r3, 8001c22 <I2SEx_RxISR_I2SExt+0x4e>
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001c16:	bd08      	pop	{r3, pc}
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8001c18:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8001c1c:	e7e1      	b.n	8001be2 <I2SEx_RxISR_I2SExt+0xe>
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001c1e:	4a05      	ldr	r2, [pc, #20]	@ (8001c34 <I2SEx_RxISR_I2SExt+0x60>)
 8001c20:	e7f2      	b.n	8001c08 <I2SEx_RxISR_I2SExt+0x34>
      hi2s->State = HAL_I2S_STATE_READY;
 8001c22:	2301      	movs	r3, #1
 8001c24:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001c28:	f7ff ffb5 	bl	8001b96 <HAL_I2SEx_TxRxCpltCallback>
}
 8001c2c:	e7f3      	b.n	8001c16 <I2SEx_RxISR_I2SExt+0x42>
 8001c2e:	bf00      	nop
 8001c30:	40003800 	.word	0x40003800
 8001c34:	40003400 	.word	0x40003400

08001c38 <I2SEx_TxISR_I2SExt>:
{
 8001c38:	b508      	push	{r3, lr}
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8001c3a:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8001c3c:	1c9a      	adds	r2, r3, #2
 8001c3e:	6242      	str	r2, [r0, #36]	@ 0x24
 8001c40:	881a      	ldrh	r2, [r3, #0]
 8001c42:	6801      	ldr	r1, [r0, #0]
 8001c44:	4b13      	ldr	r3, [pc, #76]	@ (8001c94 <I2SEx_TxISR_I2SExt+0x5c>)
 8001c46:	4299      	cmp	r1, r3
 8001c48:	d018      	beq.n	8001c7c <I2SEx_TxISR_I2SExt+0x44>
 8001c4a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001c4e:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8001c50:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8001c52:	b29b      	uxth	r3, r3
 8001c54:	3b01      	subs	r3, #1
 8001c56:	b29b      	uxth	r3, r3
 8001c58:	8543      	strh	r3, [r0, #42]	@ 0x2a
  if (hi2s->TxXferCount == 0U)
 8001c5a:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8001c5c:	b29b      	uxth	r3, r3
 8001c5e:	b963      	cbnz	r3, 8001c7a <I2SEx_TxISR_I2SExt+0x42>
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001c60:	6802      	ldr	r2, [r0, #0]
 8001c62:	4b0c      	ldr	r3, [pc, #48]	@ (8001c94 <I2SEx_TxISR_I2SExt+0x5c>)
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d00c      	beq.n	8001c82 <I2SEx_TxISR_I2SExt+0x4a>
 8001c68:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8001c6c:	6853      	ldr	r3, [r2, #4]
 8001c6e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8001c72:	6053      	str	r3, [r2, #4]
    if (hi2s->RxXferCount == 0U)
 8001c74:	8e43      	ldrh	r3, [r0, #50]	@ 0x32
 8001c76:	b29b      	uxth	r3, r3
 8001c78:	b12b      	cbz	r3, 8001c86 <I2SEx_TxISR_I2SExt+0x4e>
}
 8001c7a:	bd08      	pop	{r3, pc}
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8001c7c:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8001c80:	e7e5      	b.n	8001c4e <I2SEx_TxISR_I2SExt+0x16>
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001c82:	4a05      	ldr	r2, [pc, #20]	@ (8001c98 <I2SEx_TxISR_I2SExt+0x60>)
 8001c84:	e7f2      	b.n	8001c6c <I2SEx_TxISR_I2SExt+0x34>
      hi2s->State = HAL_I2S_STATE_READY;
 8001c86:	2301      	movs	r3, #1
 8001c88:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001c8c:	f7ff ff83 	bl	8001b96 <HAL_I2SEx_TxRxCpltCallback>
}
 8001c90:	e7f3      	b.n	8001c7a <I2SEx_TxISR_I2SExt+0x42>
 8001c92:	bf00      	nop
 8001c94:	40003800 	.word	0x40003800
 8001c98:	40003400 	.word	0x40003400

08001c9c <I2SEx_RxISR_I2S>:
{
 8001c9c:	b508      	push	{r3, lr}
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8001c9e:	6803      	ldr	r3, [r0, #0]
 8001ca0:	68da      	ldr	r2, [r3, #12]
 8001ca2:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001ca4:	1c99      	adds	r1, r3, #2
 8001ca6:	62c1      	str	r1, [r0, #44]	@ 0x2c
 8001ca8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8001caa:	8e43      	ldrh	r3, [r0, #50]	@ 0x32
 8001cac:	b29b      	uxth	r3, r3
 8001cae:	3b01      	subs	r3, #1
 8001cb0:	b29b      	uxth	r3, r3
 8001cb2:	8643      	strh	r3, [r0, #50]	@ 0x32
  if (hi2s->RxXferCount == 0U)
 8001cb4:	8e43      	ldrh	r3, [r0, #50]	@ 0x32
 8001cb6:	b29b      	uxth	r3, r3
 8001cb8:	b93b      	cbnz	r3, 8001cca <I2SEx_RxISR_I2S+0x2e>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001cba:	6802      	ldr	r2, [r0, #0]
 8001cbc:	6853      	ldr	r3, [r2, #4]
 8001cbe:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 8001cc2:	6053      	str	r3, [r2, #4]
    if (hi2s->TxXferCount == 0U)
 8001cc4:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8001cc6:	b29b      	uxth	r3, r3
 8001cc8:	b103      	cbz	r3, 8001ccc <I2SEx_RxISR_I2S+0x30>
}
 8001cca:	bd08      	pop	{r3, pc}
      hi2s->State = HAL_I2S_STATE_READY;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001cd2:	f7ff ff60 	bl	8001b96 <HAL_I2SEx_TxRxCpltCallback>
}
 8001cd6:	e7f8      	b.n	8001cca <I2SEx_RxISR_I2S+0x2e>

08001cd8 <HAL_I2SEx_FullDuplex_IRQHandler>:
{
 8001cd8:	b510      	push	{r4, lr}
 8001cda:	b086      	sub	sp, #24
 8001cdc:	4604      	mov	r4, r0
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001cde:	6803      	ldr	r3, [r0, #0]
 8001ce0:	689a      	ldr	r2, [r3, #8]
 8001ce2:	9205      	str	r2, [sp, #20]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001ce4:	4a70      	ldr	r2, [pc, #448]	@ (8001ea8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d06f      	beq.n	8001dca <HAL_I2SEx_FullDuplex_IRQHandler+0xf2>
 8001cea:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8001cee:	6891      	ldr	r1, [r2, #8]
 8001cf0:	9104      	str	r1, [sp, #16]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	9303      	str	r3, [sp, #12]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8001cf6:	6853      	ldr	r3, [r2, #4]
 8001cf8:	9302      	str	r3, [sp, #8]
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001cfa:	6863      	ldr	r3, [r4, #4]
 8001cfc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001d00:	d001      	beq.n	8001d06 <HAL_I2SEx_FullDuplex_IRQHandler+0x2e>
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d170      	bne.n	8001de8 <HAL_I2SEx_FullDuplex_IRQHandler+0x110>
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8001d06:	9b05      	ldr	r3, [sp, #20]
 8001d08:	f013 0f02 	tst.w	r3, #2
 8001d0c:	d003      	beq.n	8001d16 <HAL_I2SEx_FullDuplex_IRQHandler+0x3e>
 8001d0e:	9b03      	ldr	r3, [sp, #12]
 8001d10:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001d14:	d15c      	bne.n	8001dd0 <HAL_I2SEx_FullDuplex_IRQHandler+0xf8>
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8001d16:	9b04      	ldr	r3, [sp, #16]
 8001d18:	f013 0f01 	tst.w	r3, #1
 8001d1c:	d003      	beq.n	8001d26 <HAL_I2SEx_FullDuplex_IRQHandler+0x4e>
 8001d1e:	9b02      	ldr	r3, [sp, #8]
 8001d20:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8001d24:	d158      	bne.n	8001dd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x100>
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001d26:	9b04      	ldr	r3, [sp, #16]
 8001d28:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8001d2c:	d024      	beq.n	8001d78 <HAL_I2SEx_FullDuplex_IRQHandler+0xa0>
 8001d2e:	9b02      	ldr	r3, [sp, #8]
 8001d30:	f013 0f20 	tst.w	r3, #32
 8001d34:	d020      	beq.n	8001d78 <HAL_I2SEx_FullDuplex_IRQHandler+0xa0>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001d36:	6822      	ldr	r2, [r4, #0]
 8001d38:	4b5b      	ldr	r3, [pc, #364]	@ (8001ea8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>)
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d050      	beq.n	8001de0 <HAL_I2SEx_FullDuplex_IRQHandler+0x108>
 8001d3e:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8001d42:	6853      	ldr	r3, [r2, #4]
 8001d44:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 8001d48:	6053      	str	r3, [r2, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001d4a:	6822      	ldr	r2, [r4, #0]
 8001d4c:	6853      	ldr	r3, [r2, #4]
 8001d4e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8001d52:	6053      	str	r3, [r2, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001d54:	2300      	movs	r3, #0
 8001d56:	9300      	str	r3, [sp, #0]
 8001d58:	6823      	ldr	r3, [r4, #0]
 8001d5a:	68da      	ldr	r2, [r3, #12]
 8001d5c:	9200      	str	r2, [sp, #0]
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	9300      	str	r3, [sp, #0]
 8001d62:	9b00      	ldr	r3, [sp, #0]
      hi2s->State = HAL_I2S_STATE_READY;
 8001d64:	2301      	movs	r3, #1
 8001d66:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001d6a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8001d6c:	f043 0302 	orr.w	r3, r3, #2
 8001d70:	6463      	str	r3, [r4, #68]	@ 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8001d72:	4620      	mov	r0, r4
 8001d74:	f7ff fe92 	bl	8001a9c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001d78:	9b05      	ldr	r3, [sp, #20]
 8001d7a:	f013 0f08 	tst.w	r3, #8
 8001d7e:	d022      	beq.n	8001dc6 <HAL_I2SEx_FullDuplex_IRQHandler+0xee>
 8001d80:	9b03      	ldr	r3, [sp, #12]
 8001d82:	f013 0f20 	tst.w	r3, #32
 8001d86:	d01e      	beq.n	8001dc6 <HAL_I2SEx_FullDuplex_IRQHandler+0xee>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001d88:	6822      	ldr	r2, [r4, #0]
 8001d8a:	6853      	ldr	r3, [r2, #4]
 8001d8c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8001d90:	6053      	str	r3, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001d92:	6822      	ldr	r2, [r4, #0]
 8001d94:	4b44      	ldr	r3, [pc, #272]	@ (8001ea8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>)
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d024      	beq.n	8001de4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8001d9a:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8001d9e:	6853      	ldr	r3, [r2, #4]
 8001da0:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 8001da4:	6053      	str	r3, [r2, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001da6:	2300      	movs	r3, #0
 8001da8:	9301      	str	r3, [sp, #4]
 8001daa:	6823      	ldr	r3, [r4, #0]
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	9301      	str	r3, [sp, #4]
 8001db0:	9b01      	ldr	r3, [sp, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8001db2:	2301      	movs	r3, #1
 8001db4:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001db8:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8001dba:	f043 0304 	orr.w	r3, r3, #4
 8001dbe:	6463      	str	r3, [r4, #68]	@ 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8001dc0:	4620      	mov	r0, r4
 8001dc2:	f7ff fe6b 	bl	8001a9c <HAL_I2S_ErrorCallback>
}
 8001dc6:	b006      	add	sp, #24
 8001dc8:	bd10      	pop	{r4, pc}
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001dca:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8001dce:	e78e      	b.n	8001cee <HAL_I2SEx_FullDuplex_IRQHandler+0x16>
      I2SEx_TxISR_I2S(hi2s);
 8001dd0:	4620      	mov	r0, r4
 8001dd2:	f7ff fee1 	bl	8001b98 <I2SEx_TxISR_I2S>
 8001dd6:	e79e      	b.n	8001d16 <HAL_I2SEx_FullDuplex_IRQHandler+0x3e>
      I2SEx_RxISR_I2SExt(hi2s);
 8001dd8:	4620      	mov	r0, r4
 8001dda:	f7ff fefb 	bl	8001bd4 <I2SEx_RxISR_I2SExt>
 8001dde:	e7a2      	b.n	8001d26 <HAL_I2SEx_FullDuplex_IRQHandler+0x4e>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001de0:	4a32      	ldr	r2, [pc, #200]	@ (8001eac <HAL_I2SEx_FullDuplex_IRQHandler+0x1d4>)
 8001de2:	e7ae      	b.n	8001d42 <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001de4:	4a31      	ldr	r2, [pc, #196]	@ (8001eac <HAL_I2SEx_FullDuplex_IRQHandler+0x1d4>)
 8001de6:	e7da      	b.n	8001d9e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8001de8:	9b04      	ldr	r3, [sp, #16]
 8001dea:	f013 0f02 	tst.w	r3, #2
 8001dee:	d003      	beq.n	8001df8 <HAL_I2SEx_FullDuplex_IRQHandler+0x120>
 8001df0:	9b02      	ldr	r3, [sp, #8]
 8001df2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001df6:	d14a      	bne.n	8001e8e <HAL_I2SEx_FullDuplex_IRQHandler+0x1b6>
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8001df8:	9b05      	ldr	r3, [sp, #20]
 8001dfa:	f013 0f01 	tst.w	r3, #1
 8001dfe:	d003      	beq.n	8001e08 <HAL_I2SEx_FullDuplex_IRQHandler+0x130>
 8001e00:	9b03      	ldr	r3, [sp, #12]
 8001e02:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8001e06:	d146      	bne.n	8001e96 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001e08:	9b05      	ldr	r3, [sp, #20]
 8001e0a:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8001e0e:	d01c      	beq.n	8001e4a <HAL_I2SEx_FullDuplex_IRQHandler+0x172>
 8001e10:	9b03      	ldr	r3, [sp, #12]
 8001e12:	f013 0f20 	tst.w	r3, #32
 8001e16:	d018      	beq.n	8001e4a <HAL_I2SEx_FullDuplex_IRQHandler+0x172>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001e18:	6822      	ldr	r2, [r4, #0]
 8001e1a:	6853      	ldr	r3, [r2, #4]
 8001e1c:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 8001e20:	6053      	str	r3, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001e22:	6822      	ldr	r2, [r4, #0]
 8001e24:	4b20      	ldr	r3, [pc, #128]	@ (8001ea8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>)
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d039      	beq.n	8001e9e <HAL_I2SEx_FullDuplex_IRQHandler+0x1c6>
 8001e2a:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8001e2e:	6853      	ldr	r3, [r2, #4]
 8001e30:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8001e34:	6053      	str	r3, [r2, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8001e36:	2301      	movs	r3, #1
 8001e38:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001e3c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8001e3e:	f043 0302 	orr.w	r3, r3, #2
 8001e42:	6463      	str	r3, [r4, #68]	@ 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8001e44:	4620      	mov	r0, r4
 8001e46:	f7ff fe29 	bl	8001a9c <HAL_I2S_ErrorCallback>
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001e4a:	9b04      	ldr	r3, [sp, #16]
 8001e4c:	f013 0f08 	tst.w	r3, #8
 8001e50:	d0b9      	beq.n	8001dc6 <HAL_I2SEx_FullDuplex_IRQHandler+0xee>
 8001e52:	9b02      	ldr	r3, [sp, #8]
 8001e54:	f013 0f20 	tst.w	r3, #32
 8001e58:	d0b5      	beq.n	8001dc6 <HAL_I2SEx_FullDuplex_IRQHandler+0xee>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001e5a:	6822      	ldr	r2, [r4, #0]
 8001e5c:	4b12      	ldr	r3, [pc, #72]	@ (8001ea8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>)
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d01f      	beq.n	8001ea2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1ca>
 8001e62:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8001e66:	6853      	ldr	r3, [r2, #4]
 8001e68:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8001e6c:	6053      	str	r3, [r2, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001e6e:	6822      	ldr	r2, [r4, #0]
 8001e70:	6853      	ldr	r3, [r2, #4]
 8001e72:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 8001e76:	6053      	str	r3, [r2, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001e7e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8001e80:	f043 0304 	orr.w	r3, r3, #4
 8001e84:	6463      	str	r3, [r4, #68]	@ 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8001e86:	4620      	mov	r0, r4
 8001e88:	f7ff fe08 	bl	8001a9c <HAL_I2S_ErrorCallback>
}
 8001e8c:	e79b      	b.n	8001dc6 <HAL_I2SEx_FullDuplex_IRQHandler+0xee>
      I2SEx_TxISR_I2SExt(hi2s);
 8001e8e:	4620      	mov	r0, r4
 8001e90:	f7ff fed2 	bl	8001c38 <I2SEx_TxISR_I2SExt>
 8001e94:	e7b0      	b.n	8001df8 <HAL_I2SEx_FullDuplex_IRQHandler+0x120>
      I2SEx_RxISR_I2S(hi2s);
 8001e96:	4620      	mov	r0, r4
 8001e98:	f7ff ff00 	bl	8001c9c <I2SEx_RxISR_I2S>
 8001e9c:	e7b4      	b.n	8001e08 <HAL_I2SEx_FullDuplex_IRQHandler+0x130>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001e9e:	4a03      	ldr	r2, [pc, #12]	@ (8001eac <HAL_I2SEx_FullDuplex_IRQHandler+0x1d4>)
 8001ea0:	e7c5      	b.n	8001e2e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001ea2:	4a02      	ldr	r2, [pc, #8]	@ (8001eac <HAL_I2SEx_FullDuplex_IRQHandler+0x1d4>)
 8001ea4:	e7df      	b.n	8001e66 <HAL_I2SEx_FullDuplex_IRQHandler+0x18e>
 8001ea6:	bf00      	nop
 8001ea8:	40003800 	.word	0x40003800
 8001eac:	40003400 	.word	0x40003400

08001eb0 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001eb0:	2800      	cmp	r0, #0
 8001eb2:	f000 81e0 	beq.w	8002276 <HAL_RCC_OscConfig+0x3c6>
{
 8001eb6:	b570      	push	{r4, r5, r6, lr}
 8001eb8:	b082      	sub	sp, #8
 8001eba:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ebc:	6803      	ldr	r3, [r0, #0]
 8001ebe:	f013 0f01 	tst.w	r3, #1
 8001ec2:	d03b      	beq.n	8001f3c <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001ec4:	4b9f      	ldr	r3, [pc, #636]	@ (8002144 <HAL_RCC_OscConfig+0x294>)
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	f003 030c 	and.w	r3, r3, #12
 8001ecc:	2b04      	cmp	r3, #4
 8001ece:	d02c      	beq.n	8001f2a <HAL_RCC_OscConfig+0x7a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ed0:	4b9c      	ldr	r3, [pc, #624]	@ (8002144 <HAL_RCC_OscConfig+0x294>)
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001ed8:	2b08      	cmp	r3, #8
 8001eda:	d021      	beq.n	8001f20 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001edc:	6863      	ldr	r3, [r4, #4]
 8001ede:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ee2:	d04f      	beq.n	8001f84 <HAL_RCC_OscConfig+0xd4>
 8001ee4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ee8:	d052      	beq.n	8001f90 <HAL_RCC_OscConfig+0xe0>
 8001eea:	4b96      	ldr	r3, [pc, #600]	@ (8002144 <HAL_RCC_OscConfig+0x294>)
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001ef2:	601a      	str	r2, [r3, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001efa:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001efc:	6863      	ldr	r3, [r4, #4]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d050      	beq.n	8001fa4 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f02:	f7fe ff01 	bl	8000d08 <HAL_GetTick>
 8001f06:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f08:	4b8e      	ldr	r3, [pc, #568]	@ (8002144 <HAL_RCC_OscConfig+0x294>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8001f10:	d114      	bne.n	8001f3c <HAL_RCC_OscConfig+0x8c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f12:	f7fe fef9 	bl	8000d08 <HAL_GetTick>
 8001f16:	1b40      	subs	r0, r0, r5
 8001f18:	2864      	cmp	r0, #100	@ 0x64
 8001f1a:	d9f5      	bls.n	8001f08 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8001f1c:	2003      	movs	r0, #3
 8001f1e:	e1b1      	b.n	8002284 <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f20:	4b88      	ldr	r3, [pc, #544]	@ (8002144 <HAL_RCC_OscConfig+0x294>)
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8001f28:	d0d8      	beq.n	8001edc <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f2a:	4b86      	ldr	r3, [pc, #536]	@ (8002144 <HAL_RCC_OscConfig+0x294>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8001f32:	d003      	beq.n	8001f3c <HAL_RCC_OscConfig+0x8c>
 8001f34:	6863      	ldr	r3, [r4, #4]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	f000 819f 	beq.w	800227a <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f3c:	6823      	ldr	r3, [r4, #0]
 8001f3e:	f013 0f02 	tst.w	r3, #2
 8001f42:	d054      	beq.n	8001fee <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001f44:	4b7f      	ldr	r3, [pc, #508]	@ (8002144 <HAL_RCC_OscConfig+0x294>)
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	f013 0f0c 	tst.w	r3, #12
 8001f4c:	d03e      	beq.n	8001fcc <HAL_RCC_OscConfig+0x11c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f4e:	4b7d      	ldr	r3, [pc, #500]	@ (8002144 <HAL_RCC_OscConfig+0x294>)
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001f56:	2b08      	cmp	r3, #8
 8001f58:	d033      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001f5a:	68e3      	ldr	r3, [r4, #12]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d068      	beq.n	8002032 <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f60:	4b79      	ldr	r3, [pc, #484]	@ (8002148 <HAL_RCC_OscConfig+0x298>)
 8001f62:	2201      	movs	r2, #1
 8001f64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f66:	f7fe fecf 	bl	8000d08 <HAL_GetTick>
 8001f6a:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f6c:	4b75      	ldr	r3, [pc, #468]	@ (8002144 <HAL_RCC_OscConfig+0x294>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f013 0f02 	tst.w	r3, #2
 8001f74:	d154      	bne.n	8002020 <HAL_RCC_OscConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f76:	f7fe fec7 	bl	8000d08 <HAL_GetTick>
 8001f7a:	1b40      	subs	r0, r0, r5
 8001f7c:	2802      	cmp	r0, #2
 8001f7e:	d9f5      	bls.n	8001f6c <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8001f80:	2003      	movs	r0, #3
 8001f82:	e17f      	b.n	8002284 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f84:	4a6f      	ldr	r2, [pc, #444]	@ (8002144 <HAL_RCC_OscConfig+0x294>)
 8001f86:	6813      	ldr	r3, [r2, #0]
 8001f88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f8c:	6013      	str	r3, [r2, #0]
 8001f8e:	e7b5      	b.n	8001efc <HAL_RCC_OscConfig+0x4c>
 8001f90:	4b6c      	ldr	r3, [pc, #432]	@ (8002144 <HAL_RCC_OscConfig+0x294>)
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8001f98:	601a      	str	r2, [r3, #0]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001fa0:	601a      	str	r2, [r3, #0]
 8001fa2:	e7ab      	b.n	8001efc <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8001fa4:	f7fe feb0 	bl	8000d08 <HAL_GetTick>
 8001fa8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001faa:	4b66      	ldr	r3, [pc, #408]	@ (8002144 <HAL_RCC_OscConfig+0x294>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8001fb2:	d0c3      	beq.n	8001f3c <HAL_RCC_OscConfig+0x8c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fb4:	f7fe fea8 	bl	8000d08 <HAL_GetTick>
 8001fb8:	1b40      	subs	r0, r0, r5
 8001fba:	2864      	cmp	r0, #100	@ 0x64
 8001fbc:	d9f5      	bls.n	8001faa <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8001fbe:	2003      	movs	r0, #3
 8001fc0:	e160      	b.n	8002284 <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fc2:	4b60      	ldr	r3, [pc, #384]	@ (8002144 <HAL_RCC_OscConfig+0x294>)
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8001fca:	d1c6      	bne.n	8001f5a <HAL_RCC_OscConfig+0xaa>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fcc:	4b5d      	ldr	r3, [pc, #372]	@ (8002144 <HAL_RCC_OscConfig+0x294>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f013 0f02 	tst.w	r3, #2
 8001fd4:	d003      	beq.n	8001fde <HAL_RCC_OscConfig+0x12e>
 8001fd6:	68e3      	ldr	r3, [r4, #12]
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	f040 8150 	bne.w	800227e <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fde:	4a59      	ldr	r2, [pc, #356]	@ (8002144 <HAL_RCC_OscConfig+0x294>)
 8001fe0:	6813      	ldr	r3, [r2, #0]
 8001fe2:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8001fe6:	6921      	ldr	r1, [r4, #16]
 8001fe8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001fec:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fee:	6823      	ldr	r3, [r4, #0]
 8001ff0:	f013 0f08 	tst.w	r3, #8
 8001ff4:	d042      	beq.n	800207c <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001ff6:	6963      	ldr	r3, [r4, #20]
 8001ff8:	b36b      	cbz	r3, 8002056 <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ffa:	4b53      	ldr	r3, [pc, #332]	@ (8002148 <HAL_RCC_OscConfig+0x298>)
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002002:	f7fe fe81 	bl	8000d08 <HAL_GetTick>
 8002006:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002008:	4b4e      	ldr	r3, [pc, #312]	@ (8002144 <HAL_RCC_OscConfig+0x294>)
 800200a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800200c:	f013 0f02 	tst.w	r3, #2
 8002010:	d134      	bne.n	800207c <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002012:	f7fe fe79 	bl	8000d08 <HAL_GetTick>
 8002016:	1b40      	subs	r0, r0, r5
 8002018:	2802      	cmp	r0, #2
 800201a:	d9f5      	bls.n	8002008 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 800201c:	2003      	movs	r0, #3
 800201e:	e131      	b.n	8002284 <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002020:	4a48      	ldr	r2, [pc, #288]	@ (8002144 <HAL_RCC_OscConfig+0x294>)
 8002022:	6813      	ldr	r3, [r2, #0]
 8002024:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8002028:	6921      	ldr	r1, [r4, #16]
 800202a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800202e:	6013      	str	r3, [r2, #0]
 8002030:	e7dd      	b.n	8001fee <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 8002032:	4b45      	ldr	r3, [pc, #276]	@ (8002148 <HAL_RCC_OscConfig+0x298>)
 8002034:	2200      	movs	r2, #0
 8002036:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002038:	f7fe fe66 	bl	8000d08 <HAL_GetTick>
 800203c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800203e:	4b41      	ldr	r3, [pc, #260]	@ (8002144 <HAL_RCC_OscConfig+0x294>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f013 0f02 	tst.w	r3, #2
 8002046:	d0d2      	beq.n	8001fee <HAL_RCC_OscConfig+0x13e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002048:	f7fe fe5e 	bl	8000d08 <HAL_GetTick>
 800204c:	1b40      	subs	r0, r0, r5
 800204e:	2802      	cmp	r0, #2
 8002050:	d9f5      	bls.n	800203e <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 8002052:	2003      	movs	r0, #3
 8002054:	e116      	b.n	8002284 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002056:	4b3c      	ldr	r3, [pc, #240]	@ (8002148 <HAL_RCC_OscConfig+0x298>)
 8002058:	2200      	movs	r2, #0
 800205a:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800205e:	f7fe fe53 	bl	8000d08 <HAL_GetTick>
 8002062:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002064:	4b37      	ldr	r3, [pc, #220]	@ (8002144 <HAL_RCC_OscConfig+0x294>)
 8002066:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002068:	f013 0f02 	tst.w	r3, #2
 800206c:	d006      	beq.n	800207c <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800206e:	f7fe fe4b 	bl	8000d08 <HAL_GetTick>
 8002072:	1b40      	subs	r0, r0, r5
 8002074:	2802      	cmp	r0, #2
 8002076:	d9f5      	bls.n	8002064 <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 8002078:	2003      	movs	r0, #3
 800207a:	e103      	b.n	8002284 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800207c:	6823      	ldr	r3, [r4, #0]
 800207e:	f013 0f04 	tst.w	r3, #4
 8002082:	d077      	beq.n	8002174 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002084:	4b2f      	ldr	r3, [pc, #188]	@ (8002144 <HAL_RCC_OscConfig+0x294>)
 8002086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002088:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 800208c:	d133      	bne.n	80020f6 <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800208e:	2300      	movs	r3, #0
 8002090:	9301      	str	r3, [sp, #4]
 8002092:	4b2c      	ldr	r3, [pc, #176]	@ (8002144 <HAL_RCC_OscConfig+0x294>)
 8002094:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002096:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800209a:	641a      	str	r2, [r3, #64]	@ 0x40
 800209c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800209e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020a2:	9301      	str	r3, [sp, #4]
 80020a4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80020a6:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020a8:	4b28      	ldr	r3, [pc, #160]	@ (800214c <HAL_RCC_OscConfig+0x29c>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80020b0:	d023      	beq.n	80020fa <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020b2:	68a3      	ldr	r3, [r4, #8]
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d034      	beq.n	8002122 <HAL_RCC_OscConfig+0x272>
 80020b8:	2b05      	cmp	r3, #5
 80020ba:	d038      	beq.n	800212e <HAL_RCC_OscConfig+0x27e>
 80020bc:	4b21      	ldr	r3, [pc, #132]	@ (8002144 <HAL_RCC_OscConfig+0x294>)
 80020be:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80020c0:	f022 0201 	bic.w	r2, r2, #1
 80020c4:	671a      	str	r2, [r3, #112]	@ 0x70
 80020c6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80020c8:	f022 0204 	bic.w	r2, r2, #4
 80020cc:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020ce:	68a3      	ldr	r3, [r4, #8]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d03d      	beq.n	8002150 <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020d4:	f7fe fe18 	bl	8000d08 <HAL_GetTick>
 80020d8:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020da:	4b1a      	ldr	r3, [pc, #104]	@ (8002144 <HAL_RCC_OscConfig+0x294>)
 80020dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020de:	f013 0f02 	tst.w	r3, #2
 80020e2:	d146      	bne.n	8002172 <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020e4:	f7fe fe10 	bl	8000d08 <HAL_GetTick>
 80020e8:	1b80      	subs	r0, r0, r6
 80020ea:	f241 3388 	movw	r3, #5000	@ 0x1388
 80020ee:	4298      	cmp	r0, r3
 80020f0:	d9f3      	bls.n	80020da <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 80020f2:	2003      	movs	r0, #3
 80020f4:	e0c6      	b.n	8002284 <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 80020f6:	2500      	movs	r5, #0
 80020f8:	e7d6      	b.n	80020a8 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020fa:	4a14      	ldr	r2, [pc, #80]	@ (800214c <HAL_RCC_OscConfig+0x29c>)
 80020fc:	6813      	ldr	r3, [r2, #0]
 80020fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002102:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002104:	f7fe fe00 	bl	8000d08 <HAL_GetTick>
 8002108:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800210a:	4b10      	ldr	r3, [pc, #64]	@ (800214c <HAL_RCC_OscConfig+0x29c>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002112:	d1ce      	bne.n	80020b2 <HAL_RCC_OscConfig+0x202>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002114:	f7fe fdf8 	bl	8000d08 <HAL_GetTick>
 8002118:	1b80      	subs	r0, r0, r6
 800211a:	2802      	cmp	r0, #2
 800211c:	d9f5      	bls.n	800210a <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 800211e:	2003      	movs	r0, #3
 8002120:	e0b0      	b.n	8002284 <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002122:	4a08      	ldr	r2, [pc, #32]	@ (8002144 <HAL_RCC_OscConfig+0x294>)
 8002124:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8002126:	f043 0301 	orr.w	r3, r3, #1
 800212a:	6713      	str	r3, [r2, #112]	@ 0x70
 800212c:	e7cf      	b.n	80020ce <HAL_RCC_OscConfig+0x21e>
 800212e:	4b05      	ldr	r3, [pc, #20]	@ (8002144 <HAL_RCC_OscConfig+0x294>)
 8002130:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002132:	f042 0204 	orr.w	r2, r2, #4
 8002136:	671a      	str	r2, [r3, #112]	@ 0x70
 8002138:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800213a:	f042 0201 	orr.w	r2, r2, #1
 800213e:	671a      	str	r2, [r3, #112]	@ 0x70
 8002140:	e7c5      	b.n	80020ce <HAL_RCC_OscConfig+0x21e>
 8002142:	bf00      	nop
 8002144:	40023800 	.word	0x40023800
 8002148:	42470000 	.word	0x42470000
 800214c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002150:	f7fe fdda 	bl	8000d08 <HAL_GetTick>
 8002154:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002156:	4b52      	ldr	r3, [pc, #328]	@ (80022a0 <HAL_RCC_OscConfig+0x3f0>)
 8002158:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800215a:	f013 0f02 	tst.w	r3, #2
 800215e:	d008      	beq.n	8002172 <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002160:	f7fe fdd2 	bl	8000d08 <HAL_GetTick>
 8002164:	1b80      	subs	r0, r0, r6
 8002166:	f241 3388 	movw	r3, #5000	@ 0x1388
 800216a:	4298      	cmp	r0, r3
 800216c:	d9f3      	bls.n	8002156 <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 800216e:	2003      	movs	r0, #3
 8002170:	e088      	b.n	8002284 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002172:	b9ed      	cbnz	r5, 80021b0 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002174:	69a3      	ldr	r3, [r4, #24]
 8002176:	2b00      	cmp	r3, #0
 8002178:	f000 8083 	beq.w	8002282 <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800217c:	4a48      	ldr	r2, [pc, #288]	@ (80022a0 <HAL_RCC_OscConfig+0x3f0>)
 800217e:	6892      	ldr	r2, [r2, #8]
 8002180:	f002 020c 	and.w	r2, r2, #12
 8002184:	2a08      	cmp	r2, #8
 8002186:	d051      	beq.n	800222c <HAL_RCC_OscConfig+0x37c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002188:	2b02      	cmp	r3, #2
 800218a:	d017      	beq.n	80021bc <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800218c:	4b45      	ldr	r3, [pc, #276]	@ (80022a4 <HAL_RCC_OscConfig+0x3f4>)
 800218e:	2200      	movs	r2, #0
 8002190:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002192:	f7fe fdb9 	bl	8000d08 <HAL_GetTick>
 8002196:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002198:	4b41      	ldr	r3, [pc, #260]	@ (80022a0 <HAL_RCC_OscConfig+0x3f0>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80021a0:	d042      	beq.n	8002228 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021a2:	f7fe fdb1 	bl	8000d08 <HAL_GetTick>
 80021a6:	1b00      	subs	r0, r0, r4
 80021a8:	2802      	cmp	r0, #2
 80021aa:	d9f5      	bls.n	8002198 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80021ac:	2003      	movs	r0, #3
 80021ae:	e069      	b.n	8002284 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 80021b0:	4a3b      	ldr	r2, [pc, #236]	@ (80022a0 <HAL_RCC_OscConfig+0x3f0>)
 80021b2:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80021b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80021ba:	e7db      	b.n	8002174 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 80021bc:	4b39      	ldr	r3, [pc, #228]	@ (80022a4 <HAL_RCC_OscConfig+0x3f4>)
 80021be:	2200      	movs	r2, #0
 80021c0:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80021c2:	f7fe fda1 	bl	8000d08 <HAL_GetTick>
 80021c6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021c8:	4b35      	ldr	r3, [pc, #212]	@ (80022a0 <HAL_RCC_OscConfig+0x3f0>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80021d0:	d006      	beq.n	80021e0 <HAL_RCC_OscConfig+0x330>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021d2:	f7fe fd99 	bl	8000d08 <HAL_GetTick>
 80021d6:	1b40      	subs	r0, r0, r5
 80021d8:	2802      	cmp	r0, #2
 80021da:	d9f5      	bls.n	80021c8 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 80021dc:	2003      	movs	r0, #3
 80021de:	e051      	b.n	8002284 <HAL_RCC_OscConfig+0x3d4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80021e0:	69e3      	ldr	r3, [r4, #28]
 80021e2:	6a22      	ldr	r2, [r4, #32]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80021e8:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80021ec:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80021ee:	0852      	lsrs	r2, r2, #1
 80021f0:	3a01      	subs	r2, #1
 80021f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80021f6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80021f8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80021fc:	4a28      	ldr	r2, [pc, #160]	@ (80022a0 <HAL_RCC_OscConfig+0x3f0>)
 80021fe:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8002200:	4b28      	ldr	r3, [pc, #160]	@ (80022a4 <HAL_RCC_OscConfig+0x3f4>)
 8002202:	2201      	movs	r2, #1
 8002204:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8002206:	f7fe fd7f 	bl	8000d08 <HAL_GetTick>
 800220a:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800220c:	4b24      	ldr	r3, [pc, #144]	@ (80022a0 <HAL_RCC_OscConfig+0x3f0>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002214:	d106      	bne.n	8002224 <HAL_RCC_OscConfig+0x374>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002216:	f7fe fd77 	bl	8000d08 <HAL_GetTick>
 800221a:	1b00      	subs	r0, r0, r4
 800221c:	2802      	cmp	r0, #2
 800221e:	d9f5      	bls.n	800220c <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 8002220:	2003      	movs	r0, #3
 8002222:	e02f      	b.n	8002284 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8002224:	2000      	movs	r0, #0
 8002226:	e02d      	b.n	8002284 <HAL_RCC_OscConfig+0x3d4>
 8002228:	2000      	movs	r0, #0
 800222a:	e02b      	b.n	8002284 <HAL_RCC_OscConfig+0x3d4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800222c:	2b01      	cmp	r3, #1
 800222e:	d02b      	beq.n	8002288 <HAL_RCC_OscConfig+0x3d8>
        pll_config = RCC->PLLCFGR;
 8002230:	4b1b      	ldr	r3, [pc, #108]	@ (80022a0 <HAL_RCC_OscConfig+0x3f0>)
 8002232:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002234:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 8002238:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800223a:	4291      	cmp	r1, r2
 800223c:	d126      	bne.n	800228c <HAL_RCC_OscConfig+0x3dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800223e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002242:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002244:	428a      	cmp	r2, r1
 8002246:	d123      	bne.n	8002290 <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002248:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800224a:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 800224e:	401a      	ands	r2, r3
 8002250:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8002254:	d11e      	bne.n	8002294 <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002256:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 800225a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800225c:	0852      	lsrs	r2, r2, #1
 800225e:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002260:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8002264:	d118      	bne.n	8002298 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002266:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 800226a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800226c:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8002270:	d114      	bne.n	800229c <HAL_RCC_OscConfig+0x3ec>
  return HAL_OK;
 8002272:	2000      	movs	r0, #0
 8002274:	e006      	b.n	8002284 <HAL_RCC_OscConfig+0x3d4>
    return HAL_ERROR;
 8002276:	2001      	movs	r0, #1
}
 8002278:	4770      	bx	lr
        return HAL_ERROR;
 800227a:	2001      	movs	r0, #1
 800227c:	e002      	b.n	8002284 <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 800227e:	2001      	movs	r0, #1
 8002280:	e000      	b.n	8002284 <HAL_RCC_OscConfig+0x3d4>
  return HAL_OK;
 8002282:	2000      	movs	r0, #0
}
 8002284:	b002      	add	sp, #8
 8002286:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8002288:	2001      	movs	r0, #1
 800228a:	e7fb      	b.n	8002284 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
 800228c:	2001      	movs	r0, #1
 800228e:	e7f9      	b.n	8002284 <HAL_RCC_OscConfig+0x3d4>
 8002290:	2001      	movs	r0, #1
 8002292:	e7f7      	b.n	8002284 <HAL_RCC_OscConfig+0x3d4>
 8002294:	2001      	movs	r0, #1
 8002296:	e7f5      	b.n	8002284 <HAL_RCC_OscConfig+0x3d4>
 8002298:	2001      	movs	r0, #1
 800229a:	e7f3      	b.n	8002284 <HAL_RCC_OscConfig+0x3d4>
 800229c:	2001      	movs	r0, #1
 800229e:	e7f1      	b.n	8002284 <HAL_RCC_OscConfig+0x3d4>
 80022a0:	40023800 	.word	0x40023800
 80022a4:	42470000 	.word	0x42470000

080022a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022a8:	b508      	push	{r3, lr}
  uint32_t pllvco = 0U;
  uint32_t pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022aa:	4b26      	ldr	r3, [pc, #152]	@ (8002344 <HAL_RCC_GetSysClockFreq+0x9c>)
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	f003 030c 	and.w	r3, r3, #12
 80022b2:	2b04      	cmp	r3, #4
 80022b4:	d041      	beq.n	800233a <HAL_RCC_GetSysClockFreq+0x92>
 80022b6:	2b08      	cmp	r3, #8
 80022b8:	d141      	bne.n	800233e <HAL_RCC_GetSysClockFreq+0x96>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022ba:	4b22      	ldr	r3, [pc, #136]	@ (8002344 <HAL_RCC_GetSysClockFreq+0x9c>)
 80022bc:	685a      	ldr	r2, [r3, #4]
 80022be:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80022c8:	d012      	beq.n	80022f0 <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022ca:	4b1e      	ldr	r3, [pc, #120]	@ (8002344 <HAL_RCC_GetSysClockFreq+0x9c>)
 80022cc:	6859      	ldr	r1, [r3, #4]
 80022ce:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80022d2:	481d      	ldr	r0, [pc, #116]	@ (8002348 <HAL_RCC_GetSysClockFreq+0xa0>)
 80022d4:	2300      	movs	r3, #0
 80022d6:	fba1 0100 	umull	r0, r1, r1, r0
 80022da:	f7fd ff7d 	bl	80001d8 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80022de:	4b19      	ldr	r3, [pc, #100]	@ (8002344 <HAL_RCC_GetSysClockFreq+0x9c>)
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80022e6:	3301      	adds	r3, #1
 80022e8:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 80022ea:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80022ee:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022f0:	4b14      	ldr	r3, [pc, #80]	@ (8002344 <HAL_RCC_GetSysClockFreq+0x9c>)
 80022f2:	6858      	ldr	r0, [r3, #4]
 80022f4:	f3c0 1088 	ubfx	r0, r0, #6, #9
 80022f8:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 80022fc:	ebbc 0c00 	subs.w	ip, ip, r0
 8002300:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8002304:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8002308:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 800230c:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8002310:	ebb1 010c 	subs.w	r1, r1, ip
 8002314:	eb63 030e 	sbc.w	r3, r3, lr
 8002318:	00db      	lsls	r3, r3, #3
 800231a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800231e:	00c9      	lsls	r1, r1, #3
 8002320:	eb11 0c00 	adds.w	ip, r1, r0
 8002324:	f143 0300 	adc.w	r3, r3, #0
 8002328:	0299      	lsls	r1, r3, #10
 800232a:	2300      	movs	r3, #0
 800232c:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8002330:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8002334:	f7fd ff50 	bl	80001d8 <__aeabi_uldivmod>
 8002338:	e7d1      	b.n	80022de <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 800233a:	4803      	ldr	r0, [pc, #12]	@ (8002348 <HAL_RCC_GetSysClockFreq+0xa0>)
 800233c:	e7d7      	b.n	80022ee <HAL_RCC_GetSysClockFreq+0x46>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800233e:	4803      	ldr	r0, [pc, #12]	@ (800234c <HAL_RCC_GetSysClockFreq+0xa4>)
  return sysclockfreq;
 8002340:	e7d5      	b.n	80022ee <HAL_RCC_GetSysClockFreq+0x46>
 8002342:	bf00      	nop
 8002344:	40023800 	.word	0x40023800
 8002348:	017d7840 	.word	0x017d7840
 800234c:	00f42400 	.word	0x00f42400

08002350 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8002350:	2800      	cmp	r0, #0
 8002352:	f000 809b 	beq.w	800248c <HAL_RCC_ClockConfig+0x13c>
{
 8002356:	b570      	push	{r4, r5, r6, lr}
 8002358:	460d      	mov	r5, r1
 800235a:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800235c:	4b4f      	ldr	r3, [pc, #316]	@ (800249c <HAL_RCC_ClockConfig+0x14c>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0307 	and.w	r3, r3, #7
 8002364:	428b      	cmp	r3, r1
 8002366:	d208      	bcs.n	800237a <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002368:	b2cb      	uxtb	r3, r1
 800236a:	4a4c      	ldr	r2, [pc, #304]	@ (800249c <HAL_RCC_ClockConfig+0x14c>)
 800236c:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800236e:	6813      	ldr	r3, [r2, #0]
 8002370:	f003 0307 	and.w	r3, r3, #7
 8002374:	428b      	cmp	r3, r1
 8002376:	f040 808b 	bne.w	8002490 <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800237a:	6823      	ldr	r3, [r4, #0]
 800237c:	f013 0f02 	tst.w	r3, #2
 8002380:	d017      	beq.n	80023b2 <HAL_RCC_ClockConfig+0x62>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002382:	f013 0f04 	tst.w	r3, #4
 8002386:	d004      	beq.n	8002392 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002388:	4a45      	ldr	r2, [pc, #276]	@ (80024a0 <HAL_RCC_ClockConfig+0x150>)
 800238a:	6893      	ldr	r3, [r2, #8]
 800238c:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002390:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002392:	6823      	ldr	r3, [r4, #0]
 8002394:	f013 0f08 	tst.w	r3, #8
 8002398:	d004      	beq.n	80023a4 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800239a:	4a41      	ldr	r2, [pc, #260]	@ (80024a0 <HAL_RCC_ClockConfig+0x150>)
 800239c:	6893      	ldr	r3, [r2, #8]
 800239e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80023a2:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023a4:	4a3e      	ldr	r2, [pc, #248]	@ (80024a0 <HAL_RCC_ClockConfig+0x150>)
 80023a6:	6893      	ldr	r3, [r2, #8]
 80023a8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80023ac:	68a1      	ldr	r1, [r4, #8]
 80023ae:	430b      	orrs	r3, r1
 80023b0:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023b2:	6823      	ldr	r3, [r4, #0]
 80023b4:	f013 0f01 	tst.w	r3, #1
 80023b8:	d032      	beq.n	8002420 <HAL_RCC_ClockConfig+0xd0>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023ba:	6863      	ldr	r3, [r4, #4]
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d021      	beq.n	8002404 <HAL_RCC_ClockConfig+0xb4>
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023c0:	1e9a      	subs	r2, r3, #2
 80023c2:	2a01      	cmp	r2, #1
 80023c4:	d925      	bls.n	8002412 <HAL_RCC_ClockConfig+0xc2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023c6:	4a36      	ldr	r2, [pc, #216]	@ (80024a0 <HAL_RCC_ClockConfig+0x150>)
 80023c8:	6812      	ldr	r2, [r2, #0]
 80023ca:	f012 0f02 	tst.w	r2, #2
 80023ce:	d061      	beq.n	8002494 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023d0:	4933      	ldr	r1, [pc, #204]	@ (80024a0 <HAL_RCC_ClockConfig+0x150>)
 80023d2:	688a      	ldr	r2, [r1, #8]
 80023d4:	f022 0203 	bic.w	r2, r2, #3
 80023d8:	4313      	orrs	r3, r2
 80023da:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80023dc:	f7fe fc94 	bl	8000d08 <HAL_GetTick>
 80023e0:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023e2:	4b2f      	ldr	r3, [pc, #188]	@ (80024a0 <HAL_RCC_ClockConfig+0x150>)
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f003 030c 	and.w	r3, r3, #12
 80023ea:	6862      	ldr	r2, [r4, #4]
 80023ec:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80023f0:	d016      	beq.n	8002420 <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023f2:	f7fe fc89 	bl	8000d08 <HAL_GetTick>
 80023f6:	1b80      	subs	r0, r0, r6
 80023f8:	f241 3388 	movw	r3, #5000	@ 0x1388
 80023fc:	4298      	cmp	r0, r3
 80023fe:	d9f0      	bls.n	80023e2 <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 8002400:	2003      	movs	r0, #3
 8002402:	e042      	b.n	800248a <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002404:	4a26      	ldr	r2, [pc, #152]	@ (80024a0 <HAL_RCC_ClockConfig+0x150>)
 8002406:	6812      	ldr	r2, [r2, #0]
 8002408:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 800240c:	d1e0      	bne.n	80023d0 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 800240e:	2001      	movs	r0, #1
 8002410:	e03b      	b.n	800248a <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002412:	4a23      	ldr	r2, [pc, #140]	@ (80024a0 <HAL_RCC_ClockConfig+0x150>)
 8002414:	6812      	ldr	r2, [r2, #0]
 8002416:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 800241a:	d1d9      	bne.n	80023d0 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 800241c:	2001      	movs	r0, #1
 800241e:	e034      	b.n	800248a <HAL_RCC_ClockConfig+0x13a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002420:	4b1e      	ldr	r3, [pc, #120]	@ (800249c <HAL_RCC_ClockConfig+0x14c>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0307 	and.w	r3, r3, #7
 8002428:	42ab      	cmp	r3, r5
 800242a:	d907      	bls.n	800243c <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800242c:	b2ea      	uxtb	r2, r5
 800242e:	4b1b      	ldr	r3, [pc, #108]	@ (800249c <HAL_RCC_ClockConfig+0x14c>)
 8002430:	701a      	strb	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0307 	and.w	r3, r3, #7
 8002438:	42ab      	cmp	r3, r5
 800243a:	d12d      	bne.n	8002498 <HAL_RCC_ClockConfig+0x148>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800243c:	6823      	ldr	r3, [r4, #0]
 800243e:	f013 0f04 	tst.w	r3, #4
 8002442:	d006      	beq.n	8002452 <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002444:	4a16      	ldr	r2, [pc, #88]	@ (80024a0 <HAL_RCC_ClockConfig+0x150>)
 8002446:	6893      	ldr	r3, [r2, #8]
 8002448:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 800244c:	68e1      	ldr	r1, [r4, #12]
 800244e:	430b      	orrs	r3, r1
 8002450:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002452:	6823      	ldr	r3, [r4, #0]
 8002454:	f013 0f08 	tst.w	r3, #8
 8002458:	d007      	beq.n	800246a <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800245a:	4a11      	ldr	r2, [pc, #68]	@ (80024a0 <HAL_RCC_ClockConfig+0x150>)
 800245c:	6893      	ldr	r3, [r2, #8]
 800245e:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8002462:	6921      	ldr	r1, [r4, #16]
 8002464:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002468:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800246a:	f7ff ff1d 	bl	80022a8 <HAL_RCC_GetSysClockFreq>
 800246e:	4b0c      	ldr	r3, [pc, #48]	@ (80024a0 <HAL_RCC_ClockConfig+0x150>)
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002476:	4a0b      	ldr	r2, [pc, #44]	@ (80024a4 <HAL_RCC_ClockConfig+0x154>)
 8002478:	5cd3      	ldrb	r3, [r2, r3]
 800247a:	40d8      	lsrs	r0, r3
 800247c:	4b0a      	ldr	r3, [pc, #40]	@ (80024a8 <HAL_RCC_ClockConfig+0x158>)
 800247e:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8002480:	4b0a      	ldr	r3, [pc, #40]	@ (80024ac <HAL_RCC_ClockConfig+0x15c>)
 8002482:	6818      	ldr	r0, [r3, #0]
 8002484:	f7fe fc00 	bl	8000c88 <HAL_InitTick>
  return HAL_OK;
 8002488:	2000      	movs	r0, #0
}
 800248a:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800248c:	2001      	movs	r0, #1
}
 800248e:	4770      	bx	lr
      return HAL_ERROR;
 8002490:	2001      	movs	r0, #1
 8002492:	e7fa      	b.n	800248a <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8002494:	2001      	movs	r0, #1
 8002496:	e7f8      	b.n	800248a <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8002498:	2001      	movs	r0, #1
 800249a:	e7f6      	b.n	800248a <HAL_RCC_ClockConfig+0x13a>
 800249c:	40023c00 	.word	0x40023c00
 80024a0:	40023800 	.word	0x40023800
 80024a4:	08002a60 	.word	0x08002a60
 80024a8:	20000008 	.word	0x20000008
 80024ac:	20000010 	.word	0x20000010

080024b0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024b0:	b530      	push	{r4, r5, lr}
 80024b2:	b083      	sub	sp, #12
 80024b4:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80024b6:	6803      	ldr	r3, [r0, #0]
 80024b8:	f013 0f05 	tst.w	r3, #5
 80024bc:	d10e      	bne.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80024be:	6823      	ldr	r3, [r4, #0]
 80024c0:	f013 0f02 	tst.w	r3, #2
 80024c4:	d138      	bne.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x88>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80024c6:	6823      	ldr	r3, [r4, #0]
 80024c8:	f013 0f08 	tst.w	r3, #8
 80024cc:	f000 809d 	beq.w	800260a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80024d0:	7d22      	ldrb	r2, [r4, #20]
 80024d2:	4b4f      	ldr	r3, [pc, #316]	@ (8002610 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024d4:	f8c3 21e0 	str.w	r2, [r3, #480]	@ 0x1e0
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80024d8:	2000      	movs	r0, #0
 80024da:	e097      	b.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x15c>
    __HAL_RCC_PLLI2S_DISABLE();
 80024dc:	4b4d      	ldr	r3, [pc, #308]	@ (8002614 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80024de:	2200      	movs	r2, #0
 80024e0:	669a      	str	r2, [r3, #104]	@ 0x68
    tickstart = HAL_GetTick();
 80024e2:	f7fe fc11 	bl	8000d08 <HAL_GetTick>
 80024e6:	4605      	mov	r5, r0
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80024e8:	4b4b      	ldr	r3, [pc, #300]	@ (8002618 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 80024f0:	d006      	beq.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x50>
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80024f2:	f7fe fc09 	bl	8000d08 <HAL_GetTick>
 80024f6:	1b43      	subs	r3, r0, r5
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	d9f5      	bls.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x38>
        return HAL_TIMEOUT;
 80024fc:	2003      	movs	r0, #3
 80024fe:	e085      	b.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x15c>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 8002500:	6863      	ldr	r3, [r4, #4]
 8002502:	68a2      	ldr	r2, [r4, #8]
 8002504:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002508:	68e2      	ldr	r2, [r4, #12]
 800250a:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 800250e:	4a42      	ldr	r2, [pc, #264]	@ (8002618 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002510:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8002514:	4b3f      	ldr	r3, [pc, #252]	@ (8002614 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002516:	2201      	movs	r2, #1
 8002518:	669a      	str	r2, [r3, #104]	@ 0x68
    tickstart = HAL_GetTick();
 800251a:	f7fe fbf5 	bl	8000d08 <HAL_GetTick>
 800251e:	4605      	mov	r5, r0
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002520:	4b3d      	ldr	r3, [pc, #244]	@ (8002618 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 8002528:	d1c9      	bne.n	80024be <HAL_RCCEx_PeriphCLKConfig+0xe>
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800252a:	f7fe fbed 	bl	8000d08 <HAL_GetTick>
 800252e:	1b40      	subs	r0, r0, r5
 8002530:	2802      	cmp	r0, #2
 8002532:	d9f5      	bls.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x70>
        return HAL_TIMEOUT;
 8002534:	2003      	movs	r0, #3
 8002536:	e069      	b.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x15c>
    __HAL_RCC_PWR_CLK_ENABLE();
 8002538:	2300      	movs	r3, #0
 800253a:	9301      	str	r3, [sp, #4]
 800253c:	4b36      	ldr	r3, [pc, #216]	@ (8002618 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800253e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002540:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002544:	641a      	str	r2, [r3, #64]	@ 0x40
 8002546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002548:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800254c:	9301      	str	r3, [sp, #4]
 800254e:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8002550:	4a32      	ldr	r2, [pc, #200]	@ (800261c <HAL_RCCEx_PeriphCLKConfig+0x16c>)
 8002552:	6813      	ldr	r3, [r2, #0]
 8002554:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002558:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800255a:	f7fe fbd5 	bl	8000d08 <HAL_GetTick>
 800255e:	4605      	mov	r5, r0
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8002560:	4b2e      	ldr	r3, [pc, #184]	@ (800261c <HAL_RCCEx_PeriphCLKConfig+0x16c>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002568:	d106      	bne.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800256a:	f7fe fbcd 	bl	8000d08 <HAL_GetTick>
 800256e:	1b43      	subs	r3, r0, r5
 8002570:	2b02      	cmp	r3, #2
 8002572:	d9f5      	bls.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0xb0>
        return HAL_TIMEOUT;
 8002574:	2003      	movs	r0, #3
 8002576:	e049      	b.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x15c>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002578:	4b27      	ldr	r3, [pc, #156]	@ (8002618 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800257a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800257c:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8002580:	d014      	beq.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0xfc>
 8002582:	6922      	ldr	r2, [r4, #16]
 8002584:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 8002588:	429a      	cmp	r2, r3
 800258a:	d00f      	beq.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0xfc>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800258c:	4b22      	ldr	r3, [pc, #136]	@ (8002618 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800258e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002590:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8002594:	491f      	ldr	r1, [pc, #124]	@ (8002614 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002596:	2001      	movs	r0, #1
 8002598:	f8c1 0e40 	str.w	r0, [r1, #3648]	@ 0xe40
      __HAL_RCC_BACKUPRESET_RELEASE();
 800259c:	2000      	movs	r0, #0
 800259e:	f8c1 0e40 	str.w	r0, [r1, #3648]	@ 0xe40
      RCC->BDCR = tmpreg1;
 80025a2:	671a      	str	r2, [r3, #112]	@ 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80025a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025a6:	f013 0f01 	tst.w	r3, #1
 80025aa:	d112      	bne.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025ac:	6923      	ldr	r3, [r4, #16]
 80025ae:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 80025b2:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 80025b6:	d01d      	beq.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x144>
 80025b8:	4a17      	ldr	r2, [pc, #92]	@ (8002618 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80025ba:	6893      	ldr	r3, [r2, #8]
 80025bc:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80025c0:	6093      	str	r3, [r2, #8]
 80025c2:	4915      	ldr	r1, [pc, #84]	@ (8002618 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80025c4:	6f0b      	ldr	r3, [r1, #112]	@ 0x70
 80025c6:	6922      	ldr	r2, [r4, #16]
 80025c8:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80025cc:	4313      	orrs	r3, r2
 80025ce:	670b      	str	r3, [r1, #112]	@ 0x70
 80025d0:	e779      	b.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x16>
        tickstart = HAL_GetTick();
 80025d2:	f7fe fb99 	bl	8000d08 <HAL_GetTick>
 80025d6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025d8:	4b0f      	ldr	r3, [pc, #60]	@ (8002618 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80025da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025dc:	f013 0f02 	tst.w	r3, #2
 80025e0:	d1e4      	bne.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0xfc>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025e2:	f7fe fb91 	bl	8000d08 <HAL_GetTick>
 80025e6:	1b40      	subs	r0, r0, r5
 80025e8:	f241 3388 	movw	r3, #5000	@ 0x1388
 80025ec:	4298      	cmp	r0, r3
 80025ee:	d9f3      	bls.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x128>
            return HAL_TIMEOUT;
 80025f0:	2003      	movs	r0, #3
 80025f2:	e00b      	b.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x15c>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025f4:	4908      	ldr	r1, [pc, #32]	@ (8002618 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80025f6:	688a      	ldr	r2, [r1, #8]
 80025f8:	f422 12f8 	bic.w	r2, r2, #2031616	@ 0x1f0000
 80025fc:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8002600:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002604:	4313      	orrs	r3, r2
 8002606:	608b      	str	r3, [r1, #8]
 8002608:	e7db      	b.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x112>
  return HAL_OK;
 800260a:	2000      	movs	r0, #0
}
 800260c:	b003      	add	sp, #12
 800260e:	bd30      	pop	{r4, r5, pc}
 8002610:	42471000 	.word	0x42471000
 8002614:	42470000 	.word	0x42470000
 8002618:	40023800 	.word	0x40023800
 800261c:	40007000 	.word	0x40007000

08002620 <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
  uint32_t srcclk = 0U;
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
  switch (PeriphClk)
 8002620:	2801      	cmp	r0, #1
 8002622:	d001      	beq.n	8002628 <HAL_RCCEx_GetPeriphCLKFreq+0x8>
  uint32_t frequency = 0U;
 8002624:	2000      	movs	r0, #0
 8002626:	4770      	bx	lr
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8002628:	4b16      	ldr	r3, [pc, #88]	@ (8002684 <HAL_RCCEx_GetPeriphCLKFreq+0x64>)
 800262a:	689b      	ldr	r3, [r3, #8]
      switch (srcclk)
 800262c:	f413 0300 	ands.w	r3, r3, #8388608	@ 0x800000
 8002630:	d002      	beq.n	8002638 <HAL_RCCEx_GetPeriphCLKFreq+0x18>
 8002632:	b32b      	cbz	r3, 8002680 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
 8002634:	4814      	ldr	r0, [pc, #80]	@ (8002688 <HAL_RCCEx_GetPeriphCLKFreq+0x68>)
 8002636:	4770      	bx	lr
        case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002638:	4b12      	ldr	r3, [pc, #72]	@ (8002684 <HAL_RCCEx_GetPeriphCLKFreq+0x64>)
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8002640:	d015      	beq.n	800266e <HAL_RCCEx_GetPeriphCLKFreq+0x4e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8002642:	4b10      	ldr	r3, [pc, #64]	@ (8002684 <HAL_RCCEx_GetPeriphCLKFreq+0x64>)
 8002644:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8002648:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800264c:	4b0f      	ldr	r3, [pc, #60]	@ (800268c <HAL_RCCEx_GetPeriphCLKFreq+0x6c>)
 800264e:	fbb3 f3f2 	udiv	r3, r3, r2
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8002652:	4a0c      	ldr	r2, [pc, #48]	@ (8002684 <HAL_RCCEx_GetPeriphCLKFreq+0x64>)
 8002654:	f8d2 0084 	ldr.w	r0, [r2, #132]	@ 0x84
 8002658:	f3c0 1088 	ubfx	r0, r0, #6, #9
 800265c:	fb03 f000 	mul.w	r0, r3, r0
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8002660:	f8d2 3084 	ldr.w	r3, [r2, #132]	@ 0x84
 8002664:	f3c3 7302 	ubfx	r3, r3, #28, #3
 8002668:	fbb0 f0f3 	udiv	r0, r0, r3
          break;
 800266c:	4770      	bx	lr
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800266e:	4b05      	ldr	r3, [pc, #20]	@ (8002684 <HAL_RCCEx_GetPeriphCLKFreq+0x64>)
 8002670:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8002674:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8002678:	4b05      	ldr	r3, [pc, #20]	@ (8002690 <HAL_RCCEx_GetPeriphCLKFreq+0x70>)
 800267a:	fbb3 f3f2 	udiv	r3, r3, r2
 800267e:	e7e8      	b.n	8002652 <HAL_RCCEx_GetPeriphCLKFreq+0x32>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8002680:	2000      	movs	r0, #0
    {
      break;
    }
  }
  return frequency;
}
 8002682:	4770      	bx	lr
 8002684:	40023800 	.word	0x40023800
 8002688:	00bb8000 	.word	0x00bb8000
 800268c:	017d7840 	.word	0x017d7840
 8002690:	00f42400 	.word	0x00f42400

08002694 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002694:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002696:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002698:	6a04      	ldr	r4, [r0, #32]
 800269a:	f024 0401 	bic.w	r4, r4, #1
 800269e:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026a0:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80026a2:	f024 0cf0 	bic.w	ip, r4, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80026a6:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80026aa:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 80026ae:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80026b0:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80026b2:	6203      	str	r3, [r0, #32]
}
 80026b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80026b8:	4770      	bx	lr

080026ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80026ba:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80026bc:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80026be:	6a04      	ldr	r4, [r0, #32]
 80026c0:	f024 0410 	bic.w	r4, r4, #16
 80026c4:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026c6:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80026c8:	f424 4c70 	bic.w	ip, r4, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80026cc:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80026d0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80026d4:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80026d8:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80026da:	6203      	str	r3, [r0, #32]
}
 80026dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80026e0:	4770      	bx	lr

080026e2 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80026e2:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80026e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80026e8:	430b      	orrs	r3, r1
 80026ea:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80026ee:	6083      	str	r3, [r0, #8]
}
 80026f0:	4770      	bx	lr
	...

080026f4 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 80026f4:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d12a      	bne.n	8002754 <HAL_TIM_Base_Start+0x60>
  htim->State = HAL_TIM_STATE_BUSY;
 80026fe:	2302      	movs	r3, #2
 8002700:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002704:	6803      	ldr	r3, [r0, #0]
 8002706:	4a15      	ldr	r2, [pc, #84]	@ (800275c <HAL_TIM_Base_Start+0x68>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d018      	beq.n	800273e <HAL_TIM_Base_Start+0x4a>
 800270c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002710:	d015      	beq.n	800273e <HAL_TIM_Base_Start+0x4a>
 8002712:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8002716:	4293      	cmp	r3, r2
 8002718:	d011      	beq.n	800273e <HAL_TIM_Base_Start+0x4a>
 800271a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800271e:	4293      	cmp	r3, r2
 8002720:	d00d      	beq.n	800273e <HAL_TIM_Base_Start+0x4a>
 8002722:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002726:	4293      	cmp	r3, r2
 8002728:	d009      	beq.n	800273e <HAL_TIM_Base_Start+0x4a>
 800272a:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 800272e:	4293      	cmp	r3, r2
 8002730:	d005      	beq.n	800273e <HAL_TIM_Base_Start+0x4a>
    __HAL_TIM_ENABLE(htim);
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	f042 0201 	orr.w	r2, r2, #1
 8002738:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800273a:	2000      	movs	r0, #0
 800273c:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800273e:	689a      	ldr	r2, [r3, #8]
 8002740:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002744:	2a06      	cmp	r2, #6
 8002746:	d007      	beq.n	8002758 <HAL_TIM_Base_Start+0x64>
      __HAL_TIM_ENABLE(htim);
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	f042 0201 	orr.w	r2, r2, #1
 800274e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002750:	2000      	movs	r0, #0
 8002752:	4770      	bx	lr
    return HAL_ERROR;
 8002754:	2001      	movs	r0, #1
 8002756:	4770      	bx	lr
  return HAL_OK;
 8002758:	2000      	movs	r0, #0
}
 800275a:	4770      	bx	lr
 800275c:	40010000 	.word	0x40010000

08002760 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8002760:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002762:	4a27      	ldr	r2, [pc, #156]	@ (8002800 <TIM_Base_SetConfig+0xa0>)
 8002764:	4290      	cmp	r0, r2
 8002766:	d00e      	beq.n	8002786 <TIM_Base_SetConfig+0x26>
 8002768:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800276c:	d00b      	beq.n	8002786 <TIM_Base_SetConfig+0x26>
 800276e:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8002772:	4290      	cmp	r0, r2
 8002774:	d007      	beq.n	8002786 <TIM_Base_SetConfig+0x26>
 8002776:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800277a:	4290      	cmp	r0, r2
 800277c:	d003      	beq.n	8002786 <TIM_Base_SetConfig+0x26>
 800277e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002782:	4290      	cmp	r0, r2
 8002784:	d103      	bne.n	800278e <TIM_Base_SetConfig+0x2e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002786:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800278a:	684a      	ldr	r2, [r1, #4]
 800278c:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800278e:	4a1c      	ldr	r2, [pc, #112]	@ (8002800 <TIM_Base_SetConfig+0xa0>)
 8002790:	4290      	cmp	r0, r2
 8002792:	d01a      	beq.n	80027ca <TIM_Base_SetConfig+0x6a>
 8002794:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8002798:	d017      	beq.n	80027ca <TIM_Base_SetConfig+0x6a>
 800279a:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800279e:	4290      	cmp	r0, r2
 80027a0:	d013      	beq.n	80027ca <TIM_Base_SetConfig+0x6a>
 80027a2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80027a6:	4290      	cmp	r0, r2
 80027a8:	d00f      	beq.n	80027ca <TIM_Base_SetConfig+0x6a>
 80027aa:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80027ae:	4290      	cmp	r0, r2
 80027b0:	d00b      	beq.n	80027ca <TIM_Base_SetConfig+0x6a>
 80027b2:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 80027b6:	4290      	cmp	r0, r2
 80027b8:	d007      	beq.n	80027ca <TIM_Base_SetConfig+0x6a>
 80027ba:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80027be:	4290      	cmp	r0, r2
 80027c0:	d003      	beq.n	80027ca <TIM_Base_SetConfig+0x6a>
 80027c2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80027c6:	4290      	cmp	r0, r2
 80027c8:	d103      	bne.n	80027d2 <TIM_Base_SetConfig+0x72>
    tmpcr1 &= ~TIM_CR1_CKD;
 80027ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027ce:	68ca      	ldr	r2, [r1, #12]
 80027d0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80027d6:	694a      	ldr	r2, [r1, #20]
 80027d8:	4313      	orrs	r3, r2
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027da:	688a      	ldr	r2, [r1, #8]
 80027dc:	62c2      	str	r2, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80027de:	680a      	ldr	r2, [r1, #0]
 80027e0:	6282      	str	r2, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027e2:	4a07      	ldr	r2, [pc, #28]	@ (8002800 <TIM_Base_SetConfig+0xa0>)
 80027e4:	4290      	cmp	r0, r2
 80027e6:	d007      	beq.n	80027f8 <TIM_Base_SetConfig+0x98>
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80027e8:	6802      	ldr	r2, [r0, #0]
 80027ea:	f042 0204 	orr.w	r2, r2, #4
 80027ee:	6002      	str	r2, [r0, #0]
  TIMx->EGR = TIM_EGR_UG;
 80027f0:	2201      	movs	r2, #1
 80027f2:	6142      	str	r2, [r0, #20]
  TIMx->CR1 = tmpcr1;
 80027f4:	6003      	str	r3, [r0, #0]
}
 80027f6:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 80027f8:	690a      	ldr	r2, [r1, #16]
 80027fa:	6302      	str	r2, [r0, #48]	@ 0x30
 80027fc:	e7f4      	b.n	80027e8 <TIM_Base_SetConfig+0x88>
 80027fe:	bf00      	nop
 8002800:	40010000 	.word	0x40010000

08002804 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8002804:	b340      	cbz	r0, 8002858 <HAL_TIM_Base_Init+0x54>
{
 8002806:	b510      	push	{r4, lr}
 8002808:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800280a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800280e:	b1f3      	cbz	r3, 800284e <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8002810:	2302      	movs	r3, #2
 8002812:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002816:	4621      	mov	r1, r4
 8002818:	f851 0b04 	ldr.w	r0, [r1], #4
 800281c:	f7ff ffa0 	bl	8002760 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002820:	2301      	movs	r3, #1
 8002822:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002826:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800282a:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800282e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8002832:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002836:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800283a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800283e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8002842:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8002846:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 800284a:	2000      	movs	r0, #0
}
 800284c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800284e:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002852:	f7fe f9d9 	bl	8000c08 <HAL_TIM_Base_MspInit>
 8002856:	e7db      	b.n	8002810 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8002858:	2001      	movs	r0, #1
}
 800285a:	4770      	bx	lr

0800285c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800285c:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800285e:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002860:	f424 4c7f 	bic.w	ip, r4, #65280	@ 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002864:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8002868:	430a      	orrs	r2, r1
 800286a:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800286e:	6082      	str	r2, [r0, #8]
}
 8002870:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002874:	4770      	bx	lr

08002876 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8002876:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800287a:	2b01      	cmp	r3, #1
 800287c:	d078      	beq.n	8002970 <HAL_TIM_ConfigClockSource+0xfa>
{
 800287e:	b510      	push	{r4, lr}
 8002880:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8002882:	2301      	movs	r3, #1
 8002884:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8002888:	2302      	movs	r3, #2
 800288a:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800288e:	6802      	ldr	r2, [r0, #0]
 8002890:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002892:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002896:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 800289a:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 800289c:	680b      	ldr	r3, [r1, #0]
 800289e:	2b60      	cmp	r3, #96	@ 0x60
 80028a0:	d04c      	beq.n	800293c <HAL_TIM_ConfigClockSource+0xc6>
 80028a2:	d823      	bhi.n	80028ec <HAL_TIM_ConfigClockSource+0x76>
 80028a4:	2b40      	cmp	r3, #64	@ 0x40
 80028a6:	d054      	beq.n	8002952 <HAL_TIM_ConfigClockSource+0xdc>
 80028a8:	d811      	bhi.n	80028ce <HAL_TIM_ConfigClockSource+0x58>
 80028aa:	2b20      	cmp	r3, #32
 80028ac:	d003      	beq.n	80028b6 <HAL_TIM_ConfigClockSource+0x40>
 80028ae:	d80a      	bhi.n	80028c6 <HAL_TIM_ConfigClockSource+0x50>
 80028b0:	b10b      	cbz	r3, 80028b6 <HAL_TIM_ConfigClockSource+0x40>
 80028b2:	2b10      	cmp	r3, #16
 80028b4:	d105      	bne.n	80028c2 <HAL_TIM_ConfigClockSource+0x4c>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80028b6:	4619      	mov	r1, r3
 80028b8:	6820      	ldr	r0, [r4, #0]
 80028ba:	f7ff ff12 	bl	80026e2 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80028be:	2000      	movs	r0, #0
      break;
 80028c0:	e028      	b.n	8002914 <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 80028c2:	2001      	movs	r0, #1
 80028c4:	e026      	b.n	8002914 <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 80028c6:	2b30      	cmp	r3, #48	@ 0x30
 80028c8:	d0f5      	beq.n	80028b6 <HAL_TIM_ConfigClockSource+0x40>
      status = HAL_ERROR;
 80028ca:	2001      	movs	r0, #1
 80028cc:	e022      	b.n	8002914 <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 80028ce:	2b50      	cmp	r3, #80	@ 0x50
 80028d0:	d10a      	bne.n	80028e8 <HAL_TIM_ConfigClockSource+0x72>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028d2:	68ca      	ldr	r2, [r1, #12]
 80028d4:	6849      	ldr	r1, [r1, #4]
 80028d6:	6800      	ldr	r0, [r0, #0]
 80028d8:	f7ff fedc 	bl	8002694 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80028dc:	2150      	movs	r1, #80	@ 0x50
 80028de:	6820      	ldr	r0, [r4, #0]
 80028e0:	f7ff feff 	bl	80026e2 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80028e4:	2000      	movs	r0, #0
      break;
 80028e6:	e015      	b.n	8002914 <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 80028e8:	2001      	movs	r0, #1
 80028ea:	e013      	b.n	8002914 <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 80028ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80028f0:	d03a      	beq.n	8002968 <HAL_TIM_ConfigClockSource+0xf2>
 80028f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80028f6:	d014      	beq.n	8002922 <HAL_TIM_ConfigClockSource+0xac>
 80028f8:	2b70      	cmp	r3, #112	@ 0x70
 80028fa:	d137      	bne.n	800296c <HAL_TIM_ConfigClockSource+0xf6>
      TIM_ETR_SetConfig(htim->Instance,
 80028fc:	68cb      	ldr	r3, [r1, #12]
 80028fe:	684a      	ldr	r2, [r1, #4]
 8002900:	6889      	ldr	r1, [r1, #8]
 8002902:	6800      	ldr	r0, [r0, #0]
 8002904:	f7ff ffaa 	bl	800285c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002908:	6822      	ldr	r2, [r4, #0]
 800290a:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800290c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8002910:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002912:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002914:	2301      	movs	r3, #1
 8002916:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 800291a:	2300      	movs	r3, #0
 800291c:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8002920:	bd10      	pop	{r4, pc}
      TIM_ETR_SetConfig(htim->Instance,
 8002922:	68cb      	ldr	r3, [r1, #12]
 8002924:	684a      	ldr	r2, [r1, #4]
 8002926:	6889      	ldr	r1, [r1, #8]
 8002928:	6800      	ldr	r0, [r0, #0]
 800292a:	f7ff ff97 	bl	800285c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800292e:	6822      	ldr	r2, [r4, #0]
 8002930:	6893      	ldr	r3, [r2, #8]
 8002932:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002936:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002938:	2000      	movs	r0, #0
      break;
 800293a:	e7eb      	b.n	8002914 <HAL_TIM_ConfigClockSource+0x9e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800293c:	68ca      	ldr	r2, [r1, #12]
 800293e:	6849      	ldr	r1, [r1, #4]
 8002940:	6800      	ldr	r0, [r0, #0]
 8002942:	f7ff feba 	bl	80026ba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002946:	2160      	movs	r1, #96	@ 0x60
 8002948:	6820      	ldr	r0, [r4, #0]
 800294a:	f7ff feca 	bl	80026e2 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800294e:	2000      	movs	r0, #0
      break;
 8002950:	e7e0      	b.n	8002914 <HAL_TIM_ConfigClockSource+0x9e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002952:	68ca      	ldr	r2, [r1, #12]
 8002954:	6849      	ldr	r1, [r1, #4]
 8002956:	6800      	ldr	r0, [r0, #0]
 8002958:	f7ff fe9c 	bl	8002694 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800295c:	2140      	movs	r1, #64	@ 0x40
 800295e:	6820      	ldr	r0, [r4, #0]
 8002960:	f7ff febf 	bl	80026e2 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8002964:	2000      	movs	r0, #0
      break;
 8002966:	e7d5      	b.n	8002914 <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 8002968:	2000      	movs	r0, #0
 800296a:	e7d3      	b.n	8002914 <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 800296c:	2001      	movs	r0, #1
 800296e:	e7d1      	b.n	8002914 <HAL_TIM_ConfigClockSource+0x9e>
  __HAL_LOCK(htim);
 8002970:	2002      	movs	r0, #2
}
 8002972:	4770      	bx	lr

08002974 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002974:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8002978:	2a01      	cmp	r2, #1
 800297a:	d035      	beq.n	80029e8 <HAL_TIMEx_MasterConfigSynchronization+0x74>
{
 800297c:	b410      	push	{r4}
 800297e:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8002980:	2201      	movs	r2, #1
 8002982:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002986:	2202      	movs	r2, #2
 8002988:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800298c:	6802      	ldr	r2, [r0, #0]
 800298e:	6850      	ldr	r0, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002990:	6894      	ldr	r4, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002992:	f020 0c70 	bic.w	ip, r0, #112	@ 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002996:	6808      	ldr	r0, [r1, #0]
 8002998:	ea40 000c 	orr.w	r0, r0, ip

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800299c:	6050      	str	r0, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	4812      	ldr	r0, [pc, #72]	@ (80029ec <HAL_TIMEx_MasterConfigSynchronization+0x78>)
 80029a2:	4282      	cmp	r2, r0
 80029a4:	d012      	beq.n	80029cc <HAL_TIMEx_MasterConfigSynchronization+0x58>
 80029a6:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 80029aa:	d00f      	beq.n	80029cc <HAL_TIMEx_MasterConfigSynchronization+0x58>
 80029ac:	f5a0 407c 	sub.w	r0, r0, #64512	@ 0xfc00
 80029b0:	4282      	cmp	r2, r0
 80029b2:	d00b      	beq.n	80029cc <HAL_TIMEx_MasterConfigSynchronization+0x58>
 80029b4:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 80029b8:	4282      	cmp	r2, r0
 80029ba:	d007      	beq.n	80029cc <HAL_TIMEx_MasterConfigSynchronization+0x58>
 80029bc:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 80029c0:	4282      	cmp	r2, r0
 80029c2:	d003      	beq.n	80029cc <HAL_TIMEx_MasterConfigSynchronization+0x58>
 80029c4:	f500 309a 	add.w	r0, r0, #78848	@ 0x13400
 80029c8:	4282      	cmp	r2, r0
 80029ca:	d104      	bne.n	80029d6 <HAL_TIMEx_MasterConfigSynchronization+0x62>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80029cc:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80029d0:	6849      	ldr	r1, [r1, #4]
 80029d2:	4321      	orrs	r1, r4

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80029d4:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80029d6:	2201      	movs	r2, #1
 80029d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80029dc:	2000      	movs	r0, #0
 80029de:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 80029e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80029e6:	4770      	bx	lr
  __HAL_LOCK(htim);
 80029e8:	2002      	movs	r0, #2
}
 80029ea:	4770      	bx	lr
 80029ec:	40010000 	.word	0x40010000

080029f0 <memset>:
 80029f0:	4402      	add	r2, r0
 80029f2:	4603      	mov	r3, r0
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d100      	bne.n	80029fa <memset+0xa>
 80029f8:	4770      	bx	lr
 80029fa:	f803 1b01 	strb.w	r1, [r3], #1
 80029fe:	e7f9      	b.n	80029f4 <memset+0x4>

08002a00 <__libc_init_array>:
 8002a00:	b570      	push	{r4, r5, r6, lr}
 8002a02:	4d0d      	ldr	r5, [pc, #52]	@ (8002a38 <__libc_init_array+0x38>)
 8002a04:	4c0d      	ldr	r4, [pc, #52]	@ (8002a3c <__libc_init_array+0x3c>)
 8002a06:	1b64      	subs	r4, r4, r5
 8002a08:	10a4      	asrs	r4, r4, #2
 8002a0a:	2600      	movs	r6, #0
 8002a0c:	42a6      	cmp	r6, r4
 8002a0e:	d109      	bne.n	8002a24 <__libc_init_array+0x24>
 8002a10:	4d0b      	ldr	r5, [pc, #44]	@ (8002a40 <__libc_init_array+0x40>)
 8002a12:	4c0c      	ldr	r4, [pc, #48]	@ (8002a44 <__libc_init_array+0x44>)
 8002a14:	f000 f818 	bl	8002a48 <_init>
 8002a18:	1b64      	subs	r4, r4, r5
 8002a1a:	10a4      	asrs	r4, r4, #2
 8002a1c:	2600      	movs	r6, #0
 8002a1e:	42a6      	cmp	r6, r4
 8002a20:	d105      	bne.n	8002a2e <__libc_init_array+0x2e>
 8002a22:	bd70      	pop	{r4, r5, r6, pc}
 8002a24:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a28:	4798      	blx	r3
 8002a2a:	3601      	adds	r6, #1
 8002a2c:	e7ee      	b.n	8002a0c <__libc_init_array+0xc>
 8002a2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a32:	4798      	blx	r3
 8002a34:	3601      	adds	r6, #1
 8002a36:	e7f2      	b.n	8002a1e <__libc_init_array+0x1e>
 8002a38:	08002a80 	.word	0x08002a80
 8002a3c:	08002a80 	.word	0x08002a80
 8002a40:	08002a80 	.word	0x08002a80
 8002a44:	08002a84 	.word	0x08002a84

08002a48 <_init>:
 8002a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a4a:	bf00      	nop
 8002a4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a4e:	bc08      	pop	{r3}
 8002a50:	469e      	mov	lr, r3
 8002a52:	4770      	bx	lr

08002a54 <_fini>:
 8002a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a56:	bf00      	nop
 8002a58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a5a:	bc08      	pop	{r3}
 8002a5c:	469e      	mov	lr, r3
 8002a5e:	4770      	bx	lr
