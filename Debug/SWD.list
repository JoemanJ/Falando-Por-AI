
SWD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c00  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08001d98  08001d98  00002d98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001db0  08001db0  0000300c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08001db0  08001db0  00002db0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001db8  08001db8  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001db8  08001db8  00002db8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001dbc  08001dbc  00002dbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001dc0  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  2000000c  08001dcc  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000e4  08001dcc  000030e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007a11  00000000  00000000  0000303c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b36  00000000  00000000  0000aa4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 00001fe9  00000000  00000000  0000c583  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000005d8  00000000  00000000  0000e570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000444  00000000  00000000  0000eb48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015ebe  00000000  00000000  0000ef8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008e31  00000000  00000000  00024e4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008b8e5  00000000  00000000  0002dc7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000b9560  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000d84  00000000  00000000  000b95a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000053  00000000  00000000  000ba328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08001d80 	.word	0x08001d80

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08001d80 	.word	0x08001d80

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001ec:	f000 b988 	b.w	8000500 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	468e      	mov	lr, r1
 8000210:	4604      	mov	r4, r0
 8000212:	4688      	mov	r8, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d962      	bls.n	80002e4 <__udivmoddi4+0xdc>
 800021e:	fab2 f682 	clz	r6, r2
 8000222:	b14e      	cbz	r6, 8000238 <__udivmoddi4+0x30>
 8000224:	f1c6 0320 	rsb	r3, r6, #32
 8000228:	fa01 f806 	lsl.w	r8, r1, r6
 800022c:	fa20 f303 	lsr.w	r3, r0, r3
 8000230:	40b7      	lsls	r7, r6
 8000232:	ea43 0808 	orr.w	r8, r3, r8
 8000236:	40b4      	lsls	r4, r6
 8000238:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800023c:	fa1f fc87 	uxth.w	ip, r7
 8000240:	fbb8 f1fe 	udiv	r1, r8, lr
 8000244:	0c23      	lsrs	r3, r4, #16
 8000246:	fb0e 8811 	mls	r8, lr, r1, r8
 800024a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024e:	fb01 f20c 	mul.w	r2, r1, ip
 8000252:	429a      	cmp	r2, r3
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0x62>
 8000256:	18fb      	adds	r3, r7, r3
 8000258:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800025c:	f080 80ea 	bcs.w	8000434 <__udivmoddi4+0x22c>
 8000260:	429a      	cmp	r2, r3
 8000262:	f240 80e7 	bls.w	8000434 <__udivmoddi4+0x22c>
 8000266:	3902      	subs	r1, #2
 8000268:	443b      	add	r3, r7
 800026a:	1a9a      	subs	r2, r3, r2
 800026c:	b2a3      	uxth	r3, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800027a:	fb00 fc0c 	mul.w	ip, r0, ip
 800027e:	459c      	cmp	ip, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x8e>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000288:	f080 80d6 	bcs.w	8000438 <__udivmoddi4+0x230>
 800028c:	459c      	cmp	ip, r3
 800028e:	f240 80d3 	bls.w	8000438 <__udivmoddi4+0x230>
 8000292:	443b      	add	r3, r7
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029a:	eba3 030c 	sub.w	r3, r3, ip
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40f3      	lsrs	r3, r6
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xb6>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb0>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa2>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x14c>
 80002c6:	4573      	cmp	r3, lr
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xc8>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 8105 	bhi.w	80004da <__udivmoddi4+0x2d2>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4690      	mov	r8, r2
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e5      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002de:	e9c5 4800 	strd	r4, r8, [r5]
 80002e2:	e7e2      	b.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f000 8090 	beq.w	800040a <__udivmoddi4+0x202>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f040 80a4 	bne.w	800043c <__udivmoddi4+0x234>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	0c03      	lsrs	r3, r0, #16
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	b280      	uxth	r0, r0
 80002fe:	b2bc      	uxth	r4, r7
 8000300:	2101      	movs	r1, #1
 8000302:	fbb2 fcfe 	udiv	ip, r2, lr
 8000306:	fb0e 221c 	mls	r2, lr, ip, r2
 800030a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030e:	fb04 f20c 	mul.w	r2, r4, ip
 8000312:	429a      	cmp	r2, r3
 8000314:	d907      	bls.n	8000326 <__udivmoddi4+0x11e>
 8000316:	18fb      	adds	r3, r7, r3
 8000318:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x11c>
 800031e:	429a      	cmp	r2, r3
 8000320:	f200 80e0 	bhi.w	80004e4 <__udivmoddi4+0x2dc>
 8000324:	46c4      	mov	ip, r8
 8000326:	1a9b      	subs	r3, r3, r2
 8000328:	fbb3 f2fe 	udiv	r2, r3, lr
 800032c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000330:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000334:	fb02 f404 	mul.w	r4, r2, r4
 8000338:	429c      	cmp	r4, r3
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x144>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x142>
 8000344:	429c      	cmp	r4, r3
 8000346:	f200 80ca 	bhi.w	80004de <__udivmoddi4+0x2d6>
 800034a:	4602      	mov	r2, r0
 800034c:	1b1b      	subs	r3, r3, r4
 800034e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x98>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa0e f401 	lsl.w	r4, lr, r1
 8000364:	fa20 f306 	lsr.w	r3, r0, r6
 8000368:	fa2e fe06 	lsr.w	lr, lr, r6
 800036c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	fa1f fc87 	uxth.w	ip, r7
 800037a:	fbbe f0f9 	udiv	r0, lr, r9
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	fb09 ee10 	mls	lr, r9, r0, lr
 8000384:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000388:	fb00 fe0c 	mul.w	lr, r0, ip
 800038c:	45a6      	cmp	lr, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x1a0>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800039a:	f080 809c 	bcs.w	80004d6 <__udivmoddi4+0x2ce>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8099 	bls.w	80004d6 <__udivmoddi4+0x2ce>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 040e 	sub.w	r4, r4, lr
 80003ac:	fa1f fe83 	uxth.w	lr, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c0:	45a4      	cmp	ip, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1ce>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003ca:	f080 8082 	bcs.w	80004d2 <__udivmoddi4+0x2ca>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d97f      	bls.n	80004d2 <__udivmoddi4+0x2ca>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	fba0 ec02 	umull	lr, ip, r0, r2
 80003e2:	4564      	cmp	r4, ip
 80003e4:	4673      	mov	r3, lr
 80003e6:	46e1      	mov	r9, ip
 80003e8:	d362      	bcc.n	80004b0 <__udivmoddi4+0x2a8>
 80003ea:	d05f      	beq.n	80004ac <__udivmoddi4+0x2a4>
 80003ec:	b15d      	cbz	r5, 8000406 <__udivmoddi4+0x1fe>
 80003ee:	ebb8 0203 	subs.w	r2, r8, r3
 80003f2:	eb64 0409 	sbc.w	r4, r4, r9
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	fa22 f301 	lsr.w	r3, r2, r1
 80003fe:	431e      	orrs	r6, r3
 8000400:	40cc      	lsrs	r4, r1
 8000402:	e9c5 6400 	strd	r6, r4, [r5]
 8000406:	2100      	movs	r1, #0
 8000408:	e74f      	b.n	80002aa <__udivmoddi4+0xa2>
 800040a:	fbb1 fcf2 	udiv	ip, r1, r2
 800040e:	0c01      	lsrs	r1, r0, #16
 8000410:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000414:	b280      	uxth	r0, r0
 8000416:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800041a:	463b      	mov	r3, r7
 800041c:	4638      	mov	r0, r7
 800041e:	463c      	mov	r4, r7
 8000420:	46b8      	mov	r8, r7
 8000422:	46be      	mov	lr, r7
 8000424:	2620      	movs	r6, #32
 8000426:	fbb1 f1f7 	udiv	r1, r1, r7
 800042a:	eba2 0208 	sub.w	r2, r2, r8
 800042e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000432:	e766      	b.n	8000302 <__udivmoddi4+0xfa>
 8000434:	4601      	mov	r1, r0
 8000436:	e718      	b.n	800026a <__udivmoddi4+0x62>
 8000438:	4610      	mov	r0, r2
 800043a:	e72c      	b.n	8000296 <__udivmoddi4+0x8e>
 800043c:	f1c6 0220 	rsb	r2, r6, #32
 8000440:	fa2e f302 	lsr.w	r3, lr, r2
 8000444:	40b7      	lsls	r7, r6
 8000446:	40b1      	lsls	r1, r6
 8000448:	fa20 f202 	lsr.w	r2, r0, r2
 800044c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000450:	430a      	orrs	r2, r1
 8000452:	fbb3 f8fe 	udiv	r8, r3, lr
 8000456:	b2bc      	uxth	r4, r7
 8000458:	fb0e 3318 	mls	r3, lr, r8, r3
 800045c:	0c11      	lsrs	r1, r2, #16
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb08 f904 	mul.w	r9, r8, r4
 8000466:	40b0      	lsls	r0, r6
 8000468:	4589      	cmp	r9, r1
 800046a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046e:	b280      	uxth	r0, r0
 8000470:	d93e      	bls.n	80004f0 <__udivmoddi4+0x2e8>
 8000472:	1879      	adds	r1, r7, r1
 8000474:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000478:	d201      	bcs.n	800047e <__udivmoddi4+0x276>
 800047a:	4589      	cmp	r9, r1
 800047c:	d81f      	bhi.n	80004be <__udivmoddi4+0x2b6>
 800047e:	eba1 0109 	sub.w	r1, r1, r9
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fb09 f804 	mul.w	r8, r9, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	b292      	uxth	r2, r2
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	4542      	cmp	r2, r8
 8000496:	d229      	bcs.n	80004ec <__udivmoddi4+0x2e4>
 8000498:	18ba      	adds	r2, r7, r2
 800049a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800049e:	d2c4      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a0:	4542      	cmp	r2, r8
 80004a2:	d2c2      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a4:	f1a9 0102 	sub.w	r1, r9, #2
 80004a8:	443a      	add	r2, r7
 80004aa:	e7be      	b.n	800042a <__udivmoddi4+0x222>
 80004ac:	45f0      	cmp	r8, lr
 80004ae:	d29d      	bcs.n	80003ec <__udivmoddi4+0x1e4>
 80004b0:	ebbe 0302 	subs.w	r3, lr, r2
 80004b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b8:	3801      	subs	r0, #1
 80004ba:	46e1      	mov	r9, ip
 80004bc:	e796      	b.n	80003ec <__udivmoddi4+0x1e4>
 80004be:	eba7 0909 	sub.w	r9, r7, r9
 80004c2:	4449      	add	r1, r9
 80004c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004cc:	fb09 f804 	mul.w	r8, r9, r4
 80004d0:	e7db      	b.n	800048a <__udivmoddi4+0x282>
 80004d2:	4673      	mov	r3, lr
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1ce>
 80004d6:	4650      	mov	r0, sl
 80004d8:	e766      	b.n	80003a8 <__udivmoddi4+0x1a0>
 80004da:	4608      	mov	r0, r1
 80004dc:	e6fd      	b.n	80002da <__udivmoddi4+0xd2>
 80004de:	443b      	add	r3, r7
 80004e0:	3a02      	subs	r2, #2
 80004e2:	e733      	b.n	800034c <__udivmoddi4+0x144>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	443b      	add	r3, r7
 80004ea:	e71c      	b.n	8000326 <__udivmoddi4+0x11e>
 80004ec:	4649      	mov	r1, r9
 80004ee:	e79c      	b.n	800042a <__udivmoddi4+0x222>
 80004f0:	eba1 0109 	sub.w	r1, r1, r9
 80004f4:	46c4      	mov	ip, r8
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fb09 f804 	mul.w	r8, r9, r4
 80004fe:	e7c4      	b.n	800048a <__udivmoddi4+0x282>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <HAL_ADC_ConvHalfCpltCallback>:
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
	uint8_t chapolin_colorado = 3;
	chapolin_colorado += 1;
}
 8000504:	4770      	bx	lr
	...

08000508 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000508:	b500      	push	{lr}
 800050a:	b085      	sub	sp, #20

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800050c:	2300      	movs	r3, #0
 800050e:	9300      	str	r3, [sp, #0]
 8000510:	9301      	str	r3, [sp, #4]
 8000512:	9302      	str	r3, [sp, #8]
 8000514:	9303      	str	r3, [sp, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000516:	4814      	ldr	r0, [pc, #80]	@ (8000568 <MX_ADC1_Init+0x60>)
 8000518:	4a14      	ldr	r2, [pc, #80]	@ (800056c <MX_ADC1_Init+0x64>)
 800051a:	6002      	str	r2, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800051c:	6043      	str	r3, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800051e:	6083      	str	r3, [r0, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000520:	6103      	str	r3, [r0, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000522:	7603      	strb	r3, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000524:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000528:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800052a:	4a11      	ldr	r2, [pc, #68]	@ (8000570 <MX_ADC1_Init+0x68>)
 800052c:	6282      	str	r2, [r0, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800052e:	60c3      	str	r3, [r0, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000530:	2301      	movs	r3, #1
 8000532:	61c3      	str	r3, [r0, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000534:	f880 3030 	strb.w	r3, [r0, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000538:	6143      	str	r3, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800053a:	f000 fb83 	bl	8000c44 <HAL_ADC_Init>
 800053e:	b968      	cbnz	r0, 800055c <MX_ADC1_Init+0x54>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000540:	2309      	movs	r3, #9
 8000542:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 1;
 8000544:	2301      	movs	r3, #1
 8000546:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000548:	2300      	movs	r3, #0
 800054a:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800054c:	4669      	mov	r1, sp
 800054e:	4806      	ldr	r0, [pc, #24]	@ (8000568 <MX_ADC1_Init+0x60>)
 8000550:	f000 fc9a 	bl	8000e88 <HAL_ADC_ConfigChannel>
 8000554:	b928      	cbnz	r0, 8000562 <MX_ADC1_Init+0x5a>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000556:	b005      	add	sp, #20
 8000558:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800055c:	f000 f90c 	bl	8000778 <Error_Handler>
 8000560:	e7ee      	b.n	8000540 <MX_ADC1_Init+0x38>
    Error_Handler();
 8000562:	f000 f909 	bl	8000778 <Error_Handler>
}
 8000566:	e7f6      	b.n	8000556 <MX_ADC1_Init+0x4e>
 8000568:	20000088 	.word	0x20000088
 800056c:	40012000 	.word	0x40012000
 8000570:	0f000001 	.word	0x0f000001

08000574 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000574:	b530      	push	{r4, r5, lr}
 8000576:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000578:	2300      	movs	r3, #0
 800057a:	9303      	str	r3, [sp, #12]
 800057c:	9304      	str	r3, [sp, #16]
 800057e:	9305      	str	r3, [sp, #20]
 8000580:	9306      	str	r3, [sp, #24]
 8000582:	9307      	str	r3, [sp, #28]
  if(adcHandle->Instance==ADC1)
 8000584:	6802      	ldr	r2, [r0, #0]
 8000586:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800058a:	f503 3390 	add.w	r3, r3, #73728	@ 0x12000
 800058e:	429a      	cmp	r2, r3
 8000590:	d001      	beq.n	8000596 <HAL_ADC_MspInit+0x22>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000592:	b009      	add	sp, #36	@ 0x24
 8000594:	bd30      	pop	{r4, r5, pc}
 8000596:	4604      	mov	r4, r0
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000598:	2500      	movs	r5, #0
 800059a:	9501      	str	r5, [sp, #4]
 800059c:	f503 338c 	add.w	r3, r3, #71680	@ 0x11800
 80005a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80005a2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80005a6:	645a      	str	r2, [r3, #68]	@ 0x44
 80005a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80005aa:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 80005ae:	9201      	str	r2, [sp, #4]
 80005b0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005b2:	9502      	str	r5, [sp, #8]
 80005b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005b6:	f042 0202 	orr.w	r2, r2, #2
 80005ba:	631a      	str	r2, [r3, #48]	@ 0x30
 80005bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005be:	f003 0302 	and.w	r3, r3, #2
 80005c2:	9302      	str	r3, [sp, #8]
 80005c4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = ADC_Pin;
 80005c6:	2302      	movs	r3, #2
 80005c8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005ca:	2303      	movs	r3, #3
 80005cc:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(ADC_GPIO_Port, &GPIO_InitStruct);
 80005ce:	a903      	add	r1, sp, #12
 80005d0:	4810      	ldr	r0, [pc, #64]	@ (8000614 <HAL_ADC_MspInit+0xa0>)
 80005d2:	f000 ffb1 	bl	8001538 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream0;
 80005d6:	4810      	ldr	r0, [pc, #64]	@ (8000618 <HAL_ADC_MspInit+0xa4>)
 80005d8:	4b10      	ldr	r3, [pc, #64]	@ (800061c <HAL_ADC_MspInit+0xa8>)
 80005da:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80005dc:	6045      	str	r5, [r0, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80005de:	6085      	str	r5, [r0, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80005e0:	60c5      	str	r5, [r0, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80005e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80005e6:	6103      	str	r3, [r0, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80005e8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80005ec:	6143      	str	r3, [r0, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80005ee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005f2:	6183      	str	r3, [r0, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80005f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80005f8:	61c3      	str	r3, [r0, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80005fa:	6205      	str	r5, [r0, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80005fc:	6245      	str	r5, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80005fe:	f000 fe11 	bl	8001224 <HAL_DMA_Init>
 8000602:	b918      	cbnz	r0, 800060c <HAL_ADC_MspInit+0x98>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000604:	4b04      	ldr	r3, [pc, #16]	@ (8000618 <HAL_ADC_MspInit+0xa4>)
 8000606:	63a3      	str	r3, [r4, #56]	@ 0x38
 8000608:	639c      	str	r4, [r3, #56]	@ 0x38
}
 800060a:	e7c2      	b.n	8000592 <HAL_ADC_MspInit+0x1e>
      Error_Handler();
 800060c:	f000 f8b4 	bl	8000778 <Error_Handler>
 8000610:	e7f8      	b.n	8000604 <HAL_ADC_MspInit+0x90>
 8000612:	bf00      	nop
 8000614:	40020400 	.word	0x40020400
 8000618:	20000028 	.word	0x20000028
 800061c:	40026410 	.word	0x40026410

08000620 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000620:	b500      	push	{lr}
 8000622:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000624:	2100      	movs	r1, #0
 8000626:	9101      	str	r1, [sp, #4]
 8000628:	4b09      	ldr	r3, [pc, #36]	@ (8000650 <MX_DMA_Init+0x30>)
 800062a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800062c:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8000630:	631a      	str	r2, [r3, #48]	@ 0x30
 8000632:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000634:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000638:	9301      	str	r3, [sp, #4]
 800063a:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800063c:	460a      	mov	r2, r1
 800063e:	2038      	movs	r0, #56	@ 0x38
 8000640:	f000 fd4c 	bl	80010dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000644:	2038      	movs	r0, #56	@ 0x38
 8000646:	f000 fd59 	bl	80010fc <HAL_NVIC_EnableIRQ>

}
 800064a:	b003      	add	sp, #12
 800064c:	f85d fb04 	ldr.w	pc, [sp], #4
 8000650:	40023800 	.word	0x40023800

08000654 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000654:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000656:	b08b      	sub	sp, #44	@ 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000658:	2400      	movs	r4, #0
 800065a:	9405      	str	r4, [sp, #20]
 800065c:	9406      	str	r4, [sp, #24]
 800065e:	9407      	str	r4, [sp, #28]
 8000660:	9408      	str	r4, [sp, #32]
 8000662:	9409      	str	r4, [sp, #36]	@ 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000664:	9401      	str	r4, [sp, #4]
 8000666:	4b38      	ldr	r3, [pc, #224]	@ (8000748 <MX_GPIO_Init+0xf4>)
 8000668:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800066a:	f042 0204 	orr.w	r2, r2, #4
 800066e:	631a      	str	r2, [r3, #48]	@ 0x30
 8000670:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000672:	f002 0204 	and.w	r2, r2, #4
 8000676:	9201      	str	r2, [sp, #4]
 8000678:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800067a:	9402      	str	r4, [sp, #8]
 800067c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800067e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000682:	631a      	str	r2, [r3, #48]	@ 0x30
 8000684:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000686:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 800068a:	9202      	str	r2, [sp, #8]
 800068c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800068e:	9403      	str	r4, [sp, #12]
 8000690:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000692:	f042 0201 	orr.w	r2, r2, #1
 8000696:	631a      	str	r2, [r3, #48]	@ 0x30
 8000698:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800069a:	f002 0201 	and.w	r2, r2, #1
 800069e:	9203      	str	r2, [sp, #12]
 80006a0:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006a2:	9404      	str	r4, [sp, #16]
 80006a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80006a6:	f042 0202 	orr.w	r2, r2, #2
 80006aa:	631a      	str	r2, [r3, #48]	@ 0x30
 80006ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ae:	f003 0302 	and.w	r3, r3, #2
 80006b2:	9304      	str	r3, [sp, #16]
 80006b4:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_PIN_GPIO_Port, LED_PIN_Pin, GPIO_PIN_RESET);
 80006b6:	4f25      	ldr	r7, [pc, #148]	@ (800074c <MX_GPIO_Init+0xf8>)
 80006b8:	4622      	mov	r2, r4
 80006ba:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006be:	4638      	mov	r0, r7
 80006c0:	f001 f81e 	bl	8001700 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_PIN_Pin */
  GPIO_InitStruct.Pin = LED_PIN_Pin;
 80006c4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006c8:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ca:	2601      	movs	r6, #1
 80006cc:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ce:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d0:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LED_PIN_GPIO_Port, &GPIO_InitStruct);
 80006d2:	a905      	add	r1, sp, #20
 80006d4:	4638      	mov	r0, r7
 80006d6:	f000 ff2f 	bl	8001538 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80006da:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80006de:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006e0:	2503      	movs	r5, #3
 80006e2:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e4:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006e6:	a905      	add	r1, sp, #20
 80006e8:	4638      	mov	r0, r7
 80006ea:	f000 ff25 	bl	8001538 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80006ee:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006f0:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f2:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80006f4:	a905      	add	r1, sp, #20
 80006f6:	4816      	ldr	r0, [pc, #88]	@ (8000750 <MX_GPIO_Init+0xfc>)
 80006f8:	f000 ff1e 	bl	8001538 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY_Pin */
  GPIO_InitStruct.Pin = KEY_Pin;
 80006fc:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006fe:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000702:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000704:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 8000706:	4e13      	ldr	r6, [pc, #76]	@ (8000754 <MX_GPIO_Init+0x100>)
 8000708:	a905      	add	r1, sp, #20
 800070a:	4630      	mov	r0, r6
 800070c:	f000 ff14 	bl	8001538 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4
                           PA5 PA6 PA7 PA8
                           PA9 PA10 PA11 PA12
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8000710:	f649 73fe 	movw	r3, #40958	@ 0x9ffe
 8000714:	9305      	str	r3, [sp, #20]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000716:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000718:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800071a:	a905      	add	r1, sp, #20
 800071c:	4630      	mov	r0, r6
 800071e:	f000 ff0b 	bl	8001538 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB2 PB10 PB12
                           PB13 PB14 PB15 PB3
                           PB4 PB5 PB6 PB7
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_12
 8000722:	f24f 73fd 	movw	r3, #63485	@ 0xf7fd
 8000726:	9305      	str	r3, [sp, #20]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000728:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072a:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800072c:	a905      	add	r1, sp, #20
 800072e:	480a      	ldr	r0, [pc, #40]	@ (8000758 <MX_GPIO_Init+0x104>)
 8000730:	f000 ff02 	bl	8001538 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000734:	4622      	mov	r2, r4
 8000736:	4621      	mov	r1, r4
 8000738:	2006      	movs	r0, #6
 800073a:	f000 fccf 	bl	80010dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800073e:	2006      	movs	r0, #6
 8000740:	f000 fcdc 	bl	80010fc <HAL_NVIC_EnableIRQ>

}
 8000744:	b00b      	add	sp, #44	@ 0x2c
 8000746:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000748:	40023800 	.word	0x40023800
 800074c:	40020800 	.word	0x40020800
 8000750:	40021c00 	.word	0x40021c00
 8000754:	40020000 	.word	0x40020000
 8000758:	40020400 	.word	0x40020400

0800075c <HAL_GPIO_EXTI_Callback>:
  }
}

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
	if (GPIO_Pin == KEY_Pin) {
 800075c:	2801      	cmp	r0, #1
 800075e:	d000      	beq.n	8000762 <HAL_GPIO_EXTI_Callback+0x6>
 8000760:	4770      	bx	lr
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000762:	b508      	push	{r3, lr}
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*) convs, 8);
 8000764:	2208      	movs	r2, #8
 8000766:	4902      	ldr	r1, [pc, #8]	@ (8000770 <HAL_GPIO_EXTI_Callback+0x14>)
 8000768:	4802      	ldr	r0, [pc, #8]	@ (8000774 <HAL_GPIO_EXTI_Callback+0x18>)
 800076a:	f000 fa97 	bl	8000c9c <HAL_ADC_Start_DMA>
	}
	return;
}
 800076e:	bd08      	pop	{r3, pc}
 8000770:	200000d0 	.word	0x200000d0
 8000774:	20000088 	.word	0x20000088

08000778 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000778:	b508      	push	{r3, lr}
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800077a:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
		HAL_GPIO_WritePin(LED_PIN_GPIO_Port, LED_PIN_Pin, GPIO_PIN_SET);
 800077c:	4c53      	ldr	r4, [pc, #332]	@ (80008cc <Error_Handler+0x154>)
 800077e:	2201      	movs	r2, #1
 8000780:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000784:	4620      	mov	r0, r4
 8000786:	f000 ffbb 	bl	8001700 <HAL_GPIO_WritePin>
		HAL_Delay(125);
 800078a:	207d      	movs	r0, #125	@ 0x7d
 800078c:	f000 f9ac 	bl	8000ae8 <HAL_Delay>
		HAL_GPIO_WritePin(LED_PIN_GPIO_Port, LED_PIN_Pin, GPIO_PIN_RESET);
 8000790:	2200      	movs	r2, #0
 8000792:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000796:	4620      	mov	r0, r4
 8000798:	f000 ffb2 	bl	8001700 <HAL_GPIO_WritePin>
		HAL_Delay(125);
 800079c:	207d      	movs	r0, #125	@ 0x7d
 800079e:	f000 f9a3 	bl	8000ae8 <HAL_Delay>

		HAL_GPIO_WritePin(LED_PIN_GPIO_Port, LED_PIN_Pin, GPIO_PIN_SET);
 80007a2:	2201      	movs	r2, #1
 80007a4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007a8:	4620      	mov	r0, r4
 80007aa:	f000 ffa9 	bl	8001700 <HAL_GPIO_WritePin>
		HAL_Delay(125);
 80007ae:	207d      	movs	r0, #125	@ 0x7d
 80007b0:	f000 f99a 	bl	8000ae8 <HAL_Delay>
		HAL_GPIO_WritePin(LED_PIN_GPIO_Port, LED_PIN_Pin, GPIO_PIN_RESET);
 80007b4:	2200      	movs	r2, #0
 80007b6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007ba:	4620      	mov	r0, r4
 80007bc:	f000 ffa0 	bl	8001700 <HAL_GPIO_WritePin>
		HAL_Delay(125);
 80007c0:	207d      	movs	r0, #125	@ 0x7d
 80007c2:	f000 f991 	bl	8000ae8 <HAL_Delay>

		HAL_GPIO_WritePin(LED_PIN_GPIO_Port, LED_PIN_Pin, GPIO_PIN_SET);
 80007c6:	2201      	movs	r2, #1
 80007c8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007cc:	4620      	mov	r0, r4
 80007ce:	f000 ff97 	bl	8001700 <HAL_GPIO_WritePin>
		HAL_Delay(125);
 80007d2:	207d      	movs	r0, #125	@ 0x7d
 80007d4:	f000 f988 	bl	8000ae8 <HAL_Delay>
		HAL_GPIO_WritePin(LED_PIN_GPIO_Port, LED_PIN_Pin, GPIO_PIN_RESET);
 80007d8:	2200      	movs	r2, #0
 80007da:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007de:	4620      	mov	r0, r4
 80007e0:	f000 ff8e 	bl	8001700 <HAL_GPIO_WritePin>
		HAL_Delay(125);
 80007e4:	207d      	movs	r0, #125	@ 0x7d
 80007e6:	f000 f97f 	bl	8000ae8 <HAL_Delay>

		HAL_GPIO_WritePin(LED_PIN_GPIO_Port, LED_PIN_Pin, GPIO_PIN_SET);
 80007ea:	2201      	movs	r2, #1
 80007ec:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007f0:	4620      	mov	r0, r4
 80007f2:	f000 ff85 	bl	8001700 <HAL_GPIO_WritePin>
		HAL_Delay(250);
 80007f6:	20fa      	movs	r0, #250	@ 0xfa
 80007f8:	f000 f976 	bl	8000ae8 <HAL_Delay>
		HAL_GPIO_WritePin(LED_PIN_GPIO_Port, LED_PIN_Pin, GPIO_PIN_RESET);
 80007fc:	2200      	movs	r2, #0
 80007fe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000802:	4620      	mov	r0, r4
 8000804:	f000 ff7c 	bl	8001700 <HAL_GPIO_WritePin>
		HAL_Delay(250);
 8000808:	20fa      	movs	r0, #250	@ 0xfa
 800080a:	f000 f96d 	bl	8000ae8 <HAL_Delay>

		HAL_GPIO_WritePin(LED_PIN_GPIO_Port, LED_PIN_Pin, GPIO_PIN_SET);
 800080e:	2201      	movs	r2, #1
 8000810:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000814:	4620      	mov	r0, r4
 8000816:	f000 ff73 	bl	8001700 <HAL_GPIO_WritePin>
		HAL_Delay(250);
 800081a:	20fa      	movs	r0, #250	@ 0xfa
 800081c:	f000 f964 	bl	8000ae8 <HAL_Delay>
		HAL_GPIO_WritePin(LED_PIN_GPIO_Port, LED_PIN_Pin, GPIO_PIN_RESET);
 8000820:	2200      	movs	r2, #0
 8000822:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000826:	4620      	mov	r0, r4
 8000828:	f000 ff6a 	bl	8001700 <HAL_GPIO_WritePin>
		HAL_Delay(250);
 800082c:	20fa      	movs	r0, #250	@ 0xfa
 800082e:	f000 f95b 	bl	8000ae8 <HAL_Delay>

		HAL_GPIO_WritePin(LED_PIN_GPIO_Port, LED_PIN_Pin, GPIO_PIN_SET);
 8000832:	2201      	movs	r2, #1
 8000834:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000838:	4620      	mov	r0, r4
 800083a:	f000 ff61 	bl	8001700 <HAL_GPIO_WritePin>
		HAL_Delay(250);
 800083e:	20fa      	movs	r0, #250	@ 0xfa
 8000840:	f000 f952 	bl	8000ae8 <HAL_Delay>
		HAL_GPIO_WritePin(LED_PIN_GPIO_Port, LED_PIN_Pin, GPIO_PIN_RESET);
 8000844:	2200      	movs	r2, #0
 8000846:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800084a:	4620      	mov	r0, r4
 800084c:	f000 ff58 	bl	8001700 <HAL_GPIO_WritePin>
		HAL_Delay(250);
 8000850:	20fa      	movs	r0, #250	@ 0xfa
 8000852:	f000 f949 	bl	8000ae8 <HAL_Delay>

		HAL_GPIO_WritePin(LED_PIN_GPIO_Port, LED_PIN_Pin, GPIO_PIN_SET);
 8000856:	2201      	movs	r2, #1
 8000858:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800085c:	4620      	mov	r0, r4
 800085e:	f000 ff4f 	bl	8001700 <HAL_GPIO_WritePin>
		HAL_Delay(125);
 8000862:	207d      	movs	r0, #125	@ 0x7d
 8000864:	f000 f940 	bl	8000ae8 <HAL_Delay>
		HAL_GPIO_WritePin(LED_PIN_GPIO_Port, LED_PIN_Pin, GPIO_PIN_RESET);
 8000868:	2200      	movs	r2, #0
 800086a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800086e:	4620      	mov	r0, r4
 8000870:	f000 ff46 	bl	8001700 <HAL_GPIO_WritePin>
		HAL_Delay(125);
 8000874:	207d      	movs	r0, #125	@ 0x7d
 8000876:	f000 f937 	bl	8000ae8 <HAL_Delay>

		HAL_GPIO_WritePin(LED_PIN_GPIO_Port, LED_PIN_Pin, GPIO_PIN_SET);
 800087a:	2201      	movs	r2, #1
 800087c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000880:	4620      	mov	r0, r4
 8000882:	f000 ff3d 	bl	8001700 <HAL_GPIO_WritePin>
		HAL_Delay(125);
 8000886:	207d      	movs	r0, #125	@ 0x7d
 8000888:	f000 f92e 	bl	8000ae8 <HAL_Delay>
		HAL_GPIO_WritePin(LED_PIN_GPIO_Port, LED_PIN_Pin, GPIO_PIN_RESET);
 800088c:	2200      	movs	r2, #0
 800088e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000892:	4620      	mov	r0, r4
 8000894:	f000 ff34 	bl	8001700 <HAL_GPIO_WritePin>
		HAL_Delay(125);
 8000898:	207d      	movs	r0, #125	@ 0x7d
 800089a:	f000 f925 	bl	8000ae8 <HAL_Delay>

		HAL_GPIO_WritePin(LED_PIN_GPIO_Port, LED_PIN_Pin, GPIO_PIN_SET);
 800089e:	2201      	movs	r2, #1
 80008a0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008a4:	4620      	mov	r0, r4
 80008a6:	f000 ff2b 	bl	8001700 <HAL_GPIO_WritePin>
		HAL_Delay(125);
 80008aa:	207d      	movs	r0, #125	@ 0x7d
 80008ac:	f000 f91c 	bl	8000ae8 <HAL_Delay>
		HAL_GPIO_WritePin(LED_PIN_GPIO_Port, LED_PIN_Pin, GPIO_PIN_RESET);
 80008b0:	2200      	movs	r2, #0
 80008b2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008b6:	4620      	mov	r0, r4
 80008b8:	f000 ff22 	bl	8001700 <HAL_GPIO_WritePin>
		HAL_Delay(125);
 80008bc:	207d      	movs	r0, #125	@ 0x7d
 80008be:	f000 f913 	bl	8000ae8 <HAL_Delay>

		HAL_Delay(1000);
 80008c2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80008c6:	f000 f90f 	bl	8000ae8 <HAL_Delay>
	while (1) {
 80008ca:	e757      	b.n	800077c <Error_Handler+0x4>
 80008cc:	40020800 	.word	0x40020800

080008d0 <SystemClock_Config>:
{
 80008d0:	b500      	push	{lr}
 80008d2:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008d4:	2230      	movs	r2, #48	@ 0x30
 80008d6:	2100      	movs	r1, #0
 80008d8:	a808      	add	r0, sp, #32
 80008da:	f001 fa25 	bl	8001d28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008de:	2300      	movs	r3, #0
 80008e0:	9303      	str	r3, [sp, #12]
 80008e2:	9304      	str	r3, [sp, #16]
 80008e4:	9305      	str	r3, [sp, #20]
 80008e6:	9306      	str	r3, [sp, #24]
 80008e8:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ea:	9301      	str	r3, [sp, #4]
 80008ec:	4a18      	ldr	r2, [pc, #96]	@ (8000950 <SystemClock_Config+0x80>)
 80008ee:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 80008f0:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 80008f4:	6411      	str	r1, [r2, #64]	@ 0x40
 80008f6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80008f8:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 80008fc:	9201      	str	r2, [sp, #4]
 80008fe:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000900:	9302      	str	r3, [sp, #8]
 8000902:	4a14      	ldr	r2, [pc, #80]	@ (8000954 <SystemClock_Config+0x84>)
 8000904:	6811      	ldr	r1, [r2, #0]
 8000906:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 800090a:	6011      	str	r1, [r2, #0]
 800090c:	6812      	ldr	r2, [r2, #0]
 800090e:	f402 4240 	and.w	r2, r2, #49152	@ 0xc000
 8000912:	9202      	str	r2, [sp, #8]
 8000914:	9a02      	ldr	r2, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000916:	2202      	movs	r2, #2
 8000918:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800091a:	2201      	movs	r2, #1
 800091c:	920b      	str	r2, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800091e:	2210      	movs	r2, #16
 8000920:	920c      	str	r2, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000922:	930e      	str	r3, [sp, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000924:	a808      	add	r0, sp, #32
 8000926:	f000 feff 	bl	8001728 <HAL_RCC_OscConfig>
 800092a:	b968      	cbnz	r0, 8000948 <SystemClock_Config+0x78>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800092c:	230f      	movs	r3, #15
 800092e:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000930:	2100      	movs	r1, #0
 8000932:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000934:	9105      	str	r1, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000936:	9106      	str	r1, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000938:	9107      	str	r1, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800093a:	a803      	add	r0, sp, #12
 800093c:	f001 f944 	bl	8001bc8 <HAL_RCC_ClockConfig>
 8000940:	b920      	cbnz	r0, 800094c <SystemClock_Config+0x7c>
}
 8000942:	b015      	add	sp, #84	@ 0x54
 8000944:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000948:	f7ff ff16 	bl	8000778 <Error_Handler>
    Error_Handler();
 800094c:	f7ff ff14 	bl	8000778 <Error_Handler>
 8000950:	40023800 	.word	0x40023800
 8000954:	40007000 	.word	0x40007000

08000958 <main>:
{
 8000958:	b508      	push	{r3, lr}
  HAL_Init();
 800095a:	f000 f899 	bl	8000a90 <HAL_Init>
  SystemClock_Config();
 800095e:	f7ff ffb7 	bl	80008d0 <SystemClock_Config>
  MX_GPIO_Init();
 8000962:	f7ff fe77 	bl	8000654 <MX_GPIO_Init>
  MX_DMA_Init();
 8000966:	f7ff fe5b 	bl	8000620 <MX_DMA_Init>
  MX_ADC1_Init();
 800096a:	f7ff fdcd 	bl	8000508 <MX_ADC1_Init>
	while (1) {
 800096e:	e7fe      	b.n	800096e <main+0x16>

08000970 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000970:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000972:	2100      	movs	r1, #0
 8000974:	9100      	str	r1, [sp, #0]
 8000976:	4b0b      	ldr	r3, [pc, #44]	@ (80009a4 <HAL_MspInit+0x34>)
 8000978:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800097a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800097e:	645a      	str	r2, [r3, #68]	@ 0x44
 8000980:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000982:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8000986:	9200      	str	r2, [sp, #0]
 8000988:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800098a:	9101      	str	r1, [sp, #4]
 800098c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800098e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000992:	641a      	str	r2, [r3, #64]	@ 0x40
 8000994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000996:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800099a:	9301      	str	r3, [sp, #4]
 800099c:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800099e:	b002      	add	sp, #8
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	40023800 	.word	0x40023800

080009a8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009a8:	e7fe      	b.n	80009a8 <NMI_Handler>

080009aa <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009aa:	e7fe      	b.n	80009aa <HardFault_Handler>

080009ac <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009ac:	e7fe      	b.n	80009ac <MemManage_Handler>

080009ae <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ae:	e7fe      	b.n	80009ae <BusFault_Handler>

080009b0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009b0:	e7fe      	b.n	80009b0 <UsageFault_Handler>

080009b2 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009b2:	4770      	bx	lr

080009b4 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009b4:	4770      	bx	lr

080009b6 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009b6:	4770      	bx	lr

080009b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009b8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009ba:	f000 f883 	bl	8000ac4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009be:	bd08      	pop	{r3, pc}

080009c0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80009c0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY_Pin);
 80009c2:	2001      	movs	r0, #1
 80009c4:	f000 fea2 	bl	800170c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80009c8:	bd08      	pop	{r3, pc}
	...

080009cc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80009cc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80009ce:	4802      	ldr	r0, [pc, #8]	@ (80009d8 <DMA2_Stream0_IRQHandler+0xc>)
 80009d0:	f000 fcc4 	bl	800135c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80009d4:	bd08      	pop	{r3, pc}
 80009d6:	bf00      	nop
 80009d8:	20000028 	.word	0x20000028

080009dc <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009dc:	4a03      	ldr	r2, [pc, #12]	@ (80009ec <SystemInit+0x10>)
 80009de:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80009e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009e6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009ea:	4770      	bx	lr
 80009ec:	e000ed00 	.word	0xe000ed00

080009f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80009f0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a28 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80009f4:	f7ff fff2 	bl	80009dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009f8:	480c      	ldr	r0, [pc, #48]	@ (8000a2c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009fa:	490d      	ldr	r1, [pc, #52]	@ (8000a30 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009fc:	4a0d      	ldr	r2, [pc, #52]	@ (8000a34 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a00:	e002      	b.n	8000a08 <LoopCopyDataInit>

08000a02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a06:	3304      	adds	r3, #4

08000a08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a0c:	d3f9      	bcc.n	8000a02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a0e:	4a0a      	ldr	r2, [pc, #40]	@ (8000a38 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a10:	4c0a      	ldr	r4, [pc, #40]	@ (8000a3c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a14:	e001      	b.n	8000a1a <LoopFillZerobss>

08000a16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a18:	3204      	adds	r2, #4

08000a1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a1c:	d3fb      	bcc.n	8000a16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a1e:	f001 f98b 	bl	8001d38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a22:	f7ff ff99 	bl	8000958 <main>
  bx  lr    
 8000a26:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a28:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a30:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a34:	08001dc0 	.word	0x08001dc0
  ldr r2, =_sbss
 8000a38:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a3c:	200000e4 	.word	0x200000e4

08000a40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a40:	e7fe      	b.n	8000a40 <ADC_IRQHandler>
	...

08000a44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a44:	b510      	push	{r4, lr}
 8000a46:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a48:	4b0e      	ldr	r3, [pc, #56]	@ (8000a84 <HAL_InitTick+0x40>)
 8000a4a:	781a      	ldrb	r2, [r3, #0]
 8000a4c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a50:	fbb3 f3f2 	udiv	r3, r3, r2
 8000a54:	4a0c      	ldr	r2, [pc, #48]	@ (8000a88 <HAL_InitTick+0x44>)
 8000a56:	6810      	ldr	r0, [r2, #0]
 8000a58:	fbb0 f0f3 	udiv	r0, r0, r3
 8000a5c:	f000 fb52 	bl	8001104 <HAL_SYSTICK_Config>
 8000a60:	b968      	cbnz	r0, 8000a7e <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a62:	2c0f      	cmp	r4, #15
 8000a64:	d901      	bls.n	8000a6a <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000a66:	2001      	movs	r0, #1
 8000a68:	e00a      	b.n	8000a80 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	4621      	mov	r1, r4
 8000a6e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a72:	f000 fb33 	bl	80010dc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a76:	4b05      	ldr	r3, [pc, #20]	@ (8000a8c <HAL_InitTick+0x48>)
 8000a78:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000a7a:	2000      	movs	r0, #0
 8000a7c:	e000      	b.n	8000a80 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000a7e:	2001      	movs	r0, #1
}
 8000a80:	bd10      	pop	{r4, pc}
 8000a82:	bf00      	nop
 8000a84:	20000004 	.word	0x20000004
 8000a88:	20000000 	.word	0x20000000
 8000a8c:	20000008 	.word	0x20000008

08000a90 <HAL_Init>:
{
 8000a90:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a92:	4b0b      	ldr	r3, [pc, #44]	@ (8000ac0 <HAL_Init+0x30>)
 8000a94:	681a      	ldr	r2, [r3, #0]
 8000a96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000a9a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a9c:	681a      	ldr	r2, [r3, #0]
 8000a9e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000aa2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000aa4:	681a      	ldr	r2, [r3, #0]
 8000aa6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000aaa:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aac:	2003      	movs	r0, #3
 8000aae:	f000 fb03 	bl	80010b8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ab2:	200f      	movs	r0, #15
 8000ab4:	f7ff ffc6 	bl	8000a44 <HAL_InitTick>
  HAL_MspInit();
 8000ab8:	f7ff ff5a 	bl	8000970 <HAL_MspInit>
}
 8000abc:	2000      	movs	r0, #0
 8000abe:	bd08      	pop	{r3, pc}
 8000ac0:	40023c00 	.word	0x40023c00

08000ac4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000ac4:	4a03      	ldr	r2, [pc, #12]	@ (8000ad4 <HAL_IncTick+0x10>)
 8000ac6:	6811      	ldr	r1, [r2, #0]
 8000ac8:	4b03      	ldr	r3, [pc, #12]	@ (8000ad8 <HAL_IncTick+0x14>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	440b      	add	r3, r1
 8000ace:	6013      	str	r3, [r2, #0]
}
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	200000e0 	.word	0x200000e0
 8000ad8:	20000004 	.word	0x20000004

08000adc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000adc:	4b01      	ldr	r3, [pc, #4]	@ (8000ae4 <HAL_GetTick+0x8>)
 8000ade:	6818      	ldr	r0, [r3, #0]
}
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	200000e0 	.word	0x200000e0

08000ae8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ae8:	b538      	push	{r3, r4, r5, lr}
 8000aea:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000aec:	f7ff fff6 	bl	8000adc <HAL_GetTick>
 8000af0:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000af2:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 8000af6:	d002      	beq.n	8000afe <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000af8:	4b04      	ldr	r3, [pc, #16]	@ (8000b0c <HAL_Delay+0x24>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000afe:	f7ff ffed 	bl	8000adc <HAL_GetTick>
 8000b02:	1b40      	subs	r0, r0, r5
 8000b04:	42a0      	cmp	r0, r4
 8000b06:	d3fa      	bcc.n	8000afe <HAL_Delay+0x16>
  {
  }
}
 8000b08:	bd38      	pop	{r3, r4, r5, pc}
 8000b0a:	bf00      	nop
 8000b0c:	20000004 	.word	0x20000004

08000b10 <ADC_Init>:
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000b10:	4b4a      	ldr	r3, [pc, #296]	@ (8000c3c <ADC_Init+0x12c>)
 8000b12:	685a      	ldr	r2, [r3, #4]
 8000b14:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8000b18:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000b1a:	685a      	ldr	r2, [r3, #4]
 8000b1c:	6841      	ldr	r1, [r0, #4]
 8000b1e:	430a      	orrs	r2, r1
 8000b20:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000b22:	6802      	ldr	r2, [r0, #0]
 8000b24:	6853      	ldr	r3, [r2, #4]
 8000b26:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000b2a:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000b2c:	6802      	ldr	r2, [r0, #0]
 8000b2e:	6853      	ldr	r3, [r2, #4]
 8000b30:	6901      	ldr	r1, [r0, #16]
 8000b32:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8000b36:	6053      	str	r3, [r2, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000b38:	6802      	ldr	r2, [r0, #0]
 8000b3a:	6853      	ldr	r3, [r2, #4]
 8000b3c:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 8000b40:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000b42:	6802      	ldr	r2, [r0, #0]
 8000b44:	6853      	ldr	r3, [r2, #4]
 8000b46:	6881      	ldr	r1, [r0, #8]
 8000b48:	430b      	orrs	r3, r1
 8000b4a:	6053      	str	r3, [r2, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000b4c:	6802      	ldr	r2, [r0, #0]
 8000b4e:	6893      	ldr	r3, [r2, #8]
 8000b50:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000b54:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000b56:	6802      	ldr	r2, [r0, #0]
 8000b58:	6893      	ldr	r3, [r2, #8]
 8000b5a:	68c1      	ldr	r1, [r0, #12]
 8000b5c:	430b      	orrs	r3, r1
 8000b5e:	6093      	str	r3, [r2, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000b60:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8000b62:	4b37      	ldr	r3, [pc, #220]	@ (8000c40 <ADC_Init+0x130>)
 8000b64:	429a      	cmp	r2, r3
 8000b66:	d057      	beq.n	8000c18 <ADC_Init+0x108>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000b68:	6802      	ldr	r2, [r0, #0]
 8000b6a:	6893      	ldr	r3, [r2, #8]
 8000b6c:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8000b70:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000b72:	6802      	ldr	r2, [r0, #0]
 8000b74:	6893      	ldr	r3, [r2, #8]
 8000b76:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8000b78:	430b      	orrs	r3, r1
 8000b7a:	6093      	str	r3, [r2, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000b7c:	6802      	ldr	r2, [r0, #0]
 8000b7e:	6893      	ldr	r3, [r2, #8]
 8000b80:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8000b84:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000b86:	6802      	ldr	r2, [r0, #0]
 8000b88:	6893      	ldr	r3, [r2, #8]
 8000b8a:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8000b8c:	430b      	orrs	r3, r1
 8000b8e:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000b90:	6802      	ldr	r2, [r0, #0]
 8000b92:	6893      	ldr	r3, [r2, #8]
 8000b94:	f023 0302 	bic.w	r3, r3, #2
 8000b98:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000b9a:	6802      	ldr	r2, [r0, #0]
 8000b9c:	6893      	ldr	r3, [r2, #8]
 8000b9e:	7e01      	ldrb	r1, [r0, #24]
 8000ba0:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8000ba4:	6093      	str	r3, [r2, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8000ba6:	f890 3020 	ldrb.w	r3, [r0, #32]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d03f      	beq.n	8000c2e <ADC_Init+0x11e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000bae:	6802      	ldr	r2, [r0, #0]
 8000bb0:	6853      	ldr	r3, [r2, #4]
 8000bb2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000bb6:	6053      	str	r3, [r2, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000bb8:	6802      	ldr	r2, [r0, #0]
 8000bba:	6853      	ldr	r3, [r2, #4]
 8000bbc:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8000bc0:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000bc2:	6801      	ldr	r1, [r0, #0]
 8000bc4:	684b      	ldr	r3, [r1, #4]
 8000bc6:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 8000bc8:	3a01      	subs	r2, #1
 8000bca:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 8000bce:	604b      	str	r3, [r1, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000bd0:	6802      	ldr	r2, [r0, #0]
 8000bd2:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8000bd4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8000bd8:	62d3      	str	r3, [r2, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000bda:	6801      	ldr	r1, [r0, #0]
 8000bdc:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 8000bde:	69c2      	ldr	r2, [r0, #28]
 8000be0:	3a01      	subs	r2, #1
 8000be2:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8000be6:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000be8:	6802      	ldr	r2, [r0, #0]
 8000bea:	6893      	ldr	r3, [r2, #8]
 8000bec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8000bf0:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000bf2:	6802      	ldr	r2, [r0, #0]
 8000bf4:	6893      	ldr	r3, [r2, #8]
 8000bf6:	f890 1030 	ldrb.w	r1, [r0, #48]	@ 0x30
 8000bfa:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 8000bfe:	6093      	str	r3, [r2, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000c00:	6802      	ldr	r2, [r0, #0]
 8000c02:	6893      	ldr	r3, [r2, #8]
 8000c04:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000c08:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000c0a:	6802      	ldr	r2, [r0, #0]
 8000c0c:	6893      	ldr	r3, [r2, #8]
 8000c0e:	6941      	ldr	r1, [r0, #20]
 8000c10:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8000c14:	6093      	str	r3, [r2, #8]
}
 8000c16:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000c18:	6802      	ldr	r2, [r0, #0]
 8000c1a:	6893      	ldr	r3, [r2, #8]
 8000c1c:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8000c20:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000c22:	6802      	ldr	r2, [r0, #0]
 8000c24:	6893      	ldr	r3, [r2, #8]
 8000c26:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8000c2a:	6093      	str	r3, [r2, #8]
 8000c2c:	e7b0      	b.n	8000b90 <ADC_Init+0x80>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000c2e:	6802      	ldr	r2, [r0, #0]
 8000c30:	6853      	ldr	r3, [r2, #4]
 8000c32:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000c36:	6053      	str	r3, [r2, #4]
 8000c38:	e7ca      	b.n	8000bd0 <ADC_Init+0xc0>
 8000c3a:	bf00      	nop
 8000c3c:	40012300 	.word	0x40012300
 8000c40:	0f000001 	.word	0x0f000001

08000c44 <HAL_ADC_Init>:
  if (hadc == NULL)
 8000c44:	b338      	cbz	r0, 8000c96 <HAL_ADC_Init+0x52>
{
 8000c46:	b510      	push	{r4, lr}
 8000c48:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000c4a:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8000c4c:	b143      	cbz	r3, 8000c60 <HAL_ADC_Init+0x1c>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000c4e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000c50:	f013 0f10 	tst.w	r3, #16
 8000c54:	d00b      	beq.n	8000c6e <HAL_ADC_Init+0x2a>
    tmp_hal_status = HAL_ERROR;
 8000c56:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8000c58:	2300      	movs	r3, #0
 8000c5a:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8000c5e:	bd10      	pop	{r4, pc}
    HAL_ADC_MspInit(hadc);
 8000c60:	f7ff fc88 	bl	8000574 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8000c64:	2300      	movs	r3, #0
 8000c66:	6463      	str	r3, [r4, #68]	@ 0x44
    hadc->Lock = HAL_UNLOCKED;
 8000c68:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
 8000c6c:	e7ef      	b.n	8000c4e <HAL_ADC_Init+0xa>
    ADC_STATE_CLR_SET(hadc->State,
 8000c6e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000c70:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000c74:	f023 0302 	bic.w	r3, r3, #2
 8000c78:	f043 0302 	orr.w	r3, r3, #2
 8000c7c:	6423      	str	r3, [r4, #64]	@ 0x40
    ADC_Init(hadc);
 8000c7e:	4620      	mov	r0, r4
 8000c80:	f7ff ff46 	bl	8000b10 <ADC_Init>
    ADC_CLEAR_ERRORCODE(hadc);
 8000c84:	2000      	movs	r0, #0
 8000c86:	6460      	str	r0, [r4, #68]	@ 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8000c88:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000c8a:	f023 0303 	bic.w	r3, r3, #3
 8000c8e:	f043 0301 	orr.w	r3, r3, #1
 8000c92:	6423      	str	r3, [r4, #64]	@ 0x40
 8000c94:	e7e0      	b.n	8000c58 <HAL_ADC_Init+0x14>
    return HAL_ERROR;
 8000c96:	2001      	movs	r0, #1
}
 8000c98:	4770      	bx	lr
	...

08000c9c <HAL_ADC_Start_DMA>:
{
 8000c9c:	b510      	push	{r4, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	4613      	mov	r3, r2
  __IO uint32_t counter = 0U;
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8000ca6:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8000caa:	2a01      	cmp	r2, #1
 8000cac:	f000 8090 	beq.w	8000dd0 <HAL_ADC_Start_DMA+0x134>
 8000cb0:	4604      	mov	r4, r0
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000cb8:	6802      	ldr	r2, [r0, #0]
 8000cba:	6890      	ldr	r0, [r2, #8]
 8000cbc:	f010 0f01 	tst.w	r0, #1
 8000cc0:	d113      	bne.n	8000cea <HAL_ADC_Start_DMA+0x4e>
    __HAL_ADC_ENABLE(hadc);
 8000cc2:	6890      	ldr	r0, [r2, #8]
 8000cc4:	f040 0001 	orr.w	r0, r0, #1
 8000cc8:	6090      	str	r0, [r2, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000cca:	4a42      	ldr	r2, [pc, #264]	@ (8000dd4 <HAL_ADC_Start_DMA+0x138>)
 8000ccc:	6810      	ldr	r0, [r2, #0]
 8000cce:	4a42      	ldr	r2, [pc, #264]	@ (8000dd8 <HAL_ADC_Start_DMA+0x13c>)
 8000cd0:	fba2 2000 	umull	r2, r0, r2, r0
 8000cd4:	0c80      	lsrs	r0, r0, #18
 8000cd6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8000cda:	9001      	str	r0, [sp, #4]
    while (counter != 0U)
 8000cdc:	e002      	b.n	8000ce4 <HAL_ADC_Start_DMA+0x48>
      counter--;
 8000cde:	9801      	ldr	r0, [sp, #4]
 8000ce0:	3801      	subs	r0, #1
 8000ce2:	9001      	str	r0, [sp, #4]
    while (counter != 0U)
 8000ce4:	9801      	ldr	r0, [sp, #4]
 8000ce6:	2800      	cmp	r0, #0
 8000ce8:	d1f9      	bne.n	8000cde <HAL_ADC_Start_DMA+0x42>
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8000cea:	6822      	ldr	r2, [r4, #0]
 8000cec:	6890      	ldr	r0, [r2, #8]
 8000cee:	f410 7f80 	tst.w	r0, #256	@ 0x100
 8000cf2:	d003      	beq.n	8000cfc <HAL_ADC_Start_DMA+0x60>
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000cf4:	6890      	ldr	r0, [r2, #8]
 8000cf6:	f420 7080 	bic.w	r0, r0, #256	@ 0x100
 8000cfa:	6090      	str	r0, [r2, #8]
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000cfc:	6822      	ldr	r2, [r4, #0]
 8000cfe:	6890      	ldr	r0, [r2, #8]
 8000d00:	f010 0f01 	tst.w	r0, #1
 8000d04:	d059      	beq.n	8000dba <HAL_ADC_Start_DMA+0x11e>
    ADC_STATE_CLR_SET(hadc->State,
 8000d06:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8000d08:	f420 60e0 	bic.w	r0, r0, #1792	@ 0x700
 8000d0c:	f020 0001 	bic.w	r0, r0, #1
 8000d10:	f440 7080 	orr.w	r0, r0, #256	@ 0x100
 8000d14:	6420      	str	r0, [r4, #64]	@ 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000d16:	6852      	ldr	r2, [r2, #4]
 8000d18:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8000d1c:	d005      	beq.n	8000d2a <HAL_ADC_Start_DMA+0x8e>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000d1e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8000d20:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8000d24:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8000d28:	6422      	str	r2, [r4, #64]	@ 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000d2a:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8000d2c:	f412 5f80 	tst.w	r2, #4096	@ 0x1000
 8000d30:	d033      	beq.n	8000d9a <HAL_ADC_Start_DMA+0xfe>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000d32:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8000d34:	f022 0206 	bic.w	r2, r2, #6
 8000d38:	6462      	str	r2, [r4, #68]	@ 0x44
    __HAL_UNLOCK(hadc);
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000d40:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8000d42:	4826      	ldr	r0, [pc, #152]	@ (8000ddc <HAL_ADC_Start_DMA+0x140>)
 8000d44:	63d0      	str	r0, [r2, #60]	@ 0x3c
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000d46:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8000d48:	4825      	ldr	r0, [pc, #148]	@ (8000de0 <HAL_ADC_Start_DMA+0x144>)
 8000d4a:	6410      	str	r0, [r2, #64]	@ 0x40
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000d4c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8000d4e:	4825      	ldr	r0, [pc, #148]	@ (8000de4 <HAL_ADC_Start_DMA+0x148>)
 8000d50:	64d0      	str	r0, [r2, #76]	@ 0x4c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000d52:	6822      	ldr	r2, [r4, #0]
 8000d54:	f06f 0022 	mvn.w	r0, #34	@ 0x22
 8000d58:	6010      	str	r0, [r2, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000d5a:	6820      	ldr	r0, [r4, #0]
 8000d5c:	6842      	ldr	r2, [r0, #4]
 8000d5e:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8000d62:	6042      	str	r2, [r0, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8000d64:	6820      	ldr	r0, [r4, #0]
 8000d66:	6882      	ldr	r2, [r0, #8]
 8000d68:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000d6c:	6082      	str	r2, [r0, #8]
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000d6e:	6820      	ldr	r0, [r4, #0]
 8000d70:	460a      	mov	r2, r1
 8000d72:	f100 014c 	add.w	r1, r0, #76	@ 0x4c
 8000d76:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8000d78:	f000 faba 	bl	80012f0 <HAL_DMA_Start_IT>
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000d7c:	4b1a      	ldr	r3, [pc, #104]	@ (8000de8 <HAL_ADC_Start_DMA+0x14c>)
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	f013 0f1f 	tst.w	r3, #31
 8000d84:	d10c      	bne.n	8000da0 <HAL_ADC_Start_DMA+0x104>
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8000d86:	6823      	ldr	r3, [r4, #0]
 8000d88:	689a      	ldr	r2, [r3, #8]
 8000d8a:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 8000d8e:	d11d      	bne.n	8000dcc <HAL_ADC_Start_DMA+0x130>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000d90:	689a      	ldr	r2, [r3, #8]
 8000d92:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8000d96:	609a      	str	r2, [r3, #8]
 8000d98:	e018      	b.n	8000dcc <HAL_ADC_Start_DMA+0x130>
      ADC_CLEAR_ERRORCODE(hadc);
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	6462      	str	r2, [r4, #68]	@ 0x44
 8000d9e:	e7cc      	b.n	8000d3a <HAL_ADC_Start_DMA+0x9e>
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000da0:	6823      	ldr	r3, [r4, #0]
 8000da2:	4a12      	ldr	r2, [pc, #72]	@ (8000dec <HAL_ADC_Start_DMA+0x150>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d111      	bne.n	8000dcc <HAL_ADC_Start_DMA+0x130>
 8000da8:	689a      	ldr	r2, [r3, #8]
 8000daa:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 8000dae:	d10d      	bne.n	8000dcc <HAL_ADC_Start_DMA+0x130>
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000db0:	689a      	ldr	r2, [r3, #8]
 8000db2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8000db6:	609a      	str	r2, [r3, #8]
 8000db8:	e008      	b.n	8000dcc <HAL_ADC_Start_DMA+0x130>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000dba:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000dbc:	f043 0310 	orr.w	r3, r3, #16
 8000dc0:	6423      	str	r3, [r4, #64]	@ 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000dc2:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8000dc4:	f043 0301 	orr.w	r3, r3, #1
 8000dc8:	6463      	str	r3, [r4, #68]	@ 0x44
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000dca:	2000      	movs	r0, #0
}
 8000dcc:	b002      	add	sp, #8
 8000dce:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8000dd0:	2002      	movs	r0, #2
 8000dd2:	e7fb      	b.n	8000dcc <HAL_ADC_Start_DMA+0x130>
 8000dd4:	20000000 	.word	0x20000000
 8000dd8:	431bde83 	.word	0x431bde83
 8000ddc:	08000e15 	.word	0x08000e15
 8000de0:	08000df3 	.word	0x08000df3
 8000de4:	08000dff 	.word	0x08000dff
 8000de8:	40012300 	.word	0x40012300
 8000dec:	40012000 	.word	0x40012000

08000df0 <HAL_ADC_ConvCpltCallback>:
}
 8000df0:	4770      	bx	lr

08000df2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8000df2:	b508      	push	{r3, lr}
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8000df4:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 8000df6:	f7ff fb85 	bl	8000504 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000dfa:	bd08      	pop	{r3, pc}

08000dfc <HAL_ADC_ErrorCallback>:
}
 8000dfc:	4770      	bx	lr

08000dfe <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8000dfe:	b508      	push	{r3, lr}
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000e00:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8000e02:	2340      	movs	r3, #64	@ 0x40
 8000e04:	6403      	str	r3, [r0, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8000e06:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8000e08:	f043 0304 	orr.w	r3, r3, #4
 8000e0c:	6443      	str	r3, [r0, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8000e0e:	f7ff fff5 	bl	8000dfc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000e12:	bd08      	pop	{r3, pc}

08000e14 <ADC_DMAConvCplt>:
{
 8000e14:	b508      	push	{r3, lr}
 8000e16:	4603      	mov	r3, r0
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000e18:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000e1a:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8000e1c:	f012 0f50 	tst.w	r2, #80	@ 0x50
 8000e20:	d125      	bne.n	8000e6e <ADC_DMAConvCplt+0x5a>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000e22:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8000e24:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e28:	6403      	str	r3, [r0, #64]	@ 0x40
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000e2a:	6803      	ldr	r3, [r0, #0]
 8000e2c:	689a      	ldr	r2, [r3, #8]
 8000e2e:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 8000e32:	d119      	bne.n	8000e68 <ADC_DMAConvCplt+0x54>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000e34:	7e02      	ldrb	r2, [r0, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000e36:	b9ba      	cbnz	r2, 8000e68 <ADC_DMAConvCplt+0x54>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000e38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000e3a:	f412 0f70 	tst.w	r2, #15728640	@ 0xf00000
 8000e3e:	d003      	beq.n	8000e48 <ADC_DMAConvCplt+0x34>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8000e40:	689a      	ldr	r2, [r3, #8]
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000e42:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8000e46:	d10f      	bne.n	8000e68 <ADC_DMAConvCplt+0x54>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000e48:	685a      	ldr	r2, [r3, #4]
 8000e4a:	f022 0220 	bic.w	r2, r2, #32
 8000e4e:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000e50:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8000e52:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000e56:	6403      	str	r3, [r0, #64]	@ 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000e58:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8000e5a:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 8000e5e:	d103      	bne.n	8000e68 <ADC_DMAConvCplt+0x54>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000e60:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8000e62:	f043 0301 	orr.w	r3, r3, #1
 8000e66:	6403      	str	r3, [r0, #64]	@ 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 8000e68:	f7ff ffc2 	bl	8000df0 <HAL_ADC_ConvCpltCallback>
}
 8000e6c:	bd08      	pop	{r3, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8000e6e:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8000e70:	f012 0f10 	tst.w	r2, #16
 8000e74:	d104      	bne.n	8000e80 <ADC_DMAConvCplt+0x6c>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8000e76:	6b82      	ldr	r2, [r0, #56]	@ 0x38
 8000e78:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	4790      	blx	r2
}
 8000e7e:	e7f5      	b.n	8000e6c <ADC_DMAConvCplt+0x58>
      HAL_ADC_ErrorCallback(hadc);
 8000e80:	f7ff ffbc 	bl	8000dfc <HAL_ADC_ErrorCallback>
 8000e84:	e7f2      	b.n	8000e6c <ADC_DMAConvCplt+0x58>
	...

08000e88 <HAL_ADC_ConfigChannel>:
{
 8000e88:	b430      	push	{r4, r5}
 8000e8a:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8000e90:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8000e94:	2a01      	cmp	r2, #1
 8000e96:	f000 80c0 	beq.w	800101a <HAL_ADC_ConfigChannel+0x192>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000ea2:	680a      	ldr	r2, [r1, #0]
 8000ea4:	2a09      	cmp	r2, #9
 8000ea6:	d940      	bls.n	8000f2a <HAL_ADC_ConfigChannel+0xa2>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000ea8:	6804      	ldr	r4, [r0, #0]
 8000eaa:	68e0      	ldr	r0, [r4, #12]
 8000eac:	b292      	uxth	r2, r2
 8000eae:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000eb2:	3a1e      	subs	r2, #30
 8000eb4:	f04f 0c07 	mov.w	ip, #7
 8000eb8:	fa0c f202 	lsl.w	r2, ip, r2
 8000ebc:	ea20 0202 	bic.w	r2, r0, r2
 8000ec0:	60e2      	str	r2, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000ec2:	681c      	ldr	r4, [r3, #0]
 8000ec4:	68e0      	ldr	r0, [r4, #12]
 8000ec6:	880a      	ldrh	r2, [r1, #0]
 8000ec8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000ecc:	3a1e      	subs	r2, #30
 8000ece:	688d      	ldr	r5, [r1, #8]
 8000ed0:	fa05 f202 	lsl.w	r2, r5, r2
 8000ed4:	4302      	orrs	r2, r0
 8000ed6:	60e2      	str	r2, [r4, #12]
  if (sConfig->Rank < 7U)
 8000ed8:	684a      	ldr	r2, [r1, #4]
 8000eda:	2a06      	cmp	r2, #6
 8000edc:	d83c      	bhi.n	8000f58 <HAL_ADC_ConfigChannel+0xd0>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000ede:	681c      	ldr	r4, [r3, #0]
 8000ee0:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8000ee2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8000ee6:	3a05      	subs	r2, #5
 8000ee8:	f04f 0c1f 	mov.w	ip, #31
 8000eec:	fa0c f202 	lsl.w	r2, ip, r2
 8000ef0:	ea20 0202 	bic.w	r2, r0, r2
 8000ef4:	6362      	str	r2, [r4, #52]	@ 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000ef6:	681c      	ldr	r4, [r3, #0]
 8000ef8:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8000efa:	684a      	ldr	r2, [r1, #4]
 8000efc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8000f00:	3a05      	subs	r2, #5
 8000f02:	f8b1 c000 	ldrh.w	ip, [r1]
 8000f06:	fa0c f202 	lsl.w	r2, ip, r2
 8000f0a:	4302      	orrs	r2, r0
 8000f0c:	6362      	str	r2, [r4, #52]	@ 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000f0e:	6818      	ldr	r0, [r3, #0]
 8000f10:	4a43      	ldr	r2, [pc, #268]	@ (8001020 <HAL_ADC_ConfigChannel+0x198>)
 8000f12:	4290      	cmp	r0, r2
 8000f14:	d050      	beq.n	8000fb8 <HAL_ADC_ConfigChannel+0x130>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000f16:	6818      	ldr	r0, [r3, #0]
 8000f18:	4a41      	ldr	r2, [pc, #260]	@ (8001020 <HAL_ADC_ConfigChannel+0x198>)
 8000f1a:	4290      	cmp	r0, r2
 8000f1c:	d059      	beq.n	8000fd2 <HAL_ADC_ConfigChannel+0x14a>
  __HAL_UNLOCK(hadc);
 8000f1e:	2000      	movs	r0, #0
 8000f20:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c
}
 8000f24:	b002      	add	sp, #8
 8000f26:	bc30      	pop	{r4, r5}
 8000f28:	4770      	bx	lr
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000f2a:	6804      	ldr	r4, [r0, #0]
 8000f2c:	6920      	ldr	r0, [r4, #16]
 8000f2e:	b292      	uxth	r2, r2
 8000f30:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000f34:	f04f 0c07 	mov.w	ip, #7
 8000f38:	fa0c f202 	lsl.w	r2, ip, r2
 8000f3c:	ea20 0202 	bic.w	r2, r0, r2
 8000f40:	6122      	str	r2, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000f42:	681c      	ldr	r4, [r3, #0]
 8000f44:	6920      	ldr	r0, [r4, #16]
 8000f46:	880a      	ldrh	r2, [r1, #0]
 8000f48:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000f4c:	688d      	ldr	r5, [r1, #8]
 8000f4e:	fa05 f202 	lsl.w	r2, r5, r2
 8000f52:	4302      	orrs	r2, r0
 8000f54:	6122      	str	r2, [r4, #16]
 8000f56:	e7bf      	b.n	8000ed8 <HAL_ADC_ConfigChannel+0x50>
  else if (sConfig->Rank < 13U)
 8000f58:	2a0c      	cmp	r2, #12
 8000f5a:	d816      	bhi.n	8000f8a <HAL_ADC_ConfigChannel+0x102>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000f5c:	681d      	ldr	r5, [r3, #0]
 8000f5e:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8000f60:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8000f64:	3a23      	subs	r2, #35	@ 0x23
 8000f66:	241f      	movs	r4, #31
 8000f68:	fa04 f202 	lsl.w	r2, r4, r2
 8000f6c:	ea20 0202 	bic.w	r2, r0, r2
 8000f70:	632a      	str	r2, [r5, #48]	@ 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000f72:	681d      	ldr	r5, [r3, #0]
 8000f74:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8000f76:	684a      	ldr	r2, [r1, #4]
 8000f78:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8000f7c:	3a23      	subs	r2, #35	@ 0x23
 8000f7e:	880c      	ldrh	r4, [r1, #0]
 8000f80:	fa04 f202 	lsl.w	r2, r4, r2
 8000f84:	4302      	orrs	r2, r0
 8000f86:	632a      	str	r2, [r5, #48]	@ 0x30
 8000f88:	e7c1      	b.n	8000f0e <HAL_ADC_ConfigChannel+0x86>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000f8a:	681d      	ldr	r5, [r3, #0]
 8000f8c:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8000f8e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8000f92:	3a41      	subs	r2, #65	@ 0x41
 8000f94:	241f      	movs	r4, #31
 8000f96:	fa04 f202 	lsl.w	r2, r4, r2
 8000f9a:	ea20 0202 	bic.w	r2, r0, r2
 8000f9e:	62ea      	str	r2, [r5, #44]	@ 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000fa0:	681d      	ldr	r5, [r3, #0]
 8000fa2:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8000fa4:	684a      	ldr	r2, [r1, #4]
 8000fa6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8000faa:	3a41      	subs	r2, #65	@ 0x41
 8000fac:	880c      	ldrh	r4, [r1, #0]
 8000fae:	fa04 f202 	lsl.w	r2, r4, r2
 8000fb2:	4302      	orrs	r2, r0
 8000fb4:	62ea      	str	r2, [r5, #44]	@ 0x2c
 8000fb6:	e7aa      	b.n	8000f0e <HAL_ADC_ConfigChannel+0x86>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000fb8:	680a      	ldr	r2, [r1, #0]
 8000fba:	2a12      	cmp	r2, #18
 8000fbc:	d1ab      	bne.n	8000f16 <HAL_ADC_ConfigChannel+0x8e>
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8000fbe:	4a19      	ldr	r2, [pc, #100]	@ (8001024 <HAL_ADC_ConfigChannel+0x19c>)
 8000fc0:	6850      	ldr	r0, [r2, #4]
 8000fc2:	f420 0000 	bic.w	r0, r0, #8388608	@ 0x800000
 8000fc6:	6050      	str	r0, [r2, #4]
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000fc8:	6850      	ldr	r0, [r2, #4]
 8000fca:	f440 0080 	orr.w	r0, r0, #4194304	@ 0x400000
 8000fce:	6050      	str	r0, [r2, #4]
 8000fd0:	e7a1      	b.n	8000f16 <HAL_ADC_ConfigChannel+0x8e>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000fd2:	680a      	ldr	r2, [r1, #0]
 8000fd4:	4814      	ldr	r0, [pc, #80]	@ (8001028 <HAL_ADC_ConfigChannel+0x1a0>)
 8000fd6:	4282      	cmp	r2, r0
 8000fd8:	d001      	beq.n	8000fde <HAL_ADC_ConfigChannel+0x156>
 8000fda:	2a11      	cmp	r2, #17
 8000fdc:	d19f      	bne.n	8000f1e <HAL_ADC_ConfigChannel+0x96>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8000fde:	4a11      	ldr	r2, [pc, #68]	@ (8001024 <HAL_ADC_ConfigChannel+0x19c>)
 8000fe0:	6850      	ldr	r0, [r2, #4]
 8000fe2:	f420 0080 	bic.w	r0, r0, #4194304	@ 0x400000
 8000fe6:	6050      	str	r0, [r2, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000fe8:	6850      	ldr	r0, [r2, #4]
 8000fea:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000fee:	6050      	str	r0, [r2, #4]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000ff0:	6809      	ldr	r1, [r1, #0]
 8000ff2:	4a0d      	ldr	r2, [pc, #52]	@ (8001028 <HAL_ADC_ConfigChannel+0x1a0>)
 8000ff4:	4291      	cmp	r1, r2
 8000ff6:	d192      	bne.n	8000f1e <HAL_ADC_ConfigChannel+0x96>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000ff8:	4a0c      	ldr	r2, [pc, #48]	@ (800102c <HAL_ADC_ConfigChannel+0x1a4>)
 8000ffa:	6812      	ldr	r2, [r2, #0]
 8000ffc:	490c      	ldr	r1, [pc, #48]	@ (8001030 <HAL_ADC_ConfigChannel+0x1a8>)
 8000ffe:	fba1 1202 	umull	r1, r2, r1, r2
 8001002:	0c92      	lsrs	r2, r2, #18
 8001004:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001008:	0052      	lsls	r2, r2, #1
 800100a:	9201      	str	r2, [sp, #4]
      while (counter != 0U)
 800100c:	9a01      	ldr	r2, [sp, #4]
 800100e:	2a00      	cmp	r2, #0
 8001010:	d085      	beq.n	8000f1e <HAL_ADC_ConfigChannel+0x96>
        counter--;
 8001012:	9a01      	ldr	r2, [sp, #4]
 8001014:	3a01      	subs	r2, #1
 8001016:	9201      	str	r2, [sp, #4]
 8001018:	e7f8      	b.n	800100c <HAL_ADC_ConfigChannel+0x184>
  __HAL_LOCK(hadc);
 800101a:	2002      	movs	r0, #2
 800101c:	e782      	b.n	8000f24 <HAL_ADC_ConfigChannel+0x9c>
 800101e:	bf00      	nop
 8001020:	40012000 	.word	0x40012000
 8001024:	40012300 	.word	0x40012300
 8001028:	10000012 	.word	0x10000012
 800102c:	20000000 	.word	0x20000000
 8001030:	431bde83 	.word	0x431bde83

08001034 <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8001034:	2800      	cmp	r0, #0
 8001036:	db07      	blt.n	8001048 <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001038:	f000 021f 	and.w	r2, r0, #31
 800103c:	0940      	lsrs	r0, r0, #5
 800103e:	2301      	movs	r3, #1
 8001040:	4093      	lsls	r3, r2
 8001042:	4a02      	ldr	r2, [pc, #8]	@ (800104c <__NVIC_EnableIRQ+0x18>)
 8001044:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	e000e100 	.word	0xe000e100

08001050 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8001050:	2800      	cmp	r0, #0
 8001052:	db08      	blt.n	8001066 <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001054:	0109      	lsls	r1, r1, #4
 8001056:	b2c9      	uxtb	r1, r1
 8001058:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 800105c:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8001060:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8001064:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001066:	f000 000f 	and.w	r0, r0, #15
 800106a:	0109      	lsls	r1, r1, #4
 800106c:	b2c9      	uxtb	r1, r1
 800106e:	4b01      	ldr	r3, [pc, #4]	@ (8001074 <__NVIC_SetPriority+0x24>)
 8001070:	5419      	strb	r1, [r3, r0]
  }
}
 8001072:	4770      	bx	lr
 8001074:	e000ed14 	.word	0xe000ed14

08001078 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001078:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800107a:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800107e:	f1c0 0c07 	rsb	ip, r0, #7
 8001082:	f1bc 0f04 	cmp.w	ip, #4
 8001086:	bf28      	it	cs
 8001088:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800108c:	1d03      	adds	r3, r0, #4
 800108e:	2b06      	cmp	r3, #6
 8001090:	d90f      	bls.n	80010b2 <NVIC_EncodePriority+0x3a>
 8001092:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001094:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 8001098:	fa0e f00c 	lsl.w	r0, lr, ip
 800109c:	ea21 0100 	bic.w	r1, r1, r0
 80010a0:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010a2:	fa0e fe03 	lsl.w	lr, lr, r3
 80010a6:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 80010aa:	ea41 0002 	orr.w	r0, r1, r2
 80010ae:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010b2:	2300      	movs	r3, #0
 80010b4:	e7ee      	b.n	8001094 <NVIC_EncodePriority+0x1c>
	...

080010b8 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010b8:	4a07      	ldr	r2, [pc, #28]	@ (80010d8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80010ba:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010bc:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80010c0:	041b      	lsls	r3, r3, #16
 80010c2:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010c4:	0200      	lsls	r0, r0, #8
 80010c6:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010ca:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80010cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80010d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 80010d4:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80010d6:	4770      	bx	lr
 80010d8:	e000ed00 	.word	0xe000ed00

080010dc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010dc:	b510      	push	{r4, lr}
 80010de:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010e0:	4b05      	ldr	r3, [pc, #20]	@ (80010f8 <HAL_NVIC_SetPriority+0x1c>)
 80010e2:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010e4:	f3c0 2002 	ubfx	r0, r0, #8, #3
 80010e8:	f7ff ffc6 	bl	8001078 <NVIC_EncodePriority>
 80010ec:	4601      	mov	r1, r0
 80010ee:	4620      	mov	r0, r4
 80010f0:	f7ff ffae 	bl	8001050 <__NVIC_SetPriority>
}
 80010f4:	bd10      	pop	{r4, pc}
 80010f6:	bf00      	nop
 80010f8:	e000ed00 	.word	0xe000ed00

080010fc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010fc:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010fe:	f7ff ff99 	bl	8001034 <__NVIC_EnableIRQ>
}
 8001102:	bd08      	pop	{r3, pc}

08001104 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001104:	3801      	subs	r0, #1
 8001106:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800110a:	d20b      	bcs.n	8001124 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800110c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8001110:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001112:	4a05      	ldr	r2, [pc, #20]	@ (8001128 <HAL_SYSTICK_Config+0x24>)
 8001114:	21f0      	movs	r1, #240	@ 0xf0
 8001116:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800111a:	2000      	movs	r0, #0
 800111c:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800111e:	2207      	movs	r2, #7
 8001120:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001122:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001124:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001126:	4770      	bx	lr
 8001128:	e000ed00 	.word	0xe000ed00

0800112c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800112c:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800112e:	6805      	ldr	r5, [r0, #0]
 8001130:	682c      	ldr	r4, [r5, #0]
 8001132:	f424 2480 	bic.w	r4, r4, #262144	@ 0x40000
 8001136:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001138:	6804      	ldr	r4, [r0, #0]
 800113a:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800113c:	6883      	ldr	r3, [r0, #8]
 800113e:	2b40      	cmp	r3, #64	@ 0x40
 8001140:	d005      	beq.n	800114e <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8001142:	6803      	ldr	r3, [r0, #0]
 8001144:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8001146:	6803      	ldr	r3, [r0, #0]
 8001148:	60da      	str	r2, [r3, #12]
  }
}
 800114a:	bc30      	pop	{r4, r5}
 800114c:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 800114e:	6803      	ldr	r3, [r0, #0]
 8001150:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 8001152:	6803      	ldr	r3, [r0, #0]
 8001154:	60d9      	str	r1, [r3, #12]
 8001156:	e7f8      	b.n	800114a <DMA_SetConfig+0x1e>

08001158 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001158:	b410      	push	{r4}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800115a:	6803      	ldr	r3, [r0, #0]
 800115c:	b2d9      	uxtb	r1, r3
 800115e:	3910      	subs	r1, #16
 8001160:	4a0a      	ldr	r2, [pc, #40]	@ (800118c <DMA_CalcBaseAndBitshift+0x34>)
 8001162:	fba2 4201 	umull	r4, r2, r2, r1
 8001166:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001168:	4c09      	ldr	r4, [pc, #36]	@ (8001190 <DMA_CalcBaseAndBitshift+0x38>)
 800116a:	5ca2      	ldrb	r2, [r4, r2]
 800116c:	65c2      	str	r2, [r0, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800116e:	295f      	cmp	r1, #95	@ 0x5f
 8001170:	d907      	bls.n	8001182 <DMA_CalcBaseAndBitshift+0x2a>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001172:	f36f 0309 	bfc	r3, #0, #10
 8001176:	3304      	adds	r3, #4
 8001178:	6583      	str	r3, [r0, #88]	@ 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 800117a:	6d80      	ldr	r0, [r0, #88]	@ 0x58
 800117c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001180:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001182:	f36f 0309 	bfc	r3, #0, #10
 8001186:	6583      	str	r3, [r0, #88]	@ 0x58
 8001188:	e7f7      	b.n	800117a <DMA_CalcBaseAndBitshift+0x22>
 800118a:	bf00      	nop
 800118c:	aaaaaaab 	.word	0xaaaaaaab
 8001190:	08001da8 	.word	0x08001da8

08001194 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001194:	6a83      	ldr	r3, [r0, #40]	@ 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001196:	6982      	ldr	r2, [r0, #24]
 8001198:	b992      	cbnz	r2, 80011c0 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 800119a:	2b01      	cmp	r3, #1
 800119c:	d00a      	beq.n	80011b4 <DMA_CheckFifoParam+0x20>
 800119e:	2b02      	cmp	r3, #2
 80011a0:	d002      	beq.n	80011a8 <DMA_CheckFifoParam+0x14>
 80011a2:	b10b      	cbz	r3, 80011a8 <DMA_CheckFifoParam+0x14>
 80011a4:	2000      	movs	r0, #0
 80011a6:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80011a8:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80011aa:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 80011ae:	d128      	bne.n	8001202 <DMA_CheckFifoParam+0x6e>
  HAL_StatusTypeDef status = HAL_OK;
 80011b0:	2000      	movs	r0, #0
 80011b2:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80011b4:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80011b6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80011ba:	d024      	beq.n	8001206 <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 80011bc:	2000      	movs	r0, #0
 80011be:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80011c0:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 80011c4:	d009      	beq.n	80011da <DMA_CheckFifoParam+0x46>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80011c6:	2b02      	cmp	r3, #2
 80011c8:	d925      	bls.n	8001216 <DMA_CheckFifoParam+0x82>
 80011ca:	2b03      	cmp	r3, #3
 80011cc:	d125      	bne.n	800121a <DMA_CheckFifoParam+0x86>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80011ce:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80011d0:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 80011d4:	d123      	bne.n	800121e <DMA_CheckFifoParam+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
 80011d6:	2000      	movs	r0, #0
 80011d8:	4770      	bx	lr
    switch (tmp)
 80011da:	2b03      	cmp	r3, #3
 80011dc:	d803      	bhi.n	80011e6 <DMA_CheckFifoParam+0x52>
 80011de:	e8df f003 	tbb	[pc, r3]
 80011e2:	0414      	.short	0x0414
 80011e4:	0a14      	.short	0x0a14
 80011e6:	2000      	movs	r0, #0
 80011e8:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80011ea:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80011ec:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 80011f0:	d10d      	bne.n	800120e <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 80011f2:	2000      	movs	r0, #0
 80011f4:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80011f6:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80011f8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80011fc:	d009      	beq.n	8001212 <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 80011fe:	2000      	movs	r0, #0
 8001200:	4770      	bx	lr
        status = HAL_ERROR;
 8001202:	2001      	movs	r0, #1
 8001204:	4770      	bx	lr
        status = HAL_ERROR;
 8001206:	2001      	movs	r0, #1
 8001208:	4770      	bx	lr
      status = HAL_ERROR;
 800120a:	2001      	movs	r0, #1
 800120c:	4770      	bx	lr
        status = HAL_ERROR;
 800120e:	2001      	movs	r0, #1
 8001210:	4770      	bx	lr
        status = HAL_ERROR;
 8001212:	2001      	movs	r0, #1
 8001214:	4770      	bx	lr
      status = HAL_ERROR;
 8001216:	2001      	movs	r0, #1
 8001218:	4770      	bx	lr
    switch (tmp)
 800121a:	2000      	movs	r0, #0
 800121c:	4770      	bx	lr
      {
        status = HAL_ERROR;
 800121e:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8001220:	4770      	bx	lr
	...

08001224 <HAL_DMA_Init>:
{
 8001224:	b570      	push	{r4, r5, r6, lr}
 8001226:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001228:	f7ff fc58 	bl	8000adc <HAL_GetTick>
  if(hdma == NULL)
 800122c:	2c00      	cmp	r4, #0
 800122e:	d05b      	beq.n	80012e8 <HAL_DMA_Init+0xc4>
 8001230:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 8001232:	2302      	movs	r3, #2
 8001234:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  __HAL_UNLOCK(hdma);
 8001238:	2300      	movs	r3, #0
 800123a:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  __HAL_DMA_DISABLE(hdma);
 800123e:	6822      	ldr	r2, [r4, #0]
 8001240:	6813      	ldr	r3, [r2, #0]
 8001242:	f023 0301 	bic.w	r3, r3, #1
 8001246:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001248:	6823      	ldr	r3, [r4, #0]
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	f012 0f01 	tst.w	r2, #1
 8001250:	d00a      	beq.n	8001268 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001252:	f7ff fc43 	bl	8000adc <HAL_GetTick>
 8001256:	1b43      	subs	r3, r0, r5
 8001258:	2b05      	cmp	r3, #5
 800125a:	d9f5      	bls.n	8001248 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800125c:	2320      	movs	r3, #32
 800125e:	6563      	str	r3, [r4, #84]	@ 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001260:	2003      	movs	r0, #3
 8001262:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
}
 8001266:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 8001268:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800126a:	4920      	ldr	r1, [pc, #128]	@ (80012ec <HAL_DMA_Init+0xc8>)
 800126c:	4011      	ands	r1, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800126e:	6862      	ldr	r2, [r4, #4]
 8001270:	68a0      	ldr	r0, [r4, #8]
 8001272:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001274:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001276:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001278:	6920      	ldr	r0, [r4, #16]
 800127a:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800127c:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800127e:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001280:	69a0      	ldr	r0, [r4, #24]
 8001282:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8001284:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001286:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8001288:	6a20      	ldr	r0, [r4, #32]
 800128a:	4302      	orrs	r2, r0
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800128c:	430a      	orrs	r2, r1
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800128e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8001290:	2904      	cmp	r1, #4
 8001292:	d01e      	beq.n	80012d2 <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 8001294:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8001296:	6826      	ldr	r6, [r4, #0]
 8001298:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800129a:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 800129e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80012a0:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80012a2:	2b04      	cmp	r3, #4
 80012a4:	d107      	bne.n	80012b6 <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 80012a6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80012a8:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80012aa:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80012ac:	b11b      	cbz	r3, 80012b6 <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80012ae:	4620      	mov	r0, r4
 80012b0:	f7ff ff70 	bl	8001194 <DMA_CheckFifoParam>
 80012b4:	b990      	cbnz	r0, 80012dc <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 80012b6:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80012b8:	4620      	mov	r0, r4
 80012ba:	f7ff ff4d 	bl	8001158 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012be:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80012c0:	233f      	movs	r3, #63	@ 0x3f
 80012c2:	4093      	lsls	r3, r2
 80012c4:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012c6:	2000      	movs	r0, #0
 80012c8:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80012ca:	2301      	movs	r3, #1
 80012cc:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  return HAL_OK;
 80012d0:	e7c9      	b.n	8001266 <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80012d2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80012d4:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80012d6:	4301      	orrs	r1, r0
 80012d8:	430a      	orrs	r2, r1
 80012da:	e7db      	b.n	8001294 <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80012dc:	2340      	movs	r3, #64	@ 0x40
 80012de:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_READY;
 80012e0:	2001      	movs	r0, #1
 80012e2:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
        return HAL_ERROR; 
 80012e6:	e7be      	b.n	8001266 <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 80012e8:	2001      	movs	r0, #1
 80012ea:	e7bc      	b.n	8001266 <HAL_DMA_Init+0x42>
 80012ec:	f010803f 	.word	0xf010803f

080012f0 <HAL_DMA_Start_IT>:
{
 80012f0:	b538      	push	{r3, r4, r5, lr}
 80012f2:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012f4:	6d85      	ldr	r5, [r0, #88]	@ 0x58
  __HAL_LOCK(hdma);
 80012f6:	f890 0034 	ldrb.w	r0, [r0, #52]	@ 0x34
 80012fa:	2801      	cmp	r0, #1
 80012fc:	d02b      	beq.n	8001356 <HAL_DMA_Start_IT+0x66>
 80012fe:	2001      	movs	r0, #1
 8001300:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8001304:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
 8001308:	b2c0      	uxtb	r0, r0
 800130a:	2801      	cmp	r0, #1
 800130c:	d004      	beq.n	8001318 <HAL_DMA_Start_IT+0x28>
    __HAL_UNLOCK(hdma);	  
 800130e:	2300      	movs	r3, #0
 8001310:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    status = HAL_BUSY;
 8001314:	2002      	movs	r0, #2
}
 8001316:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8001318:	2002      	movs	r0, #2
 800131a:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800131e:	2000      	movs	r0, #0
 8001320:	6560      	str	r0, [r4, #84]	@ 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001322:	4620      	mov	r0, r4
 8001324:	f7ff ff02 	bl	800112c <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001328:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800132a:	233f      	movs	r3, #63	@ 0x3f
 800132c:	4093      	lsls	r3, r2
 800132e:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001330:	6822      	ldr	r2, [r4, #0]
 8001332:	6813      	ldr	r3, [r2, #0]
 8001334:	f043 0316 	orr.w	r3, r3, #22
 8001338:	6013      	str	r3, [r2, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 800133a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800133c:	b123      	cbz	r3, 8001348 <HAL_DMA_Start_IT+0x58>
      hdma->Instance->CR  |= DMA_IT_HT;
 800133e:	6822      	ldr	r2, [r4, #0]
 8001340:	6813      	ldr	r3, [r2, #0]
 8001342:	f043 0308 	orr.w	r3, r3, #8
 8001346:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8001348:	6822      	ldr	r2, [r4, #0]
 800134a:	6813      	ldr	r3, [r2, #0]
 800134c:	f043 0301 	orr.w	r3, r3, #1
 8001350:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001352:	2000      	movs	r0, #0
 8001354:	e7df      	b.n	8001316 <HAL_DMA_Start_IT+0x26>
  __HAL_LOCK(hdma);
 8001356:	2002      	movs	r0, #2
 8001358:	e7dd      	b.n	8001316 <HAL_DMA_Start_IT+0x26>
	...

0800135c <HAL_DMA_IRQHandler>:
{
 800135c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800135e:	b083      	sub	sp, #12
 8001360:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8001362:	2300      	movs	r3, #0
 8001364:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001366:	4b72      	ldr	r3, [pc, #456]	@ (8001530 <HAL_DMA_IRQHandler+0x1d4>)
 8001368:	681d      	ldr	r5, [r3, #0]
 800136a:	4b72      	ldr	r3, [pc, #456]	@ (8001534 <HAL_DMA_IRQHandler+0x1d8>)
 800136c:	fba3 3505 	umull	r3, r5, r3, r5
 8001370:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001372:	6d87      	ldr	r7, [r0, #88]	@ 0x58
  tmpisr = regs->ISR;
 8001374:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001376:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 8001378:	2308      	movs	r3, #8
 800137a:	4093      	lsls	r3, r2
 800137c:	4233      	tst	r3, r6
 800137e:	d010      	beq.n	80013a2 <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001380:	6803      	ldr	r3, [r0, #0]
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	f012 0f04 	tst.w	r2, #4
 8001388:	d00b      	beq.n	80013a2 <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	f022 0204 	bic.w	r2, r2, #4
 8001390:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001392:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 8001394:	2308      	movs	r3, #8
 8001396:	4093      	lsls	r3, r2
 8001398:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800139a:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800139c:	f043 0301 	orr.w	r3, r3, #1
 80013a0:	6543      	str	r3, [r0, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80013a2:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80013a4:	2301      	movs	r3, #1
 80013a6:	4093      	lsls	r3, r2
 80013a8:	4233      	tst	r3, r6
 80013aa:	d009      	beq.n	80013c0 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80013ac:	6822      	ldr	r2, [r4, #0]
 80013ae:	6952      	ldr	r2, [r2, #20]
 80013b0:	f012 0f80 	tst.w	r2, #128	@ 0x80
 80013b4:	d004      	beq.n	80013c0 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80013b6:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80013b8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80013ba:	f043 0302 	orr.w	r3, r3, #2
 80013be:	6563      	str	r3, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80013c0:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80013c2:	2304      	movs	r3, #4
 80013c4:	4093      	lsls	r3, r2
 80013c6:	4233      	tst	r3, r6
 80013c8:	d009      	beq.n	80013de <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80013ca:	6822      	ldr	r2, [r4, #0]
 80013cc:	6812      	ldr	r2, [r2, #0]
 80013ce:	f012 0f02 	tst.w	r2, #2
 80013d2:	d004      	beq.n	80013de <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80013d4:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80013d6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80013d8:	f043 0304 	orr.w	r3, r3, #4
 80013dc:	6563      	str	r3, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80013de:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80013e0:	2310      	movs	r3, #16
 80013e2:	4093      	lsls	r3, r2
 80013e4:	4233      	tst	r3, r6
 80013e6:	d024      	beq.n	8001432 <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80013e8:	6822      	ldr	r2, [r4, #0]
 80013ea:	6812      	ldr	r2, [r2, #0]
 80013ec:	f012 0f08 	tst.w	r2, #8
 80013f0:	d01f      	beq.n	8001432 <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80013f2:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80013f4:	6823      	ldr	r3, [r4, #0]
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 80013fc:	d00d      	beq.n	800141a <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 8001404:	d104      	bne.n	8001410 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 8001406:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001408:	b19b      	cbz	r3, 8001432 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 800140a:	4620      	mov	r0, r4
 800140c:	4798      	blx	r3
 800140e:	e010      	b.n	8001432 <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001410:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8001412:	b173      	cbz	r3, 8001432 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 8001414:	4620      	mov	r0, r4
 8001416:	4798      	blx	r3
 8001418:	e00b      	b.n	8001432 <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8001420:	d103      	bne.n	800142a <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	f022 0208 	bic.w	r2, r2, #8
 8001428:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 800142a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800142c:	b10b      	cbz	r3, 8001432 <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 800142e:	4620      	mov	r0, r4
 8001430:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001432:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001434:	2320      	movs	r3, #32
 8001436:	4093      	lsls	r3, r2
 8001438:	4233      	tst	r3, r6
 800143a:	d055      	beq.n	80014e8 <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800143c:	6822      	ldr	r2, [r4, #0]
 800143e:	6812      	ldr	r2, [r2, #0]
 8001440:	f012 0f10 	tst.w	r2, #16
 8001444:	d050      	beq.n	80014e8 <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001446:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001448:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 800144c:	b2db      	uxtb	r3, r3
 800144e:	2b05      	cmp	r3, #5
 8001450:	d00e      	beq.n	8001470 <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001452:	6823      	ldr	r3, [r4, #0]
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 800145a:	d033      	beq.n	80014c4 <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 8001462:	d12a      	bne.n	80014ba <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 8001464:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8001466:	2b00      	cmp	r3, #0
 8001468:	d03e      	beq.n	80014e8 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 800146a:	4620      	mov	r0, r4
 800146c:	4798      	blx	r3
 800146e:	e03b      	b.n	80014e8 <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001470:	6822      	ldr	r2, [r4, #0]
 8001472:	6813      	ldr	r3, [r2, #0]
 8001474:	f023 0316 	bic.w	r3, r3, #22
 8001478:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800147a:	6822      	ldr	r2, [r4, #0]
 800147c:	6953      	ldr	r3, [r2, #20]
 800147e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001482:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001484:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001486:	b1a3      	cbz	r3, 80014b2 <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001488:	6822      	ldr	r2, [r4, #0]
 800148a:	6813      	ldr	r3, [r2, #0]
 800148c:	f023 0308 	bic.w	r3, r3, #8
 8001490:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001492:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001494:	233f      	movs	r3, #63	@ 0x3f
 8001496:	4093      	lsls	r3, r2
 8001498:	60bb      	str	r3, [r7, #8]
        hdma->State = HAL_DMA_STATE_READY;
 800149a:	2301      	movs	r3, #1
 800149c:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 80014a0:	2300      	movs	r3, #0
 80014a2:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferAbortCallback != NULL)
 80014a6:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d03f      	beq.n	800152c <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 80014ac:	4620      	mov	r0, r4
 80014ae:	4798      	blx	r3
        return;
 80014b0:	e03c      	b.n	800152c <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80014b2:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d1e7      	bne.n	8001488 <HAL_DMA_IRQHandler+0x12c>
 80014b8:	e7eb      	b.n	8001492 <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 80014ba:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80014bc:	b1a3      	cbz	r3, 80014e8 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 80014be:	4620      	mov	r0, r4
 80014c0:	4798      	blx	r3
 80014c2:	e011      	b.n	80014e8 <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	f412 7f80 	tst.w	r2, #256	@ 0x100
 80014ca:	d109      	bne.n	80014e0 <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	f022 0210 	bic.w	r2, r2, #16
 80014d2:	601a      	str	r2, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80014d4:	2301      	movs	r3, #1
 80014d6:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 80014da:	2300      	movs	r3, #0
 80014dc:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferCpltCallback != NULL)
 80014e0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80014e2:	b10b      	cbz	r3, 80014e8 <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 80014e4:	4620      	mov	r0, r4
 80014e6:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80014e8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80014ea:	b1fb      	cbz	r3, 800152c <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80014ec:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80014ee:	f013 0f01 	tst.w	r3, #1
 80014f2:	d017      	beq.n	8001524 <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 80014f4:	2305      	movs	r3, #5
 80014f6:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_DMA_DISABLE(hdma);
 80014fa:	6822      	ldr	r2, [r4, #0]
 80014fc:	6813      	ldr	r3, [r2, #0]
 80014fe:	f023 0301 	bic.w	r3, r3, #1
 8001502:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8001504:	9b01      	ldr	r3, [sp, #4]
 8001506:	3301      	adds	r3, #1
 8001508:	9301      	str	r3, [sp, #4]
 800150a:	42ab      	cmp	r3, r5
 800150c:	d804      	bhi.n	8001518 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800150e:	6823      	ldr	r3, [r4, #0]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f013 0f01 	tst.w	r3, #1
 8001516:	d1f5      	bne.n	8001504 <HAL_DMA_IRQHandler+0x1a8>
      hdma->State = HAL_DMA_STATE_READY;
 8001518:	2301      	movs	r3, #1
 800151a:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 800151e:	2300      	movs	r3, #0
 8001520:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    if(hdma->XferErrorCallback != NULL)
 8001524:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8001526:	b10b      	cbz	r3, 800152c <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 8001528:	4620      	mov	r0, r4
 800152a:	4798      	blx	r3
}
 800152c:	b003      	add	sp, #12
 800152e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001530:	20000000 	.word	0x20000000
 8001534:	1b4e81b5 	.word	0x1b4e81b5

08001538 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001538:	2300      	movs	r3, #0
 800153a:	2b0f      	cmp	r3, #15
 800153c:	f200 80d7 	bhi.w	80016ee <HAL_GPIO_Init+0x1b6>
{
 8001540:	b570      	push	{r4, r5, r6, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	e065      	b.n	8001612 <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001546:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001548:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 800154c:	2403      	movs	r4, #3
 800154e:	fa04 f40e 	lsl.w	r4, r4, lr
 8001552:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001556:	68cc      	ldr	r4, [r1, #12]
 8001558:	fa04 f40e 	lsl.w	r4, r4, lr
 800155c:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 800155e:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001560:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001562:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001566:	684a      	ldr	r2, [r1, #4]
 8001568:	f3c2 1200 	ubfx	r2, r2, #4, #1
 800156c:	409a      	lsls	r2, r3
 800156e:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8001570:	6042      	str	r2, [r0, #4]
 8001572:	e05c      	b.n	800162e <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001574:	08dc      	lsrs	r4, r3, #3
 8001576:	3408      	adds	r4, #8
 8001578:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800157c:	f003 0507 	and.w	r5, r3, #7
 8001580:	00ad      	lsls	r5, r5, #2
 8001582:	f04f 0e0f 	mov.w	lr, #15
 8001586:	fa0e fe05 	lsl.w	lr, lr, r5
 800158a:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800158e:	690a      	ldr	r2, [r1, #16]
 8001590:	40aa      	lsls	r2, r5
 8001592:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 8001596:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 800159a:	e05c      	b.n	8001656 <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800159c:	2204      	movs	r2, #4
 800159e:	e000      	b.n	80015a2 <HAL_GPIO_Init+0x6a>
 80015a0:	2200      	movs	r2, #0
 80015a2:	fa02 f20e 	lsl.w	r2, r2, lr
 80015a6:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015a8:	3402      	adds	r4, #2
 80015aa:	4d51      	ldr	r5, [pc, #324]	@ (80016f0 <HAL_GPIO_Init+0x1b8>)
 80015ac:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015b0:	4a50      	ldr	r2, [pc, #320]	@ (80016f4 <HAL_GPIO_Init+0x1bc>)
 80015b2:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 80015b4:	ea6f 020c 	mvn.w	r2, ip
 80015b8:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015bc:	684e      	ldr	r6, [r1, #4]
 80015be:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 80015c2:	d001      	beq.n	80015c8 <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 80015c4:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 80015c8:	4c4a      	ldr	r4, [pc, #296]	@ (80016f4 <HAL_GPIO_Init+0x1bc>)
 80015ca:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 80015cc:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 80015ce:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015d2:	684e      	ldr	r6, [r1, #4]
 80015d4:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 80015d8:	d001      	beq.n	80015de <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 80015da:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 80015de:	4c45      	ldr	r4, [pc, #276]	@ (80016f4 <HAL_GPIO_Init+0x1bc>)
 80015e0:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 80015e2:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 80015e4:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015e8:	684e      	ldr	r6, [r1, #4]
 80015ea:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 80015ee:	d001      	beq.n	80015f4 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 80015f0:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 80015f4:	4c3f      	ldr	r4, [pc, #252]	@ (80016f4 <HAL_GPIO_Init+0x1bc>)
 80015f6:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015f8:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 80015fa:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015fc:	684d      	ldr	r5, [r1, #4]
 80015fe:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 8001602:	d001      	beq.n	8001608 <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 8001604:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 8001608:	4c3a      	ldr	r4, [pc, #232]	@ (80016f4 <HAL_GPIO_Init+0x1bc>)
 800160a:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800160c:	3301      	adds	r3, #1
 800160e:	2b0f      	cmp	r3, #15
 8001610:	d86b      	bhi.n	80016ea <HAL_GPIO_Init+0x1b2>
    ioposition = 0x01U << position;
 8001612:	2201      	movs	r2, #1
 8001614:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001616:	680c      	ldr	r4, [r1, #0]
 8001618:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 800161c:	ea32 0404 	bics.w	r4, r2, r4
 8001620:	d1f4      	bne.n	800160c <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001622:	684c      	ldr	r4, [r1, #4]
 8001624:	f004 0403 	and.w	r4, r4, #3
 8001628:	3c01      	subs	r4, #1
 800162a:	2c01      	cmp	r4, #1
 800162c:	d98b      	bls.n	8001546 <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800162e:	684a      	ldr	r2, [r1, #4]
 8001630:	f002 0203 	and.w	r2, r2, #3
 8001634:	2a03      	cmp	r2, #3
 8001636:	d009      	beq.n	800164c <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 8001638:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800163a:	005d      	lsls	r5, r3, #1
 800163c:	2203      	movs	r2, #3
 800163e:	40aa      	lsls	r2, r5
 8001640:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001644:	688a      	ldr	r2, [r1, #8]
 8001646:	40aa      	lsls	r2, r5
 8001648:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 800164a:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800164c:	684a      	ldr	r2, [r1, #4]
 800164e:	f002 0203 	and.w	r2, r2, #3
 8001652:	2a02      	cmp	r2, #2
 8001654:	d08e      	beq.n	8001574 <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 8001656:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001658:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 800165c:	2203      	movs	r2, #3
 800165e:	fa02 f20e 	lsl.w	r2, r2, lr
 8001662:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001666:	684a      	ldr	r2, [r1, #4]
 8001668:	f002 0203 	and.w	r2, r2, #3
 800166c:	fa02 f20e 	lsl.w	r2, r2, lr
 8001670:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8001672:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001674:	684a      	ldr	r2, [r1, #4]
 8001676:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 800167a:	d0c7      	beq.n	800160c <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800167c:	2200      	movs	r2, #0
 800167e:	9201      	str	r2, [sp, #4]
 8001680:	4a1d      	ldr	r2, [pc, #116]	@ (80016f8 <HAL_GPIO_Init+0x1c0>)
 8001682:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 8001684:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8001688:	6454      	str	r4, [r2, #68]	@ 0x44
 800168a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800168c:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8001690:	9201      	str	r2, [sp, #4]
 8001692:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001694:	089c      	lsrs	r4, r3, #2
 8001696:	1ca5      	adds	r5, r4, #2
 8001698:	4a15      	ldr	r2, [pc, #84]	@ (80016f0 <HAL_GPIO_Init+0x1b8>)
 800169a:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800169e:	f003 0e03 	and.w	lr, r3, #3
 80016a2:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80016a6:	220f      	movs	r2, #15
 80016a8:	fa02 f20e 	lsl.w	r2, r2, lr
 80016ac:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016b0:	4a12      	ldr	r2, [pc, #72]	@ (80016fc <HAL_GPIO_Init+0x1c4>)
 80016b2:	4290      	cmp	r0, r2
 80016b4:	f43f af74 	beq.w	80015a0 <HAL_GPIO_Init+0x68>
 80016b8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80016bc:	4290      	cmp	r0, r2
 80016be:	d00e      	beq.n	80016de <HAL_GPIO_Init+0x1a6>
 80016c0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80016c4:	4290      	cmp	r0, r2
 80016c6:	d00c      	beq.n	80016e2 <HAL_GPIO_Init+0x1aa>
 80016c8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80016cc:	4290      	cmp	r0, r2
 80016ce:	d00a      	beq.n	80016e6 <HAL_GPIO_Init+0x1ae>
 80016d0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80016d4:	4290      	cmp	r0, r2
 80016d6:	f43f af61 	beq.w	800159c <HAL_GPIO_Init+0x64>
 80016da:	2207      	movs	r2, #7
 80016dc:	e761      	b.n	80015a2 <HAL_GPIO_Init+0x6a>
 80016de:	2201      	movs	r2, #1
 80016e0:	e75f      	b.n	80015a2 <HAL_GPIO_Init+0x6a>
 80016e2:	2202      	movs	r2, #2
 80016e4:	e75d      	b.n	80015a2 <HAL_GPIO_Init+0x6a>
 80016e6:	2203      	movs	r2, #3
 80016e8:	e75b      	b.n	80015a2 <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 80016ea:	b002      	add	sp, #8
 80016ec:	bd70      	pop	{r4, r5, r6, pc}
 80016ee:	4770      	bx	lr
 80016f0:	40013800 	.word	0x40013800
 80016f4:	40013c00 	.word	0x40013c00
 80016f8:	40023800 	.word	0x40023800
 80016fc:	40020000 	.word	0x40020000

08001700 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001700:	b10a      	cbz	r2, 8001706 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001702:	6181      	str	r1, [r0, #24]
 8001704:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001706:	0409      	lsls	r1, r1, #16
 8001708:	6181      	str	r1, [r0, #24]
  }
}
 800170a:	4770      	bx	lr

0800170c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800170c:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800170e:	4b05      	ldr	r3, [pc, #20]	@ (8001724 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8001710:	695b      	ldr	r3, [r3, #20]
 8001712:	4203      	tst	r3, r0
 8001714:	d100      	bne.n	8001718 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 8001716:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001718:	4b02      	ldr	r3, [pc, #8]	@ (8001724 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 800171a:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800171c:	f7ff f81e 	bl	800075c <HAL_GPIO_EXTI_Callback>
}
 8001720:	e7f9      	b.n	8001716 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8001722:	bf00      	nop
 8001724:	40013c00 	.word	0x40013c00

08001728 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001728:	2800      	cmp	r0, #0
 800172a:	f000 81e0 	beq.w	8001aee <HAL_RCC_OscConfig+0x3c6>
{
 800172e:	b570      	push	{r4, r5, r6, lr}
 8001730:	b082      	sub	sp, #8
 8001732:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001734:	6803      	ldr	r3, [r0, #0]
 8001736:	f013 0f01 	tst.w	r3, #1
 800173a:	d03b      	beq.n	80017b4 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800173c:	4b9f      	ldr	r3, [pc, #636]	@ (80019bc <HAL_RCC_OscConfig+0x294>)
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	f003 030c 	and.w	r3, r3, #12
 8001744:	2b04      	cmp	r3, #4
 8001746:	d02c      	beq.n	80017a2 <HAL_RCC_OscConfig+0x7a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001748:	4b9c      	ldr	r3, [pc, #624]	@ (80019bc <HAL_RCC_OscConfig+0x294>)
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001750:	2b08      	cmp	r3, #8
 8001752:	d021      	beq.n	8001798 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001754:	6863      	ldr	r3, [r4, #4]
 8001756:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800175a:	d04f      	beq.n	80017fc <HAL_RCC_OscConfig+0xd4>
 800175c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001760:	d052      	beq.n	8001808 <HAL_RCC_OscConfig+0xe0>
 8001762:	4b96      	ldr	r3, [pc, #600]	@ (80019bc <HAL_RCC_OscConfig+0x294>)
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001772:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001774:	6863      	ldr	r3, [r4, #4]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d050      	beq.n	800181c <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800177a:	f7ff f9af 	bl	8000adc <HAL_GetTick>
 800177e:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001780:	4b8e      	ldr	r3, [pc, #568]	@ (80019bc <HAL_RCC_OscConfig+0x294>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8001788:	d114      	bne.n	80017b4 <HAL_RCC_OscConfig+0x8c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800178a:	f7ff f9a7 	bl	8000adc <HAL_GetTick>
 800178e:	1b40      	subs	r0, r0, r5
 8001790:	2864      	cmp	r0, #100	@ 0x64
 8001792:	d9f5      	bls.n	8001780 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8001794:	2003      	movs	r0, #3
 8001796:	e1b1      	b.n	8001afc <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001798:	4b88      	ldr	r3, [pc, #544]	@ (80019bc <HAL_RCC_OscConfig+0x294>)
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80017a0:	d0d8      	beq.n	8001754 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017a2:	4b86      	ldr	r3, [pc, #536]	@ (80019bc <HAL_RCC_OscConfig+0x294>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80017aa:	d003      	beq.n	80017b4 <HAL_RCC_OscConfig+0x8c>
 80017ac:	6863      	ldr	r3, [r4, #4]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	f000 819f 	beq.w	8001af2 <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017b4:	6823      	ldr	r3, [r4, #0]
 80017b6:	f013 0f02 	tst.w	r3, #2
 80017ba:	d054      	beq.n	8001866 <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80017bc:	4b7f      	ldr	r3, [pc, #508]	@ (80019bc <HAL_RCC_OscConfig+0x294>)
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	f013 0f0c 	tst.w	r3, #12
 80017c4:	d03e      	beq.n	8001844 <HAL_RCC_OscConfig+0x11c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017c6:	4b7d      	ldr	r3, [pc, #500]	@ (80019bc <HAL_RCC_OscConfig+0x294>)
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80017ce:	2b08      	cmp	r3, #8
 80017d0:	d033      	beq.n	800183a <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80017d2:	68e3      	ldr	r3, [r4, #12]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d068      	beq.n	80018aa <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017d8:	4b79      	ldr	r3, [pc, #484]	@ (80019c0 <HAL_RCC_OscConfig+0x298>)
 80017da:	2201      	movs	r2, #1
 80017dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017de:	f7ff f97d 	bl	8000adc <HAL_GetTick>
 80017e2:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017e4:	4b75      	ldr	r3, [pc, #468]	@ (80019bc <HAL_RCC_OscConfig+0x294>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f013 0f02 	tst.w	r3, #2
 80017ec:	d154      	bne.n	8001898 <HAL_RCC_OscConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017ee:	f7ff f975 	bl	8000adc <HAL_GetTick>
 80017f2:	1b40      	subs	r0, r0, r5
 80017f4:	2802      	cmp	r0, #2
 80017f6:	d9f5      	bls.n	80017e4 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 80017f8:	2003      	movs	r0, #3
 80017fa:	e17f      	b.n	8001afc <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017fc:	4a6f      	ldr	r2, [pc, #444]	@ (80019bc <HAL_RCC_OscConfig+0x294>)
 80017fe:	6813      	ldr	r3, [r2, #0]
 8001800:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001804:	6013      	str	r3, [r2, #0]
 8001806:	e7b5      	b.n	8001774 <HAL_RCC_OscConfig+0x4c>
 8001808:	4b6c      	ldr	r3, [pc, #432]	@ (80019bc <HAL_RCC_OscConfig+0x294>)
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8001810:	601a      	str	r2, [r3, #0]
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001818:	601a      	str	r2, [r3, #0]
 800181a:	e7ab      	b.n	8001774 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 800181c:	f7ff f95e 	bl	8000adc <HAL_GetTick>
 8001820:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001822:	4b66      	ldr	r3, [pc, #408]	@ (80019bc <HAL_RCC_OscConfig+0x294>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800182a:	d0c3      	beq.n	80017b4 <HAL_RCC_OscConfig+0x8c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800182c:	f7ff f956 	bl	8000adc <HAL_GetTick>
 8001830:	1b40      	subs	r0, r0, r5
 8001832:	2864      	cmp	r0, #100	@ 0x64
 8001834:	d9f5      	bls.n	8001822 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8001836:	2003      	movs	r0, #3
 8001838:	e160      	b.n	8001afc <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800183a:	4b60      	ldr	r3, [pc, #384]	@ (80019bc <HAL_RCC_OscConfig+0x294>)
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8001842:	d1c6      	bne.n	80017d2 <HAL_RCC_OscConfig+0xaa>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001844:	4b5d      	ldr	r3, [pc, #372]	@ (80019bc <HAL_RCC_OscConfig+0x294>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f013 0f02 	tst.w	r3, #2
 800184c:	d003      	beq.n	8001856 <HAL_RCC_OscConfig+0x12e>
 800184e:	68e3      	ldr	r3, [r4, #12]
 8001850:	2b01      	cmp	r3, #1
 8001852:	f040 8150 	bne.w	8001af6 <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001856:	4a59      	ldr	r2, [pc, #356]	@ (80019bc <HAL_RCC_OscConfig+0x294>)
 8001858:	6813      	ldr	r3, [r2, #0]
 800185a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800185e:	6921      	ldr	r1, [r4, #16]
 8001860:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001864:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001866:	6823      	ldr	r3, [r4, #0]
 8001868:	f013 0f08 	tst.w	r3, #8
 800186c:	d042      	beq.n	80018f4 <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800186e:	6963      	ldr	r3, [r4, #20]
 8001870:	b36b      	cbz	r3, 80018ce <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001872:	4b53      	ldr	r3, [pc, #332]	@ (80019c0 <HAL_RCC_OscConfig+0x298>)
 8001874:	2201      	movs	r2, #1
 8001876:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800187a:	f7ff f92f 	bl	8000adc <HAL_GetTick>
 800187e:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001880:	4b4e      	ldr	r3, [pc, #312]	@ (80019bc <HAL_RCC_OscConfig+0x294>)
 8001882:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001884:	f013 0f02 	tst.w	r3, #2
 8001888:	d134      	bne.n	80018f4 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800188a:	f7ff f927 	bl	8000adc <HAL_GetTick>
 800188e:	1b40      	subs	r0, r0, r5
 8001890:	2802      	cmp	r0, #2
 8001892:	d9f5      	bls.n	8001880 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8001894:	2003      	movs	r0, #3
 8001896:	e131      	b.n	8001afc <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001898:	4a48      	ldr	r2, [pc, #288]	@ (80019bc <HAL_RCC_OscConfig+0x294>)
 800189a:	6813      	ldr	r3, [r2, #0]
 800189c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80018a0:	6921      	ldr	r1, [r4, #16]
 80018a2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80018a6:	6013      	str	r3, [r2, #0]
 80018a8:	e7dd      	b.n	8001866 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 80018aa:	4b45      	ldr	r3, [pc, #276]	@ (80019c0 <HAL_RCC_OscConfig+0x298>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80018b0:	f7ff f914 	bl	8000adc <HAL_GetTick>
 80018b4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018b6:	4b41      	ldr	r3, [pc, #260]	@ (80019bc <HAL_RCC_OscConfig+0x294>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f013 0f02 	tst.w	r3, #2
 80018be:	d0d2      	beq.n	8001866 <HAL_RCC_OscConfig+0x13e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018c0:	f7ff f90c 	bl	8000adc <HAL_GetTick>
 80018c4:	1b40      	subs	r0, r0, r5
 80018c6:	2802      	cmp	r0, #2
 80018c8:	d9f5      	bls.n	80018b6 <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 80018ca:	2003      	movs	r0, #3
 80018cc:	e116      	b.n	8001afc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018ce:	4b3c      	ldr	r3, [pc, #240]	@ (80019c0 <HAL_RCC_OscConfig+0x298>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018d6:	f7ff f901 	bl	8000adc <HAL_GetTick>
 80018da:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018dc:	4b37      	ldr	r3, [pc, #220]	@ (80019bc <HAL_RCC_OscConfig+0x294>)
 80018de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80018e0:	f013 0f02 	tst.w	r3, #2
 80018e4:	d006      	beq.n	80018f4 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018e6:	f7ff f8f9 	bl	8000adc <HAL_GetTick>
 80018ea:	1b40      	subs	r0, r0, r5
 80018ec:	2802      	cmp	r0, #2
 80018ee:	d9f5      	bls.n	80018dc <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 80018f0:	2003      	movs	r0, #3
 80018f2:	e103      	b.n	8001afc <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018f4:	6823      	ldr	r3, [r4, #0]
 80018f6:	f013 0f04 	tst.w	r3, #4
 80018fa:	d077      	beq.n	80019ec <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018fc:	4b2f      	ldr	r3, [pc, #188]	@ (80019bc <HAL_RCC_OscConfig+0x294>)
 80018fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001900:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8001904:	d133      	bne.n	800196e <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001906:	2300      	movs	r3, #0
 8001908:	9301      	str	r3, [sp, #4]
 800190a:	4b2c      	ldr	r3, [pc, #176]	@ (80019bc <HAL_RCC_OscConfig+0x294>)
 800190c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800190e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001912:	641a      	str	r2, [r3, #64]	@ 0x40
 8001914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001916:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800191a:	9301      	str	r3, [sp, #4]
 800191c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800191e:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001920:	4b28      	ldr	r3, [pc, #160]	@ (80019c4 <HAL_RCC_OscConfig+0x29c>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8001928:	d023      	beq.n	8001972 <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800192a:	68a3      	ldr	r3, [r4, #8]
 800192c:	2b01      	cmp	r3, #1
 800192e:	d034      	beq.n	800199a <HAL_RCC_OscConfig+0x272>
 8001930:	2b05      	cmp	r3, #5
 8001932:	d038      	beq.n	80019a6 <HAL_RCC_OscConfig+0x27e>
 8001934:	4b21      	ldr	r3, [pc, #132]	@ (80019bc <HAL_RCC_OscConfig+0x294>)
 8001936:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001938:	f022 0201 	bic.w	r2, r2, #1
 800193c:	671a      	str	r2, [r3, #112]	@ 0x70
 800193e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001940:	f022 0204 	bic.w	r2, r2, #4
 8001944:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001946:	68a3      	ldr	r3, [r4, #8]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d03d      	beq.n	80019c8 <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800194c:	f7ff f8c6 	bl	8000adc <HAL_GetTick>
 8001950:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001952:	4b1a      	ldr	r3, [pc, #104]	@ (80019bc <HAL_RCC_OscConfig+0x294>)
 8001954:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001956:	f013 0f02 	tst.w	r3, #2
 800195a:	d146      	bne.n	80019ea <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800195c:	f7ff f8be 	bl	8000adc <HAL_GetTick>
 8001960:	1b80      	subs	r0, r0, r6
 8001962:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001966:	4298      	cmp	r0, r3
 8001968:	d9f3      	bls.n	8001952 <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 800196a:	2003      	movs	r0, #3
 800196c:	e0c6      	b.n	8001afc <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 800196e:	2500      	movs	r5, #0
 8001970:	e7d6      	b.n	8001920 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001972:	4a14      	ldr	r2, [pc, #80]	@ (80019c4 <HAL_RCC_OscConfig+0x29c>)
 8001974:	6813      	ldr	r3, [r2, #0]
 8001976:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800197a:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800197c:	f7ff f8ae 	bl	8000adc <HAL_GetTick>
 8001980:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001982:	4b10      	ldr	r3, [pc, #64]	@ (80019c4 <HAL_RCC_OscConfig+0x29c>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800198a:	d1ce      	bne.n	800192a <HAL_RCC_OscConfig+0x202>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800198c:	f7ff f8a6 	bl	8000adc <HAL_GetTick>
 8001990:	1b80      	subs	r0, r0, r6
 8001992:	2802      	cmp	r0, #2
 8001994:	d9f5      	bls.n	8001982 <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 8001996:	2003      	movs	r0, #3
 8001998:	e0b0      	b.n	8001afc <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800199a:	4a08      	ldr	r2, [pc, #32]	@ (80019bc <HAL_RCC_OscConfig+0x294>)
 800199c:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 800199e:	f043 0301 	orr.w	r3, r3, #1
 80019a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80019a4:	e7cf      	b.n	8001946 <HAL_RCC_OscConfig+0x21e>
 80019a6:	4b05      	ldr	r3, [pc, #20]	@ (80019bc <HAL_RCC_OscConfig+0x294>)
 80019a8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80019aa:	f042 0204 	orr.w	r2, r2, #4
 80019ae:	671a      	str	r2, [r3, #112]	@ 0x70
 80019b0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80019b2:	f042 0201 	orr.w	r2, r2, #1
 80019b6:	671a      	str	r2, [r3, #112]	@ 0x70
 80019b8:	e7c5      	b.n	8001946 <HAL_RCC_OscConfig+0x21e>
 80019ba:	bf00      	nop
 80019bc:	40023800 	.word	0x40023800
 80019c0:	42470000 	.word	0x42470000
 80019c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019c8:	f7ff f888 	bl	8000adc <HAL_GetTick>
 80019cc:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019ce:	4b52      	ldr	r3, [pc, #328]	@ (8001b18 <HAL_RCC_OscConfig+0x3f0>)
 80019d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019d2:	f013 0f02 	tst.w	r3, #2
 80019d6:	d008      	beq.n	80019ea <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019d8:	f7ff f880 	bl	8000adc <HAL_GetTick>
 80019dc:	1b80      	subs	r0, r0, r6
 80019de:	f241 3388 	movw	r3, #5000	@ 0x1388
 80019e2:	4298      	cmp	r0, r3
 80019e4:	d9f3      	bls.n	80019ce <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 80019e6:	2003      	movs	r0, #3
 80019e8:	e088      	b.n	8001afc <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80019ea:	b9ed      	cbnz	r5, 8001a28 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019ec:	69a3      	ldr	r3, [r4, #24]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	f000 8083 	beq.w	8001afa <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80019f4:	4a48      	ldr	r2, [pc, #288]	@ (8001b18 <HAL_RCC_OscConfig+0x3f0>)
 80019f6:	6892      	ldr	r2, [r2, #8]
 80019f8:	f002 020c 	and.w	r2, r2, #12
 80019fc:	2a08      	cmp	r2, #8
 80019fe:	d051      	beq.n	8001aa4 <HAL_RCC_OscConfig+0x37c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d017      	beq.n	8001a34 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a04:	4b45      	ldr	r3, [pc, #276]	@ (8001b1c <HAL_RCC_OscConfig+0x3f4>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a0a:	f7ff f867 	bl	8000adc <HAL_GetTick>
 8001a0e:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a10:	4b41      	ldr	r3, [pc, #260]	@ (8001b18 <HAL_RCC_OscConfig+0x3f0>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001a18:	d042      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a1a:	f7ff f85f 	bl	8000adc <HAL_GetTick>
 8001a1e:	1b00      	subs	r0, r0, r4
 8001a20:	2802      	cmp	r0, #2
 8001a22:	d9f5      	bls.n	8001a10 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001a24:	2003      	movs	r0, #3
 8001a26:	e069      	b.n	8001afc <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a28:	4a3b      	ldr	r2, [pc, #236]	@ (8001b18 <HAL_RCC_OscConfig+0x3f0>)
 8001a2a:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8001a2c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a30:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a32:	e7db      	b.n	80019ec <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 8001a34:	4b39      	ldr	r3, [pc, #228]	@ (8001b1c <HAL_RCC_OscConfig+0x3f4>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8001a3a:	f7ff f84f 	bl	8000adc <HAL_GetTick>
 8001a3e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a40:	4b35      	ldr	r3, [pc, #212]	@ (8001b18 <HAL_RCC_OscConfig+0x3f0>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001a48:	d006      	beq.n	8001a58 <HAL_RCC_OscConfig+0x330>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a4a:	f7ff f847 	bl	8000adc <HAL_GetTick>
 8001a4e:	1b40      	subs	r0, r0, r5
 8001a50:	2802      	cmp	r0, #2
 8001a52:	d9f5      	bls.n	8001a40 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8001a54:	2003      	movs	r0, #3
 8001a56:	e051      	b.n	8001afc <HAL_RCC_OscConfig+0x3d4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a58:	69e3      	ldr	r3, [r4, #28]
 8001a5a:	6a22      	ldr	r2, [r4, #32]
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8001a60:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001a64:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8001a66:	0852      	lsrs	r2, r2, #1
 8001a68:	3a01      	subs	r2, #1
 8001a6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001a6e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8001a70:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001a74:	4a28      	ldr	r2, [pc, #160]	@ (8001b18 <HAL_RCC_OscConfig+0x3f0>)
 8001a76:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8001a78:	4b28      	ldr	r3, [pc, #160]	@ (8001b1c <HAL_RCC_OscConfig+0x3f4>)
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8001a7e:	f7ff f82d 	bl	8000adc <HAL_GetTick>
 8001a82:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a84:	4b24      	ldr	r3, [pc, #144]	@ (8001b18 <HAL_RCC_OscConfig+0x3f0>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001a8c:	d106      	bne.n	8001a9c <HAL_RCC_OscConfig+0x374>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a8e:	f7ff f825 	bl	8000adc <HAL_GetTick>
 8001a92:	1b00      	subs	r0, r0, r4
 8001a94:	2802      	cmp	r0, #2
 8001a96:	d9f5      	bls.n	8001a84 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 8001a98:	2003      	movs	r0, #3
 8001a9a:	e02f      	b.n	8001afc <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8001a9c:	2000      	movs	r0, #0
 8001a9e:	e02d      	b.n	8001afc <HAL_RCC_OscConfig+0x3d4>
 8001aa0:	2000      	movs	r0, #0
 8001aa2:	e02b      	b.n	8001afc <HAL_RCC_OscConfig+0x3d4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d02b      	beq.n	8001b00 <HAL_RCC_OscConfig+0x3d8>
        pll_config = RCC->PLLCFGR;
 8001aa8:	4b1b      	ldr	r3, [pc, #108]	@ (8001b18 <HAL_RCC_OscConfig+0x3f0>)
 8001aaa:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aac:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 8001ab0:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ab2:	4291      	cmp	r1, r2
 8001ab4:	d126      	bne.n	8001b04 <HAL_RCC_OscConfig+0x3dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ab6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001aba:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001abc:	428a      	cmp	r2, r1
 8001abe:	d123      	bne.n	8001b08 <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ac0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ac2:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8001ac6:	401a      	ands	r2, r3
 8001ac8:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8001acc:	d11e      	bne.n	8001b0c <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ace:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8001ad2:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8001ad4:	0852      	lsrs	r2, r2, #1
 8001ad6:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ad8:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8001adc:	d118      	bne.n	8001b10 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001ade:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 8001ae2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ae4:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8001ae8:	d114      	bne.n	8001b14 <HAL_RCC_OscConfig+0x3ec>
  return HAL_OK;
 8001aea:	2000      	movs	r0, #0
 8001aec:	e006      	b.n	8001afc <HAL_RCC_OscConfig+0x3d4>
    return HAL_ERROR;
 8001aee:	2001      	movs	r0, #1
}
 8001af0:	4770      	bx	lr
        return HAL_ERROR;
 8001af2:	2001      	movs	r0, #1
 8001af4:	e002      	b.n	8001afc <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 8001af6:	2001      	movs	r0, #1
 8001af8:	e000      	b.n	8001afc <HAL_RCC_OscConfig+0x3d4>
  return HAL_OK;
 8001afa:	2000      	movs	r0, #0
}
 8001afc:	b002      	add	sp, #8
 8001afe:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8001b00:	2001      	movs	r0, #1
 8001b02:	e7fb      	b.n	8001afc <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
 8001b04:	2001      	movs	r0, #1
 8001b06:	e7f9      	b.n	8001afc <HAL_RCC_OscConfig+0x3d4>
 8001b08:	2001      	movs	r0, #1
 8001b0a:	e7f7      	b.n	8001afc <HAL_RCC_OscConfig+0x3d4>
 8001b0c:	2001      	movs	r0, #1
 8001b0e:	e7f5      	b.n	8001afc <HAL_RCC_OscConfig+0x3d4>
 8001b10:	2001      	movs	r0, #1
 8001b12:	e7f3      	b.n	8001afc <HAL_RCC_OscConfig+0x3d4>
 8001b14:	2001      	movs	r0, #1
 8001b16:	e7f1      	b.n	8001afc <HAL_RCC_OscConfig+0x3d4>
 8001b18:	40023800 	.word	0x40023800
 8001b1c:	42470000 	.word	0x42470000

08001b20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b20:	b508      	push	{r3, lr}
  uint32_t pllvco = 0U;
  uint32_t pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b22:	4b26      	ldr	r3, [pc, #152]	@ (8001bbc <HAL_RCC_GetSysClockFreq+0x9c>)
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	f003 030c 	and.w	r3, r3, #12
 8001b2a:	2b04      	cmp	r3, #4
 8001b2c:	d041      	beq.n	8001bb2 <HAL_RCC_GetSysClockFreq+0x92>
 8001b2e:	2b08      	cmp	r3, #8
 8001b30:	d141      	bne.n	8001bb6 <HAL_RCC_GetSysClockFreq+0x96>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b32:	4b22      	ldr	r3, [pc, #136]	@ (8001bbc <HAL_RCC_GetSysClockFreq+0x9c>)
 8001b34:	685a      	ldr	r2, [r3, #4]
 8001b36:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8001b40:	d012      	beq.n	8001b68 <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b42:	4b1e      	ldr	r3, [pc, #120]	@ (8001bbc <HAL_RCC_GetSysClockFreq+0x9c>)
 8001b44:	6859      	ldr	r1, [r3, #4]
 8001b46:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001b4a:	481d      	ldr	r0, [pc, #116]	@ (8001bc0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	fba1 0100 	umull	r0, r1, r1, r0
 8001b52:	f7fe fb41 	bl	80001d8 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001b56:	4b19      	ldr	r3, [pc, #100]	@ (8001bbc <HAL_RCC_GetSysClockFreq+0x9c>)
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001b5e:	3301      	adds	r3, #1
 8001b60:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8001b62:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001b66:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b68:	4b14      	ldr	r3, [pc, #80]	@ (8001bbc <HAL_RCC_GetSysClockFreq+0x9c>)
 8001b6a:	6858      	ldr	r0, [r3, #4]
 8001b6c:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8001b70:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8001b74:	ebbc 0c00 	subs.w	ip, ip, r0
 8001b78:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8001b7c:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8001b80:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8001b84:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8001b88:	ebb1 010c 	subs.w	r1, r1, ip
 8001b8c:	eb63 030e 	sbc.w	r3, r3, lr
 8001b90:	00db      	lsls	r3, r3, #3
 8001b92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001b96:	00c9      	lsls	r1, r1, #3
 8001b98:	eb11 0c00 	adds.w	ip, r1, r0
 8001b9c:	f143 0300 	adc.w	r3, r3, #0
 8001ba0:	0299      	lsls	r1, r3, #10
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8001ba8:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8001bac:	f7fe fb14 	bl	80001d8 <__aeabi_uldivmod>
 8001bb0:	e7d1      	b.n	8001b56 <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 8001bb2:	4803      	ldr	r0, [pc, #12]	@ (8001bc0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001bb4:	e7d7      	b.n	8001b66 <HAL_RCC_GetSysClockFreq+0x46>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001bb6:	4803      	ldr	r0, [pc, #12]	@ (8001bc4 <HAL_RCC_GetSysClockFreq+0xa4>)
  return sysclockfreq;
 8001bb8:	e7d5      	b.n	8001b66 <HAL_RCC_GetSysClockFreq+0x46>
 8001bba:	bf00      	nop
 8001bbc:	40023800 	.word	0x40023800
 8001bc0:	017d7840 	.word	0x017d7840
 8001bc4:	00f42400 	.word	0x00f42400

08001bc8 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8001bc8:	2800      	cmp	r0, #0
 8001bca:	f000 809b 	beq.w	8001d04 <HAL_RCC_ClockConfig+0x13c>
{
 8001bce:	b570      	push	{r4, r5, r6, lr}
 8001bd0:	460d      	mov	r5, r1
 8001bd2:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001bd4:	4b4f      	ldr	r3, [pc, #316]	@ (8001d14 <HAL_RCC_ClockConfig+0x14c>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0307 	and.w	r3, r3, #7
 8001bdc:	428b      	cmp	r3, r1
 8001bde:	d208      	bcs.n	8001bf2 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001be0:	b2cb      	uxtb	r3, r1
 8001be2:	4a4c      	ldr	r2, [pc, #304]	@ (8001d14 <HAL_RCC_ClockConfig+0x14c>)
 8001be4:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001be6:	6813      	ldr	r3, [r2, #0]
 8001be8:	f003 0307 	and.w	r3, r3, #7
 8001bec:	428b      	cmp	r3, r1
 8001bee:	f040 808b 	bne.w	8001d08 <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bf2:	6823      	ldr	r3, [r4, #0]
 8001bf4:	f013 0f02 	tst.w	r3, #2
 8001bf8:	d017      	beq.n	8001c2a <HAL_RCC_ClockConfig+0x62>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bfa:	f013 0f04 	tst.w	r3, #4
 8001bfe:	d004      	beq.n	8001c0a <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c00:	4a45      	ldr	r2, [pc, #276]	@ (8001d18 <HAL_RCC_ClockConfig+0x150>)
 8001c02:	6893      	ldr	r3, [r2, #8]
 8001c04:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001c08:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c0a:	6823      	ldr	r3, [r4, #0]
 8001c0c:	f013 0f08 	tst.w	r3, #8
 8001c10:	d004      	beq.n	8001c1c <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c12:	4a41      	ldr	r2, [pc, #260]	@ (8001d18 <HAL_RCC_ClockConfig+0x150>)
 8001c14:	6893      	ldr	r3, [r2, #8]
 8001c16:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001c1a:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c1c:	4a3e      	ldr	r2, [pc, #248]	@ (8001d18 <HAL_RCC_ClockConfig+0x150>)
 8001c1e:	6893      	ldr	r3, [r2, #8]
 8001c20:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001c24:	68a1      	ldr	r1, [r4, #8]
 8001c26:	430b      	orrs	r3, r1
 8001c28:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c2a:	6823      	ldr	r3, [r4, #0]
 8001c2c:	f013 0f01 	tst.w	r3, #1
 8001c30:	d032      	beq.n	8001c98 <HAL_RCC_ClockConfig+0xd0>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c32:	6863      	ldr	r3, [r4, #4]
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d021      	beq.n	8001c7c <HAL_RCC_ClockConfig+0xb4>
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c38:	1e9a      	subs	r2, r3, #2
 8001c3a:	2a01      	cmp	r2, #1
 8001c3c:	d925      	bls.n	8001c8a <HAL_RCC_ClockConfig+0xc2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c3e:	4a36      	ldr	r2, [pc, #216]	@ (8001d18 <HAL_RCC_ClockConfig+0x150>)
 8001c40:	6812      	ldr	r2, [r2, #0]
 8001c42:	f012 0f02 	tst.w	r2, #2
 8001c46:	d061      	beq.n	8001d0c <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c48:	4933      	ldr	r1, [pc, #204]	@ (8001d18 <HAL_RCC_ClockConfig+0x150>)
 8001c4a:	688a      	ldr	r2, [r1, #8]
 8001c4c:	f022 0203 	bic.w	r2, r2, #3
 8001c50:	4313      	orrs	r3, r2
 8001c52:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8001c54:	f7fe ff42 	bl	8000adc <HAL_GetTick>
 8001c58:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c5a:	4b2f      	ldr	r3, [pc, #188]	@ (8001d18 <HAL_RCC_ClockConfig+0x150>)
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	f003 030c 	and.w	r3, r3, #12
 8001c62:	6862      	ldr	r2, [r4, #4]
 8001c64:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001c68:	d016      	beq.n	8001c98 <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c6a:	f7fe ff37 	bl	8000adc <HAL_GetTick>
 8001c6e:	1b80      	subs	r0, r0, r6
 8001c70:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001c74:	4298      	cmp	r0, r3
 8001c76:	d9f0      	bls.n	8001c5a <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 8001c78:	2003      	movs	r0, #3
 8001c7a:	e042      	b.n	8001d02 <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c7c:	4a26      	ldr	r2, [pc, #152]	@ (8001d18 <HAL_RCC_ClockConfig+0x150>)
 8001c7e:	6812      	ldr	r2, [r2, #0]
 8001c80:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8001c84:	d1e0      	bne.n	8001c48 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8001c86:	2001      	movs	r0, #1
 8001c88:	e03b      	b.n	8001d02 <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c8a:	4a23      	ldr	r2, [pc, #140]	@ (8001d18 <HAL_RCC_ClockConfig+0x150>)
 8001c8c:	6812      	ldr	r2, [r2, #0]
 8001c8e:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8001c92:	d1d9      	bne.n	8001c48 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8001c94:	2001      	movs	r0, #1
 8001c96:	e034      	b.n	8001d02 <HAL_RCC_ClockConfig+0x13a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c98:	4b1e      	ldr	r3, [pc, #120]	@ (8001d14 <HAL_RCC_ClockConfig+0x14c>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0307 	and.w	r3, r3, #7
 8001ca0:	42ab      	cmp	r3, r5
 8001ca2:	d907      	bls.n	8001cb4 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ca4:	b2ea      	uxtb	r2, r5
 8001ca6:	4b1b      	ldr	r3, [pc, #108]	@ (8001d14 <HAL_RCC_ClockConfig+0x14c>)
 8001ca8:	701a      	strb	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 0307 	and.w	r3, r3, #7
 8001cb0:	42ab      	cmp	r3, r5
 8001cb2:	d12d      	bne.n	8001d10 <HAL_RCC_ClockConfig+0x148>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cb4:	6823      	ldr	r3, [r4, #0]
 8001cb6:	f013 0f04 	tst.w	r3, #4
 8001cba:	d006      	beq.n	8001cca <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cbc:	4a16      	ldr	r2, [pc, #88]	@ (8001d18 <HAL_RCC_ClockConfig+0x150>)
 8001cbe:	6893      	ldr	r3, [r2, #8]
 8001cc0:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8001cc4:	68e1      	ldr	r1, [r4, #12]
 8001cc6:	430b      	orrs	r3, r1
 8001cc8:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cca:	6823      	ldr	r3, [r4, #0]
 8001ccc:	f013 0f08 	tst.w	r3, #8
 8001cd0:	d007      	beq.n	8001ce2 <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cd2:	4a11      	ldr	r2, [pc, #68]	@ (8001d18 <HAL_RCC_ClockConfig+0x150>)
 8001cd4:	6893      	ldr	r3, [r2, #8]
 8001cd6:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8001cda:	6921      	ldr	r1, [r4, #16]
 8001cdc:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001ce0:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ce2:	f7ff ff1d 	bl	8001b20 <HAL_RCC_GetSysClockFreq>
 8001ce6:	4b0c      	ldr	r3, [pc, #48]	@ (8001d18 <HAL_RCC_ClockConfig+0x150>)
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001cee:	4a0b      	ldr	r2, [pc, #44]	@ (8001d1c <HAL_RCC_ClockConfig+0x154>)
 8001cf0:	5cd3      	ldrb	r3, [r2, r3]
 8001cf2:	40d8      	lsrs	r0, r3
 8001cf4:	4b0a      	ldr	r3, [pc, #40]	@ (8001d20 <HAL_RCC_ClockConfig+0x158>)
 8001cf6:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001cf8:	4b0a      	ldr	r3, [pc, #40]	@ (8001d24 <HAL_RCC_ClockConfig+0x15c>)
 8001cfa:	6818      	ldr	r0, [r3, #0]
 8001cfc:	f7fe fea2 	bl	8000a44 <HAL_InitTick>
  return HAL_OK;
 8001d00:	2000      	movs	r0, #0
}
 8001d02:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001d04:	2001      	movs	r0, #1
}
 8001d06:	4770      	bx	lr
      return HAL_ERROR;
 8001d08:	2001      	movs	r0, #1
 8001d0a:	e7fa      	b.n	8001d02 <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8001d0c:	2001      	movs	r0, #1
 8001d0e:	e7f8      	b.n	8001d02 <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8001d10:	2001      	movs	r0, #1
 8001d12:	e7f6      	b.n	8001d02 <HAL_RCC_ClockConfig+0x13a>
 8001d14:	40023c00 	.word	0x40023c00
 8001d18:	40023800 	.word	0x40023800
 8001d1c:	08001d98 	.word	0x08001d98
 8001d20:	20000000 	.word	0x20000000
 8001d24:	20000008 	.word	0x20000008

08001d28 <memset>:
 8001d28:	4402      	add	r2, r0
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d100      	bne.n	8001d32 <memset+0xa>
 8001d30:	4770      	bx	lr
 8001d32:	f803 1b01 	strb.w	r1, [r3], #1
 8001d36:	e7f9      	b.n	8001d2c <memset+0x4>

08001d38 <__libc_init_array>:
 8001d38:	b570      	push	{r4, r5, r6, lr}
 8001d3a:	4d0d      	ldr	r5, [pc, #52]	@ (8001d70 <__libc_init_array+0x38>)
 8001d3c:	4c0d      	ldr	r4, [pc, #52]	@ (8001d74 <__libc_init_array+0x3c>)
 8001d3e:	1b64      	subs	r4, r4, r5
 8001d40:	10a4      	asrs	r4, r4, #2
 8001d42:	2600      	movs	r6, #0
 8001d44:	42a6      	cmp	r6, r4
 8001d46:	d109      	bne.n	8001d5c <__libc_init_array+0x24>
 8001d48:	4d0b      	ldr	r5, [pc, #44]	@ (8001d78 <__libc_init_array+0x40>)
 8001d4a:	4c0c      	ldr	r4, [pc, #48]	@ (8001d7c <__libc_init_array+0x44>)
 8001d4c:	f000 f818 	bl	8001d80 <_init>
 8001d50:	1b64      	subs	r4, r4, r5
 8001d52:	10a4      	asrs	r4, r4, #2
 8001d54:	2600      	movs	r6, #0
 8001d56:	42a6      	cmp	r6, r4
 8001d58:	d105      	bne.n	8001d66 <__libc_init_array+0x2e>
 8001d5a:	bd70      	pop	{r4, r5, r6, pc}
 8001d5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d60:	4798      	blx	r3
 8001d62:	3601      	adds	r6, #1
 8001d64:	e7ee      	b.n	8001d44 <__libc_init_array+0xc>
 8001d66:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d6a:	4798      	blx	r3
 8001d6c:	3601      	adds	r6, #1
 8001d6e:	e7f2      	b.n	8001d56 <__libc_init_array+0x1e>
 8001d70:	08001db8 	.word	0x08001db8
 8001d74:	08001db8 	.word	0x08001db8
 8001d78:	08001db8 	.word	0x08001db8
 8001d7c:	08001dbc 	.word	0x08001dbc

08001d80 <_init>:
 8001d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d82:	bf00      	nop
 8001d84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d86:	bc08      	pop	{r3}
 8001d88:	469e      	mov	lr, r3
 8001d8a:	4770      	bx	lr

08001d8c <_fini>:
 8001d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d8e:	bf00      	nop
 8001d90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d92:	bc08      	pop	{r3}
 8001d94:	469e      	mov	lr, r3
 8001d96:	4770      	bx	lr
