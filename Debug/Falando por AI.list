
Falando por AI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004838  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080049d0  080049d0  000059d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049e8  080049e8  00006014  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080049e8  080049e8  000059e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080049f0  080049f0  00006014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049f0  080049f0  000059f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080049f4  080049f4  000059f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  080049f8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019bc  20000014  08004a0c  00006014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200019d0  08004a0c  000069d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e980  00000000  00000000  00006044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a35  00000000  00000000  000149c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dc8  00000000  00000000  00017400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a85  00000000  00000000  000181c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000183b3  00000000  00000000  00018c4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001185a  00000000  00000000  00031000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009730a  00000000  00000000  0004285a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d9b64  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000389c  00000000  00000000  000d9ba8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000dd444  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000014 	.word	0x20000014
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080049b8 	.word	0x080049b8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000018 	.word	0x20000018
 80001d4:	080049b8 	.word	0x080049b8

080001d8 <__aeabi_dmul>:
 80001d8:	b570      	push	{r4, r5, r6, lr}
 80001da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80001de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80001e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001e6:	bf1d      	ittte	ne
 80001e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001ec:	ea94 0f0c 	teqne	r4, ip
 80001f0:	ea95 0f0c 	teqne	r5, ip
 80001f4:	f000 f8de 	bleq	80003b4 <__aeabi_dmul+0x1dc>
 80001f8:	442c      	add	r4, r5
 80001fa:	ea81 0603 	eor.w	r6, r1, r3
 80001fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000202:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000206:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800020a:	bf18      	it	ne
 800020c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000210:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000214:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000218:	d038      	beq.n	800028c <__aeabi_dmul+0xb4>
 800021a:	fba0 ce02 	umull	ip, lr, r0, r2
 800021e:	f04f 0500 	mov.w	r5, #0
 8000222:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000226:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800022a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800022e:	f04f 0600 	mov.w	r6, #0
 8000232:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000236:	f09c 0f00 	teq	ip, #0
 800023a:	bf18      	it	ne
 800023c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000240:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000244:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000248:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800024c:	d204      	bcs.n	8000258 <__aeabi_dmul+0x80>
 800024e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000252:	416d      	adcs	r5, r5
 8000254:	eb46 0606 	adc.w	r6, r6, r6
 8000258:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800025c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000260:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000264:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000268:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800026c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000270:	bf88      	it	hi
 8000272:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000276:	d81e      	bhi.n	80002b6 <__aeabi_dmul+0xde>
 8000278:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	bd70      	pop	{r4, r5, r6, pc}
 800028c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000290:	ea46 0101 	orr.w	r1, r6, r1
 8000294:	ea40 0002 	orr.w	r0, r0, r2
 8000298:	ea81 0103 	eor.w	r1, r1, r3
 800029c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002a0:	bfc2      	ittt	gt
 80002a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002aa:	bd70      	popgt	{r4, r5, r6, pc}
 80002ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002b0:	f04f 0e00 	mov.w	lr, #0
 80002b4:	3c01      	subs	r4, #1
 80002b6:	f300 80ab 	bgt.w	8000410 <__aeabi_dmul+0x238>
 80002ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002be:	bfde      	ittt	le
 80002c0:	2000      	movle	r0, #0
 80002c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80002c6:	bd70      	pople	{r4, r5, r6, pc}
 80002c8:	f1c4 0400 	rsb	r4, r4, #0
 80002cc:	3c20      	subs	r4, #32
 80002ce:	da35      	bge.n	800033c <__aeabi_dmul+0x164>
 80002d0:	340c      	adds	r4, #12
 80002d2:	dc1b      	bgt.n	800030c <__aeabi_dmul+0x134>
 80002d4:	f104 0414 	add.w	r4, r4, #20
 80002d8:	f1c4 0520 	rsb	r5, r4, #32
 80002dc:	fa00 f305 	lsl.w	r3, r0, r5
 80002e0:	fa20 f004 	lsr.w	r0, r0, r4
 80002e4:	fa01 f205 	lsl.w	r2, r1, r5
 80002e8:	ea40 0002 	orr.w	r0, r0, r2
 80002ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80002f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002f8:	fa21 f604 	lsr.w	r6, r1, r4
 80002fc:	eb42 0106 	adc.w	r1, r2, r6
 8000300:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000304:	bf08      	it	eq
 8000306:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800030a:	bd70      	pop	{r4, r5, r6, pc}
 800030c:	f1c4 040c 	rsb	r4, r4, #12
 8000310:	f1c4 0520 	rsb	r5, r4, #32
 8000314:	fa00 f304 	lsl.w	r3, r0, r4
 8000318:	fa20 f005 	lsr.w	r0, r0, r5
 800031c:	fa01 f204 	lsl.w	r2, r1, r4
 8000320:	ea40 0002 	orr.w	r0, r0, r2
 8000324:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000328:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000334:	bf08      	it	eq
 8000336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f1c4 0520 	rsb	r5, r4, #32
 8000340:	fa00 f205 	lsl.w	r2, r0, r5
 8000344:	ea4e 0e02 	orr.w	lr, lr, r2
 8000348:	fa20 f304 	lsr.w	r3, r0, r4
 800034c:	fa01 f205 	lsl.w	r2, r1, r5
 8000350:	ea43 0302 	orr.w	r3, r3, r2
 8000354:	fa21 f004 	lsr.w	r0, r1, r4
 8000358:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800035c:	fa21 f204 	lsr.w	r2, r1, r4
 8000360:	ea20 0002 	bic.w	r0, r0, r2
 8000364:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000368:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800036c:	bf08      	it	eq
 800036e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f094 0f00 	teq	r4, #0
 8000378:	d10f      	bne.n	800039a <__aeabi_dmul+0x1c2>
 800037a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800037e:	0040      	lsls	r0, r0, #1
 8000380:	eb41 0101 	adc.w	r1, r1, r1
 8000384:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000388:	bf08      	it	eq
 800038a:	3c01      	subeq	r4, #1
 800038c:	d0f7      	beq.n	800037e <__aeabi_dmul+0x1a6>
 800038e:	ea41 0106 	orr.w	r1, r1, r6
 8000392:	f095 0f00 	teq	r5, #0
 8000396:	bf18      	it	ne
 8000398:	4770      	bxne	lr
 800039a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800039e:	0052      	lsls	r2, r2, #1
 80003a0:	eb43 0303 	adc.w	r3, r3, r3
 80003a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80003a8:	bf08      	it	eq
 80003aa:	3d01      	subeq	r5, #1
 80003ac:	d0f7      	beq.n	800039e <__aeabi_dmul+0x1c6>
 80003ae:	ea43 0306 	orr.w	r3, r3, r6
 80003b2:	4770      	bx	lr
 80003b4:	ea94 0f0c 	teq	r4, ip
 80003b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003bc:	bf18      	it	ne
 80003be:	ea95 0f0c 	teqne	r5, ip
 80003c2:	d00c      	beq.n	80003de <__aeabi_dmul+0x206>
 80003c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003c8:	bf18      	it	ne
 80003ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ce:	d1d1      	bne.n	8000374 <__aeabi_dmul+0x19c>
 80003d0:	ea81 0103 	eor.w	r1, r1, r3
 80003d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003d8:	f04f 0000 	mov.w	r0, #0
 80003dc:	bd70      	pop	{r4, r5, r6, pc}
 80003de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003e2:	bf06      	itte	eq
 80003e4:	4610      	moveq	r0, r2
 80003e6:	4619      	moveq	r1, r3
 80003e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ec:	d019      	beq.n	8000422 <__aeabi_dmul+0x24a>
 80003ee:	ea94 0f0c 	teq	r4, ip
 80003f2:	d102      	bne.n	80003fa <__aeabi_dmul+0x222>
 80003f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003f8:	d113      	bne.n	8000422 <__aeabi_dmul+0x24a>
 80003fa:	ea95 0f0c 	teq	r5, ip
 80003fe:	d105      	bne.n	800040c <__aeabi_dmul+0x234>
 8000400:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000404:	bf1c      	itt	ne
 8000406:	4610      	movne	r0, r2
 8000408:	4619      	movne	r1, r3
 800040a:	d10a      	bne.n	8000422 <__aeabi_dmul+0x24a>
 800040c:	ea81 0103 	eor.w	r1, r1, r3
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000414:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd70      	pop	{r4, r5, r6, pc}
 8000422:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000426:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800042a:	bd70      	pop	{r4, r5, r6, pc}

0800042c <__aeabi_drsub>:
 800042c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000430:	e002      	b.n	8000438 <__adddf3>
 8000432:	bf00      	nop

08000434 <__aeabi_dsub>:
 8000434:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000438 <__adddf3>:
 8000438:	b530      	push	{r4, r5, lr}
 800043a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800043e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000442:	ea94 0f05 	teq	r4, r5
 8000446:	bf08      	it	eq
 8000448:	ea90 0f02 	teqeq	r0, r2
 800044c:	bf1f      	itttt	ne
 800044e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000452:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000456:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800045a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800045e:	f000 80e2 	beq.w	8000626 <__adddf3+0x1ee>
 8000462:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000466:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800046a:	bfb8      	it	lt
 800046c:	426d      	neglt	r5, r5
 800046e:	dd0c      	ble.n	800048a <__adddf3+0x52>
 8000470:	442c      	add	r4, r5
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	ea82 0000 	eor.w	r0, r2, r0
 800047e:	ea83 0101 	eor.w	r1, r3, r1
 8000482:	ea80 0202 	eor.w	r2, r0, r2
 8000486:	ea81 0303 	eor.w	r3, r1, r3
 800048a:	2d36      	cmp	r5, #54	@ 0x36
 800048c:	bf88      	it	hi
 800048e:	bd30      	pophi	{r4, r5, pc}
 8000490:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000494:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000498:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800049c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004a0:	d002      	beq.n	80004a8 <__adddf3+0x70>
 80004a2:	4240      	negs	r0, r0
 80004a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80004ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004b0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004b4:	d002      	beq.n	80004bc <__adddf3+0x84>
 80004b6:	4252      	negs	r2, r2
 80004b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004bc:	ea94 0f05 	teq	r4, r5
 80004c0:	f000 80a7 	beq.w	8000612 <__adddf3+0x1da>
 80004c4:	f1a4 0401 	sub.w	r4, r4, #1
 80004c8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004cc:	db0d      	blt.n	80004ea <__adddf3+0xb2>
 80004ce:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004d2:	fa22 f205 	lsr.w	r2, r2, r5
 80004d6:	1880      	adds	r0, r0, r2
 80004d8:	f141 0100 	adc.w	r1, r1, #0
 80004dc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004e0:	1880      	adds	r0, r0, r2
 80004e2:	fa43 f305 	asr.w	r3, r3, r5
 80004e6:	4159      	adcs	r1, r3
 80004e8:	e00e      	b.n	8000508 <__adddf3+0xd0>
 80004ea:	f1a5 0520 	sub.w	r5, r5, #32
 80004ee:	f10e 0e20 	add.w	lr, lr, #32
 80004f2:	2a01      	cmp	r2, #1
 80004f4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004f8:	bf28      	it	cs
 80004fa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004fe:	fa43 f305 	asr.w	r3, r3, r5
 8000502:	18c0      	adds	r0, r0, r3
 8000504:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	d507      	bpl.n	800051e <__adddf3+0xe6>
 800050e:	f04f 0e00 	mov.w	lr, #0
 8000512:	f1dc 0c00 	rsbs	ip, ip, #0
 8000516:	eb7e 0000 	sbcs.w	r0, lr, r0
 800051a:	eb6e 0101 	sbc.w	r1, lr, r1
 800051e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000522:	d31b      	bcc.n	800055c <__adddf3+0x124>
 8000524:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000528:	d30c      	bcc.n	8000544 <__adddf3+0x10c>
 800052a:	0849      	lsrs	r1, r1, #1
 800052c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000530:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000534:	f104 0401 	add.w	r4, r4, #1
 8000538:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800053c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000540:	f080 809a 	bcs.w	8000678 <__adddf3+0x240>
 8000544:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000548:	bf08      	it	eq
 800054a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800054e:	f150 0000 	adcs.w	r0, r0, #0
 8000552:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000556:	ea41 0105 	orr.w	r1, r1, r5
 800055a:	bd30      	pop	{r4, r5, pc}
 800055c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000560:	4140      	adcs	r0, r0
 8000562:	eb41 0101 	adc.w	r1, r1, r1
 8000566:	3c01      	subs	r4, #1
 8000568:	bf28      	it	cs
 800056a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800056e:	d2e9      	bcs.n	8000544 <__adddf3+0x10c>
 8000570:	f091 0f00 	teq	r1, #0
 8000574:	bf04      	itt	eq
 8000576:	4601      	moveq	r1, r0
 8000578:	2000      	moveq	r0, #0
 800057a:	fab1 f381 	clz	r3, r1
 800057e:	bf08      	it	eq
 8000580:	3320      	addeq	r3, #32
 8000582:	f1a3 030b 	sub.w	r3, r3, #11
 8000586:	f1b3 0220 	subs.w	r2, r3, #32
 800058a:	da0c      	bge.n	80005a6 <__adddf3+0x16e>
 800058c:	320c      	adds	r2, #12
 800058e:	dd08      	ble.n	80005a2 <__adddf3+0x16a>
 8000590:	f102 0c14 	add.w	ip, r2, #20
 8000594:	f1c2 020c 	rsb	r2, r2, #12
 8000598:	fa01 f00c 	lsl.w	r0, r1, ip
 800059c:	fa21 f102 	lsr.w	r1, r1, r2
 80005a0:	e00c      	b.n	80005bc <__adddf3+0x184>
 80005a2:	f102 0214 	add.w	r2, r2, #20
 80005a6:	bfd8      	it	le
 80005a8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ac:	fa01 f102 	lsl.w	r1, r1, r2
 80005b0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005b4:	bfdc      	itt	le
 80005b6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ba:	4090      	lslle	r0, r2
 80005bc:	1ae4      	subs	r4, r4, r3
 80005be:	bfa2      	ittt	ge
 80005c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005c4:	4329      	orrge	r1, r5
 80005c6:	bd30      	popge	{r4, r5, pc}
 80005c8:	ea6f 0404 	mvn.w	r4, r4
 80005cc:	3c1f      	subs	r4, #31
 80005ce:	da1c      	bge.n	800060a <__adddf3+0x1d2>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc0e      	bgt.n	80005f2 <__adddf3+0x1ba>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0220 	rsb	r2, r4, #32
 80005dc:	fa20 f004 	lsr.w	r0, r0, r4
 80005e0:	fa01 f302 	lsl.w	r3, r1, r2
 80005e4:	ea40 0003 	orr.w	r0, r0, r3
 80005e8:	fa21 f304 	lsr.w	r3, r1, r4
 80005ec:	ea45 0103 	orr.w	r1, r5, r3
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	f1c4 040c 	rsb	r4, r4, #12
 80005f6:	f1c4 0220 	rsb	r2, r4, #32
 80005fa:	fa20 f002 	lsr.w	r0, r0, r2
 80005fe:	fa01 f304 	lsl.w	r3, r1, r4
 8000602:	ea40 0003 	orr.w	r0, r0, r3
 8000606:	4629      	mov	r1, r5
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	fa21 f004 	lsr.w	r0, r1, r4
 800060e:	4629      	mov	r1, r5
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	f094 0f00 	teq	r4, #0
 8000616:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800061a:	bf06      	itte	eq
 800061c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000620:	3401      	addeq	r4, #1
 8000622:	3d01      	subne	r5, #1
 8000624:	e74e      	b.n	80004c4 <__adddf3+0x8c>
 8000626:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800062a:	bf18      	it	ne
 800062c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000630:	d029      	beq.n	8000686 <__adddf3+0x24e>
 8000632:	ea94 0f05 	teq	r4, r5
 8000636:	bf08      	it	eq
 8000638:	ea90 0f02 	teqeq	r0, r2
 800063c:	d005      	beq.n	800064a <__adddf3+0x212>
 800063e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000642:	bf04      	itt	eq
 8000644:	4619      	moveq	r1, r3
 8000646:	4610      	moveq	r0, r2
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	ea91 0f03 	teq	r1, r3
 800064e:	bf1e      	ittt	ne
 8000650:	2100      	movne	r1, #0
 8000652:	2000      	movne	r0, #0
 8000654:	bd30      	popne	{r4, r5, pc}
 8000656:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800065a:	d105      	bne.n	8000668 <__adddf3+0x230>
 800065c:	0040      	lsls	r0, r0, #1
 800065e:	4149      	adcs	r1, r1
 8000660:	bf28      	it	cs
 8000662:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000666:	bd30      	pop	{r4, r5, pc}
 8000668:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800066c:	bf3c      	itt	cc
 800066e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000672:	bd30      	popcc	{r4, r5, pc}
 8000674:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000678:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800067c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000680:	f04f 0000 	mov.w	r0, #0
 8000684:	bd30      	pop	{r4, r5, pc}
 8000686:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800068a:	bf1a      	itte	ne
 800068c:	4619      	movne	r1, r3
 800068e:	4610      	movne	r0, r2
 8000690:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000694:	bf1c      	itt	ne
 8000696:	460b      	movne	r3, r1
 8000698:	4602      	movne	r2, r0
 800069a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800069e:	bf06      	itte	eq
 80006a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006a4:	ea91 0f03 	teqeq	r1, r3
 80006a8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80006ac:	bd30      	pop	{r4, r5, pc}
 80006ae:	bf00      	nop

080006b0 <__aeabi_ui2d>:
 80006b0:	f090 0f00 	teq	r0, #0
 80006b4:	bf04      	itt	eq
 80006b6:	2100      	moveq	r1, #0
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006c0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006c4:	f04f 0500 	mov.w	r5, #0
 80006c8:	f04f 0100 	mov.w	r1, #0
 80006cc:	e750      	b.n	8000570 <__adddf3+0x138>
 80006ce:	bf00      	nop

080006d0 <__aeabi_i2d>:
 80006d0:	f090 0f00 	teq	r0, #0
 80006d4:	bf04      	itt	eq
 80006d6:	2100      	moveq	r1, #0
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006e0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006e4:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80006e8:	bf48      	it	mi
 80006ea:	4240      	negmi	r0, r0
 80006ec:	f04f 0100 	mov.w	r1, #0
 80006f0:	e73e      	b.n	8000570 <__adddf3+0x138>
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2d>:
 80006f4:	0042      	lsls	r2, r0, #1
 80006f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006fa:	ea4f 0131 	mov.w	r1, r1, rrx
 80006fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000702:	bf1f      	itttt	ne
 8000704:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000708:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800070c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000710:	4770      	bxne	lr
 8000712:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000716:	bf08      	it	eq
 8000718:	4770      	bxeq	lr
 800071a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800071e:	bf04      	itt	eq
 8000720:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000724:	4770      	bxeq	lr
 8000726:	b530      	push	{r4, r5, lr}
 8000728:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	e71c      	b.n	8000570 <__adddf3+0x138>
 8000736:	bf00      	nop

08000738 <__aeabi_ul2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f04f 0500 	mov.w	r5, #0
 8000746:	e00a      	b.n	800075e <__aeabi_l2d+0x16>

08000748 <__aeabi_l2d>:
 8000748:	ea50 0201 	orrs.w	r2, r0, r1
 800074c:	bf08      	it	eq
 800074e:	4770      	bxeq	lr
 8000750:	b530      	push	{r4, r5, lr}
 8000752:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000756:	d502      	bpl.n	800075e <__aeabi_l2d+0x16>
 8000758:	4240      	negs	r0, r0
 800075a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800075e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000762:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000766:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800076a:	f43f aed8 	beq.w	800051e <__adddf3+0xe6>
 800076e:	f04f 0203 	mov.w	r2, #3
 8000772:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000776:	bf18      	it	ne
 8000778:	3203      	addne	r2, #3
 800077a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800077e:	bf18      	it	ne
 8000780:	3203      	addne	r2, #3
 8000782:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000786:	f1c2 0320 	rsb	r3, r2, #32
 800078a:	fa00 fc03 	lsl.w	ip, r0, r3
 800078e:	fa20 f002 	lsr.w	r0, r0, r2
 8000792:	fa01 fe03 	lsl.w	lr, r1, r3
 8000796:	ea40 000e 	orr.w	r0, r0, lr
 800079a:	fa21 f102 	lsr.w	r1, r1, r2
 800079e:	4414      	add	r4, r2
 80007a0:	e6bd      	b.n	800051e <__adddf3+0xe6>
 80007a2:	bf00      	nop

080007a4 <__aeabi_d2f>:
 80007a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007a8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80007ac:	bf24      	itt	cs
 80007ae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80007b2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80007b6:	d90d      	bls.n	80007d4 <__aeabi_d2f+0x30>
 80007b8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80007bc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007c0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007c4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80007c8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007cc:	bf08      	it	eq
 80007ce:	f020 0001 	biceq.w	r0, r0, #1
 80007d2:	4770      	bx	lr
 80007d4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80007d8:	d121      	bne.n	800081e <__aeabi_d2f+0x7a>
 80007da:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80007de:	bfbc      	itt	lt
 80007e0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80007e4:	4770      	bxlt	lr
 80007e6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80007ea:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80007ee:	f1c2 0218 	rsb	r2, r2, #24
 80007f2:	f1c2 0c20 	rsb	ip, r2, #32
 80007f6:	fa10 f30c 	lsls.w	r3, r0, ip
 80007fa:	fa20 f002 	lsr.w	r0, r0, r2
 80007fe:	bf18      	it	ne
 8000800:	f040 0001 	orrne.w	r0, r0, #1
 8000804:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000808:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800080c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000810:	ea40 000c 	orr.w	r0, r0, ip
 8000814:	fa23 f302 	lsr.w	r3, r3, r2
 8000818:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800081c:	e7cc      	b.n	80007b8 <__aeabi_d2f+0x14>
 800081e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000822:	d107      	bne.n	8000834 <__aeabi_d2f+0x90>
 8000824:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000828:	bf1e      	ittt	ne
 800082a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 800082e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000832:	4770      	bxne	lr
 8000834:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000838:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 800083c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop

08000844 <__aeabi_uldivmod>:
 8000844:	b953      	cbnz	r3, 800085c <__aeabi_uldivmod+0x18>
 8000846:	b94a      	cbnz	r2, 800085c <__aeabi_uldivmod+0x18>
 8000848:	2900      	cmp	r1, #0
 800084a:	bf08      	it	eq
 800084c:	2800      	cmpeq	r0, #0
 800084e:	bf1c      	itt	ne
 8000850:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000854:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000858:	f000 b988 	b.w	8000b6c <__aeabi_idiv0>
 800085c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000860:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000864:	f000 f806 	bl	8000874 <__udivmoddi4>
 8000868:	f8dd e004 	ldr.w	lr, [sp, #4]
 800086c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000870:	b004      	add	sp, #16
 8000872:	4770      	bx	lr

08000874 <__udivmoddi4>:
 8000874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000878:	9d08      	ldr	r5, [sp, #32]
 800087a:	468e      	mov	lr, r1
 800087c:	4604      	mov	r4, r0
 800087e:	4688      	mov	r8, r1
 8000880:	2b00      	cmp	r3, #0
 8000882:	d14a      	bne.n	800091a <__udivmoddi4+0xa6>
 8000884:	428a      	cmp	r2, r1
 8000886:	4617      	mov	r7, r2
 8000888:	d962      	bls.n	8000950 <__udivmoddi4+0xdc>
 800088a:	fab2 f682 	clz	r6, r2
 800088e:	b14e      	cbz	r6, 80008a4 <__udivmoddi4+0x30>
 8000890:	f1c6 0320 	rsb	r3, r6, #32
 8000894:	fa01 f806 	lsl.w	r8, r1, r6
 8000898:	fa20 f303 	lsr.w	r3, r0, r3
 800089c:	40b7      	lsls	r7, r6
 800089e:	ea43 0808 	orr.w	r8, r3, r8
 80008a2:	40b4      	lsls	r4, r6
 80008a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80008a8:	fa1f fc87 	uxth.w	ip, r7
 80008ac:	fbb8 f1fe 	udiv	r1, r8, lr
 80008b0:	0c23      	lsrs	r3, r4, #16
 80008b2:	fb0e 8811 	mls	r8, lr, r1, r8
 80008b6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80008ba:	fb01 f20c 	mul.w	r2, r1, ip
 80008be:	429a      	cmp	r2, r3
 80008c0:	d909      	bls.n	80008d6 <__udivmoddi4+0x62>
 80008c2:	18fb      	adds	r3, r7, r3
 80008c4:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 80008c8:	f080 80ea 	bcs.w	8000aa0 <__udivmoddi4+0x22c>
 80008cc:	429a      	cmp	r2, r3
 80008ce:	f240 80e7 	bls.w	8000aa0 <__udivmoddi4+0x22c>
 80008d2:	3902      	subs	r1, #2
 80008d4:	443b      	add	r3, r7
 80008d6:	1a9a      	subs	r2, r3, r2
 80008d8:	b2a3      	uxth	r3, r4
 80008da:	fbb2 f0fe 	udiv	r0, r2, lr
 80008de:	fb0e 2210 	mls	r2, lr, r0, r2
 80008e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80008e6:	fb00 fc0c 	mul.w	ip, r0, ip
 80008ea:	459c      	cmp	ip, r3
 80008ec:	d909      	bls.n	8000902 <__udivmoddi4+0x8e>
 80008ee:	18fb      	adds	r3, r7, r3
 80008f0:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80008f4:	f080 80d6 	bcs.w	8000aa4 <__udivmoddi4+0x230>
 80008f8:	459c      	cmp	ip, r3
 80008fa:	f240 80d3 	bls.w	8000aa4 <__udivmoddi4+0x230>
 80008fe:	443b      	add	r3, r7
 8000900:	3802      	subs	r0, #2
 8000902:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000906:	eba3 030c 	sub.w	r3, r3, ip
 800090a:	2100      	movs	r1, #0
 800090c:	b11d      	cbz	r5, 8000916 <__udivmoddi4+0xa2>
 800090e:	40f3      	lsrs	r3, r6
 8000910:	2200      	movs	r2, #0
 8000912:	e9c5 3200 	strd	r3, r2, [r5]
 8000916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800091a:	428b      	cmp	r3, r1
 800091c:	d905      	bls.n	800092a <__udivmoddi4+0xb6>
 800091e:	b10d      	cbz	r5, 8000924 <__udivmoddi4+0xb0>
 8000920:	e9c5 0100 	strd	r0, r1, [r5]
 8000924:	2100      	movs	r1, #0
 8000926:	4608      	mov	r0, r1
 8000928:	e7f5      	b.n	8000916 <__udivmoddi4+0xa2>
 800092a:	fab3 f183 	clz	r1, r3
 800092e:	2900      	cmp	r1, #0
 8000930:	d146      	bne.n	80009c0 <__udivmoddi4+0x14c>
 8000932:	4573      	cmp	r3, lr
 8000934:	d302      	bcc.n	800093c <__udivmoddi4+0xc8>
 8000936:	4282      	cmp	r2, r0
 8000938:	f200 8105 	bhi.w	8000b46 <__udivmoddi4+0x2d2>
 800093c:	1a84      	subs	r4, r0, r2
 800093e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000942:	2001      	movs	r0, #1
 8000944:	4690      	mov	r8, r2
 8000946:	2d00      	cmp	r5, #0
 8000948:	d0e5      	beq.n	8000916 <__udivmoddi4+0xa2>
 800094a:	e9c5 4800 	strd	r4, r8, [r5]
 800094e:	e7e2      	b.n	8000916 <__udivmoddi4+0xa2>
 8000950:	2a00      	cmp	r2, #0
 8000952:	f000 8090 	beq.w	8000a76 <__udivmoddi4+0x202>
 8000956:	fab2 f682 	clz	r6, r2
 800095a:	2e00      	cmp	r6, #0
 800095c:	f040 80a4 	bne.w	8000aa8 <__udivmoddi4+0x234>
 8000960:	1a8a      	subs	r2, r1, r2
 8000962:	0c03      	lsrs	r3, r0, #16
 8000964:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000968:	b280      	uxth	r0, r0
 800096a:	b2bc      	uxth	r4, r7
 800096c:	2101      	movs	r1, #1
 800096e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000972:	fb0e 221c 	mls	r2, lr, ip, r2
 8000976:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800097a:	fb04 f20c 	mul.w	r2, r4, ip
 800097e:	429a      	cmp	r2, r3
 8000980:	d907      	bls.n	8000992 <__udivmoddi4+0x11e>
 8000982:	18fb      	adds	r3, r7, r3
 8000984:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000988:	d202      	bcs.n	8000990 <__udivmoddi4+0x11c>
 800098a:	429a      	cmp	r2, r3
 800098c:	f200 80e0 	bhi.w	8000b50 <__udivmoddi4+0x2dc>
 8000990:	46c4      	mov	ip, r8
 8000992:	1a9b      	subs	r3, r3, r2
 8000994:	fbb3 f2fe 	udiv	r2, r3, lr
 8000998:	fb0e 3312 	mls	r3, lr, r2, r3
 800099c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80009a0:	fb02 f404 	mul.w	r4, r2, r4
 80009a4:	429c      	cmp	r4, r3
 80009a6:	d907      	bls.n	80009b8 <__udivmoddi4+0x144>
 80009a8:	18fb      	adds	r3, r7, r3
 80009aa:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80009ae:	d202      	bcs.n	80009b6 <__udivmoddi4+0x142>
 80009b0:	429c      	cmp	r4, r3
 80009b2:	f200 80ca 	bhi.w	8000b4a <__udivmoddi4+0x2d6>
 80009b6:	4602      	mov	r2, r0
 80009b8:	1b1b      	subs	r3, r3, r4
 80009ba:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80009be:	e7a5      	b.n	800090c <__udivmoddi4+0x98>
 80009c0:	f1c1 0620 	rsb	r6, r1, #32
 80009c4:	408b      	lsls	r3, r1
 80009c6:	fa22 f706 	lsr.w	r7, r2, r6
 80009ca:	431f      	orrs	r7, r3
 80009cc:	fa0e f401 	lsl.w	r4, lr, r1
 80009d0:	fa20 f306 	lsr.w	r3, r0, r6
 80009d4:	fa2e fe06 	lsr.w	lr, lr, r6
 80009d8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80009dc:	4323      	orrs	r3, r4
 80009de:	fa00 f801 	lsl.w	r8, r0, r1
 80009e2:	fa1f fc87 	uxth.w	ip, r7
 80009e6:	fbbe f0f9 	udiv	r0, lr, r9
 80009ea:	0c1c      	lsrs	r4, r3, #16
 80009ec:	fb09 ee10 	mls	lr, r9, r0, lr
 80009f0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80009f4:	fb00 fe0c 	mul.w	lr, r0, ip
 80009f8:	45a6      	cmp	lr, r4
 80009fa:	fa02 f201 	lsl.w	r2, r2, r1
 80009fe:	d909      	bls.n	8000a14 <__udivmoddi4+0x1a0>
 8000a00:	193c      	adds	r4, r7, r4
 8000a02:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000a06:	f080 809c 	bcs.w	8000b42 <__udivmoddi4+0x2ce>
 8000a0a:	45a6      	cmp	lr, r4
 8000a0c:	f240 8099 	bls.w	8000b42 <__udivmoddi4+0x2ce>
 8000a10:	3802      	subs	r0, #2
 8000a12:	443c      	add	r4, r7
 8000a14:	eba4 040e 	sub.w	r4, r4, lr
 8000a18:	fa1f fe83 	uxth.w	lr, r3
 8000a1c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000a20:	fb09 4413 	mls	r4, r9, r3, r4
 8000a24:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000a28:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a2c:	45a4      	cmp	ip, r4
 8000a2e:	d908      	bls.n	8000a42 <__udivmoddi4+0x1ce>
 8000a30:	193c      	adds	r4, r7, r4
 8000a32:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000a36:	f080 8082 	bcs.w	8000b3e <__udivmoddi4+0x2ca>
 8000a3a:	45a4      	cmp	ip, r4
 8000a3c:	d97f      	bls.n	8000b3e <__udivmoddi4+0x2ca>
 8000a3e:	3b02      	subs	r3, #2
 8000a40:	443c      	add	r4, r7
 8000a42:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000a46:	eba4 040c 	sub.w	r4, r4, ip
 8000a4a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000a4e:	4564      	cmp	r4, ip
 8000a50:	4673      	mov	r3, lr
 8000a52:	46e1      	mov	r9, ip
 8000a54:	d362      	bcc.n	8000b1c <__udivmoddi4+0x2a8>
 8000a56:	d05f      	beq.n	8000b18 <__udivmoddi4+0x2a4>
 8000a58:	b15d      	cbz	r5, 8000a72 <__udivmoddi4+0x1fe>
 8000a5a:	ebb8 0203 	subs.w	r2, r8, r3
 8000a5e:	eb64 0409 	sbc.w	r4, r4, r9
 8000a62:	fa04 f606 	lsl.w	r6, r4, r6
 8000a66:	fa22 f301 	lsr.w	r3, r2, r1
 8000a6a:	431e      	orrs	r6, r3
 8000a6c:	40cc      	lsrs	r4, r1
 8000a6e:	e9c5 6400 	strd	r6, r4, [r5]
 8000a72:	2100      	movs	r1, #0
 8000a74:	e74f      	b.n	8000916 <__udivmoddi4+0xa2>
 8000a76:	fbb1 fcf2 	udiv	ip, r1, r2
 8000a7a:	0c01      	lsrs	r1, r0, #16
 8000a7c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000a80:	b280      	uxth	r0, r0
 8000a82:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000a86:	463b      	mov	r3, r7
 8000a88:	4638      	mov	r0, r7
 8000a8a:	463c      	mov	r4, r7
 8000a8c:	46b8      	mov	r8, r7
 8000a8e:	46be      	mov	lr, r7
 8000a90:	2620      	movs	r6, #32
 8000a92:	fbb1 f1f7 	udiv	r1, r1, r7
 8000a96:	eba2 0208 	sub.w	r2, r2, r8
 8000a9a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000a9e:	e766      	b.n	800096e <__udivmoddi4+0xfa>
 8000aa0:	4601      	mov	r1, r0
 8000aa2:	e718      	b.n	80008d6 <__udivmoddi4+0x62>
 8000aa4:	4610      	mov	r0, r2
 8000aa6:	e72c      	b.n	8000902 <__udivmoddi4+0x8e>
 8000aa8:	f1c6 0220 	rsb	r2, r6, #32
 8000aac:	fa2e f302 	lsr.w	r3, lr, r2
 8000ab0:	40b7      	lsls	r7, r6
 8000ab2:	40b1      	lsls	r1, r6
 8000ab4:	fa20 f202 	lsr.w	r2, r0, r2
 8000ab8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000abc:	430a      	orrs	r2, r1
 8000abe:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ac2:	b2bc      	uxth	r4, r7
 8000ac4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ac8:	0c11      	lsrs	r1, r2, #16
 8000aca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ace:	fb08 f904 	mul.w	r9, r8, r4
 8000ad2:	40b0      	lsls	r0, r6
 8000ad4:	4589      	cmp	r9, r1
 8000ad6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000ada:	b280      	uxth	r0, r0
 8000adc:	d93e      	bls.n	8000b5c <__udivmoddi4+0x2e8>
 8000ade:	1879      	adds	r1, r7, r1
 8000ae0:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000ae4:	d201      	bcs.n	8000aea <__udivmoddi4+0x276>
 8000ae6:	4589      	cmp	r9, r1
 8000ae8:	d81f      	bhi.n	8000b2a <__udivmoddi4+0x2b6>
 8000aea:	eba1 0109 	sub.w	r1, r1, r9
 8000aee:	fbb1 f9fe 	udiv	r9, r1, lr
 8000af2:	fb09 f804 	mul.w	r8, r9, r4
 8000af6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000afa:	b292      	uxth	r2, r2
 8000afc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b00:	4542      	cmp	r2, r8
 8000b02:	d229      	bcs.n	8000b58 <__udivmoddi4+0x2e4>
 8000b04:	18ba      	adds	r2, r7, r2
 8000b06:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000b0a:	d2c4      	bcs.n	8000a96 <__udivmoddi4+0x222>
 8000b0c:	4542      	cmp	r2, r8
 8000b0e:	d2c2      	bcs.n	8000a96 <__udivmoddi4+0x222>
 8000b10:	f1a9 0102 	sub.w	r1, r9, #2
 8000b14:	443a      	add	r2, r7
 8000b16:	e7be      	b.n	8000a96 <__udivmoddi4+0x222>
 8000b18:	45f0      	cmp	r8, lr
 8000b1a:	d29d      	bcs.n	8000a58 <__udivmoddi4+0x1e4>
 8000b1c:	ebbe 0302 	subs.w	r3, lr, r2
 8000b20:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000b24:	3801      	subs	r0, #1
 8000b26:	46e1      	mov	r9, ip
 8000b28:	e796      	b.n	8000a58 <__udivmoddi4+0x1e4>
 8000b2a:	eba7 0909 	sub.w	r9, r7, r9
 8000b2e:	4449      	add	r1, r9
 8000b30:	f1a8 0c02 	sub.w	ip, r8, #2
 8000b34:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b38:	fb09 f804 	mul.w	r8, r9, r4
 8000b3c:	e7db      	b.n	8000af6 <__udivmoddi4+0x282>
 8000b3e:	4673      	mov	r3, lr
 8000b40:	e77f      	b.n	8000a42 <__udivmoddi4+0x1ce>
 8000b42:	4650      	mov	r0, sl
 8000b44:	e766      	b.n	8000a14 <__udivmoddi4+0x1a0>
 8000b46:	4608      	mov	r0, r1
 8000b48:	e6fd      	b.n	8000946 <__udivmoddi4+0xd2>
 8000b4a:	443b      	add	r3, r7
 8000b4c:	3a02      	subs	r2, #2
 8000b4e:	e733      	b.n	80009b8 <__udivmoddi4+0x144>
 8000b50:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b54:	443b      	add	r3, r7
 8000b56:	e71c      	b.n	8000992 <__udivmoddi4+0x11e>
 8000b58:	4649      	mov	r1, r9
 8000b5a:	e79c      	b.n	8000a96 <__udivmoddi4+0x222>
 8000b5c:	eba1 0109 	sub.w	r1, r1, r9
 8000b60:	46c4      	mov	ip, r8
 8000b62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b66:	fb09 f804 	mul.w	r8, r9, r4
 8000b6a:	e7c4      	b.n	8000af6 <__udivmoddi4+0x282>

08000b6c <__aeabi_idiv0>:
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop

08000b70 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b084      	sub	sp, #16
 8000b74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b76:	463b      	mov	r3, r7
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	605a      	str	r2, [r3, #4]
 8000b7e:	609a      	str	r2, [r3, #8]
 8000b80:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000b82:	4b22      	ldr	r3, [pc, #136]	@ (8000c0c <MX_ADC1_Init+0x9c>)
 8000b84:	4a22      	ldr	r2, [pc, #136]	@ (8000c10 <MX_ADC1_Init+0xa0>)
 8000b86:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000b88:	4b20      	ldr	r3, [pc, #128]	@ (8000c0c <MX_ADC1_Init+0x9c>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b8e:	4b1f      	ldr	r3, [pc, #124]	@ (8000c0c <MX_ADC1_Init+0x9c>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000b94:	4b1d      	ldr	r3, [pc, #116]	@ (8000c0c <MX_ADC1_Init+0x9c>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b9a:	4b1c      	ldr	r3, [pc, #112]	@ (8000c0c <MX_ADC1_Init+0x9c>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ba0:	4b1a      	ldr	r3, [pc, #104]	@ (8000c0c <MX_ADC1_Init+0x9c>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000ba8:	4b18      	ldr	r3, [pc, #96]	@ (8000c0c <MX_ADC1_Init+0x9c>)
 8000baa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000bae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8000bb0:	4b16      	ldr	r3, [pc, #88]	@ (8000c0c <MX_ADC1_Init+0x9c>)
 8000bb2:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8000bb6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bb8:	4b14      	ldr	r3, [pc, #80]	@ (8000c0c <MX_ADC1_Init+0x9c>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000bbe:	4b13      	ldr	r3, [pc, #76]	@ (8000c0c <MX_ADC1_Init+0x9c>)
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000bc4:	4b11      	ldr	r3, [pc, #68]	@ (8000c0c <MX_ADC1_Init+0x9c>)
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bcc:	4b0f      	ldr	r3, [pc, #60]	@ (8000c0c <MX_ADC1_Init+0x9c>)
 8000bce:	2201      	movs	r2, #1
 8000bd0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000bd2:	480e      	ldr	r0, [pc, #56]	@ (8000c0c <MX_ADC1_Init+0x9c>)
 8000bd4:	f000 fd4a 	bl	800166c <HAL_ADC_Init>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8000bde:	f000 fb4f 	bl	8001280 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000be2:	2301      	movs	r3, #1
 8000be4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000be6:	2301      	movs	r3, #1
 8000be8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000bea:	2300      	movs	r3, #0
 8000bec:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bee:	463b      	mov	r3, r7
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	4806      	ldr	r0, [pc, #24]	@ (8000c0c <MX_ADC1_Init+0x9c>)
 8000bf4:	f000 fe90 	bl	8001918 <HAL_ADC_ConfigChannel>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000bfe:	f000 fb3f 	bl	8001280 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c02:	bf00      	nop
 8000c04:	3710      	adds	r7, #16
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	20000030 	.word	0x20000030
 8000c10:	40012000 	.word	0x40012000

08000c14 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b08a      	sub	sp, #40	@ 0x28
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c1c:	f107 0314 	add.w	r3, r7, #20
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	605a      	str	r2, [r3, #4]
 8000c26:	609a      	str	r2, [r3, #8]
 8000c28:	60da      	str	r2, [r3, #12]
 8000c2a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a2e      	ldr	r2, [pc, #184]	@ (8000cec <HAL_ADC_MspInit+0xd8>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d156      	bne.n	8000ce4 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	613b      	str	r3, [r7, #16]
 8000c3a:	4b2d      	ldr	r3, [pc, #180]	@ (8000cf0 <HAL_ADC_MspInit+0xdc>)
 8000c3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c3e:	4a2c      	ldr	r2, [pc, #176]	@ (8000cf0 <HAL_ADC_MspInit+0xdc>)
 8000c40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c44:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c46:	4b2a      	ldr	r3, [pc, #168]	@ (8000cf0 <HAL_ADC_MspInit+0xdc>)
 8000c48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000c4e:	613b      	str	r3, [r7, #16]
 8000c50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	60fb      	str	r3, [r7, #12]
 8000c56:	4b26      	ldr	r3, [pc, #152]	@ (8000cf0 <HAL_ADC_MspInit+0xdc>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5a:	4a25      	ldr	r2, [pc, #148]	@ (8000cf0 <HAL_ADC_MspInit+0xdc>)
 8000c5c:	f043 0301 	orr.w	r3, r3, #1
 8000c60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c62:	4b23      	ldr	r3, [pc, #140]	@ (8000cf0 <HAL_ADC_MspInit+0xdc>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c66:	f003 0301 	and.w	r3, r3, #1
 8000c6a:	60fb      	str	r3, [r7, #12]
 8000c6c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000c6e:	2302      	movs	r3, #2
 8000c70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c72:	2303      	movs	r3, #3
 8000c74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c7a:	f107 0314 	add.w	r3, r7, #20
 8000c7e:	4619      	mov	r1, r3
 8000c80:	481c      	ldr	r0, [pc, #112]	@ (8000cf4 <HAL_ADC_MspInit+0xe0>)
 8000c82:	f001 fd7b 	bl	800277c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000c86:	4b1c      	ldr	r3, [pc, #112]	@ (8000cf8 <HAL_ADC_MspInit+0xe4>)
 8000c88:	4a1c      	ldr	r2, [pc, #112]	@ (8000cfc <HAL_ADC_MspInit+0xe8>)
 8000c8a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000c8c:	4b1a      	ldr	r3, [pc, #104]	@ (8000cf8 <HAL_ADC_MspInit+0xe4>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c92:	4b19      	ldr	r3, [pc, #100]	@ (8000cf8 <HAL_ADC_MspInit+0xe4>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c98:	4b17      	ldr	r3, [pc, #92]	@ (8000cf8 <HAL_ADC_MspInit+0xe4>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c9e:	4b16      	ldr	r3, [pc, #88]	@ (8000cf8 <HAL_ADC_MspInit+0xe4>)
 8000ca0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ca4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ca6:	4b14      	ldr	r3, [pc, #80]	@ (8000cf8 <HAL_ADC_MspInit+0xe4>)
 8000ca8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000cac:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000cae:	4b12      	ldr	r3, [pc, #72]	@ (8000cf8 <HAL_ADC_MspInit+0xe4>)
 8000cb0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000cb4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000cb6:	4b10      	ldr	r3, [pc, #64]	@ (8000cf8 <HAL_ADC_MspInit+0xe4>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000cbc:	4b0e      	ldr	r3, [pc, #56]	@ (8000cf8 <HAL_ADC_MspInit+0xe4>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000cc2:	4b0d      	ldr	r3, [pc, #52]	@ (8000cf8 <HAL_ADC_MspInit+0xe4>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000cc8:	480b      	ldr	r0, [pc, #44]	@ (8000cf8 <HAL_ADC_MspInit+0xe4>)
 8000cca:	f001 f9e7 	bl	800209c <HAL_DMA_Init>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8000cd4:	f000 fad4 	bl	8001280 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	4a07      	ldr	r2, [pc, #28]	@ (8000cf8 <HAL_ADC_MspInit+0xe4>)
 8000cdc:	639a      	str	r2, [r3, #56]	@ 0x38
 8000cde:	4a06      	ldr	r2, [pc, #24]	@ (8000cf8 <HAL_ADC_MspInit+0xe4>)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000ce4:	bf00      	nop
 8000ce6:	3728      	adds	r7, #40	@ 0x28
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	40012000 	.word	0x40012000
 8000cf0:	40023800 	.word	0x40023800
 8000cf4:	40020000 	.word	0x40020000
 8000cf8:	20000078 	.word	0x20000078
 8000cfc:	40026410 	.word	0x40026410

08000d00 <clamp>:

uint16_t* process_in_buffer = &(IN_BUFFER[BUFFER_SIZE/2]);
int16_t* process_out_buffer = &(OUT_BUFFER[BUFFER_SIZE]);

inline uint16_t clamp(uint16_t min, uint16_t x, uint16_t max)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	4603      	mov	r3, r0
 8000d08:	80fb      	strh	r3, [r7, #6]
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	80bb      	strh	r3, [r7, #4]
 8000d0e:	4613      	mov	r3, r2
 8000d10:	807b      	strh	r3, [r7, #2]
	x = x<min? min: x;
 8000d12:	88ba      	ldrh	r2, [r7, #4]
 8000d14:	88fb      	ldrh	r3, [r7, #6]
 8000d16:	4293      	cmp	r3, r2
 8000d18:	bf38      	it	cc
 8000d1a:	4613      	movcc	r3, r2
 8000d1c:	80bb      	strh	r3, [r7, #4]
	x = x>max? max: x;
 8000d1e:	88ba      	ldrh	r2, [r7, #4]
 8000d20:	887b      	ldrh	r3, [r7, #2]
 8000d22:	4293      	cmp	r3, r2
 8000d24:	bf28      	it	cs
 8000d26:	4613      	movcs	r3, r2
 8000d28:	80bb      	strh	r3, [r7, #4]
	return x;
 8000d2a:	88bb      	ldrh	r3, [r7, #4]
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	370c      	adds	r7, #12
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr

08000d38 <normalizeAudio>:
/*
	Receives a 12 bits unsigned audio input between 310 and 2792 and maps it
	into a float value between -1.0 and 1.0
*/
inline float normalizeAudio(uint16_t input)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4603      	mov	r3, r0
 8000d40:	80fb      	strh	r3, [r7, #6]
//	clamp values to the working range
	input = clamp(310, input, 2792);
 8000d42:	88fb      	ldrh	r3, [r7, #6]
 8000d44:	f640 22e8 	movw	r2, #2792	@ 0xae8
 8000d48:	4619      	mov	r1, r3
 8000d4a:	f44f 709b 	mov.w	r0, #310	@ 0x136
 8000d4e:	f7ff ffd7 	bl	8000d00 <clamp>
 8000d52:	4603      	mov	r3, r0
 8000d54:	80fb      	strh	r3, [r7, #6]
	return (input-1551)/(1241.0f);
 8000d56:	88fb      	ldrh	r3, [r7, #6]
 8000d58:	f2a3 630f 	subw	r3, r3, #1551	@ 0x60f
 8000d5c:	ee07 3a90 	vmov	s15, r3
 8000d60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d64:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8000d7c <normalizeAudio+0x44>
 8000d68:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000d6c:	eef0 7a66 	vmov.f32	s15, s13

//	return (input-2048)/4096.0;
}
 8000d70:	eeb0 0a67 	vmov.f32	s0, s15
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	449b2000 	.word	0x449b2000

08000d80 <deNormalizeAudio>:
/*
 * Receives a normalized audio input between -1.0 and 1.0 and converts it into
 * a signed 32bits uint32_t value, left-justified.
 */
inline int16_t deNormalizeAudio(float input)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	ed87 0a01 	vstr	s0, [r7, #4]
	    input *= ((double) 32767.0f); //Maximum positive 16-bit value
 8000d8a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d8e:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8000db4 <deNormalizeAudio+0x34>
 8000d92:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d96:	edc7 7a01 	vstr	s15, [r7, #4]
	    return (int16_t) input;
 8000d9a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d9e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000da2:	ee17 3a90 	vmov	r3, s15
 8000da6:	b21b      	sxth	r3, r3
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	370c      	adds	r7, #12
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr
 8000db4:	46fffe00 	.word	0x46fffe00

08000db8 <processHalfBuffer>:

/*
 * TODO
 */
void processHalfBuffer()
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0
	uint16_t int_input = 0;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	81bb      	strh	r3, [r7, #12]
	float normalized_input = 0.0;
 8000dc2:	f04f 0300 	mov.w	r3, #0
 8000dc6:	60bb      	str	r3, [r7, #8]
	float normalized_output = 0.0;
 8000dc8:	f04f 0300 	mov.w	r3, #0
 8000dcc:	607b      	str	r3, [r7, #4]
	int16_t int_output = 0;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	807b      	strh	r3, [r7, #2]

	uint16_t i = 0;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	81fb      	strh	r3, [r7, #14]
	for (i=0; i<BUFFER_SIZE/2; i++)
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	81fb      	strh	r3, [r7, #14]
 8000dda:	e03a      	b.n	8000e52 <processHalfBuffer+0x9a>
	{
		int_input = process_in_buffer[i];
 8000ddc:	4b21      	ldr	r3, [pc, #132]	@ (8000e64 <processHalfBuffer+0xac>)
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	89fb      	ldrh	r3, [r7, #14]
 8000de2:	005b      	lsls	r3, r3, #1
 8000de4:	4413      	add	r3, r2
 8000de6:	881b      	ldrh	r3, [r3, #0]
 8000de8:	81bb      	strh	r3, [r7, #12]
		normalized_input = normalizeAudio(int_input);
 8000dea:	89bb      	ldrh	r3, [r7, #12]
 8000dec:	4618      	mov	r0, r3
 8000dee:	f7ff ffa3 	bl	8000d38 <normalizeAudio>
 8000df2:	ed87 0a02 	vstr	s0, [r7, #8]
		normalized_output = processAudio(normalized_input) * OUTPUT_VOLUME; // COLOCAR EFEITO AQUI
 8000df6:	ed97 0a02 	vldr	s0, [r7, #8]
 8000dfa:	f000 f839 	bl	8000e70 <processAudio>
 8000dfe:	ee10 3a10 	vmov	r3, s0
 8000e02:	4618      	mov	r0, r3
 8000e04:	f7ff fc76 	bl	80006f4 <__aeabi_f2d>
 8000e08:	f04f 0200 	mov.w	r2, #0
 8000e0c:	4b16      	ldr	r3, [pc, #88]	@ (8000e68 <processHalfBuffer+0xb0>)
 8000e0e:	f7ff f9e3 	bl	80001d8 <__aeabi_dmul>
 8000e12:	4602      	mov	r2, r0
 8000e14:	460b      	mov	r3, r1
 8000e16:	4610      	mov	r0, r2
 8000e18:	4619      	mov	r1, r3
 8000e1a:	f7ff fcc3 	bl	80007a4 <__aeabi_d2f>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	607b      	str	r3, [r7, #4]
		int_output = deNormalizeAudio(normalized_output);
 8000e22:	ed97 0a01 	vldr	s0, [r7, #4]
 8000e26:	f7ff ffab 	bl	8000d80 <deNormalizeAudio>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	807b      	strh	r3, [r7, #2]
		process_out_buffer[2*i] = int_output;
 8000e2e:	4b0f      	ldr	r3, [pc, #60]	@ (8000e6c <processHalfBuffer+0xb4>)
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	89fb      	ldrh	r3, [r7, #14]
 8000e34:	009b      	lsls	r3, r3, #2
 8000e36:	4413      	add	r3, r2
 8000e38:	887a      	ldrh	r2, [r7, #2]
 8000e3a:	801a      	strh	r2, [r3, #0]
		process_out_buffer[2*i+1] = int_output;
 8000e3c:	4b0b      	ldr	r3, [pc, #44]	@ (8000e6c <processHalfBuffer+0xb4>)
 8000e3e:	681a      	ldr	r2, [r3, #0]
 8000e40:	89fb      	ldrh	r3, [r7, #14]
 8000e42:	009b      	lsls	r3, r3, #2
 8000e44:	3302      	adds	r3, #2
 8000e46:	4413      	add	r3, r2
 8000e48:	887a      	ldrh	r2, [r7, #2]
 8000e4a:	801a      	strh	r2, [r3, #0]
	for (i=0; i<BUFFER_SIZE/2; i++)
 8000e4c:	89fb      	ldrh	r3, [r7, #14]
 8000e4e:	3301      	adds	r3, #1
 8000e50:	81fb      	strh	r3, [r7, #14]
 8000e52:	89fb      	ldrh	r3, [r7, #14]
 8000e54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000e58:	d3c0      	bcc.n	8000ddc <processHalfBuffer+0x24>
	}

	return;
 8000e5a:	bf00      	nop
}
 8000e5c:	3710      	adds	r7, #16
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	20000000 	.word	0x20000000
 8000e68:	3fe00000 	.word	0x3fe00000
 8000e6c:	20000004 	.word	0x20000004

08000e70 <processAudio>:

/*
 * Placeholder audio processing function that applies no effect
 */
float processAudio(float input)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	ed87 0a01 	vstr	s0, [r7, #4]
	return input;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	ee07 3a90 	vmov	s15, r3
}
 8000e80:	eeb0 0a67 	vmov.f32	s0, s15
 8000e84:	370c      	adds	r7, #12
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
	...

08000e90 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000e96:	2300      	movs	r3, #0
 8000e98:	607b      	str	r3, [r7, #4]
 8000e9a:	4b17      	ldr	r3, [pc, #92]	@ (8000ef8 <MX_DMA_Init+0x68>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e9e:	4a16      	ldr	r2, [pc, #88]	@ (8000ef8 <MX_DMA_Init+0x68>)
 8000ea0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000ea4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ea6:	4b14      	ldr	r3, [pc, #80]	@ (8000ef8 <MX_DMA_Init+0x68>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eaa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000eae:	607b      	str	r3, [r7, #4]
 8000eb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	603b      	str	r3, [r7, #0]
 8000eb6:	4b10      	ldr	r3, [pc, #64]	@ (8000ef8 <MX_DMA_Init+0x68>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eba:	4a0f      	ldr	r2, [pc, #60]	@ (8000ef8 <MX_DMA_Init+0x68>)
 8000ebc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ec0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ec2:	4b0d      	ldr	r3, [pc, #52]	@ (8000ef8 <MX_DMA_Init+0x68>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000eca:	603b      	str	r3, [r7, #0]
 8000ecc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000ece:	2200      	movs	r2, #0
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	200f      	movs	r0, #15
 8000ed4:	f001 f8ab 	bl	800202e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000ed8:	200f      	movs	r0, #15
 8000eda:	f001 f8c4 	bl	8002066 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	2038      	movs	r0, #56	@ 0x38
 8000ee4:	f001 f8a3 	bl	800202e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000ee8:	2038      	movs	r0, #56	@ 0x38
 8000eea:	f001 f8bc 	bl	8002066 <HAL_NVIC_EnableIRQ>

}
 8000eee:	bf00      	nop
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40023800 	.word	0x40023800

08000efc <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b088      	sub	sp, #32
 8000f00:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f02:	f107 030c 	add.w	r3, r7, #12
 8000f06:	2200      	movs	r2, #0
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	605a      	str	r2, [r3, #4]
 8000f0c:	609a      	str	r2, [r3, #8]
 8000f0e:	60da      	str	r2, [r3, #12]
 8000f10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	60bb      	str	r3, [r7, #8]
 8000f16:	4b27      	ldr	r3, [pc, #156]	@ (8000fb4 <MX_GPIO_Init+0xb8>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f1a:	4a26      	ldr	r2, [pc, #152]	@ (8000fb4 <MX_GPIO_Init+0xb8>)
 8000f1c:	f043 0304 	orr.w	r3, r3, #4
 8000f20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f22:	4b24      	ldr	r3, [pc, #144]	@ (8000fb4 <MX_GPIO_Init+0xb8>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f26:	f003 0304 	and.w	r3, r3, #4
 8000f2a:	60bb      	str	r3, [r7, #8]
 8000f2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	607b      	str	r3, [r7, #4]
 8000f32:	4b20      	ldr	r3, [pc, #128]	@ (8000fb4 <MX_GPIO_Init+0xb8>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f36:	4a1f      	ldr	r2, [pc, #124]	@ (8000fb4 <MX_GPIO_Init+0xb8>)
 8000f38:	f043 0301 	orr.w	r3, r3, #1
 8000f3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f3e:	4b1d      	ldr	r3, [pc, #116]	@ (8000fb4 <MX_GPIO_Init+0xb8>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f42:	f003 0301 	and.w	r3, r3, #1
 8000f46:	607b      	str	r3, [r7, #4]
 8000f48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	603b      	str	r3, [r7, #0]
 8000f4e:	4b19      	ldr	r3, [pc, #100]	@ (8000fb4 <MX_GPIO_Init+0xb8>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f52:	4a18      	ldr	r2, [pc, #96]	@ (8000fb4 <MX_GPIO_Init+0xb8>)
 8000f54:	f043 0302 	orr.w	r3, r3, #2
 8000f58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f5a:	4b16      	ldr	r3, [pc, #88]	@ (8000fb4 <MX_GPIO_Init+0xb8>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f5e:	f003 0302 	and.w	r3, r3, #2
 8000f62:	603b      	str	r3, [r7, #0]
 8000f64:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000f66:	2200      	movs	r2, #0
 8000f68:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f6c:	4812      	ldr	r0, [pc, #72]	@ (8000fb8 <MX_GPIO_Init+0xbc>)
 8000f6e:	f001 fd89 	bl	8002a84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000f72:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f76:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f80:	2300      	movs	r3, #0
 8000f82:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000f84:	f107 030c 	add.w	r3, r7, #12
 8000f88:	4619      	mov	r1, r3
 8000f8a:	480b      	ldr	r0, [pc, #44]	@ (8000fb8 <MX_GPIO_Init+0xbc>)
 8000f8c:	f001 fbf6 	bl	800277c <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY_Pin */
  GPIO_InitStruct.Pin = KEY_Pin;
 8000f90:	2301      	movs	r3, #1
 8000f92:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f94:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000f98:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 8000f9e:	f107 030c 	add.w	r3, r7, #12
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	4805      	ldr	r0, [pc, #20]	@ (8000fbc <MX_GPIO_Init+0xc0>)
 8000fa6:	f001 fbe9 	bl	800277c <HAL_GPIO_Init>

}
 8000faa:	bf00      	nop
 8000fac:	3720      	adds	r7, #32
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	40023800 	.word	0x40023800
 8000fb8:	40020800 	.word	0x40020800
 8000fbc:	40020000 	.word	0x40020000

08000fc0 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_tx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000fc4:	4b13      	ldr	r3, [pc, #76]	@ (8001014 <MX_I2S2_Init+0x54>)
 8000fc6:	4a14      	ldr	r2, [pc, #80]	@ (8001018 <MX_I2S2_Init+0x58>)
 8000fc8:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000fca:	4b12      	ldr	r3, [pc, #72]	@ (8001014 <MX_I2S2_Init+0x54>)
 8000fcc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000fd0:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000fd2:	4b10      	ldr	r3, [pc, #64]	@ (8001014 <MX_I2S2_Init+0x54>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000fd8:	4b0e      	ldr	r3, [pc, #56]	@ (8001014 <MX_I2S2_Init+0x54>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000fde:	4b0d      	ldr	r3, [pc, #52]	@ (8001014 <MX_I2S2_Init+0x54>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8000fe4:	4b0b      	ldr	r3, [pc, #44]	@ (8001014 <MX_I2S2_Init+0x54>)
 8000fe6:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8000fea:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000fec:	4b09      	ldr	r3, [pc, #36]	@ (8001014 <MX_I2S2_Init+0x54>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000ff2:	4b08      	ldr	r3, [pc, #32]	@ (8001014 <MX_I2S2_Init+0x54>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000ff8:	4b06      	ldr	r3, [pc, #24]	@ (8001014 <MX_I2S2_Init+0x54>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000ffe:	4805      	ldr	r0, [pc, #20]	@ (8001014 <MX_I2S2_Init+0x54>)
 8001000:	f001 fd74 	bl	8002aec <HAL_I2S_Init>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 800100a:	f000 f939 	bl	8001280 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 800100e:	bf00      	nop
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	200018d8 	.word	0x200018d8
 8001018:	40003800 	.word	0x40003800

0800101c <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b090      	sub	sp, #64	@ 0x40
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001024:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	605a      	str	r2, [r3, #4]
 800102e:	609a      	str	r2, [r3, #8]
 8001030:	60da      	str	r2, [r3, #12]
 8001032:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001034:	f107 0314 	add.w	r3, r7, #20
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	605a      	str	r2, [r3, #4]
 800103e:	609a      	str	r2, [r3, #8]
 8001040:	60da      	str	r2, [r3, #12]
 8001042:	611a      	str	r2, [r3, #16]
 8001044:	615a      	str	r2, [r3, #20]
  if(i2sHandle->Instance==SPI2)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a3b      	ldr	r2, [pc, #236]	@ (8001138 <HAL_I2S_MspInit+0x11c>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d16e      	bne.n	800112e <HAL_I2S_MspInit+0x112>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001050:	2301      	movs	r3, #1
 8001052:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001054:	23c0      	movs	r3, #192	@ 0xc0
 8001056:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 16;
 8001058:	2310      	movs	r3, #16
 800105a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800105c:	2302      	movs	r3, #2
 800105e:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001060:	f107 0314 	add.w	r3, r7, #20
 8001064:	4618      	mov	r0, r3
 8001066:	f002 fef3 	bl	8003e50 <HAL_RCCEx_PeriphCLKConfig>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <HAL_I2S_MspInit+0x58>
    {
      Error_Handler();
 8001070:	f000 f906 	bl	8001280 <Error_Handler>
    }

    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001074:	2300      	movs	r3, #0
 8001076:	613b      	str	r3, [r7, #16]
 8001078:	4b30      	ldr	r3, [pc, #192]	@ (800113c <HAL_I2S_MspInit+0x120>)
 800107a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800107c:	4a2f      	ldr	r2, [pc, #188]	@ (800113c <HAL_I2S_MspInit+0x120>)
 800107e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001082:	6413      	str	r3, [r2, #64]	@ 0x40
 8001084:	4b2d      	ldr	r3, [pc, #180]	@ (800113c <HAL_I2S_MspInit+0x120>)
 8001086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001088:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800108c:	613b      	str	r3, [r7, #16]
 800108e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001090:	2300      	movs	r3, #0
 8001092:	60fb      	str	r3, [r7, #12]
 8001094:	4b29      	ldr	r3, [pc, #164]	@ (800113c <HAL_I2S_MspInit+0x120>)
 8001096:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001098:	4a28      	ldr	r2, [pc, #160]	@ (800113c <HAL_I2S_MspInit+0x120>)
 800109a:	f043 0302 	orr.w	r3, r3, #2
 800109e:	6313      	str	r3, [r2, #48]	@ 0x30
 80010a0:	4b26      	ldr	r3, [pc, #152]	@ (800113c <HAL_I2S_MspInit+0x120>)
 80010a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a4:	f003 0302 	and.w	r3, r3, #2
 80010a8:	60fb      	str	r3, [r7, #12]
 80010aa:	68fb      	ldr	r3, [r7, #12]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80010ac:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 80010b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b2:	2302      	movs	r3, #2
 80010b4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b6:	2300      	movs	r3, #0
 80010b8:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ba:	2300      	movs	r3, #0
 80010bc:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010be:	2305      	movs	r3, #5
 80010c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010c6:	4619      	mov	r1, r3
 80010c8:	481d      	ldr	r0, [pc, #116]	@ (8001140 <HAL_I2S_MspInit+0x124>)
 80010ca:	f001 fb57 	bl	800277c <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 80010ce:	4b1d      	ldr	r3, [pc, #116]	@ (8001144 <HAL_I2S_MspInit+0x128>)
 80010d0:	4a1d      	ldr	r2, [pc, #116]	@ (8001148 <HAL_I2S_MspInit+0x12c>)
 80010d2:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 80010d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001144 <HAL_I2S_MspInit+0x128>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010da:	4b1a      	ldr	r3, [pc, #104]	@ (8001144 <HAL_I2S_MspInit+0x128>)
 80010dc:	2240      	movs	r2, #64	@ 0x40
 80010de:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010e0:	4b18      	ldr	r3, [pc, #96]	@ (8001144 <HAL_I2S_MspInit+0x128>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80010e6:	4b17      	ldr	r3, [pc, #92]	@ (8001144 <HAL_I2S_MspInit+0x128>)
 80010e8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010ec:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80010ee:	4b15      	ldr	r3, [pc, #84]	@ (8001144 <HAL_I2S_MspInit+0x128>)
 80010f0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80010f4:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80010f6:	4b13      	ldr	r3, [pc, #76]	@ (8001144 <HAL_I2S_MspInit+0x128>)
 80010f8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80010fc:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 80010fe:	4b11      	ldr	r3, [pc, #68]	@ (8001144 <HAL_I2S_MspInit+0x128>)
 8001100:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001104:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001106:	4b0f      	ldr	r3, [pc, #60]	@ (8001144 <HAL_I2S_MspInit+0x128>)
 8001108:	2200      	movs	r2, #0
 800110a:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800110c:	4b0d      	ldr	r3, [pc, #52]	@ (8001144 <HAL_I2S_MspInit+0x128>)
 800110e:	2200      	movs	r2, #0
 8001110:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001112:	480c      	ldr	r0, [pc, #48]	@ (8001144 <HAL_I2S_MspInit+0x128>)
 8001114:	f000 ffc2 	bl	800209c <HAL_DMA_Init>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <HAL_I2S_MspInit+0x106>
    {
      Error_Handler();
 800111e:	f000 f8af 	bl	8001280 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmatx,hdma_spi2_tx);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4a07      	ldr	r2, [pc, #28]	@ (8001144 <HAL_I2S_MspInit+0x128>)
 8001126:	639a      	str	r2, [r3, #56]	@ 0x38
 8001128:	4a06      	ldr	r2, [pc, #24]	@ (8001144 <HAL_I2S_MspInit+0x128>)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800112e:	bf00      	nop
 8001130:	3740      	adds	r7, #64	@ 0x40
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	40003800 	.word	0x40003800
 800113c:	40023800 	.word	0x40023800
 8001140:	40020400 	.word	0x40020400
 8001144:	20001920 	.word	0x20001920
 8001148:	40026070 	.word	0x40026070

0800114c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001150:	f000 fa1a 	bl	8001588 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001154:	f000 f826 	bl	80011a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001158:	f7ff fed0 	bl	8000efc <MX_GPIO_Init>
  MX_DMA_Init();
 800115c:	f7ff fe98 	bl	8000e90 <MX_DMA_Init>
  MX_ADC1_Init();
 8001160:	f7ff fd06 	bl	8000b70 <MX_ADC1_Init>
  MX_TIM2_Init();
 8001164:	f000 f974 	bl	8001450 <MX_TIM2_Init>
  MX_I2S2_Init();
 8001168:	f7ff ff2a 	bl	8000fc0 <MX_I2S2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 800116c:	4808      	ldr	r0, [pc, #32]	@ (8001190 <main+0x44>)
 800116e:	f003 f811 	bl	8004194 <HAL_TIM_Base_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) IN_BUFFER, BUFFER_SIZE/2);
 8001172:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001176:	4907      	ldr	r1, [pc, #28]	@ (8001194 <main+0x48>)
 8001178:	4807      	ldr	r0, [pc, #28]	@ (8001198 <main+0x4c>)
 800117a:	f000 fabb 	bl	80016f4 <HAL_ADC_Start_DMA>
  HAL_I2S_Transmit_DMA(&hi2s2, (uint16_t*) OUT_BUFFER, BUFFER_SIZE*2);
 800117e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001182:	4906      	ldr	r1, [pc, #24]	@ (800119c <main+0x50>)
 8001184:	4806      	ldr	r0, [pc, #24]	@ (80011a0 <main+0x54>)
 8001186:	f001 fdf1 	bl	8002d6c <HAL_I2S_Transmit_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800118a:	bf00      	nop
 800118c:	e7fd      	b.n	800118a <main+0x3e>
 800118e:	bf00      	nop
 8001190:	20001984 	.word	0x20001984
 8001194:	200000d8 	.word	0x200000d8
 8001198:	20000030 	.word	0x20000030
 800119c:	200008d8 	.word	0x200008d8
 80011a0:	200018d8 	.word	0x200018d8

080011a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b094      	sub	sp, #80	@ 0x50
 80011a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011aa:	f107 0320 	add.w	r3, r7, #32
 80011ae:	2230      	movs	r2, #48	@ 0x30
 80011b0:	2100      	movs	r1, #0
 80011b2:	4618      	mov	r0, r3
 80011b4:	f003 fbd4 	bl	8004960 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011b8:	f107 030c 	add.w	r3, r7, #12
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	605a      	str	r2, [r3, #4]
 80011c2:	609a      	str	r2, [r3, #8]
 80011c4:	60da      	str	r2, [r3, #12]
 80011c6:	611a      	str	r2, [r3, #16]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(16);
 80011c8:	4b2b      	ldr	r3, [pc, #172]	@ (8001278 <SystemClock_Config+0xd4>)
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80011d0:	4a29      	ldr	r2, [pc, #164]	@ (8001278 <SystemClock_Config+0xd4>)
 80011d2:	f043 0310 	orr.w	r3, r3, #16
 80011d6:	6053      	str	r3, [r2, #4]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 80011d8:	4b27      	ldr	r3, [pc, #156]	@ (8001278 <SystemClock_Config+0xd4>)
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	4a26      	ldr	r2, [pc, #152]	@ (8001278 <SystemClock_Config+0xd4>)
 80011de:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80011e2:	6053      	str	r3, [r2, #4]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011e4:	2300      	movs	r3, #0
 80011e6:	60bb      	str	r3, [r7, #8]
 80011e8:	4b23      	ldr	r3, [pc, #140]	@ (8001278 <SystemClock_Config+0xd4>)
 80011ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ec:	4a22      	ldr	r2, [pc, #136]	@ (8001278 <SystemClock_Config+0xd4>)
 80011ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80011f4:	4b20      	ldr	r3, [pc, #128]	@ (8001278 <SystemClock_Config+0xd4>)
 80011f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011fc:	60bb      	str	r3, [r7, #8]
 80011fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001200:	2300      	movs	r3, #0
 8001202:	607b      	str	r3, [r7, #4]
 8001204:	4b1d      	ldr	r3, [pc, #116]	@ (800127c <SystemClock_Config+0xd8>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a1c      	ldr	r2, [pc, #112]	@ (800127c <SystemClock_Config+0xd8>)
 800120a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800120e:	6013      	str	r3, [r2, #0]
 8001210:	4b1a      	ldr	r3, [pc, #104]	@ (800127c <SystemClock_Config+0xd8>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001218:	607b      	str	r3, [r7, #4]
 800121a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800121c:	2302      	movs	r3, #2
 800121e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001220:	2301      	movs	r3, #1
 8001222:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001224:	2310      	movs	r3, #16
 8001226:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001228:	2300      	movs	r3, #0
 800122a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800122c:	2300      	movs	r3, #0
 800122e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001230:	f107 0320 	add.w	r3, r7, #32
 8001234:	4618      	mov	r0, r3
 8001236:	f002 f9e7 	bl	8003608 <HAL_RCC_OscConfig>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001240:	f000 f81e 	bl	8001280 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001244:	230f      	movs	r3, #15
 8001246:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001248:	2300      	movs	r3, #0
 800124a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800124c:	2300      	movs	r3, #0
 800124e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001250:	2300      	movs	r3, #0
 8001252:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001254:	2300      	movs	r3, #0
 8001256:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001258:	f107 030c 	add.w	r3, r7, #12
 800125c:	2100      	movs	r1, #0
 800125e:	4618      	mov	r0, r3
 8001260:	f002 fc4a 	bl	8003af8 <HAL_RCC_ClockConfig>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800126a:	f000 f809 	bl	8001280 <Error_Handler>
  }
}
 800126e:	bf00      	nop
 8001270:	3750      	adds	r7, #80	@ 0x50
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	40023800 	.word	0x40023800
 800127c:	40007000 	.word	0x40007000

08001280 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001284:	b672      	cpsid	i
}
 8001286:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001288:	bf00      	nop
 800128a:	e7fd      	b.n	8001288 <Error_Handler+0x8>

0800128c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	607b      	str	r3, [r7, #4]
 8001296:	4b10      	ldr	r3, [pc, #64]	@ (80012d8 <HAL_MspInit+0x4c>)
 8001298:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800129a:	4a0f      	ldr	r2, [pc, #60]	@ (80012d8 <HAL_MspInit+0x4c>)
 800129c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80012a2:	4b0d      	ldr	r3, [pc, #52]	@ (80012d8 <HAL_MspInit+0x4c>)
 80012a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012aa:	607b      	str	r3, [r7, #4]
 80012ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	603b      	str	r3, [r7, #0]
 80012b2:	4b09      	ldr	r3, [pc, #36]	@ (80012d8 <HAL_MspInit+0x4c>)
 80012b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012b6:	4a08      	ldr	r2, [pc, #32]	@ (80012d8 <HAL_MspInit+0x4c>)
 80012b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80012be:	4b06      	ldr	r3, [pc, #24]	@ (80012d8 <HAL_MspInit+0x4c>)
 80012c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012c6:	603b      	str	r3, [r7, #0]
 80012c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012ca:	bf00      	nop
 80012cc:	370c      	adds	r7, #12
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	40023800 	.word	0x40023800

080012dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012e0:	bf00      	nop
 80012e2:	e7fd      	b.n	80012e0 <NMI_Handler+0x4>

080012e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012e8:	bf00      	nop
 80012ea:	e7fd      	b.n	80012e8 <HardFault_Handler+0x4>

080012ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012f0:	bf00      	nop
 80012f2:	e7fd      	b.n	80012f0 <MemManage_Handler+0x4>

080012f4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012f8:	bf00      	nop
 80012fa:	e7fd      	b.n	80012f8 <BusFault_Handler+0x4>

080012fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001300:	bf00      	nop
 8001302:	e7fd      	b.n	8001300 <UsageFault_Handler+0x4>

08001304 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001308:	bf00      	nop
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr

08001312 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001312:	b480      	push	{r7}
 8001314:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001316:	bf00      	nop
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr

08001320 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001324:	bf00      	nop
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr

0800132e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800132e:	b580      	push	{r7, lr}
 8001330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001332:	f000 f97b 	bl	800162c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001336:	bf00      	nop
 8001338:	bd80      	pop	{r7, pc}
	...

0800133c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001340:	4802      	ldr	r0, [pc, #8]	@ (800134c <DMA1_Stream4_IRQHandler+0x10>)
 8001342:	f000 ffb1 	bl	80022a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001346:	bf00      	nop
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	20001920 	.word	0x20001920

08001350 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001354:	4802      	ldr	r0, [pc, #8]	@ (8001360 <TIM2_IRQHandler+0x10>)
 8001356:	f002 ff77 	bl	8004248 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800135a:	bf00      	nop
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	20001984 	.word	0x20001984

08001364 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001368:	4802      	ldr	r0, [pc, #8]	@ (8001374 <DMA2_Stream0_IRQHandler+0x10>)
 800136a:	f000 ff9d 	bl	80022a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800136e:	bf00      	nop
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	20000078 	.word	0x20000078

08001378 <HAL_I2S_TxHalfCpltCallback>:

/* USER CODE BEGIN 1 */
uint16_t count = 0;
void HAL_I2S_TxHalfCpltCallback (I2S_HandleTypeDef * hi2s)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
	process_in_buffer = &(IN_BUFFER[0]);
 8001380:	4b08      	ldr	r3, [pc, #32]	@ (80013a4 <HAL_I2S_TxHalfCpltCallback+0x2c>)
 8001382:	4a09      	ldr	r2, [pc, #36]	@ (80013a8 <HAL_I2S_TxHalfCpltCallback+0x30>)
 8001384:	601a      	str	r2, [r3, #0]
	process_out_buffer = &(OUT_BUFFER[0]);
 8001386:	4b09      	ldr	r3, [pc, #36]	@ (80013ac <HAL_I2S_TxHalfCpltCallback+0x34>)
 8001388:	4a09      	ldr	r2, [pc, #36]	@ (80013b0 <HAL_I2S_TxHalfCpltCallback+0x38>)
 800138a:	601a      	str	r2, [r3, #0]
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &(IN_BUFFER[BUFFER_SIZE/2]), BUFFER_SIZE/2);
 800138c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001390:	4908      	ldr	r1, [pc, #32]	@ (80013b4 <HAL_I2S_TxHalfCpltCallback+0x3c>)
 8001392:	4809      	ldr	r0, [pc, #36]	@ (80013b8 <HAL_I2S_TxHalfCpltCallback+0x40>)
 8001394:	f000 f9ae 	bl	80016f4 <HAL_ADC_Start_DMA>
	processHalfBuffer();
 8001398:	f7ff fd0e 	bl	8000db8 <processHalfBuffer>
}
 800139c:	bf00      	nop
 800139e:	3708      	adds	r7, #8
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	20000000 	.word	0x20000000
 80013a8:	200000d8 	.word	0x200000d8
 80013ac:	20000004 	.word	0x20000004
 80013b0:	200008d8 	.word	0x200008d8
 80013b4:	200004d8 	.word	0x200004d8
 80013b8:	20000030 	.word	0x20000030

080013bc <HAL_I2S_TxCpltCallback>:

void HAL_I2S_TxCpltCallback (I2S_HandleTypeDef * hi2s)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
	count++;
 80013c4:	4b11      	ldr	r3, [pc, #68]	@ (800140c <HAL_I2S_TxCpltCallback+0x50>)
 80013c6:	881b      	ldrh	r3, [r3, #0]
 80013c8:	3301      	adds	r3, #1
 80013ca:	b29a      	uxth	r2, r3
 80013cc:	4b0f      	ldr	r3, [pc, #60]	@ (800140c <HAL_I2S_TxCpltCallback+0x50>)
 80013ce:	801a      	strh	r2, [r3, #0]
	if (count==48)
 80013d0:	4b0e      	ldr	r3, [pc, #56]	@ (800140c <HAL_I2S_TxCpltCallback+0x50>)
 80013d2:	881b      	ldrh	r3, [r3, #0]
 80013d4:	2b30      	cmp	r3, #48	@ 0x30
 80013d6:	d107      	bne.n	80013e8 <HAL_I2S_TxCpltCallback+0x2c>
	{
		count = 0;
 80013d8:	4b0c      	ldr	r3, [pc, #48]	@ (800140c <HAL_I2S_TxCpltCallback+0x50>)
 80013da:	2200      	movs	r2, #0
 80013dc:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80013de:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80013e2:	480b      	ldr	r0, [pc, #44]	@ (8001410 <HAL_I2S_TxCpltCallback+0x54>)
 80013e4:	f001 fb67 	bl	8002ab6 <HAL_GPIO_TogglePin>
	}
	process_in_buffer = &(IN_BUFFER[BUFFER_SIZE/2]);
 80013e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001414 <HAL_I2S_TxCpltCallback+0x58>)
 80013ea:	4a0b      	ldr	r2, [pc, #44]	@ (8001418 <HAL_I2S_TxCpltCallback+0x5c>)
 80013ec:	601a      	str	r2, [r3, #0]
	process_out_buffer = &(OUT_BUFFER[BUFFER_SIZE]);
 80013ee:	4b0b      	ldr	r3, [pc, #44]	@ (800141c <HAL_I2S_TxCpltCallback+0x60>)
 80013f0:	4a0b      	ldr	r2, [pc, #44]	@ (8001420 <HAL_I2S_TxCpltCallback+0x64>)
 80013f2:	601a      	str	r2, [r3, #0]
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &(IN_BUFFER[0]), BUFFER_SIZE/2);
 80013f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80013f8:	490a      	ldr	r1, [pc, #40]	@ (8001424 <HAL_I2S_TxCpltCallback+0x68>)
 80013fa:	480b      	ldr	r0, [pc, #44]	@ (8001428 <HAL_I2S_TxCpltCallback+0x6c>)
 80013fc:	f000 f97a 	bl	80016f4 <HAL_ADC_Start_DMA>
	processHalfBuffer();
 8001400:	f7ff fcda 	bl	8000db8 <processHalfBuffer>
}
 8001404:	bf00      	nop
 8001406:	3708      	adds	r7, #8
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	20001980 	.word	0x20001980
 8001410:	40020800 	.word	0x40020800
 8001414:	20000000 	.word	0x20000000
 8001418:	200004d8 	.word	0x200004d8
 800141c:	20000004 	.word	0x20000004
 8001420:	200010d8 	.word	0x200010d8
 8001424:	200000d8 	.word	0x200000d8
 8001428:	20000030 	.word	0x20000030

0800142c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001430:	4b06      	ldr	r3, [pc, #24]	@ (800144c <SystemInit+0x20>)
 8001432:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001436:	4a05      	ldr	r2, [pc, #20]	@ (800144c <SystemInit+0x20>)
 8001438:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800143c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001440:	bf00      	nop
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	e000ed00 	.word	0xe000ed00

08001450 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b086      	sub	sp, #24
 8001454:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001456:	f107 0308 	add.w	r3, r7, #8
 800145a:	2200      	movs	r2, #0
 800145c:	601a      	str	r2, [r3, #0]
 800145e:	605a      	str	r2, [r3, #4]
 8001460:	609a      	str	r2, [r3, #8]
 8001462:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001464:	463b      	mov	r3, r7
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800146c:	4b1d      	ldr	r3, [pc, #116]	@ (80014e4 <MX_TIM2_Init+0x94>)
 800146e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001472:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001474:	4b1b      	ldr	r3, [pc, #108]	@ (80014e4 <MX_TIM2_Init+0x94>)
 8001476:	2200      	movs	r2, #0
 8001478:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800147a:	4b1a      	ldr	r3, [pc, #104]	@ (80014e4 <MX_TIM2_Init+0x94>)
 800147c:	2200      	movs	r2, #0
 800147e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 334;
 8001480:	4b18      	ldr	r3, [pc, #96]	@ (80014e4 <MX_TIM2_Init+0x94>)
 8001482:	f44f 72a7 	mov.w	r2, #334	@ 0x14e
 8001486:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001488:	4b16      	ldr	r3, [pc, #88]	@ (80014e4 <MX_TIM2_Init+0x94>)
 800148a:	2200      	movs	r2, #0
 800148c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800148e:	4b15      	ldr	r3, [pc, #84]	@ (80014e4 <MX_TIM2_Init+0x94>)
 8001490:	2200      	movs	r2, #0
 8001492:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001494:	4813      	ldr	r0, [pc, #76]	@ (80014e4 <MX_TIM2_Init+0x94>)
 8001496:	f002 fe2d 	bl	80040f4 <HAL_TIM_Base_Init>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80014a0:	f7ff feee 	bl	8001280 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014a8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014aa:	f107 0308 	add.w	r3, r7, #8
 80014ae:	4619      	mov	r1, r3
 80014b0:	480c      	ldr	r0, [pc, #48]	@ (80014e4 <MX_TIM2_Init+0x94>)
 80014b2:	f002 ffb9 	bl	8004428 <HAL_TIM_ConfigClockSource>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80014bc:	f7ff fee0 	bl	8001280 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80014c0:	2320      	movs	r3, #32
 80014c2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014c4:	2300      	movs	r3, #0
 80014c6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014c8:	463b      	mov	r3, r7
 80014ca:	4619      	mov	r1, r3
 80014cc:	4805      	ldr	r0, [pc, #20]	@ (80014e4 <MX_TIM2_Init+0x94>)
 80014ce:	f003 f9c5 	bl	800485c <HAL_TIMEx_MasterConfigSynchronization>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80014d8:	f7ff fed2 	bl	8001280 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80014dc:	bf00      	nop
 80014de:	3718      	adds	r7, #24
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	20001984 	.word	0x20001984

080014e8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80014f8:	d115      	bne.n	8001526 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014fa:	2300      	movs	r3, #0
 80014fc:	60fb      	str	r3, [r7, #12]
 80014fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001530 <HAL_TIM_Base_MspInit+0x48>)
 8001500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001502:	4a0b      	ldr	r2, [pc, #44]	@ (8001530 <HAL_TIM_Base_MspInit+0x48>)
 8001504:	f043 0301 	orr.w	r3, r3, #1
 8001508:	6413      	str	r3, [r2, #64]	@ 0x40
 800150a:	4b09      	ldr	r3, [pc, #36]	@ (8001530 <HAL_TIM_Base_MspInit+0x48>)
 800150c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800150e:	f003 0301 	and.w	r3, r3, #1
 8001512:	60fb      	str	r3, [r7, #12]
 8001514:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001516:	2200      	movs	r2, #0
 8001518:	2100      	movs	r1, #0
 800151a:	201c      	movs	r0, #28
 800151c:	f000 fd87 	bl	800202e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001520:	201c      	movs	r0, #28
 8001522:	f000 fda0 	bl	8002066 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001526:	bf00      	nop
 8001528:	3710      	adds	r7, #16
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	40023800 	.word	0x40023800

08001534 <Reset_Handler>:
 8001534:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800156c <LoopFillZerobss+0xe>
 8001538:	f7ff ff78 	bl	800142c <SystemInit>
 800153c:	480c      	ldr	r0, [pc, #48]	@ (8001570 <LoopFillZerobss+0x12>)
 800153e:	490d      	ldr	r1, [pc, #52]	@ (8001574 <LoopFillZerobss+0x16>)
 8001540:	4a0d      	ldr	r2, [pc, #52]	@ (8001578 <LoopFillZerobss+0x1a>)
 8001542:	2300      	movs	r3, #0
 8001544:	e002      	b.n	800154c <LoopCopyDataInit>

08001546 <CopyDataInit>:
 8001546:	58d4      	ldr	r4, [r2, r3]
 8001548:	50c4      	str	r4, [r0, r3]
 800154a:	3304      	adds	r3, #4

0800154c <LoopCopyDataInit>:
 800154c:	18c4      	adds	r4, r0, r3
 800154e:	428c      	cmp	r4, r1
 8001550:	d3f9      	bcc.n	8001546 <CopyDataInit>
 8001552:	4a0a      	ldr	r2, [pc, #40]	@ (800157c <LoopFillZerobss+0x1e>)
 8001554:	4c0a      	ldr	r4, [pc, #40]	@ (8001580 <LoopFillZerobss+0x22>)
 8001556:	2300      	movs	r3, #0
 8001558:	e001      	b.n	800155e <LoopFillZerobss>

0800155a <FillZerobss>:
 800155a:	6013      	str	r3, [r2, #0]
 800155c:	3204      	adds	r2, #4

0800155e <LoopFillZerobss>:
 800155e:	42a2      	cmp	r2, r4
 8001560:	d3fb      	bcc.n	800155a <FillZerobss>
 8001562:	f003 fa05 	bl	8004970 <__libc_init_array>
 8001566:	f7ff fdf1 	bl	800114c <main>
 800156a:	4770      	bx	lr
 800156c:	20020000 	.word	0x20020000
 8001570:	20000000 	.word	0x20000000
 8001574:	20000014 	.word	0x20000014
 8001578:	080049f8 	.word	0x080049f8
 800157c:	20000014 	.word	0x20000014
 8001580:	200019d0 	.word	0x200019d0

08001584 <ADC_IRQHandler>:
 8001584:	e7fe      	b.n	8001584 <ADC_IRQHandler>
	...

08001588 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800158c:	4b0e      	ldr	r3, [pc, #56]	@ (80015c8 <HAL_Init+0x40>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a0d      	ldr	r2, [pc, #52]	@ (80015c8 <HAL_Init+0x40>)
 8001592:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001596:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001598:	4b0b      	ldr	r3, [pc, #44]	@ (80015c8 <HAL_Init+0x40>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a0a      	ldr	r2, [pc, #40]	@ (80015c8 <HAL_Init+0x40>)
 800159e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80015a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015a4:	4b08      	ldr	r3, [pc, #32]	@ (80015c8 <HAL_Init+0x40>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a07      	ldr	r2, [pc, #28]	@ (80015c8 <HAL_Init+0x40>)
 80015aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015b0:	2003      	movs	r0, #3
 80015b2:	f000 fd31 	bl	8002018 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015b6:	200f      	movs	r0, #15
 80015b8:	f000 f808 	bl	80015cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015bc:	f7ff fe66 	bl	800128c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015c0:	2300      	movs	r3, #0
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	40023c00 	.word	0x40023c00

080015cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015d4:	4b12      	ldr	r3, [pc, #72]	@ (8001620 <HAL_InitTick+0x54>)
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	4b12      	ldr	r3, [pc, #72]	@ (8001624 <HAL_InitTick+0x58>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	4619      	mov	r1, r3
 80015de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80015e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ea:	4618      	mov	r0, r3
 80015ec:	f000 fd49 	bl	8002082 <HAL_SYSTICK_Config>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e00e      	b.n	8001618 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2b0f      	cmp	r3, #15
 80015fe:	d80a      	bhi.n	8001616 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001600:	2200      	movs	r2, #0
 8001602:	6879      	ldr	r1, [r7, #4]
 8001604:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001608:	f000 fd11 	bl	800202e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800160c:	4a06      	ldr	r2, [pc, #24]	@ (8001628 <HAL_InitTick+0x5c>)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001612:	2300      	movs	r3, #0
 8001614:	e000      	b.n	8001618 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
}
 8001618:	4618      	mov	r0, r3
 800161a:	3708      	adds	r7, #8
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	20000008 	.word	0x20000008
 8001624:	20000010 	.word	0x20000010
 8001628:	2000000c 	.word	0x2000000c

0800162c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001630:	4b06      	ldr	r3, [pc, #24]	@ (800164c <HAL_IncTick+0x20>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	461a      	mov	r2, r3
 8001636:	4b06      	ldr	r3, [pc, #24]	@ (8001650 <HAL_IncTick+0x24>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4413      	add	r3, r2
 800163c:	4a04      	ldr	r2, [pc, #16]	@ (8001650 <HAL_IncTick+0x24>)
 800163e:	6013      	str	r3, [r2, #0]
}
 8001640:	bf00      	nop
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	20000010 	.word	0x20000010
 8001650:	200019cc 	.word	0x200019cc

08001654 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  return uwTick;
 8001658:	4b03      	ldr	r3, [pc, #12]	@ (8001668 <HAL_GetTick+0x14>)
 800165a:	681b      	ldr	r3, [r3, #0]
}
 800165c:	4618      	mov	r0, r3
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	200019cc 	.word	0x200019cc

0800166c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001674:	2300      	movs	r3, #0
 8001676:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d101      	bne.n	8001682 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e033      	b.n	80016ea <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001686:	2b00      	cmp	r3, #0
 8001688:	d109      	bne.n	800169e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f7ff fac2 	bl	8000c14 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2200      	movs	r2, #0
 8001694:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2200      	movs	r2, #0
 800169a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a2:	f003 0310 	and.w	r3, r3, #16
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d118      	bne.n	80016dc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ae:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80016b2:	f023 0302 	bic.w	r3, r3, #2
 80016b6:	f043 0202 	orr.w	r2, r3, #2
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f000 fa5c 	bl	8001b7c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2200      	movs	r2, #0
 80016c8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ce:	f023 0303 	bic.w	r3, r3, #3
 80016d2:	f043 0201 	orr.w	r2, r3, #1
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	641a      	str	r2, [r3, #64]	@ 0x40
 80016da:	e001      	b.n	80016e0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2200      	movs	r2, #0
 80016e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80016e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3710      	adds	r7, #16
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
	...

080016f4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b088      	sub	sp, #32
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	60f8      	str	r0, [r7, #12]
 80016fc:	60b9      	str	r1, [r7, #8]
 80016fe:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001700:	2300      	movs	r3, #0
 8001702:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001704:	2300      	movs	r3, #0
 8001706:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800170e:	2b01      	cmp	r3, #1
 8001710:	d101      	bne.n	8001716 <HAL_ADC_Start_DMA+0x22>
 8001712:	2302      	movs	r3, #2
 8001714:	e0d0      	b.n	80018b8 <HAL_ADC_Start_DMA+0x1c4>
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	2201      	movs	r2, #1
 800171a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	f003 0301 	and.w	r3, r3, #1
 8001728:	2b01      	cmp	r3, #1
 800172a:	d018      	beq.n	800175e <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	689a      	ldr	r2, [r3, #8]
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f042 0201 	orr.w	r2, r2, #1
 800173a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800173c:	4b60      	ldr	r3, [pc, #384]	@ (80018c0 <HAL_ADC_Start_DMA+0x1cc>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a60      	ldr	r2, [pc, #384]	@ (80018c4 <HAL_ADC_Start_DMA+0x1d0>)
 8001742:	fba2 2303 	umull	r2, r3, r2, r3
 8001746:	0c9a      	lsrs	r2, r3, #18
 8001748:	4613      	mov	r3, r2
 800174a:	005b      	lsls	r3, r3, #1
 800174c:	4413      	add	r3, r2
 800174e:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8001750:	e002      	b.n	8001758 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	3b01      	subs	r3, #1
 8001756:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d1f9      	bne.n	8001752 <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001768:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800176c:	d107      	bne.n	800177e <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	689a      	ldr	r2, [r3, #8]
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800177c:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	f003 0301 	and.w	r3, r3, #1
 8001788:	2b01      	cmp	r3, #1
 800178a:	f040 8088 	bne.w	800189e <HAL_ADC_Start_DMA+0x1aa>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001792:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001796:	f023 0301 	bic.w	r3, r3, #1
 800179a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d007      	beq.n	80017c0 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80017b8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80017c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80017cc:	d106      	bne.n	80017dc <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017d2:	f023 0206 	bic.w	r2, r3, #6
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	645a      	str	r2, [r3, #68]	@ 0x44
 80017da:	e002      	b.n	80017e2 <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	2200      	movs	r2, #0
 80017e0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	2200      	movs	r2, #0
 80017e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017ea:	4b37      	ldr	r3, [pc, #220]	@ (80018c8 <HAL_ADC_Start_DMA+0x1d4>)
 80017ec:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017f2:	4a36      	ldr	r2, [pc, #216]	@ (80018cc <HAL_ADC_Start_DMA+0x1d8>)
 80017f4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017fa:	4a35      	ldr	r2, [pc, #212]	@ (80018d0 <HAL_ADC_Start_DMA+0x1dc>)
 80017fc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001802:	4a34      	ldr	r2, [pc, #208]	@ (80018d4 <HAL_ADC_Start_DMA+0x1e0>)
 8001804:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800180e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	685a      	ldr	r2, [r3, #4]
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800181e:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	689a      	ldr	r2, [r3, #8]
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800182e:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	334c      	adds	r3, #76	@ 0x4c
 800183a:	4619      	mov	r1, r3
 800183c:	68ba      	ldr	r2, [r7, #8]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	f000 fcda 	bl	80021f8 <HAL_DMA_Start_IT>
 8001844:	4603      	mov	r3, r0
 8001846:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001848:	69bb      	ldr	r3, [r7, #24]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f003 031f 	and.w	r3, r3, #31
 8001850:	2b00      	cmp	r3, #0
 8001852:	d10f      	bne.n	8001874 <HAL_ADC_Start_DMA+0x180>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d129      	bne.n	80018b6 <HAL_ADC_Start_DMA+0x1c2>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	689a      	ldr	r2, [r3, #8]
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001870:	609a      	str	r2, [r3, #8]
 8001872:	e020      	b.n	80018b6 <HAL_ADC_Start_DMA+0x1c2>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a17      	ldr	r2, [pc, #92]	@ (80018d8 <HAL_ADC_Start_DMA+0x1e4>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d11b      	bne.n	80018b6 <HAL_ADC_Start_DMA+0x1c2>
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001888:	2b00      	cmp	r3, #0
 800188a:	d114      	bne.n	80018b6 <HAL_ADC_Start_DMA+0x1c2>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	689a      	ldr	r2, [r3, #8]
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800189a:	609a      	str	r2, [r3, #8]
 800189c:	e00b      	b.n	80018b6 <HAL_ADC_Start_DMA+0x1c2>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018a2:	f043 0210 	orr.w	r2, r3, #16
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ae:	f043 0201 	orr.w	r2, r3, #1
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 80018b6:	7ffb      	ldrb	r3, [r7, #31]
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3720      	adds	r7, #32
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	20000008 	.word	0x20000008
 80018c4:	431bde83 	.word	0x431bde83
 80018c8:	40012300 	.word	0x40012300
 80018cc:	08001d75 	.word	0x08001d75
 80018d0:	08001e2f 	.word	0x08001e2f
 80018d4:	08001e4b 	.word	0x08001e4b
 80018d8:	40012000 	.word	0x40012000

080018dc <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80018e4:	bf00      	nop
 80018e6:	370c      	adds	r7, #12
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr

080018f0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80018f8:	bf00      	nop
 80018fa:	370c      	adds	r7, #12
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr

08001904 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800190c:	bf00      	nop
 800190e:	370c      	adds	r7, #12
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001918:	b480      	push	{r7}
 800191a:	b085      	sub	sp, #20
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001922:	2300      	movs	r3, #0
 8001924:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800192c:	2b01      	cmp	r3, #1
 800192e:	d101      	bne.n	8001934 <HAL_ADC_ConfigChannel+0x1c>
 8001930:	2302      	movs	r3, #2
 8001932:	e113      	b.n	8001b5c <HAL_ADC_ConfigChannel+0x244>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2201      	movs	r2, #1
 8001938:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2b09      	cmp	r3, #9
 8001942:	d925      	bls.n	8001990 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	68d9      	ldr	r1, [r3, #12]
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	b29b      	uxth	r3, r3
 8001950:	461a      	mov	r2, r3
 8001952:	4613      	mov	r3, r2
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	4413      	add	r3, r2
 8001958:	3b1e      	subs	r3, #30
 800195a:	2207      	movs	r2, #7
 800195c:	fa02 f303 	lsl.w	r3, r2, r3
 8001960:	43da      	mvns	r2, r3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	400a      	ands	r2, r1
 8001968:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	68d9      	ldr	r1, [r3, #12]
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	689a      	ldr	r2, [r3, #8]
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	b29b      	uxth	r3, r3
 800197a:	4618      	mov	r0, r3
 800197c:	4603      	mov	r3, r0
 800197e:	005b      	lsls	r3, r3, #1
 8001980:	4403      	add	r3, r0
 8001982:	3b1e      	subs	r3, #30
 8001984:	409a      	lsls	r2, r3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	430a      	orrs	r2, r1
 800198c:	60da      	str	r2, [r3, #12]
 800198e:	e022      	b.n	80019d6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	6919      	ldr	r1, [r3, #16]
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	b29b      	uxth	r3, r3
 800199c:	461a      	mov	r2, r3
 800199e:	4613      	mov	r3, r2
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	4413      	add	r3, r2
 80019a4:	2207      	movs	r2, #7
 80019a6:	fa02 f303 	lsl.w	r3, r2, r3
 80019aa:	43da      	mvns	r2, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	400a      	ands	r2, r1
 80019b2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	6919      	ldr	r1, [r3, #16]
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	689a      	ldr	r2, [r3, #8]
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	b29b      	uxth	r3, r3
 80019c4:	4618      	mov	r0, r3
 80019c6:	4603      	mov	r3, r0
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	4403      	add	r3, r0
 80019cc:	409a      	lsls	r2, r3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	430a      	orrs	r2, r1
 80019d4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	2b06      	cmp	r3, #6
 80019dc:	d824      	bhi.n	8001a28 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	685a      	ldr	r2, [r3, #4]
 80019e8:	4613      	mov	r3, r2
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	4413      	add	r3, r2
 80019ee:	3b05      	subs	r3, #5
 80019f0:	221f      	movs	r2, #31
 80019f2:	fa02 f303 	lsl.w	r3, r2, r3
 80019f6:	43da      	mvns	r2, r3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	400a      	ands	r2, r1
 80019fe:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	685a      	ldr	r2, [r3, #4]
 8001a12:	4613      	mov	r3, r2
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	4413      	add	r3, r2
 8001a18:	3b05      	subs	r3, #5
 8001a1a:	fa00 f203 	lsl.w	r2, r0, r3
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	430a      	orrs	r2, r1
 8001a24:	635a      	str	r2, [r3, #52]	@ 0x34
 8001a26:	e04c      	b.n	8001ac2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	2b0c      	cmp	r3, #12
 8001a2e:	d824      	bhi.n	8001a7a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	685a      	ldr	r2, [r3, #4]
 8001a3a:	4613      	mov	r3, r2
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	4413      	add	r3, r2
 8001a40:	3b23      	subs	r3, #35	@ 0x23
 8001a42:	221f      	movs	r2, #31
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	43da      	mvns	r2, r3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	400a      	ands	r2, r1
 8001a50:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	b29b      	uxth	r3, r3
 8001a5e:	4618      	mov	r0, r3
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685a      	ldr	r2, [r3, #4]
 8001a64:	4613      	mov	r3, r2
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	4413      	add	r3, r2
 8001a6a:	3b23      	subs	r3, #35	@ 0x23
 8001a6c:	fa00 f203 	lsl.w	r2, r0, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	430a      	orrs	r2, r1
 8001a76:	631a      	str	r2, [r3, #48]	@ 0x30
 8001a78:	e023      	b.n	8001ac2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	685a      	ldr	r2, [r3, #4]
 8001a84:	4613      	mov	r3, r2
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	4413      	add	r3, r2
 8001a8a:	3b41      	subs	r3, #65	@ 0x41
 8001a8c:	221f      	movs	r2, #31
 8001a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a92:	43da      	mvns	r2, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	400a      	ands	r2, r1
 8001a9a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	685a      	ldr	r2, [r3, #4]
 8001aae:	4613      	mov	r3, r2
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	4413      	add	r3, r2
 8001ab4:	3b41      	subs	r3, #65	@ 0x41
 8001ab6:	fa00 f203 	lsl.w	r2, r0, r3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	430a      	orrs	r2, r1
 8001ac0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ac2:	4b29      	ldr	r3, [pc, #164]	@ (8001b68 <HAL_ADC_ConfigChannel+0x250>)
 8001ac4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a28      	ldr	r2, [pc, #160]	@ (8001b6c <HAL_ADC_ConfigChannel+0x254>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d10f      	bne.n	8001af0 <HAL_ADC_ConfigChannel+0x1d8>
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2b12      	cmp	r3, #18
 8001ad6:	d10b      	bne.n	8001af0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a1d      	ldr	r2, [pc, #116]	@ (8001b6c <HAL_ADC_ConfigChannel+0x254>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d12b      	bne.n	8001b52 <HAL_ADC_ConfigChannel+0x23a>
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a1c      	ldr	r2, [pc, #112]	@ (8001b70 <HAL_ADC_ConfigChannel+0x258>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d003      	beq.n	8001b0c <HAL_ADC_ConfigChannel+0x1f4>
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2b11      	cmp	r3, #17
 8001b0a:	d122      	bne.n	8001b52 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a11      	ldr	r2, [pc, #68]	@ (8001b70 <HAL_ADC_ConfigChannel+0x258>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d111      	bne.n	8001b52 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001b2e:	4b11      	ldr	r3, [pc, #68]	@ (8001b74 <HAL_ADC_ConfigChannel+0x25c>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a11      	ldr	r2, [pc, #68]	@ (8001b78 <HAL_ADC_ConfigChannel+0x260>)
 8001b34:	fba2 2303 	umull	r2, r3, r2, r3
 8001b38:	0c9a      	lsrs	r2, r3, #18
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	4413      	add	r3, r2
 8001b40:	005b      	lsls	r3, r3, #1
 8001b42:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001b44:	e002      	b.n	8001b4c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	3b01      	subs	r3, #1
 8001b4a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d1f9      	bne.n	8001b46 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2200      	movs	r2, #0
 8001b56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001b5a:	2300      	movs	r3, #0
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3714      	adds	r7, #20
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr
 8001b68:	40012300 	.word	0x40012300
 8001b6c:	40012000 	.word	0x40012000
 8001b70:	10000012 	.word	0x10000012
 8001b74:	20000008 	.word	0x20000008
 8001b78:	431bde83 	.word	0x431bde83

08001b7c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b085      	sub	sp, #20
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b84:	4b79      	ldr	r3, [pc, #484]	@ (8001d6c <ADC_Init+0x1f0>)
 8001b86:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	685a      	ldr	r2, [r3, #4]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	431a      	orrs	r2, r3
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	685a      	ldr	r2, [r3, #4]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001bb0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	6859      	ldr	r1, [r3, #4]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	691b      	ldr	r3, [r3, #16]
 8001bbc:	021a      	lsls	r2, r3, #8
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	430a      	orrs	r2, r1
 8001bc4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	685a      	ldr	r2, [r3, #4]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001bd4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	6859      	ldr	r1, [r3, #4]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	689a      	ldr	r2, [r3, #8]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	430a      	orrs	r2, r1
 8001be6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	689a      	ldr	r2, [r3, #8]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001bf6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	6899      	ldr	r1, [r3, #8]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	68da      	ldr	r2, [r3, #12]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	430a      	orrs	r2, r1
 8001c08:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c0e:	4a58      	ldr	r2, [pc, #352]	@ (8001d70 <ADC_Init+0x1f4>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d022      	beq.n	8001c5a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	689a      	ldr	r2, [r3, #8]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001c22:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	6899      	ldr	r1, [r3, #8]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	430a      	orrs	r2, r1
 8001c34:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	689a      	ldr	r2, [r3, #8]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001c44:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	6899      	ldr	r1, [r3, #8]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	430a      	orrs	r2, r1
 8001c56:	609a      	str	r2, [r3, #8]
 8001c58:	e00f      	b.n	8001c7a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	689a      	ldr	r2, [r3, #8]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001c68:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	689a      	ldr	r2, [r3, #8]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001c78:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	689a      	ldr	r2, [r3, #8]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f022 0202 	bic.w	r2, r2, #2
 8001c88:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	6899      	ldr	r1, [r3, #8]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	7e1b      	ldrb	r3, [r3, #24]
 8001c94:	005a      	lsls	r2, r3, #1
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	430a      	orrs	r2, r1
 8001c9c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d01b      	beq.n	8001ce0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	685a      	ldr	r2, [r3, #4]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001cb6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	685a      	ldr	r2, [r3, #4]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001cc6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	6859      	ldr	r1, [r3, #4]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cd2:	3b01      	subs	r3, #1
 8001cd4:	035a      	lsls	r2, r3, #13
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	430a      	orrs	r2, r1
 8001cdc:	605a      	str	r2, [r3, #4]
 8001cde:	e007      	b.n	8001cf0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	685a      	ldr	r2, [r3, #4]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001cee:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001cfe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	69db      	ldr	r3, [r3, #28]
 8001d0a:	3b01      	subs	r3, #1
 8001d0c:	051a      	lsls	r2, r3, #20
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	430a      	orrs	r2, r1
 8001d14:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	689a      	ldr	r2, [r3, #8]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001d24:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	6899      	ldr	r1, [r3, #8]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001d32:	025a      	lsls	r2, r3, #9
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	430a      	orrs	r2, r1
 8001d3a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	689a      	ldr	r2, [r3, #8]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d4a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	6899      	ldr	r1, [r3, #8]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	695b      	ldr	r3, [r3, #20]
 8001d56:	029a      	lsls	r2, r3, #10
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	430a      	orrs	r2, r1
 8001d5e:	609a      	str	r2, [r3, #8]
}
 8001d60:	bf00      	nop
 8001d62:	3714      	adds	r7, #20
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr
 8001d6c:	40012300 	.word	0x40012300
 8001d70:	0f000001 	.word	0x0f000001

08001d74 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d80:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d86:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d13c      	bne.n	8001e08 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d92:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d12b      	bne.n	8001e00 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d127      	bne.n	8001e00 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001db6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d006      	beq.n	8001dcc <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d119      	bne.n	8001e00 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	685a      	ldr	r2, [r3, #4]
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f022 0220 	bic.w	r2, r2, #32
 8001dda:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d105      	bne.n	8001e00 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001df8:	f043 0201 	orr.w	r2, r3, #1
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001e00:	68f8      	ldr	r0, [r7, #12]
 8001e02:	f7ff fd6b 	bl	80018dc <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001e06:	e00e      	b.n	8001e26 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e0c:	f003 0310 	and.w	r3, r3, #16
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d003      	beq.n	8001e1c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001e14:	68f8      	ldr	r0, [r7, #12]
 8001e16:	f7ff fd75 	bl	8001904 <HAL_ADC_ErrorCallback>
}
 8001e1a:	e004      	b.n	8001e26 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	4798      	blx	r3
}
 8001e26:	bf00      	nop
 8001e28:	3710      	adds	r7, #16
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}

08001e2e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001e2e:	b580      	push	{r7, lr}
 8001e30:	b084      	sub	sp, #16
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e3a:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001e3c:	68f8      	ldr	r0, [r7, #12]
 8001e3e:	f7ff fd57 	bl	80018f0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001e42:	bf00      	nop
 8001e44:	3710      	adds	r7, #16
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b084      	sub	sp, #16
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e56:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2240      	movs	r2, #64	@ 0x40
 8001e5c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e62:	f043 0204 	orr.w	r2, r3, #4
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001e6a:	68f8      	ldr	r0, [r7, #12]
 8001e6c:	f7ff fd4a 	bl	8001904 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001e70:	bf00      	nop
 8001e72:	3710      	adds	r7, #16
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b085      	sub	sp, #20
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f003 0307 	and.w	r3, r3, #7
 8001e86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e88:	4b0c      	ldr	r3, [pc, #48]	@ (8001ebc <__NVIC_SetPriorityGrouping+0x44>)
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e8e:	68ba      	ldr	r2, [r7, #8]
 8001e90:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e94:	4013      	ands	r3, r2
 8001e96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ea0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ea4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ea8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eaa:	4a04      	ldr	r2, [pc, #16]	@ (8001ebc <__NVIC_SetPriorityGrouping+0x44>)
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	60d3      	str	r3, [r2, #12]
}
 8001eb0:	bf00      	nop
 8001eb2:	3714      	adds	r7, #20
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr
 8001ebc:	e000ed00 	.word	0xe000ed00

08001ec0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ec4:	4b04      	ldr	r3, [pc, #16]	@ (8001ed8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	0a1b      	lsrs	r3, r3, #8
 8001eca:	f003 0307 	and.w	r3, r3, #7
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr
 8001ed8:	e000ed00 	.word	0xe000ed00

08001edc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	db0b      	blt.n	8001f06 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eee:	79fb      	ldrb	r3, [r7, #7]
 8001ef0:	f003 021f 	and.w	r2, r3, #31
 8001ef4:	4907      	ldr	r1, [pc, #28]	@ (8001f14 <__NVIC_EnableIRQ+0x38>)
 8001ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001efa:	095b      	lsrs	r3, r3, #5
 8001efc:	2001      	movs	r0, #1
 8001efe:	fa00 f202 	lsl.w	r2, r0, r2
 8001f02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f06:	bf00      	nop
 8001f08:	370c      	adds	r7, #12
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	e000e100 	.word	0xe000e100

08001f18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	4603      	mov	r3, r0
 8001f20:	6039      	str	r1, [r7, #0]
 8001f22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	db0a      	blt.n	8001f42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	b2da      	uxtb	r2, r3
 8001f30:	490c      	ldr	r1, [pc, #48]	@ (8001f64 <__NVIC_SetPriority+0x4c>)
 8001f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f36:	0112      	lsls	r2, r2, #4
 8001f38:	b2d2      	uxtb	r2, r2
 8001f3a:	440b      	add	r3, r1
 8001f3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f40:	e00a      	b.n	8001f58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	b2da      	uxtb	r2, r3
 8001f46:	4908      	ldr	r1, [pc, #32]	@ (8001f68 <__NVIC_SetPriority+0x50>)
 8001f48:	79fb      	ldrb	r3, [r7, #7]
 8001f4a:	f003 030f 	and.w	r3, r3, #15
 8001f4e:	3b04      	subs	r3, #4
 8001f50:	0112      	lsls	r2, r2, #4
 8001f52:	b2d2      	uxtb	r2, r2
 8001f54:	440b      	add	r3, r1
 8001f56:	761a      	strb	r2, [r3, #24]
}
 8001f58:	bf00      	nop
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr
 8001f64:	e000e100 	.word	0xe000e100
 8001f68:	e000ed00 	.word	0xe000ed00

08001f6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b089      	sub	sp, #36	@ 0x24
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	60b9      	str	r1, [r7, #8]
 8001f76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	f003 0307 	and.w	r3, r3, #7
 8001f7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	f1c3 0307 	rsb	r3, r3, #7
 8001f86:	2b04      	cmp	r3, #4
 8001f88:	bf28      	it	cs
 8001f8a:	2304      	movcs	r3, #4
 8001f8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	3304      	adds	r3, #4
 8001f92:	2b06      	cmp	r3, #6
 8001f94:	d902      	bls.n	8001f9c <NVIC_EncodePriority+0x30>
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	3b03      	subs	r3, #3
 8001f9a:	e000      	b.n	8001f9e <NVIC_EncodePriority+0x32>
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fa0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001fa4:	69bb      	ldr	r3, [r7, #24]
 8001fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001faa:	43da      	mvns	r2, r3
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	401a      	ands	r2, r3
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fb4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	fa01 f303 	lsl.w	r3, r1, r3
 8001fbe:	43d9      	mvns	r1, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fc4:	4313      	orrs	r3, r2
         );
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3724      	adds	r7, #36	@ 0x24
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
	...

08001fd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	3b01      	subs	r3, #1
 8001fe0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001fe4:	d301      	bcc.n	8001fea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e00f      	b.n	800200a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fea:	4a0a      	ldr	r2, [pc, #40]	@ (8002014 <SysTick_Config+0x40>)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	3b01      	subs	r3, #1
 8001ff0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ff2:	210f      	movs	r1, #15
 8001ff4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001ff8:	f7ff ff8e 	bl	8001f18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ffc:	4b05      	ldr	r3, [pc, #20]	@ (8002014 <SysTick_Config+0x40>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002002:	4b04      	ldr	r3, [pc, #16]	@ (8002014 <SysTick_Config+0x40>)
 8002004:	2207      	movs	r2, #7
 8002006:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002008:	2300      	movs	r3, #0
}
 800200a:	4618      	mov	r0, r3
 800200c:	3708      	adds	r7, #8
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	e000e010 	.word	0xe000e010

08002018 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f7ff ff29 	bl	8001e78 <__NVIC_SetPriorityGrouping>
}
 8002026:	bf00      	nop
 8002028:	3708      	adds	r7, #8
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}

0800202e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800202e:	b580      	push	{r7, lr}
 8002030:	b086      	sub	sp, #24
 8002032:	af00      	add	r7, sp, #0
 8002034:	4603      	mov	r3, r0
 8002036:	60b9      	str	r1, [r7, #8]
 8002038:	607a      	str	r2, [r7, #4]
 800203a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800203c:	2300      	movs	r3, #0
 800203e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002040:	f7ff ff3e 	bl	8001ec0 <__NVIC_GetPriorityGrouping>
 8002044:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	68b9      	ldr	r1, [r7, #8]
 800204a:	6978      	ldr	r0, [r7, #20]
 800204c:	f7ff ff8e 	bl	8001f6c <NVIC_EncodePriority>
 8002050:	4602      	mov	r2, r0
 8002052:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002056:	4611      	mov	r1, r2
 8002058:	4618      	mov	r0, r3
 800205a:	f7ff ff5d 	bl	8001f18 <__NVIC_SetPriority>
}
 800205e:	bf00      	nop
 8002060:	3718      	adds	r7, #24
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}

08002066 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002066:	b580      	push	{r7, lr}
 8002068:	b082      	sub	sp, #8
 800206a:	af00      	add	r7, sp, #0
 800206c:	4603      	mov	r3, r0
 800206e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002070:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002074:	4618      	mov	r0, r3
 8002076:	f7ff ff31 	bl	8001edc <__NVIC_EnableIRQ>
}
 800207a:	bf00      	nop
 800207c:	3708      	adds	r7, #8
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}

08002082 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002082:	b580      	push	{r7, lr}
 8002084:	b082      	sub	sp, #8
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f7ff ffa2 	bl	8001fd4 <SysTick_Config>
 8002090:	4603      	mov	r3, r0
}
 8002092:	4618      	mov	r0, r3
 8002094:	3708      	adds	r7, #8
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
	...

0800209c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b086      	sub	sp, #24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80020a4:	2300      	movs	r3, #0
 80020a6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80020a8:	f7ff fad4 	bl	8001654 <HAL_GetTick>
 80020ac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d101      	bne.n	80020b8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e099      	b.n	80021ec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2202      	movs	r2, #2
 80020bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f022 0201 	bic.w	r2, r2, #1
 80020d6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020d8:	e00f      	b.n	80020fa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80020da:	f7ff fabb 	bl	8001654 <HAL_GetTick>
 80020de:	4602      	mov	r2, r0
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	2b05      	cmp	r3, #5
 80020e6:	d908      	bls.n	80020fa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2220      	movs	r2, #32
 80020ec:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2203      	movs	r2, #3
 80020f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e078      	b.n	80021ec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0301 	and.w	r3, r3, #1
 8002104:	2b00      	cmp	r3, #0
 8002106:	d1e8      	bne.n	80020da <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002110:	697a      	ldr	r2, [r7, #20]
 8002112:	4b38      	ldr	r3, [pc, #224]	@ (80021f4 <HAL_DMA_Init+0x158>)
 8002114:	4013      	ands	r3, r2
 8002116:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	685a      	ldr	r2, [r3, #4]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002126:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	691b      	ldr	r3, [r3, #16]
 800212c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002132:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	699b      	ldr	r3, [r3, #24]
 8002138:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800213e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6a1b      	ldr	r3, [r3, #32]
 8002144:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002146:	697a      	ldr	r2, [r7, #20]
 8002148:	4313      	orrs	r3, r2
 800214a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002150:	2b04      	cmp	r3, #4
 8002152:	d107      	bne.n	8002164 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800215c:	4313      	orrs	r3, r2
 800215e:	697a      	ldr	r2, [r7, #20]
 8002160:	4313      	orrs	r3, r2
 8002162:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	697a      	ldr	r2, [r7, #20]
 800216a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	695b      	ldr	r3, [r3, #20]
 8002172:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	f023 0307 	bic.w	r3, r3, #7
 800217a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002180:	697a      	ldr	r2, [r7, #20]
 8002182:	4313      	orrs	r3, r2
 8002184:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800218a:	2b04      	cmp	r3, #4
 800218c:	d117      	bne.n	80021be <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002192:	697a      	ldr	r2, [r7, #20]
 8002194:	4313      	orrs	r3, r2
 8002196:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800219c:	2b00      	cmp	r3, #0
 800219e:	d00e      	beq.n	80021be <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	f000 fa6f 	bl	8002684 <DMA_CheckFifoParam>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d008      	beq.n	80021be <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2240      	movs	r2, #64	@ 0x40
 80021b0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2201      	movs	r2, #1
 80021b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80021ba:	2301      	movs	r3, #1
 80021bc:	e016      	b.n	80021ec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	697a      	ldr	r2, [r7, #20]
 80021c4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f000 fa26 	bl	8002618 <DMA_CalcBaseAndBitshift>
 80021cc:	4603      	mov	r3, r0
 80021ce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021d4:	223f      	movs	r2, #63	@ 0x3f
 80021d6:	409a      	lsls	r2, r3
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2200      	movs	r2, #0
 80021e0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2201      	movs	r2, #1
 80021e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80021ea:	2300      	movs	r3, #0
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3718      	adds	r7, #24
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	f010803f 	.word	0xf010803f

080021f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b086      	sub	sp, #24
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	60f8      	str	r0, [r7, #12]
 8002200:	60b9      	str	r1, [r7, #8]
 8002202:	607a      	str	r2, [r7, #4]
 8002204:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002206:	2300      	movs	r3, #0
 8002208:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800220e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002216:	2b01      	cmp	r3, #1
 8002218:	d101      	bne.n	800221e <HAL_DMA_Start_IT+0x26>
 800221a:	2302      	movs	r3, #2
 800221c:	e040      	b.n	80022a0 <HAL_DMA_Start_IT+0xa8>
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2201      	movs	r2, #1
 8002222:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800222c:	b2db      	uxtb	r3, r3
 800222e:	2b01      	cmp	r3, #1
 8002230:	d12f      	bne.n	8002292 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2202      	movs	r2, #2
 8002236:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2200      	movs	r2, #0
 800223e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	68b9      	ldr	r1, [r7, #8]
 8002246:	68f8      	ldr	r0, [r7, #12]
 8002248:	f000 f9b8 	bl	80025bc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002250:	223f      	movs	r2, #63	@ 0x3f
 8002252:	409a      	lsls	r2, r3
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f042 0216 	orr.w	r2, r2, #22
 8002266:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800226c:	2b00      	cmp	r3, #0
 800226e:	d007      	beq.n	8002280 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f042 0208 	orr.w	r2, r2, #8
 800227e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f042 0201 	orr.w	r2, r2, #1
 800228e:	601a      	str	r2, [r3, #0]
 8002290:	e005      	b.n	800229e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2200      	movs	r2, #0
 8002296:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800229a:	2302      	movs	r3, #2
 800229c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800229e:	7dfb      	ldrb	r3, [r7, #23]
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3718      	adds	r7, #24
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}

080022a8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b086      	sub	sp, #24
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80022b0:	2300      	movs	r3, #0
 80022b2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80022b4:	4b8e      	ldr	r3, [pc, #568]	@ (80024f0 <HAL_DMA_IRQHandler+0x248>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a8e      	ldr	r2, [pc, #568]	@ (80024f4 <HAL_DMA_IRQHandler+0x24c>)
 80022ba:	fba2 2303 	umull	r2, r3, r2, r3
 80022be:	0a9b      	lsrs	r3, r3, #10
 80022c0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022c6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022d2:	2208      	movs	r2, #8
 80022d4:	409a      	lsls	r2, r3
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	4013      	ands	r3, r2
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d01a      	beq.n	8002314 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0304 	and.w	r3, r3, #4
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d013      	beq.n	8002314 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f022 0204 	bic.w	r2, r2, #4
 80022fa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002300:	2208      	movs	r2, #8
 8002302:	409a      	lsls	r2, r3
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800230c:	f043 0201 	orr.w	r2, r3, #1
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002318:	2201      	movs	r2, #1
 800231a:	409a      	lsls	r2, r3
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	4013      	ands	r3, r2
 8002320:	2b00      	cmp	r3, #0
 8002322:	d012      	beq.n	800234a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	695b      	ldr	r3, [r3, #20]
 800232a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800232e:	2b00      	cmp	r3, #0
 8002330:	d00b      	beq.n	800234a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002336:	2201      	movs	r2, #1
 8002338:	409a      	lsls	r2, r3
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002342:	f043 0202 	orr.w	r2, r3, #2
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800234e:	2204      	movs	r2, #4
 8002350:	409a      	lsls	r2, r3
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	4013      	ands	r3, r2
 8002356:	2b00      	cmp	r3, #0
 8002358:	d012      	beq.n	8002380 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0302 	and.w	r3, r3, #2
 8002364:	2b00      	cmp	r3, #0
 8002366:	d00b      	beq.n	8002380 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800236c:	2204      	movs	r2, #4
 800236e:	409a      	lsls	r2, r3
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002378:	f043 0204 	orr.w	r2, r3, #4
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002384:	2210      	movs	r2, #16
 8002386:	409a      	lsls	r2, r3
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	4013      	ands	r3, r2
 800238c:	2b00      	cmp	r3, #0
 800238e:	d043      	beq.n	8002418 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0308 	and.w	r3, r3, #8
 800239a:	2b00      	cmp	r3, #0
 800239c:	d03c      	beq.n	8002418 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023a2:	2210      	movs	r2, #16
 80023a4:	409a      	lsls	r2, r3
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d018      	beq.n	80023ea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d108      	bne.n	80023d8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d024      	beq.n	8002418 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	4798      	blx	r3
 80023d6:	e01f      	b.n	8002418 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d01b      	beq.n	8002418 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	4798      	blx	r3
 80023e8:	e016      	b.n	8002418 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d107      	bne.n	8002408 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f022 0208 	bic.w	r2, r2, #8
 8002406:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800240c:	2b00      	cmp	r3, #0
 800240e:	d003      	beq.n	8002418 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800241c:	2220      	movs	r2, #32
 800241e:	409a      	lsls	r2, r3
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	4013      	ands	r3, r2
 8002424:	2b00      	cmp	r3, #0
 8002426:	f000 808f 	beq.w	8002548 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0310 	and.w	r3, r3, #16
 8002434:	2b00      	cmp	r3, #0
 8002436:	f000 8087 	beq.w	8002548 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800243e:	2220      	movs	r2, #32
 8002440:	409a      	lsls	r2, r3
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800244c:	b2db      	uxtb	r3, r3
 800244e:	2b05      	cmp	r3, #5
 8002450:	d136      	bne.n	80024c0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f022 0216 	bic.w	r2, r2, #22
 8002460:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	695a      	ldr	r2, [r3, #20]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002470:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002476:	2b00      	cmp	r3, #0
 8002478:	d103      	bne.n	8002482 <HAL_DMA_IRQHandler+0x1da>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800247e:	2b00      	cmp	r3, #0
 8002480:	d007      	beq.n	8002492 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f022 0208 	bic.w	r2, r2, #8
 8002490:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002496:	223f      	movs	r2, #63	@ 0x3f
 8002498:	409a      	lsls	r2, r3
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2201      	movs	r2, #1
 80024a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d07e      	beq.n	80025b4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	4798      	blx	r3
        }
        return;
 80024be:	e079      	b.n	80025b4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d01d      	beq.n	800250a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d10d      	bne.n	80024f8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d031      	beq.n	8002548 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	4798      	blx	r3
 80024ec:	e02c      	b.n	8002548 <HAL_DMA_IRQHandler+0x2a0>
 80024ee:	bf00      	nop
 80024f0:	20000008 	.word	0x20000008
 80024f4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d023      	beq.n	8002548 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	4798      	blx	r3
 8002508:	e01e      	b.n	8002548 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002514:	2b00      	cmp	r3, #0
 8002516:	d10f      	bne.n	8002538 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f022 0210 	bic.w	r2, r2, #16
 8002526:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2200      	movs	r2, #0
 8002534:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800253c:	2b00      	cmp	r3, #0
 800253e:	d003      	beq.n	8002548 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800254c:	2b00      	cmp	r3, #0
 800254e:	d032      	beq.n	80025b6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002554:	f003 0301 	and.w	r3, r3, #1
 8002558:	2b00      	cmp	r3, #0
 800255a:	d022      	beq.n	80025a2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2205      	movs	r2, #5
 8002560:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f022 0201 	bic.w	r2, r2, #1
 8002572:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	3301      	adds	r3, #1
 8002578:	60bb      	str	r3, [r7, #8]
 800257a:	697a      	ldr	r2, [r7, #20]
 800257c:	429a      	cmp	r2, r3
 800257e:	d307      	bcc.n	8002590 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0301 	and.w	r3, r3, #1
 800258a:	2b00      	cmp	r3, #0
 800258c:	d1f2      	bne.n	8002574 <HAL_DMA_IRQHandler+0x2cc>
 800258e:	e000      	b.n	8002592 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002590:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2201      	movs	r2, #1
 8002596:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2200      	movs	r2, #0
 800259e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d005      	beq.n	80025b6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	4798      	blx	r3
 80025b2:	e000      	b.n	80025b6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80025b4:	bf00      	nop
    }
  }
}
 80025b6:	3718      	adds	r7, #24
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}

080025bc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025bc:	b480      	push	{r7}
 80025be:	b085      	sub	sp, #20
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	60f8      	str	r0, [r7, #12]
 80025c4:	60b9      	str	r1, [r7, #8]
 80025c6:	607a      	str	r2, [r7, #4]
 80025c8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80025d8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	683a      	ldr	r2, [r7, #0]
 80025e0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	2b40      	cmp	r3, #64	@ 0x40
 80025e8:	d108      	bne.n	80025fc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	68ba      	ldr	r2, [r7, #8]
 80025f8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80025fa:	e007      	b.n	800260c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	68ba      	ldr	r2, [r7, #8]
 8002602:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	60da      	str	r2, [r3, #12]
}
 800260c:	bf00      	nop
 800260e:	3714      	adds	r7, #20
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr

08002618 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002618:	b480      	push	{r7}
 800261a:	b085      	sub	sp, #20
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	b2db      	uxtb	r3, r3
 8002626:	3b10      	subs	r3, #16
 8002628:	4a14      	ldr	r2, [pc, #80]	@ (800267c <DMA_CalcBaseAndBitshift+0x64>)
 800262a:	fba2 2303 	umull	r2, r3, r2, r3
 800262e:	091b      	lsrs	r3, r3, #4
 8002630:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002632:	4a13      	ldr	r2, [pc, #76]	@ (8002680 <DMA_CalcBaseAndBitshift+0x68>)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	4413      	add	r3, r2
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	461a      	mov	r2, r3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2b03      	cmp	r3, #3
 8002644:	d909      	bls.n	800265a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800264e:	f023 0303 	bic.w	r3, r3, #3
 8002652:	1d1a      	adds	r2, r3, #4
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	659a      	str	r2, [r3, #88]	@ 0x58
 8002658:	e007      	b.n	800266a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002662:	f023 0303 	bic.w	r3, r3, #3
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800266e:	4618      	mov	r0, r3
 8002670:	3714      	adds	r7, #20
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	aaaaaaab 	.word	0xaaaaaaab
 8002680:	080049e0 	.word	0x080049e0

08002684 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002684:	b480      	push	{r7}
 8002686:	b085      	sub	sp, #20
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800268c:	2300      	movs	r3, #0
 800268e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002694:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	699b      	ldr	r3, [r3, #24]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d11f      	bne.n	80026de <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	2b03      	cmp	r3, #3
 80026a2:	d856      	bhi.n	8002752 <DMA_CheckFifoParam+0xce>
 80026a4:	a201      	add	r2, pc, #4	@ (adr r2, 80026ac <DMA_CheckFifoParam+0x28>)
 80026a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026aa:	bf00      	nop
 80026ac:	080026bd 	.word	0x080026bd
 80026b0:	080026cf 	.word	0x080026cf
 80026b4:	080026bd 	.word	0x080026bd
 80026b8:	08002753 	.word	0x08002753
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026c0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d046      	beq.n	8002756 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026cc:	e043      	b.n	8002756 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026d2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80026d6:	d140      	bne.n	800275a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026dc:	e03d      	b.n	800275a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	699b      	ldr	r3, [r3, #24]
 80026e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80026e6:	d121      	bne.n	800272c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	2b03      	cmp	r3, #3
 80026ec:	d837      	bhi.n	800275e <DMA_CheckFifoParam+0xda>
 80026ee:	a201      	add	r2, pc, #4	@ (adr r2, 80026f4 <DMA_CheckFifoParam+0x70>)
 80026f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026f4:	08002705 	.word	0x08002705
 80026f8:	0800270b 	.word	0x0800270b
 80026fc:	08002705 	.word	0x08002705
 8002700:	0800271d 	.word	0x0800271d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	73fb      	strb	r3, [r7, #15]
      break;
 8002708:	e030      	b.n	800276c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800270e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d025      	beq.n	8002762 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800271a:	e022      	b.n	8002762 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002720:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002724:	d11f      	bne.n	8002766 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800272a:	e01c      	b.n	8002766 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	2b02      	cmp	r3, #2
 8002730:	d903      	bls.n	800273a <DMA_CheckFifoParam+0xb6>
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	2b03      	cmp	r3, #3
 8002736:	d003      	beq.n	8002740 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002738:	e018      	b.n	800276c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	73fb      	strb	r3, [r7, #15]
      break;
 800273e:	e015      	b.n	800276c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002744:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002748:	2b00      	cmp	r3, #0
 800274a:	d00e      	beq.n	800276a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	73fb      	strb	r3, [r7, #15]
      break;
 8002750:	e00b      	b.n	800276a <DMA_CheckFifoParam+0xe6>
      break;
 8002752:	bf00      	nop
 8002754:	e00a      	b.n	800276c <DMA_CheckFifoParam+0xe8>
      break;
 8002756:	bf00      	nop
 8002758:	e008      	b.n	800276c <DMA_CheckFifoParam+0xe8>
      break;
 800275a:	bf00      	nop
 800275c:	e006      	b.n	800276c <DMA_CheckFifoParam+0xe8>
      break;
 800275e:	bf00      	nop
 8002760:	e004      	b.n	800276c <DMA_CheckFifoParam+0xe8>
      break;
 8002762:	bf00      	nop
 8002764:	e002      	b.n	800276c <DMA_CheckFifoParam+0xe8>
      break;   
 8002766:	bf00      	nop
 8002768:	e000      	b.n	800276c <DMA_CheckFifoParam+0xe8>
      break;
 800276a:	bf00      	nop
    }
  } 
  
  return status; 
 800276c:	7bfb      	ldrb	r3, [r7, #15]
}
 800276e:	4618      	mov	r0, r3
 8002770:	3714      	adds	r7, #20
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop

0800277c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800277c:	b480      	push	{r7}
 800277e:	b089      	sub	sp, #36	@ 0x24
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002786:	2300      	movs	r3, #0
 8002788:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800278a:	2300      	movs	r3, #0
 800278c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800278e:	2300      	movs	r3, #0
 8002790:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002792:	2300      	movs	r3, #0
 8002794:	61fb      	str	r3, [r7, #28]
 8002796:	e159      	b.n	8002a4c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002798:	2201      	movs	r2, #1
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	fa02 f303 	lsl.w	r3, r2, r3
 80027a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	697a      	ldr	r2, [r7, #20]
 80027a8:	4013      	ands	r3, r2
 80027aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027ac:	693a      	ldr	r2, [r7, #16]
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	429a      	cmp	r2, r3
 80027b2:	f040 8148 	bne.w	8002a46 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f003 0303 	and.w	r3, r3, #3
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d005      	beq.n	80027ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d130      	bne.n	8002830 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	005b      	lsls	r3, r3, #1
 80027d8:	2203      	movs	r2, #3
 80027da:	fa02 f303 	lsl.w	r3, r2, r3
 80027de:	43db      	mvns	r3, r3
 80027e0:	69ba      	ldr	r2, [r7, #24]
 80027e2:	4013      	ands	r3, r2
 80027e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	68da      	ldr	r2, [r3, #12]
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	005b      	lsls	r3, r3, #1
 80027ee:	fa02 f303 	lsl.w	r3, r2, r3
 80027f2:	69ba      	ldr	r2, [r7, #24]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	69ba      	ldr	r2, [r7, #24]
 80027fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002804:	2201      	movs	r2, #1
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	fa02 f303 	lsl.w	r3, r2, r3
 800280c:	43db      	mvns	r3, r3
 800280e:	69ba      	ldr	r2, [r7, #24]
 8002810:	4013      	ands	r3, r2
 8002812:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	091b      	lsrs	r3, r3, #4
 800281a:	f003 0201 	and.w	r2, r3, #1
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	fa02 f303 	lsl.w	r3, r2, r3
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	4313      	orrs	r3, r2
 8002828:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	69ba      	ldr	r2, [r7, #24]
 800282e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f003 0303 	and.w	r3, r3, #3
 8002838:	2b03      	cmp	r3, #3
 800283a:	d017      	beq.n	800286c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	005b      	lsls	r3, r3, #1
 8002846:	2203      	movs	r2, #3
 8002848:	fa02 f303 	lsl.w	r3, r2, r3
 800284c:	43db      	mvns	r3, r3
 800284e:	69ba      	ldr	r2, [r7, #24]
 8002850:	4013      	ands	r3, r2
 8002852:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	689a      	ldr	r2, [r3, #8]
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	005b      	lsls	r3, r3, #1
 800285c:	fa02 f303 	lsl.w	r3, r2, r3
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	4313      	orrs	r3, r2
 8002864:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f003 0303 	and.w	r3, r3, #3
 8002874:	2b02      	cmp	r3, #2
 8002876:	d123      	bne.n	80028c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	08da      	lsrs	r2, r3, #3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	3208      	adds	r2, #8
 8002880:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002884:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	f003 0307 	and.w	r3, r3, #7
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	220f      	movs	r2, #15
 8002890:	fa02 f303 	lsl.w	r3, r2, r3
 8002894:	43db      	mvns	r3, r3
 8002896:	69ba      	ldr	r2, [r7, #24]
 8002898:	4013      	ands	r3, r2
 800289a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	691a      	ldr	r2, [r3, #16]
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	f003 0307 	and.w	r3, r3, #7
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	08da      	lsrs	r2, r3, #3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	3208      	adds	r2, #8
 80028ba:	69b9      	ldr	r1, [r7, #24]
 80028bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	005b      	lsls	r3, r3, #1
 80028ca:	2203      	movs	r2, #3
 80028cc:	fa02 f303 	lsl.w	r3, r2, r3
 80028d0:	43db      	mvns	r3, r3
 80028d2:	69ba      	ldr	r2, [r7, #24]
 80028d4:	4013      	ands	r3, r2
 80028d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f003 0203 	and.w	r2, r3, #3
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	005b      	lsls	r3, r3, #1
 80028e4:	fa02 f303 	lsl.w	r3, r2, r3
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	69ba      	ldr	r2, [r7, #24]
 80028f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	f000 80a2 	beq.w	8002a46 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002902:	2300      	movs	r3, #0
 8002904:	60fb      	str	r3, [r7, #12]
 8002906:	4b57      	ldr	r3, [pc, #348]	@ (8002a64 <HAL_GPIO_Init+0x2e8>)
 8002908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800290a:	4a56      	ldr	r2, [pc, #344]	@ (8002a64 <HAL_GPIO_Init+0x2e8>)
 800290c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002910:	6453      	str	r3, [r2, #68]	@ 0x44
 8002912:	4b54      	ldr	r3, [pc, #336]	@ (8002a64 <HAL_GPIO_Init+0x2e8>)
 8002914:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002916:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800291a:	60fb      	str	r3, [r7, #12]
 800291c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800291e:	4a52      	ldr	r2, [pc, #328]	@ (8002a68 <HAL_GPIO_Init+0x2ec>)
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	089b      	lsrs	r3, r3, #2
 8002924:	3302      	adds	r3, #2
 8002926:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800292a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	f003 0303 	and.w	r3, r3, #3
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	220f      	movs	r2, #15
 8002936:	fa02 f303 	lsl.w	r3, r2, r3
 800293a:	43db      	mvns	r3, r3
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	4013      	ands	r3, r2
 8002940:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a49      	ldr	r2, [pc, #292]	@ (8002a6c <HAL_GPIO_Init+0x2f0>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d019      	beq.n	800297e <HAL_GPIO_Init+0x202>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a48      	ldr	r2, [pc, #288]	@ (8002a70 <HAL_GPIO_Init+0x2f4>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d013      	beq.n	800297a <HAL_GPIO_Init+0x1fe>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a47      	ldr	r2, [pc, #284]	@ (8002a74 <HAL_GPIO_Init+0x2f8>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d00d      	beq.n	8002976 <HAL_GPIO_Init+0x1fa>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a46      	ldr	r2, [pc, #280]	@ (8002a78 <HAL_GPIO_Init+0x2fc>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d007      	beq.n	8002972 <HAL_GPIO_Init+0x1f6>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a45      	ldr	r2, [pc, #276]	@ (8002a7c <HAL_GPIO_Init+0x300>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d101      	bne.n	800296e <HAL_GPIO_Init+0x1f2>
 800296a:	2304      	movs	r3, #4
 800296c:	e008      	b.n	8002980 <HAL_GPIO_Init+0x204>
 800296e:	2307      	movs	r3, #7
 8002970:	e006      	b.n	8002980 <HAL_GPIO_Init+0x204>
 8002972:	2303      	movs	r3, #3
 8002974:	e004      	b.n	8002980 <HAL_GPIO_Init+0x204>
 8002976:	2302      	movs	r3, #2
 8002978:	e002      	b.n	8002980 <HAL_GPIO_Init+0x204>
 800297a:	2301      	movs	r3, #1
 800297c:	e000      	b.n	8002980 <HAL_GPIO_Init+0x204>
 800297e:	2300      	movs	r3, #0
 8002980:	69fa      	ldr	r2, [r7, #28]
 8002982:	f002 0203 	and.w	r2, r2, #3
 8002986:	0092      	lsls	r2, r2, #2
 8002988:	4093      	lsls	r3, r2
 800298a:	69ba      	ldr	r2, [r7, #24]
 800298c:	4313      	orrs	r3, r2
 800298e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002990:	4935      	ldr	r1, [pc, #212]	@ (8002a68 <HAL_GPIO_Init+0x2ec>)
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	089b      	lsrs	r3, r3, #2
 8002996:	3302      	adds	r3, #2
 8002998:	69ba      	ldr	r2, [r7, #24]
 800299a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800299e:	4b38      	ldr	r3, [pc, #224]	@ (8002a80 <HAL_GPIO_Init+0x304>)
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	43db      	mvns	r3, r3
 80029a8:	69ba      	ldr	r2, [r7, #24]
 80029aa:	4013      	ands	r3, r2
 80029ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d003      	beq.n	80029c2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80029ba:	69ba      	ldr	r2, [r7, #24]
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	4313      	orrs	r3, r2
 80029c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029c2:	4a2f      	ldr	r2, [pc, #188]	@ (8002a80 <HAL_GPIO_Init+0x304>)
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029c8:	4b2d      	ldr	r3, [pc, #180]	@ (8002a80 <HAL_GPIO_Init+0x304>)
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	43db      	mvns	r3, r3
 80029d2:	69ba      	ldr	r2, [r7, #24]
 80029d4:	4013      	ands	r3, r2
 80029d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d003      	beq.n	80029ec <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80029e4:	69ba      	ldr	r2, [r7, #24]
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029ec:	4a24      	ldr	r2, [pc, #144]	@ (8002a80 <HAL_GPIO_Init+0x304>)
 80029ee:	69bb      	ldr	r3, [r7, #24]
 80029f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80029f2:	4b23      	ldr	r3, [pc, #140]	@ (8002a80 <HAL_GPIO_Init+0x304>)
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	43db      	mvns	r3, r3
 80029fc:	69ba      	ldr	r2, [r7, #24]
 80029fe:	4013      	ands	r3, r2
 8002a00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d003      	beq.n	8002a16 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002a0e:	69ba      	ldr	r2, [r7, #24]
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a16:	4a1a      	ldr	r2, [pc, #104]	@ (8002a80 <HAL_GPIO_Init+0x304>)
 8002a18:	69bb      	ldr	r3, [r7, #24]
 8002a1a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a1c:	4b18      	ldr	r3, [pc, #96]	@ (8002a80 <HAL_GPIO_Init+0x304>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	43db      	mvns	r3, r3
 8002a26:	69ba      	ldr	r2, [r7, #24]
 8002a28:	4013      	ands	r3, r2
 8002a2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d003      	beq.n	8002a40 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002a38:	69ba      	ldr	r2, [r7, #24]
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a40:	4a0f      	ldr	r2, [pc, #60]	@ (8002a80 <HAL_GPIO_Init+0x304>)
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	3301      	adds	r3, #1
 8002a4a:	61fb      	str	r3, [r7, #28]
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	2b0f      	cmp	r3, #15
 8002a50:	f67f aea2 	bls.w	8002798 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a54:	bf00      	nop
 8002a56:	bf00      	nop
 8002a58:	3724      	adds	r7, #36	@ 0x24
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop
 8002a64:	40023800 	.word	0x40023800
 8002a68:	40013800 	.word	0x40013800
 8002a6c:	40020000 	.word	0x40020000
 8002a70:	40020400 	.word	0x40020400
 8002a74:	40020800 	.word	0x40020800
 8002a78:	40020c00 	.word	0x40020c00
 8002a7c:	40021000 	.word	0x40021000
 8002a80:	40013c00 	.word	0x40013c00

08002a84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	460b      	mov	r3, r1
 8002a8e:	807b      	strh	r3, [r7, #2]
 8002a90:	4613      	mov	r3, r2
 8002a92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a94:	787b      	ldrb	r3, [r7, #1]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d003      	beq.n	8002aa2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a9a:	887a      	ldrh	r2, [r7, #2]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002aa0:	e003      	b.n	8002aaa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002aa2:	887b      	ldrh	r3, [r7, #2]
 8002aa4:	041a      	lsls	r2, r3, #16
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	619a      	str	r2, [r3, #24]
}
 8002aaa:	bf00      	nop
 8002aac:	370c      	adds	r7, #12
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr

08002ab6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ab6:	b480      	push	{r7}
 8002ab8:	b085      	sub	sp, #20
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
 8002abe:	460b      	mov	r3, r1
 8002ac0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	695b      	ldr	r3, [r3, #20]
 8002ac6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002ac8:	887a      	ldrh	r2, [r7, #2]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	4013      	ands	r3, r2
 8002ace:	041a      	lsls	r2, r3, #16
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	43d9      	mvns	r1, r3
 8002ad4:	887b      	ldrh	r3, [r7, #2]
 8002ad6:	400b      	ands	r3, r1
 8002ad8:	431a      	orrs	r2, r3
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	619a      	str	r2, [r3, #24]
}
 8002ade:	bf00      	nop
 8002ae0:	3714      	adds	r7, #20
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr
	...

08002aec <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b088      	sub	sp, #32
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d101      	bne.n	8002afe <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e128      	b.n	8002d50 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d109      	bne.n	8002b1e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a90      	ldr	r2, [pc, #576]	@ (8002d58 <HAL_I2S_Init+0x26c>)
 8002b16:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f7fe fa7f 	bl	800101c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2202      	movs	r2, #2
 8002b22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	69db      	ldr	r3, [r3, #28]
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	6812      	ldr	r2, [r2, #0]
 8002b30:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002b34:	f023 030f 	bic.w	r3, r3, #15
 8002b38:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	2202      	movs	r2, #2
 8002b40:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	695b      	ldr	r3, [r3, #20]
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d060      	beq.n	8002c0c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d102      	bne.n	8002b58 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002b52:	2310      	movs	r3, #16
 8002b54:	617b      	str	r3, [r7, #20]
 8002b56:	e001      	b.n	8002b5c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002b58:	2320      	movs	r3, #32
 8002b5a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	2b20      	cmp	r3, #32
 8002b62:	d802      	bhi.n	8002b6a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	005b      	lsls	r3, r3, #1
 8002b68:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002b6a:	2001      	movs	r0, #1
 8002b6c:	f001 fa60 	bl	8004030 <HAL_RCCEx_GetPeriphCLKFreq>
 8002b70:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	691b      	ldr	r3, [r3, #16]
 8002b76:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b7a:	d125      	bne.n	8002bc8 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d010      	beq.n	8002ba6 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	68fa      	ldr	r2, [r7, #12]
 8002b8a:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b8e:	4613      	mov	r3, r2
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	4413      	add	r3, r2
 8002b94:	005b      	lsls	r3, r3, #1
 8002b96:	461a      	mov	r2, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	695b      	ldr	r3, [r3, #20]
 8002b9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ba0:	3305      	adds	r3, #5
 8002ba2:	613b      	str	r3, [r7, #16]
 8002ba4:	e01f      	b.n	8002be6 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	00db      	lsls	r3, r3, #3
 8002baa:	68fa      	ldr	r2, [r7, #12]
 8002bac:	fbb2 f2f3 	udiv	r2, r2, r3
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	4413      	add	r3, r2
 8002bb6:	005b      	lsls	r3, r3, #1
 8002bb8:	461a      	mov	r2, r3
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	695b      	ldr	r3, [r3, #20]
 8002bbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bc2:	3305      	adds	r3, #5
 8002bc4:	613b      	str	r3, [r7, #16]
 8002bc6:	e00e      	b.n	8002be6 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002bc8:	68fa      	ldr	r2, [r7, #12]
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	4413      	add	r3, r2
 8002bd6:	005b      	lsls	r3, r3, #1
 8002bd8:	461a      	mov	r2, r3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	695b      	ldr	r3, [r3, #20]
 8002bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8002be2:	3305      	adds	r3, #5
 8002be4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	4a5c      	ldr	r2, [pc, #368]	@ (8002d5c <HAL_I2S_Init+0x270>)
 8002bea:	fba2 2303 	umull	r2, r3, r2, r3
 8002bee:	08db      	lsrs	r3, r3, #3
 8002bf0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	f003 0301 	and.w	r3, r3, #1
 8002bf8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002bfa:	693a      	ldr	r2, [r7, #16]
 8002bfc:	69bb      	ldr	r3, [r7, #24]
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	085b      	lsrs	r3, r3, #1
 8002c02:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	021b      	lsls	r3, r3, #8
 8002c08:	61bb      	str	r3, [r7, #24]
 8002c0a:	e003      	b.n	8002c14 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002c0c:	2302      	movs	r3, #2
 8002c0e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002c10:	2300      	movs	r3, #0
 8002c12:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d902      	bls.n	8002c20 <HAL_I2S_Init+0x134>
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	2bff      	cmp	r3, #255	@ 0xff
 8002c1e:	d907      	bls.n	8002c30 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c24:	f043 0210 	orr.w	r2, r3, #16
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e08f      	b.n	8002d50 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	691a      	ldr	r2, [r3, #16]
 8002c34:	69bb      	ldr	r3, [r7, #24]
 8002c36:	ea42 0103 	orr.w	r1, r2, r3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	69fa      	ldr	r2, [r7, #28]
 8002c40:	430a      	orrs	r2, r1
 8002c42:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	69db      	ldr	r3, [r3, #28]
 8002c4a:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002c4e:	f023 030f 	bic.w	r3, r3, #15
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	6851      	ldr	r1, [r2, #4]
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	6892      	ldr	r2, [r2, #8]
 8002c5a:	4311      	orrs	r1, r2
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	68d2      	ldr	r2, [r2, #12]
 8002c60:	4311      	orrs	r1, r2
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	6992      	ldr	r2, [r2, #24]
 8002c66:	430a      	orrs	r2, r1
 8002c68:	431a      	orrs	r2, r3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002c72:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6a1b      	ldr	r3, [r3, #32]
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d161      	bne.n	8002d40 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	4a38      	ldr	r2, [pc, #224]	@ (8002d60 <HAL_I2S_Init+0x274>)
 8002c80:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a37      	ldr	r2, [pc, #220]	@ (8002d64 <HAL_I2S_Init+0x278>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d101      	bne.n	8002c90 <HAL_I2S_Init+0x1a4>
 8002c8c:	4b36      	ldr	r3, [pc, #216]	@ (8002d68 <HAL_I2S_Init+0x27c>)
 8002c8e:	e001      	b.n	8002c94 <HAL_I2S_Init+0x1a8>
 8002c90:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002c94:	69db      	ldr	r3, [r3, #28]
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	6812      	ldr	r2, [r2, #0]
 8002c9a:	4932      	ldr	r1, [pc, #200]	@ (8002d64 <HAL_I2S_Init+0x278>)
 8002c9c:	428a      	cmp	r2, r1
 8002c9e:	d101      	bne.n	8002ca4 <HAL_I2S_Init+0x1b8>
 8002ca0:	4a31      	ldr	r2, [pc, #196]	@ (8002d68 <HAL_I2S_Init+0x27c>)
 8002ca2:	e001      	b.n	8002ca8 <HAL_I2S_Init+0x1bc>
 8002ca4:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8002ca8:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002cac:	f023 030f 	bic.w	r3, r3, #15
 8002cb0:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a2b      	ldr	r2, [pc, #172]	@ (8002d64 <HAL_I2S_Init+0x278>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d101      	bne.n	8002cc0 <HAL_I2S_Init+0x1d4>
 8002cbc:	4b2a      	ldr	r3, [pc, #168]	@ (8002d68 <HAL_I2S_Init+0x27c>)
 8002cbe:	e001      	b.n	8002cc4 <HAL_I2S_Init+0x1d8>
 8002cc0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002cc4:	2202      	movs	r2, #2
 8002cc6:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a25      	ldr	r2, [pc, #148]	@ (8002d64 <HAL_I2S_Init+0x278>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d101      	bne.n	8002cd6 <HAL_I2S_Init+0x1ea>
 8002cd2:	4b25      	ldr	r3, [pc, #148]	@ (8002d68 <HAL_I2S_Init+0x27c>)
 8002cd4:	e001      	b.n	8002cda <HAL_I2S_Init+0x1ee>
 8002cd6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002cda:	69db      	ldr	r3, [r3, #28]
 8002cdc:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ce6:	d003      	beq.n	8002cf0 <HAL_I2S_Init+0x204>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d103      	bne.n	8002cf8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8002cf0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002cf4:	613b      	str	r3, [r7, #16]
 8002cf6:	e001      	b.n	8002cfc <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002d06:	4313      	orrs	r3, r2
 8002d08:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002d10:	4313      	orrs	r3, r2
 8002d12:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	699b      	ldr	r3, [r3, #24]
 8002d18:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	b29a      	uxth	r2, r3
 8002d1e:	897b      	ldrh	r3, [r7, #10]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002d28:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a0d      	ldr	r2, [pc, #52]	@ (8002d64 <HAL_I2S_Init+0x278>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d101      	bne.n	8002d38 <HAL_I2S_Init+0x24c>
 8002d34:	4b0c      	ldr	r3, [pc, #48]	@ (8002d68 <HAL_I2S_Init+0x27c>)
 8002d36:	e001      	b.n	8002d3c <HAL_I2S_Init+0x250>
 8002d38:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002d3c:	897a      	ldrh	r2, [r7, #10]
 8002d3e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2200      	movs	r2, #0
 8002d44:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2201      	movs	r2, #1
 8002d4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8002d4e:	2300      	movs	r3, #0
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3720      	adds	r7, #32
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	08003041 	.word	0x08003041
 8002d5c:	cccccccd 	.word	0xcccccccd
 8002d60:	08003155 	.word	0x08003155
 8002d64:	40003800 	.word	0x40003800
 8002d68:	40003400 	.word	0x40003400

08002d6c <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b086      	sub	sp, #24
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	60f8      	str	r0, [r7, #12]
 8002d74:	60b9      	str	r1, [r7, #8]
 8002d76:	4613      	mov	r3, r2
 8002d78:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d002      	beq.n	8002d86 <HAL_I2S_Transmit_DMA+0x1a>
 8002d80:	88fb      	ldrh	r3, [r7, #6]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d101      	bne.n	8002d8a <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e08a      	b.n	8002ea0 <HAL_I2S_Transmit_DMA+0x134>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d001      	beq.n	8002d9a <HAL_I2S_Transmit_DMA+0x2e>
  {
    return HAL_BUSY;
 8002d96:	2302      	movs	r3, #2
 8002d98:	e082      	b.n	8002ea0 <HAL_I2S_Transmit_DMA+0x134>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d101      	bne.n	8002daa <HAL_I2S_Transmit_DMA+0x3e>
 8002da6:	2302      	movs	r3, #2
 8002da8:	e07a      	b.n	8002ea0 <HAL_I2S_Transmit_DMA+0x134>
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2201      	movs	r2, #1
 8002dae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2203      	movs	r2, #3
 8002db6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pTxBuffPtr = pData;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	68ba      	ldr	r2, [r7, #8]
 8002dc4:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	69db      	ldr	r3, [r3, #28]
 8002dcc:	f003 0307 	and.w	r3, r3, #7
 8002dd0:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	2b03      	cmp	r3, #3
 8002dd6:	d002      	beq.n	8002dde <HAL_I2S_Transmit_DMA+0x72>
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	2b05      	cmp	r3, #5
 8002ddc:	d10a      	bne.n	8002df4 <HAL_I2S_Transmit_DMA+0x88>
  {
    hi2s->TxXferSize = (Size << 1U);
 8002dde:	88fb      	ldrh	r3, [r7, #6]
 8002de0:	005b      	lsls	r3, r3, #1
 8002de2:	b29a      	uxth	r2, r3
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 8002de8:	88fb      	ldrh	r3, [r7, #6]
 8002dea:	005b      	lsls	r3, r3, #1
 8002dec:	b29a      	uxth	r2, r3
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002df2:	e005      	b.n	8002e00 <HAL_I2S_Transmit_DMA+0x94>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	88fa      	ldrh	r2, [r7, #6]
 8002df8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	88fa      	ldrh	r2, [r7, #6]
 8002dfe:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e04:	4a28      	ldr	r2, [pc, #160]	@ (8002ea8 <HAL_I2S_Transmit_DMA+0x13c>)
 8002e06:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e0c:	4a27      	ldr	r2, [pc, #156]	@ (8002eac <HAL_I2S_Transmit_DMA+0x140>)
 8002e0e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e14:	4a26      	ldr	r2, [pc, #152]	@ (8002eb0 <HAL_I2S_Transmit_DMA+0x144>)
 8002e16:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002e20:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002e28:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e2e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002e30:	f7ff f9e2 	bl	80021f8 <HAL_DMA_Start_IT>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d00f      	beq.n	8002e5a <HAL_I2S_Transmit_DMA+0xee>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e3e:	f043 0208 	orr.w	r2, r3, #8
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2201      	movs	r2, #1
 8002e4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e022      	b.n	8002ea0 <HAL_I2S_Transmit_DMA+0x134>
  }

  __HAL_UNLOCK(hi2s);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f003 0302 	and.w	r3, r3, #2
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d107      	bne.n	8002e80 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	685a      	ldr	r2, [r3, #4]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f042 0202 	orr.w	r2, r2, #2
 8002e7e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	69db      	ldr	r3, [r3, #28]
 8002e86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d107      	bne.n	8002e9e <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	69da      	ldr	r2, [r3, #28]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002e9c:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 8002e9e:	2300      	movs	r3, #0
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3718      	adds	r7, #24
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	08002f1f 	.word	0x08002f1f
 8002eac:	08002edd 	.word	0x08002edd
 8002eb0:	08002f3b 	.word	0x08002f3b

08002eb4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002ebc:	bf00      	nop
 8002ebe:	370c      	adds	r7, #12
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr

08002ec8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002ed0:	bf00      	nop
 8002ed2:	370c      	adds	r7, #12
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr

08002edc <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ee8:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	69db      	ldr	r3, [r3, #28]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d10e      	bne.n	8002f10 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	685a      	ldr	r2, [r3, #4]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f022 0202 	bic.w	r2, r2, #2
 8002f00:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2200      	movs	r2, #0
 8002f06:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8002f10:	68f8      	ldr	r0, [r7, #12]
 8002f12:	f7fe fa53 	bl	80013bc <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002f16:	bf00      	nop
 8002f18:	3710      	adds	r7, #16
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}

08002f1e <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002f1e:	b580      	push	{r7, lr}
 8002f20:	b084      	sub	sp, #16
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f2a:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8002f2c:	68f8      	ldr	r0, [r7, #12]
 8002f2e:	f7fe fa23 	bl	8001378 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002f32:	bf00      	nop
 8002f34:	3710      	adds	r7, #16
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}

08002f3a <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8002f3a:	b580      	push	{r7, lr}
 8002f3c:	b084      	sub	sp, #16
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f46:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	685a      	ldr	r2, [r3, #4]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f022 0203 	bic.w	r2, r2, #3
 8002f56:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2200      	movs	r2, #0
 8002f62:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2201      	movs	r2, #1
 8002f68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f70:	f043 0208 	orr.w	r2, r3, #8
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8002f78:	68f8      	ldr	r0, [r7, #12]
 8002f7a:	f7ff ffa5 	bl	8002ec8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002f7e:	bf00      	nop
 8002f80:	3710      	adds	r7, #16
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}

08002f86 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002f86:	b580      	push	{r7, lr}
 8002f88:	b082      	sub	sp, #8
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f92:	881a      	ldrh	r2, [r3, #0]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f9e:	1c9a      	adds	r2, r3, #2
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	3b01      	subs	r3, #1
 8002fac:	b29a      	uxth	r2, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d10e      	bne.n	8002fda <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	685a      	ldr	r2, [r3, #4]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002fca:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f7fe f9f1 	bl	80013bc <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002fda:	bf00      	nop
 8002fdc:	3708      	adds	r7, #8
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}

08002fe2 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002fe2:	b580      	push	{r7, lr}
 8002fe4:	b082      	sub	sp, #8
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	68da      	ldr	r2, [r3, #12]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ff4:	b292      	uxth	r2, r2
 8002ff6:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ffc:	1c9a      	adds	r2, r3, #2
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003006:	b29b      	uxth	r3, r3
 8003008:	3b01      	subs	r3, #1
 800300a:	b29a      	uxth	r2, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003014:	b29b      	uxth	r3, r3
 8003016:	2b00      	cmp	r3, #0
 8003018:	d10e      	bne.n	8003038 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	685a      	ldr	r2, [r3, #4]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003028:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2201      	movs	r2, #1
 800302e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f7ff ff3e 	bl	8002eb4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003038:	bf00      	nop
 800303a:	3708      	adds	r7, #8
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}

08003040 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b086      	sub	sp, #24
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003056:	b2db      	uxtb	r3, r3
 8003058:	2b04      	cmp	r3, #4
 800305a:	d13a      	bne.n	80030d2 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	f003 0301 	and.w	r3, r3, #1
 8003062:	2b01      	cmp	r3, #1
 8003064:	d109      	bne.n	800307a <I2S_IRQHandler+0x3a>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003070:	2b40      	cmp	r3, #64	@ 0x40
 8003072:	d102      	bne.n	800307a <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f7ff ffb4 	bl	8002fe2 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003080:	2b40      	cmp	r3, #64	@ 0x40
 8003082:	d126      	bne.n	80030d2 <I2S_IRQHandler+0x92>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	f003 0320 	and.w	r3, r3, #32
 800308e:	2b20      	cmp	r3, #32
 8003090:	d11f      	bne.n	80030d2 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	685a      	ldr	r2, [r3, #4]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80030a0:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80030a2:	2300      	movs	r3, #0
 80030a4:	613b      	str	r3, [r7, #16]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	613b      	str	r3, [r7, #16]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	613b      	str	r3, [r7, #16]
 80030b6:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030c4:	f043 0202 	orr.w	r2, r3, #2
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f7ff fefb 	bl	8002ec8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	2b03      	cmp	r3, #3
 80030dc:	d136      	bne.n	800314c <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	f003 0302 	and.w	r3, r3, #2
 80030e4:	2b02      	cmp	r3, #2
 80030e6:	d109      	bne.n	80030fc <I2S_IRQHandler+0xbc>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030f2:	2b80      	cmp	r3, #128	@ 0x80
 80030f4:	d102      	bne.n	80030fc <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f7ff ff45 	bl	8002f86 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	f003 0308 	and.w	r3, r3, #8
 8003102:	2b08      	cmp	r3, #8
 8003104:	d122      	bne.n	800314c <I2S_IRQHandler+0x10c>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f003 0320 	and.w	r3, r3, #32
 8003110:	2b20      	cmp	r3, #32
 8003112:	d11b      	bne.n	800314c <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	685a      	ldr	r2, [r3, #4]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003122:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003124:	2300      	movs	r3, #0
 8003126:	60fb      	str	r3, [r7, #12]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	60fb      	str	r3, [r7, #12]
 8003130:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2201      	movs	r2, #1
 8003136:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800313e:	f043 0204 	orr.w	r2, r3, #4
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f7ff febe 	bl	8002ec8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800314c:	bf00      	nop
 800314e:	3718      	adds	r7, #24
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}

08003154 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b088      	sub	sp, #32
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a92      	ldr	r2, [pc, #584]	@ (80033b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d101      	bne.n	8003172 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800316e:	4b92      	ldr	r3, [pc, #584]	@ (80033b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003170:	e001      	b.n	8003176 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003172:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a8b      	ldr	r2, [pc, #556]	@ (80033b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d101      	bne.n	8003190 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800318c:	4b8a      	ldr	r3, [pc, #552]	@ (80033b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800318e:	e001      	b.n	8003194 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003190:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80031a0:	d004      	beq.n	80031ac <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	f040 8099 	bne.w	80032de <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	f003 0302 	and.w	r3, r3, #2
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d107      	bne.n	80031c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d002      	beq.n	80031c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f000 f925 	bl	8003410 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80031c6:	69bb      	ldr	r3, [r7, #24]
 80031c8:	f003 0301 	and.w	r3, r3, #1
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d107      	bne.n	80031e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d002      	beq.n	80031e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f000 f9c8 	bl	8003570 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80031e0:	69bb      	ldr	r3, [r7, #24]
 80031e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031e6:	2b40      	cmp	r3, #64	@ 0x40
 80031e8:	d13a      	bne.n	8003260 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	f003 0320 	and.w	r3, r3, #32
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d035      	beq.n	8003260 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a6e      	ldr	r2, [pc, #440]	@ (80033b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d101      	bne.n	8003202 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80031fe:	4b6e      	ldr	r3, [pc, #440]	@ (80033b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003200:	e001      	b.n	8003206 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003202:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003206:	685a      	ldr	r2, [r3, #4]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4969      	ldr	r1, [pc, #420]	@ (80033b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800320e:	428b      	cmp	r3, r1
 8003210:	d101      	bne.n	8003216 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003212:	4b69      	ldr	r3, [pc, #420]	@ (80033b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003214:	e001      	b.n	800321a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003216:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800321a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800321e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	685a      	ldr	r2, [r3, #4]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800322e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003230:	2300      	movs	r3, #0
 8003232:	60fb      	str	r3, [r7, #12]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	68db      	ldr	r3, [r3, #12]
 800323a:	60fb      	str	r3, [r7, #12]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	60fb      	str	r3, [r7, #12]
 8003244:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2201      	movs	r2, #1
 800324a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003252:	f043 0202 	orr.w	r2, r3, #2
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f7ff fe34 	bl	8002ec8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	f003 0308 	and.w	r3, r3, #8
 8003266:	2b08      	cmp	r3, #8
 8003268:	f040 80c3 	bne.w	80033f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	f003 0320 	and.w	r3, r3, #32
 8003272:	2b00      	cmp	r3, #0
 8003274:	f000 80bd 	beq.w	80033f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	685a      	ldr	r2, [r3, #4]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003286:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a49      	ldr	r2, [pc, #292]	@ (80033b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d101      	bne.n	8003296 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003292:	4b49      	ldr	r3, [pc, #292]	@ (80033b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003294:	e001      	b.n	800329a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003296:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800329a:	685a      	ldr	r2, [r3, #4]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4944      	ldr	r1, [pc, #272]	@ (80033b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80032a2:	428b      	cmp	r3, r1
 80032a4:	d101      	bne.n	80032aa <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80032a6:	4b44      	ldr	r3, [pc, #272]	@ (80033b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80032a8:	e001      	b.n	80032ae <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80032aa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80032ae:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80032b2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80032b4:	2300      	movs	r3, #0
 80032b6:	60bb      	str	r3, [r7, #8]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	60bb      	str	r3, [r7, #8]
 80032c0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2201      	movs	r2, #1
 80032c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032ce:	f043 0204 	orr.w	r2, r3, #4
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f7ff fdf6 	bl	8002ec8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80032dc:	e089      	b.n	80033f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80032de:	69bb      	ldr	r3, [r7, #24]
 80032e0:	f003 0302 	and.w	r3, r3, #2
 80032e4:	2b02      	cmp	r3, #2
 80032e6:	d107      	bne.n	80032f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d002      	beq.n	80032f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f000 f8be 	bl	8003474 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	f003 0301 	and.w	r3, r3, #1
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d107      	bne.n	8003312 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003308:	2b00      	cmp	r3, #0
 800330a:	d002      	beq.n	8003312 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f000 f8fd 	bl	800350c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003318:	2b40      	cmp	r3, #64	@ 0x40
 800331a:	d12f      	bne.n	800337c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	f003 0320 	and.w	r3, r3, #32
 8003322:	2b00      	cmp	r3, #0
 8003324:	d02a      	beq.n	800337c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	685a      	ldr	r2, [r3, #4]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003334:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a1e      	ldr	r2, [pc, #120]	@ (80033b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d101      	bne.n	8003344 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003340:	4b1d      	ldr	r3, [pc, #116]	@ (80033b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003342:	e001      	b.n	8003348 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003344:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003348:	685a      	ldr	r2, [r3, #4]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4919      	ldr	r1, [pc, #100]	@ (80033b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003350:	428b      	cmp	r3, r1
 8003352:	d101      	bne.n	8003358 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003354:	4b18      	ldr	r3, [pc, #96]	@ (80033b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003356:	e001      	b.n	800335c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003358:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800335c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003360:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2201      	movs	r2, #1
 8003366:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800336e:	f043 0202 	orr.w	r2, r3, #2
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f7ff fda6 	bl	8002ec8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800337c:	69bb      	ldr	r3, [r7, #24]
 800337e:	f003 0308 	and.w	r3, r3, #8
 8003382:	2b08      	cmp	r3, #8
 8003384:	d136      	bne.n	80033f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	f003 0320 	and.w	r3, r3, #32
 800338c:	2b00      	cmp	r3, #0
 800338e:	d031      	beq.n	80033f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a07      	ldr	r2, [pc, #28]	@ (80033b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d101      	bne.n	800339e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800339a:	4b07      	ldr	r3, [pc, #28]	@ (80033b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800339c:	e001      	b.n	80033a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800339e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80033a2:	685a      	ldr	r2, [r3, #4]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4902      	ldr	r1, [pc, #8]	@ (80033b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80033aa:	428b      	cmp	r3, r1
 80033ac:	d106      	bne.n	80033bc <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80033ae:	4b02      	ldr	r3, [pc, #8]	@ (80033b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80033b0:	e006      	b.n	80033c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80033b2:	bf00      	nop
 80033b4:	40003800 	.word	0x40003800
 80033b8:	40003400 	.word	0x40003400
 80033bc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80033c0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80033c4:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	685a      	ldr	r2, [r3, #4]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80033d4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2201      	movs	r2, #1
 80033da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033e2:	f043 0204 	orr.w	r2, r3, #4
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f7ff fd6c 	bl	8002ec8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80033f0:	e000      	b.n	80033f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80033f2:	bf00      	nop
}
 80033f4:	bf00      	nop
 80033f6:	3720      	adds	r7, #32
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}

080033fc <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b083      	sub	sp, #12
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003404:	bf00      	nop
 8003406:	370c      	adds	r7, #12
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr

08003410 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b082      	sub	sp, #8
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800341c:	1c99      	adds	r1, r3, #2
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	6251      	str	r1, [r2, #36]	@ 0x24
 8003422:	881a      	ldrh	r2, [r3, #0]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800342e:	b29b      	uxth	r3, r3
 8003430:	3b01      	subs	r3, #1
 8003432:	b29a      	uxth	r2, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800343c:	b29b      	uxth	r3, r3
 800343e:	2b00      	cmp	r3, #0
 8003440:	d113      	bne.n	800346a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	685a      	ldr	r2, [r3, #4]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003450:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003456:	b29b      	uxth	r3, r3
 8003458:	2b00      	cmp	r3, #0
 800345a:	d106      	bne.n	800346a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f7ff ffc9 	bl	80033fc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800346a:	bf00      	nop
 800346c:	3708      	adds	r7, #8
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
	...

08003474 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003480:	1c99      	adds	r1, r3, #2
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	6251      	str	r1, [r2, #36]	@ 0x24
 8003486:	8819      	ldrh	r1, [r3, #0]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a1d      	ldr	r2, [pc, #116]	@ (8003504 <I2SEx_TxISR_I2SExt+0x90>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d101      	bne.n	8003496 <I2SEx_TxISR_I2SExt+0x22>
 8003492:	4b1d      	ldr	r3, [pc, #116]	@ (8003508 <I2SEx_TxISR_I2SExt+0x94>)
 8003494:	e001      	b.n	800349a <I2SEx_TxISR_I2SExt+0x26>
 8003496:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800349a:	460a      	mov	r2, r1
 800349c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	3b01      	subs	r3, #1
 80034a6:	b29a      	uxth	r2, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d121      	bne.n	80034fa <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a12      	ldr	r2, [pc, #72]	@ (8003504 <I2SEx_TxISR_I2SExt+0x90>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d101      	bne.n	80034c4 <I2SEx_TxISR_I2SExt+0x50>
 80034c0:	4b11      	ldr	r3, [pc, #68]	@ (8003508 <I2SEx_TxISR_I2SExt+0x94>)
 80034c2:	e001      	b.n	80034c8 <I2SEx_TxISR_I2SExt+0x54>
 80034c4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80034c8:	685a      	ldr	r2, [r3, #4]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	490d      	ldr	r1, [pc, #52]	@ (8003504 <I2SEx_TxISR_I2SExt+0x90>)
 80034d0:	428b      	cmp	r3, r1
 80034d2:	d101      	bne.n	80034d8 <I2SEx_TxISR_I2SExt+0x64>
 80034d4:	4b0c      	ldr	r3, [pc, #48]	@ (8003508 <I2SEx_TxISR_I2SExt+0x94>)
 80034d6:	e001      	b.n	80034dc <I2SEx_TxISR_I2SExt+0x68>
 80034d8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80034dc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80034e0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80034e6:	b29b      	uxth	r3, r3
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d106      	bne.n	80034fa <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2201      	movs	r2, #1
 80034f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f7ff ff81 	bl	80033fc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80034fa:	bf00      	nop
 80034fc:	3708      	adds	r7, #8
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	40003800 	.word	0x40003800
 8003508:	40003400 	.word	0x40003400

0800350c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	68d8      	ldr	r0, [r3, #12]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800351e:	1c99      	adds	r1, r3, #2
 8003520:	687a      	ldr	r2, [r7, #4]
 8003522:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8003524:	b282      	uxth	r2, r0
 8003526:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800352c:	b29b      	uxth	r3, r3
 800352e:	3b01      	subs	r3, #1
 8003530:	b29a      	uxth	r2, r3
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800353a:	b29b      	uxth	r3, r3
 800353c:	2b00      	cmp	r3, #0
 800353e:	d113      	bne.n	8003568 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	685a      	ldr	r2, [r3, #4]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800354e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003554:	b29b      	uxth	r3, r3
 8003556:	2b00      	cmp	r3, #0
 8003558:	d106      	bne.n	8003568 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2201      	movs	r2, #1
 800355e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f7ff ff4a 	bl	80033fc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003568:	bf00      	nop
 800356a:	3708      	adds	r7, #8
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}

08003570 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b082      	sub	sp, #8
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a20      	ldr	r2, [pc, #128]	@ (8003600 <I2SEx_RxISR_I2SExt+0x90>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d101      	bne.n	8003586 <I2SEx_RxISR_I2SExt+0x16>
 8003582:	4b20      	ldr	r3, [pc, #128]	@ (8003604 <I2SEx_RxISR_I2SExt+0x94>)
 8003584:	e001      	b.n	800358a <I2SEx_RxISR_I2SExt+0x1a>
 8003586:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800358a:	68d8      	ldr	r0, [r3, #12]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003590:	1c99      	adds	r1, r3, #2
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8003596:	b282      	uxth	r2, r0
 8003598:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800359e:	b29b      	uxth	r3, r3
 80035a0:	3b01      	subs	r3, #1
 80035a2:	b29a      	uxth	r2, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d121      	bne.n	80035f6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a12      	ldr	r2, [pc, #72]	@ (8003600 <I2SEx_RxISR_I2SExt+0x90>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d101      	bne.n	80035c0 <I2SEx_RxISR_I2SExt+0x50>
 80035bc:	4b11      	ldr	r3, [pc, #68]	@ (8003604 <I2SEx_RxISR_I2SExt+0x94>)
 80035be:	e001      	b.n	80035c4 <I2SEx_RxISR_I2SExt+0x54>
 80035c0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80035c4:	685a      	ldr	r2, [r3, #4]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	490d      	ldr	r1, [pc, #52]	@ (8003600 <I2SEx_RxISR_I2SExt+0x90>)
 80035cc:	428b      	cmp	r3, r1
 80035ce:	d101      	bne.n	80035d4 <I2SEx_RxISR_I2SExt+0x64>
 80035d0:	4b0c      	ldr	r3, [pc, #48]	@ (8003604 <I2SEx_RxISR_I2SExt+0x94>)
 80035d2:	e001      	b.n	80035d8 <I2SEx_RxISR_I2SExt+0x68>
 80035d4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80035d8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80035dc:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d106      	bne.n	80035f6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f7ff ff03 	bl	80033fc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80035f6:	bf00      	nop
 80035f8:	3708      	adds	r7, #8
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	40003800 	.word	0x40003800
 8003604:	40003400 	.word	0x40003400

08003608 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b086      	sub	sp, #24
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d101      	bne.n	800361a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e267      	b.n	8003aea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0301 	and.w	r3, r3, #1
 8003622:	2b00      	cmp	r3, #0
 8003624:	d075      	beq.n	8003712 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003626:	4b88      	ldr	r3, [pc, #544]	@ (8003848 <HAL_RCC_OscConfig+0x240>)
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	f003 030c 	and.w	r3, r3, #12
 800362e:	2b04      	cmp	r3, #4
 8003630:	d00c      	beq.n	800364c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003632:	4b85      	ldr	r3, [pc, #532]	@ (8003848 <HAL_RCC_OscConfig+0x240>)
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800363a:	2b08      	cmp	r3, #8
 800363c:	d112      	bne.n	8003664 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800363e:	4b82      	ldr	r3, [pc, #520]	@ (8003848 <HAL_RCC_OscConfig+0x240>)
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003646:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800364a:	d10b      	bne.n	8003664 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800364c:	4b7e      	ldr	r3, [pc, #504]	@ (8003848 <HAL_RCC_OscConfig+0x240>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003654:	2b00      	cmp	r3, #0
 8003656:	d05b      	beq.n	8003710 <HAL_RCC_OscConfig+0x108>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d157      	bne.n	8003710 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e242      	b.n	8003aea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800366c:	d106      	bne.n	800367c <HAL_RCC_OscConfig+0x74>
 800366e:	4b76      	ldr	r3, [pc, #472]	@ (8003848 <HAL_RCC_OscConfig+0x240>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a75      	ldr	r2, [pc, #468]	@ (8003848 <HAL_RCC_OscConfig+0x240>)
 8003674:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003678:	6013      	str	r3, [r2, #0]
 800367a:	e01d      	b.n	80036b8 <HAL_RCC_OscConfig+0xb0>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003684:	d10c      	bne.n	80036a0 <HAL_RCC_OscConfig+0x98>
 8003686:	4b70      	ldr	r3, [pc, #448]	@ (8003848 <HAL_RCC_OscConfig+0x240>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a6f      	ldr	r2, [pc, #444]	@ (8003848 <HAL_RCC_OscConfig+0x240>)
 800368c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003690:	6013      	str	r3, [r2, #0]
 8003692:	4b6d      	ldr	r3, [pc, #436]	@ (8003848 <HAL_RCC_OscConfig+0x240>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a6c      	ldr	r2, [pc, #432]	@ (8003848 <HAL_RCC_OscConfig+0x240>)
 8003698:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800369c:	6013      	str	r3, [r2, #0]
 800369e:	e00b      	b.n	80036b8 <HAL_RCC_OscConfig+0xb0>
 80036a0:	4b69      	ldr	r3, [pc, #420]	@ (8003848 <HAL_RCC_OscConfig+0x240>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a68      	ldr	r2, [pc, #416]	@ (8003848 <HAL_RCC_OscConfig+0x240>)
 80036a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036aa:	6013      	str	r3, [r2, #0]
 80036ac:	4b66      	ldr	r3, [pc, #408]	@ (8003848 <HAL_RCC_OscConfig+0x240>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a65      	ldr	r2, [pc, #404]	@ (8003848 <HAL_RCC_OscConfig+0x240>)
 80036b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80036b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d013      	beq.n	80036e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036c0:	f7fd ffc8 	bl	8001654 <HAL_GetTick>
 80036c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036c6:	e008      	b.n	80036da <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036c8:	f7fd ffc4 	bl	8001654 <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	2b64      	cmp	r3, #100	@ 0x64
 80036d4:	d901      	bls.n	80036da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	e207      	b.n	8003aea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036da:	4b5b      	ldr	r3, [pc, #364]	@ (8003848 <HAL_RCC_OscConfig+0x240>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d0f0      	beq.n	80036c8 <HAL_RCC_OscConfig+0xc0>
 80036e6:	e014      	b.n	8003712 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036e8:	f7fd ffb4 	bl	8001654 <HAL_GetTick>
 80036ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036ee:	e008      	b.n	8003702 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036f0:	f7fd ffb0 	bl	8001654 <HAL_GetTick>
 80036f4:	4602      	mov	r2, r0
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	2b64      	cmp	r3, #100	@ 0x64
 80036fc:	d901      	bls.n	8003702 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e1f3      	b.n	8003aea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003702:	4b51      	ldr	r3, [pc, #324]	@ (8003848 <HAL_RCC_OscConfig+0x240>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d1f0      	bne.n	80036f0 <HAL_RCC_OscConfig+0xe8>
 800370e:	e000      	b.n	8003712 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003710:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0302 	and.w	r3, r3, #2
 800371a:	2b00      	cmp	r3, #0
 800371c:	d063      	beq.n	80037e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800371e:	4b4a      	ldr	r3, [pc, #296]	@ (8003848 <HAL_RCC_OscConfig+0x240>)
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	f003 030c 	and.w	r3, r3, #12
 8003726:	2b00      	cmp	r3, #0
 8003728:	d00b      	beq.n	8003742 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800372a:	4b47      	ldr	r3, [pc, #284]	@ (8003848 <HAL_RCC_OscConfig+0x240>)
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003732:	2b08      	cmp	r3, #8
 8003734:	d11c      	bne.n	8003770 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003736:	4b44      	ldr	r3, [pc, #272]	@ (8003848 <HAL_RCC_OscConfig+0x240>)
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d116      	bne.n	8003770 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003742:	4b41      	ldr	r3, [pc, #260]	@ (8003848 <HAL_RCC_OscConfig+0x240>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0302 	and.w	r3, r3, #2
 800374a:	2b00      	cmp	r3, #0
 800374c:	d005      	beq.n	800375a <HAL_RCC_OscConfig+0x152>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	2b01      	cmp	r3, #1
 8003754:	d001      	beq.n	800375a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e1c7      	b.n	8003aea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800375a:	4b3b      	ldr	r3, [pc, #236]	@ (8003848 <HAL_RCC_OscConfig+0x240>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	691b      	ldr	r3, [r3, #16]
 8003766:	00db      	lsls	r3, r3, #3
 8003768:	4937      	ldr	r1, [pc, #220]	@ (8003848 <HAL_RCC_OscConfig+0x240>)
 800376a:	4313      	orrs	r3, r2
 800376c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800376e:	e03a      	b.n	80037e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d020      	beq.n	80037ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003778:	4b34      	ldr	r3, [pc, #208]	@ (800384c <HAL_RCC_OscConfig+0x244>)
 800377a:	2201      	movs	r2, #1
 800377c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800377e:	f7fd ff69 	bl	8001654 <HAL_GetTick>
 8003782:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003784:	e008      	b.n	8003798 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003786:	f7fd ff65 	bl	8001654 <HAL_GetTick>
 800378a:	4602      	mov	r2, r0
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	2b02      	cmp	r3, #2
 8003792:	d901      	bls.n	8003798 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003794:	2303      	movs	r3, #3
 8003796:	e1a8      	b.n	8003aea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003798:	4b2b      	ldr	r3, [pc, #172]	@ (8003848 <HAL_RCC_OscConfig+0x240>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0302 	and.w	r3, r3, #2
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d0f0      	beq.n	8003786 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037a4:	4b28      	ldr	r3, [pc, #160]	@ (8003848 <HAL_RCC_OscConfig+0x240>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	691b      	ldr	r3, [r3, #16]
 80037b0:	00db      	lsls	r3, r3, #3
 80037b2:	4925      	ldr	r1, [pc, #148]	@ (8003848 <HAL_RCC_OscConfig+0x240>)
 80037b4:	4313      	orrs	r3, r2
 80037b6:	600b      	str	r3, [r1, #0]
 80037b8:	e015      	b.n	80037e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037ba:	4b24      	ldr	r3, [pc, #144]	@ (800384c <HAL_RCC_OscConfig+0x244>)
 80037bc:	2200      	movs	r2, #0
 80037be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037c0:	f7fd ff48 	bl	8001654 <HAL_GetTick>
 80037c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037c6:	e008      	b.n	80037da <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037c8:	f7fd ff44 	bl	8001654 <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	2b02      	cmp	r3, #2
 80037d4:	d901      	bls.n	80037da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	e187      	b.n	8003aea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037da:	4b1b      	ldr	r3, [pc, #108]	@ (8003848 <HAL_RCC_OscConfig+0x240>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 0302 	and.w	r3, r3, #2
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d1f0      	bne.n	80037c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 0308 	and.w	r3, r3, #8
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d036      	beq.n	8003860 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	695b      	ldr	r3, [r3, #20]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d016      	beq.n	8003828 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037fa:	4b15      	ldr	r3, [pc, #84]	@ (8003850 <HAL_RCC_OscConfig+0x248>)
 80037fc:	2201      	movs	r2, #1
 80037fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003800:	f7fd ff28 	bl	8001654 <HAL_GetTick>
 8003804:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003806:	e008      	b.n	800381a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003808:	f7fd ff24 	bl	8001654 <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	2b02      	cmp	r3, #2
 8003814:	d901      	bls.n	800381a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e167      	b.n	8003aea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800381a:	4b0b      	ldr	r3, [pc, #44]	@ (8003848 <HAL_RCC_OscConfig+0x240>)
 800381c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800381e:	f003 0302 	and.w	r3, r3, #2
 8003822:	2b00      	cmp	r3, #0
 8003824:	d0f0      	beq.n	8003808 <HAL_RCC_OscConfig+0x200>
 8003826:	e01b      	b.n	8003860 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003828:	4b09      	ldr	r3, [pc, #36]	@ (8003850 <HAL_RCC_OscConfig+0x248>)
 800382a:	2200      	movs	r2, #0
 800382c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800382e:	f7fd ff11 	bl	8001654 <HAL_GetTick>
 8003832:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003834:	e00e      	b.n	8003854 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003836:	f7fd ff0d 	bl	8001654 <HAL_GetTick>
 800383a:	4602      	mov	r2, r0
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	2b02      	cmp	r3, #2
 8003842:	d907      	bls.n	8003854 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003844:	2303      	movs	r3, #3
 8003846:	e150      	b.n	8003aea <HAL_RCC_OscConfig+0x4e2>
 8003848:	40023800 	.word	0x40023800
 800384c:	42470000 	.word	0x42470000
 8003850:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003854:	4b88      	ldr	r3, [pc, #544]	@ (8003a78 <HAL_RCC_OscConfig+0x470>)
 8003856:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003858:	f003 0302 	and.w	r3, r3, #2
 800385c:	2b00      	cmp	r3, #0
 800385e:	d1ea      	bne.n	8003836 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0304 	and.w	r3, r3, #4
 8003868:	2b00      	cmp	r3, #0
 800386a:	f000 8097 	beq.w	800399c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800386e:	2300      	movs	r3, #0
 8003870:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003872:	4b81      	ldr	r3, [pc, #516]	@ (8003a78 <HAL_RCC_OscConfig+0x470>)
 8003874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003876:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d10f      	bne.n	800389e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800387e:	2300      	movs	r3, #0
 8003880:	60bb      	str	r3, [r7, #8]
 8003882:	4b7d      	ldr	r3, [pc, #500]	@ (8003a78 <HAL_RCC_OscConfig+0x470>)
 8003884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003886:	4a7c      	ldr	r2, [pc, #496]	@ (8003a78 <HAL_RCC_OscConfig+0x470>)
 8003888:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800388c:	6413      	str	r3, [r2, #64]	@ 0x40
 800388e:	4b7a      	ldr	r3, [pc, #488]	@ (8003a78 <HAL_RCC_OscConfig+0x470>)
 8003890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003892:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003896:	60bb      	str	r3, [r7, #8]
 8003898:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800389a:	2301      	movs	r3, #1
 800389c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800389e:	4b77      	ldr	r3, [pc, #476]	@ (8003a7c <HAL_RCC_OscConfig+0x474>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d118      	bne.n	80038dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038aa:	4b74      	ldr	r3, [pc, #464]	@ (8003a7c <HAL_RCC_OscConfig+0x474>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a73      	ldr	r2, [pc, #460]	@ (8003a7c <HAL_RCC_OscConfig+0x474>)
 80038b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038b6:	f7fd fecd 	bl	8001654 <HAL_GetTick>
 80038ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038bc:	e008      	b.n	80038d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038be:	f7fd fec9 	bl	8001654 <HAL_GetTick>
 80038c2:	4602      	mov	r2, r0
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	1ad3      	subs	r3, r2, r3
 80038c8:	2b02      	cmp	r3, #2
 80038ca:	d901      	bls.n	80038d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80038cc:	2303      	movs	r3, #3
 80038ce:	e10c      	b.n	8003aea <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038d0:	4b6a      	ldr	r3, [pc, #424]	@ (8003a7c <HAL_RCC_OscConfig+0x474>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d0f0      	beq.n	80038be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d106      	bne.n	80038f2 <HAL_RCC_OscConfig+0x2ea>
 80038e4:	4b64      	ldr	r3, [pc, #400]	@ (8003a78 <HAL_RCC_OscConfig+0x470>)
 80038e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038e8:	4a63      	ldr	r2, [pc, #396]	@ (8003a78 <HAL_RCC_OscConfig+0x470>)
 80038ea:	f043 0301 	orr.w	r3, r3, #1
 80038ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80038f0:	e01c      	b.n	800392c <HAL_RCC_OscConfig+0x324>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	2b05      	cmp	r3, #5
 80038f8:	d10c      	bne.n	8003914 <HAL_RCC_OscConfig+0x30c>
 80038fa:	4b5f      	ldr	r3, [pc, #380]	@ (8003a78 <HAL_RCC_OscConfig+0x470>)
 80038fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038fe:	4a5e      	ldr	r2, [pc, #376]	@ (8003a78 <HAL_RCC_OscConfig+0x470>)
 8003900:	f043 0304 	orr.w	r3, r3, #4
 8003904:	6713      	str	r3, [r2, #112]	@ 0x70
 8003906:	4b5c      	ldr	r3, [pc, #368]	@ (8003a78 <HAL_RCC_OscConfig+0x470>)
 8003908:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800390a:	4a5b      	ldr	r2, [pc, #364]	@ (8003a78 <HAL_RCC_OscConfig+0x470>)
 800390c:	f043 0301 	orr.w	r3, r3, #1
 8003910:	6713      	str	r3, [r2, #112]	@ 0x70
 8003912:	e00b      	b.n	800392c <HAL_RCC_OscConfig+0x324>
 8003914:	4b58      	ldr	r3, [pc, #352]	@ (8003a78 <HAL_RCC_OscConfig+0x470>)
 8003916:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003918:	4a57      	ldr	r2, [pc, #348]	@ (8003a78 <HAL_RCC_OscConfig+0x470>)
 800391a:	f023 0301 	bic.w	r3, r3, #1
 800391e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003920:	4b55      	ldr	r3, [pc, #340]	@ (8003a78 <HAL_RCC_OscConfig+0x470>)
 8003922:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003924:	4a54      	ldr	r2, [pc, #336]	@ (8003a78 <HAL_RCC_OscConfig+0x470>)
 8003926:	f023 0304 	bic.w	r3, r3, #4
 800392a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d015      	beq.n	8003960 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003934:	f7fd fe8e 	bl	8001654 <HAL_GetTick>
 8003938:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800393a:	e00a      	b.n	8003952 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800393c:	f7fd fe8a 	bl	8001654 <HAL_GetTick>
 8003940:	4602      	mov	r2, r0
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	f241 3288 	movw	r2, #5000	@ 0x1388
 800394a:	4293      	cmp	r3, r2
 800394c:	d901      	bls.n	8003952 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e0cb      	b.n	8003aea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003952:	4b49      	ldr	r3, [pc, #292]	@ (8003a78 <HAL_RCC_OscConfig+0x470>)
 8003954:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003956:	f003 0302 	and.w	r3, r3, #2
 800395a:	2b00      	cmp	r3, #0
 800395c:	d0ee      	beq.n	800393c <HAL_RCC_OscConfig+0x334>
 800395e:	e014      	b.n	800398a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003960:	f7fd fe78 	bl	8001654 <HAL_GetTick>
 8003964:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003966:	e00a      	b.n	800397e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003968:	f7fd fe74 	bl	8001654 <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003976:	4293      	cmp	r3, r2
 8003978:	d901      	bls.n	800397e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	e0b5      	b.n	8003aea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800397e:	4b3e      	ldr	r3, [pc, #248]	@ (8003a78 <HAL_RCC_OscConfig+0x470>)
 8003980:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003982:	f003 0302 	and.w	r3, r3, #2
 8003986:	2b00      	cmp	r3, #0
 8003988:	d1ee      	bne.n	8003968 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800398a:	7dfb      	ldrb	r3, [r7, #23]
 800398c:	2b01      	cmp	r3, #1
 800398e:	d105      	bne.n	800399c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003990:	4b39      	ldr	r3, [pc, #228]	@ (8003a78 <HAL_RCC_OscConfig+0x470>)
 8003992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003994:	4a38      	ldr	r2, [pc, #224]	@ (8003a78 <HAL_RCC_OscConfig+0x470>)
 8003996:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800399a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	699b      	ldr	r3, [r3, #24]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	f000 80a1 	beq.w	8003ae8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80039a6:	4b34      	ldr	r3, [pc, #208]	@ (8003a78 <HAL_RCC_OscConfig+0x470>)
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	f003 030c 	and.w	r3, r3, #12
 80039ae:	2b08      	cmp	r3, #8
 80039b0:	d05c      	beq.n	8003a6c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	699b      	ldr	r3, [r3, #24]
 80039b6:	2b02      	cmp	r3, #2
 80039b8:	d141      	bne.n	8003a3e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039ba:	4b31      	ldr	r3, [pc, #196]	@ (8003a80 <HAL_RCC_OscConfig+0x478>)
 80039bc:	2200      	movs	r2, #0
 80039be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039c0:	f7fd fe48 	bl	8001654 <HAL_GetTick>
 80039c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039c6:	e008      	b.n	80039da <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039c8:	f7fd fe44 	bl	8001654 <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	d901      	bls.n	80039da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e087      	b.n	8003aea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039da:	4b27      	ldr	r3, [pc, #156]	@ (8003a78 <HAL_RCC_OscConfig+0x470>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d1f0      	bne.n	80039c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	69da      	ldr	r2, [r3, #28]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6a1b      	ldr	r3, [r3, #32]
 80039ee:	431a      	orrs	r2, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039f4:	019b      	lsls	r3, r3, #6
 80039f6:	431a      	orrs	r2, r3
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039fc:	085b      	lsrs	r3, r3, #1
 80039fe:	3b01      	subs	r3, #1
 8003a00:	041b      	lsls	r3, r3, #16
 8003a02:	431a      	orrs	r2, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a08:	061b      	lsls	r3, r3, #24
 8003a0a:	491b      	ldr	r1, [pc, #108]	@ (8003a78 <HAL_RCC_OscConfig+0x470>)
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a10:	4b1b      	ldr	r3, [pc, #108]	@ (8003a80 <HAL_RCC_OscConfig+0x478>)
 8003a12:	2201      	movs	r2, #1
 8003a14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a16:	f7fd fe1d 	bl	8001654 <HAL_GetTick>
 8003a1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a1c:	e008      	b.n	8003a30 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a1e:	f7fd fe19 	bl	8001654 <HAL_GetTick>
 8003a22:	4602      	mov	r2, r0
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	2b02      	cmp	r3, #2
 8003a2a:	d901      	bls.n	8003a30 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	e05c      	b.n	8003aea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a30:	4b11      	ldr	r3, [pc, #68]	@ (8003a78 <HAL_RCC_OscConfig+0x470>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d0f0      	beq.n	8003a1e <HAL_RCC_OscConfig+0x416>
 8003a3c:	e054      	b.n	8003ae8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a3e:	4b10      	ldr	r3, [pc, #64]	@ (8003a80 <HAL_RCC_OscConfig+0x478>)
 8003a40:	2200      	movs	r2, #0
 8003a42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a44:	f7fd fe06 	bl	8001654 <HAL_GetTick>
 8003a48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a4a:	e008      	b.n	8003a5e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a4c:	f7fd fe02 	bl	8001654 <HAL_GetTick>
 8003a50:	4602      	mov	r2, r0
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	2b02      	cmp	r3, #2
 8003a58:	d901      	bls.n	8003a5e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	e045      	b.n	8003aea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a5e:	4b06      	ldr	r3, [pc, #24]	@ (8003a78 <HAL_RCC_OscConfig+0x470>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d1f0      	bne.n	8003a4c <HAL_RCC_OscConfig+0x444>
 8003a6a:	e03d      	b.n	8003ae8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	699b      	ldr	r3, [r3, #24]
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d107      	bne.n	8003a84 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e038      	b.n	8003aea <HAL_RCC_OscConfig+0x4e2>
 8003a78:	40023800 	.word	0x40023800
 8003a7c:	40007000 	.word	0x40007000
 8003a80:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a84:	4b1b      	ldr	r3, [pc, #108]	@ (8003af4 <HAL_RCC_OscConfig+0x4ec>)
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	699b      	ldr	r3, [r3, #24]
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d028      	beq.n	8003ae4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d121      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d11a      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003aae:	68fa      	ldr	r2, [r7, #12]
 8003ab0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	687a      	ldr	r2, [r7, #4]
 8003ab8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003aba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d111      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aca:	085b      	lsrs	r3, r3, #1
 8003acc:	3b01      	subs	r3, #1
 8003ace:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d107      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ade:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d001      	beq.n	8003ae8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e000      	b.n	8003aea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003ae8:	2300      	movs	r3, #0
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3718      	adds	r7, #24
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	40023800 	.word	0x40023800

08003af8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b084      	sub	sp, #16
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d101      	bne.n	8003b0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e0cc      	b.n	8003ca6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b0c:	4b68      	ldr	r3, [pc, #416]	@ (8003cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 0307 	and.w	r3, r3, #7
 8003b14:	683a      	ldr	r2, [r7, #0]
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d90c      	bls.n	8003b34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b1a:	4b65      	ldr	r3, [pc, #404]	@ (8003cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b1c:	683a      	ldr	r2, [r7, #0]
 8003b1e:	b2d2      	uxtb	r2, r2
 8003b20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b22:	4b63      	ldr	r3, [pc, #396]	@ (8003cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0307 	and.w	r3, r3, #7
 8003b2a:	683a      	ldr	r2, [r7, #0]
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d001      	beq.n	8003b34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e0b8      	b.n	8003ca6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 0302 	and.w	r3, r3, #2
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d020      	beq.n	8003b82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 0304 	and.w	r3, r3, #4
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d005      	beq.n	8003b58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b4c:	4b59      	ldr	r3, [pc, #356]	@ (8003cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	4a58      	ldr	r2, [pc, #352]	@ (8003cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b52:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003b56:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0308 	and.w	r3, r3, #8
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d005      	beq.n	8003b70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b64:	4b53      	ldr	r3, [pc, #332]	@ (8003cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	4a52      	ldr	r2, [pc, #328]	@ (8003cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b6a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003b6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b70:	4b50      	ldr	r3, [pc, #320]	@ (8003cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	494d      	ldr	r1, [pc, #308]	@ (8003cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0301 	and.w	r3, r3, #1
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d044      	beq.n	8003c18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d107      	bne.n	8003ba6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b96:	4b47      	ldr	r3, [pc, #284]	@ (8003cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d119      	bne.n	8003bd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e07f      	b.n	8003ca6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d003      	beq.n	8003bb6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bb2:	2b03      	cmp	r3, #3
 8003bb4:	d107      	bne.n	8003bc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bb6:	4b3f      	ldr	r3, [pc, #252]	@ (8003cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d109      	bne.n	8003bd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e06f      	b.n	8003ca6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bc6:	4b3b      	ldr	r3, [pc, #236]	@ (8003cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0302 	and.w	r3, r3, #2
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d101      	bne.n	8003bd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e067      	b.n	8003ca6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bd6:	4b37      	ldr	r3, [pc, #220]	@ (8003cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	f023 0203 	bic.w	r2, r3, #3
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	4934      	ldr	r1, [pc, #208]	@ (8003cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003be4:	4313      	orrs	r3, r2
 8003be6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003be8:	f7fd fd34 	bl	8001654 <HAL_GetTick>
 8003bec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bee:	e00a      	b.n	8003c06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bf0:	f7fd fd30 	bl	8001654 <HAL_GetTick>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d901      	bls.n	8003c06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	e04f      	b.n	8003ca6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c06:	4b2b      	ldr	r3, [pc, #172]	@ (8003cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	f003 020c 	and.w	r2, r3, #12
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d1eb      	bne.n	8003bf0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c18:	4b25      	ldr	r3, [pc, #148]	@ (8003cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0307 	and.w	r3, r3, #7
 8003c20:	683a      	ldr	r2, [r7, #0]
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d20c      	bcs.n	8003c40 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c26:	4b22      	ldr	r3, [pc, #136]	@ (8003cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8003c28:	683a      	ldr	r2, [r7, #0]
 8003c2a:	b2d2      	uxtb	r2, r2
 8003c2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c2e:	4b20      	ldr	r3, [pc, #128]	@ (8003cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0307 	and.w	r3, r3, #7
 8003c36:	683a      	ldr	r2, [r7, #0]
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d001      	beq.n	8003c40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e032      	b.n	8003ca6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 0304 	and.w	r3, r3, #4
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d008      	beq.n	8003c5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c4c:	4b19      	ldr	r3, [pc, #100]	@ (8003cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	4916      	ldr	r1, [pc, #88]	@ (8003cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 0308 	and.w	r3, r3, #8
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d009      	beq.n	8003c7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c6a:	4b12      	ldr	r3, [pc, #72]	@ (8003cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	691b      	ldr	r3, [r3, #16]
 8003c76:	00db      	lsls	r3, r3, #3
 8003c78:	490e      	ldr	r1, [pc, #56]	@ (8003cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003c7e:	f000 f821 	bl	8003cc4 <HAL_RCC_GetSysClockFreq>
 8003c82:	4602      	mov	r2, r0
 8003c84:	4b0b      	ldr	r3, [pc, #44]	@ (8003cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	091b      	lsrs	r3, r3, #4
 8003c8a:	f003 030f 	and.w	r3, r3, #15
 8003c8e:	490a      	ldr	r1, [pc, #40]	@ (8003cb8 <HAL_RCC_ClockConfig+0x1c0>)
 8003c90:	5ccb      	ldrb	r3, [r1, r3]
 8003c92:	fa22 f303 	lsr.w	r3, r2, r3
 8003c96:	4a09      	ldr	r2, [pc, #36]	@ (8003cbc <HAL_RCC_ClockConfig+0x1c4>)
 8003c98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003c9a:	4b09      	ldr	r3, [pc, #36]	@ (8003cc0 <HAL_RCC_ClockConfig+0x1c8>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f7fd fc94 	bl	80015cc <HAL_InitTick>

  return HAL_OK;
 8003ca4:	2300      	movs	r3, #0
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3710      	adds	r7, #16
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	40023c00 	.word	0x40023c00
 8003cb4:	40023800 	.word	0x40023800
 8003cb8:	080049d0 	.word	0x080049d0
 8003cbc:	20000008 	.word	0x20000008
 8003cc0:	2000000c 	.word	0x2000000c

08003cc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cc8:	b090      	sub	sp, #64	@ 0x40
 8003cca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003cdc:	4b59      	ldr	r3, [pc, #356]	@ (8003e44 <HAL_RCC_GetSysClockFreq+0x180>)
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	f003 030c 	and.w	r3, r3, #12
 8003ce4:	2b08      	cmp	r3, #8
 8003ce6:	d00d      	beq.n	8003d04 <HAL_RCC_GetSysClockFreq+0x40>
 8003ce8:	2b08      	cmp	r3, #8
 8003cea:	f200 80a1 	bhi.w	8003e30 <HAL_RCC_GetSysClockFreq+0x16c>
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d002      	beq.n	8003cf8 <HAL_RCC_GetSysClockFreq+0x34>
 8003cf2:	2b04      	cmp	r3, #4
 8003cf4:	d003      	beq.n	8003cfe <HAL_RCC_GetSysClockFreq+0x3a>
 8003cf6:	e09b      	b.n	8003e30 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003cf8:	4b53      	ldr	r3, [pc, #332]	@ (8003e48 <HAL_RCC_GetSysClockFreq+0x184>)
 8003cfa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003cfc:	e09b      	b.n	8003e36 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003cfe:	4b53      	ldr	r3, [pc, #332]	@ (8003e4c <HAL_RCC_GetSysClockFreq+0x188>)
 8003d00:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003d02:	e098      	b.n	8003e36 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d04:	4b4f      	ldr	r3, [pc, #316]	@ (8003e44 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003d0c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d0e:	4b4d      	ldr	r3, [pc, #308]	@ (8003e44 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d028      	beq.n	8003d6c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d1a:	4b4a      	ldr	r3, [pc, #296]	@ (8003e44 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	099b      	lsrs	r3, r3, #6
 8003d20:	2200      	movs	r2, #0
 8003d22:	623b      	str	r3, [r7, #32]
 8003d24:	627a      	str	r2, [r7, #36]	@ 0x24
 8003d26:	6a3b      	ldr	r3, [r7, #32]
 8003d28:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003d2c:	2100      	movs	r1, #0
 8003d2e:	4b47      	ldr	r3, [pc, #284]	@ (8003e4c <HAL_RCC_GetSysClockFreq+0x188>)
 8003d30:	fb03 f201 	mul.w	r2, r3, r1
 8003d34:	2300      	movs	r3, #0
 8003d36:	fb00 f303 	mul.w	r3, r0, r3
 8003d3a:	4413      	add	r3, r2
 8003d3c:	4a43      	ldr	r2, [pc, #268]	@ (8003e4c <HAL_RCC_GetSysClockFreq+0x188>)
 8003d3e:	fba0 1202 	umull	r1, r2, r0, r2
 8003d42:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003d44:	460a      	mov	r2, r1
 8003d46:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003d48:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d4a:	4413      	add	r3, r2
 8003d4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d50:	2200      	movs	r2, #0
 8003d52:	61bb      	str	r3, [r7, #24]
 8003d54:	61fa      	str	r2, [r7, #28]
 8003d56:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d5a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003d5e:	f7fc fd71 	bl	8000844 <__aeabi_uldivmod>
 8003d62:	4602      	mov	r2, r0
 8003d64:	460b      	mov	r3, r1
 8003d66:	4613      	mov	r3, r2
 8003d68:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d6a:	e053      	b.n	8003e14 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d6c:	4b35      	ldr	r3, [pc, #212]	@ (8003e44 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	099b      	lsrs	r3, r3, #6
 8003d72:	2200      	movs	r2, #0
 8003d74:	613b      	str	r3, [r7, #16]
 8003d76:	617a      	str	r2, [r7, #20]
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003d7e:	f04f 0b00 	mov.w	fp, #0
 8003d82:	4652      	mov	r2, sl
 8003d84:	465b      	mov	r3, fp
 8003d86:	f04f 0000 	mov.w	r0, #0
 8003d8a:	f04f 0100 	mov.w	r1, #0
 8003d8e:	0159      	lsls	r1, r3, #5
 8003d90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d94:	0150      	lsls	r0, r2, #5
 8003d96:	4602      	mov	r2, r0
 8003d98:	460b      	mov	r3, r1
 8003d9a:	ebb2 080a 	subs.w	r8, r2, sl
 8003d9e:	eb63 090b 	sbc.w	r9, r3, fp
 8003da2:	f04f 0200 	mov.w	r2, #0
 8003da6:	f04f 0300 	mov.w	r3, #0
 8003daa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003dae:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003db2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003db6:	ebb2 0408 	subs.w	r4, r2, r8
 8003dba:	eb63 0509 	sbc.w	r5, r3, r9
 8003dbe:	f04f 0200 	mov.w	r2, #0
 8003dc2:	f04f 0300 	mov.w	r3, #0
 8003dc6:	00eb      	lsls	r3, r5, #3
 8003dc8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003dcc:	00e2      	lsls	r2, r4, #3
 8003dce:	4614      	mov	r4, r2
 8003dd0:	461d      	mov	r5, r3
 8003dd2:	eb14 030a 	adds.w	r3, r4, sl
 8003dd6:	603b      	str	r3, [r7, #0]
 8003dd8:	eb45 030b 	adc.w	r3, r5, fp
 8003ddc:	607b      	str	r3, [r7, #4]
 8003dde:	f04f 0200 	mov.w	r2, #0
 8003de2:	f04f 0300 	mov.w	r3, #0
 8003de6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003dea:	4629      	mov	r1, r5
 8003dec:	028b      	lsls	r3, r1, #10
 8003dee:	4621      	mov	r1, r4
 8003df0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003df4:	4621      	mov	r1, r4
 8003df6:	028a      	lsls	r2, r1, #10
 8003df8:	4610      	mov	r0, r2
 8003dfa:	4619      	mov	r1, r3
 8003dfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dfe:	2200      	movs	r2, #0
 8003e00:	60bb      	str	r3, [r7, #8]
 8003e02:	60fa      	str	r2, [r7, #12]
 8003e04:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e08:	f7fc fd1c 	bl	8000844 <__aeabi_uldivmod>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	460b      	mov	r3, r1
 8003e10:	4613      	mov	r3, r2
 8003e12:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003e14:	4b0b      	ldr	r3, [pc, #44]	@ (8003e44 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	0c1b      	lsrs	r3, r3, #16
 8003e1a:	f003 0303 	and.w	r3, r3, #3
 8003e1e:	3301      	adds	r3, #1
 8003e20:	005b      	lsls	r3, r3, #1
 8003e22:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003e24:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003e26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e2c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003e2e:	e002      	b.n	8003e36 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e30:	4b05      	ldr	r3, [pc, #20]	@ (8003e48 <HAL_RCC_GetSysClockFreq+0x184>)
 8003e32:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003e34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3740      	adds	r7, #64	@ 0x40
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e42:	bf00      	nop
 8003e44:	40023800 	.word	0x40023800
 8003e48:	00f42400 	.word	0x00f42400
 8003e4c:	017d7840 	.word	0x017d7840

08003e50 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b086      	sub	sp, #24
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 0301 	and.w	r3, r3, #1
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d105      	bne.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d038      	beq.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003e78:	4b68      	ldr	r3, [pc, #416]	@ (800401c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003e7e:	f7fd fbe9 	bl	8001654 <HAL_GetTick>
 8003e82:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e84:	e008      	b.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003e86:	f7fd fbe5 	bl	8001654 <HAL_GetTick>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d901      	bls.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e94:	2303      	movs	r3, #3
 8003e96:	e0bd      	b.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e98:	4b61      	ldr	r3, [pc, #388]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d1f0      	bne.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	685a      	ldr	r2, [r3, #4]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	019b      	lsls	r3, r3, #6
 8003eae:	431a      	orrs	r2, r3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	071b      	lsls	r3, r3, #28
 8003eb6:	495a      	ldr	r1, [pc, #360]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003ebe:	4b57      	ldr	r3, [pc, #348]	@ (800401c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003ec4:	f7fd fbc6 	bl	8001654 <HAL_GetTick>
 8003ec8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003eca:	e008      	b.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003ecc:	f7fd fbc2 	bl	8001654 <HAL_GetTick>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	2b02      	cmp	r3, #2
 8003ed8:	d901      	bls.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e09a      	b.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ede:	4b50      	ldr	r3, [pc, #320]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d0f0      	beq.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0302 	and.w	r3, r3, #2
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	f000 8083 	beq.w	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ef8:	2300      	movs	r3, #0
 8003efa:	60fb      	str	r3, [r7, #12]
 8003efc:	4b48      	ldr	r3, [pc, #288]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f00:	4a47      	ldr	r2, [pc, #284]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f06:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f08:	4b45      	ldr	r3, [pc, #276]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f10:	60fb      	str	r3, [r7, #12]
 8003f12:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003f14:	4b43      	ldr	r3, [pc, #268]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a42      	ldr	r2, [pc, #264]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003f1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f1e:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003f20:	f7fd fb98 	bl	8001654 <HAL_GetTick>
 8003f24:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003f26:	e008      	b.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f28:	f7fd fb94 	bl	8001654 <HAL_GetTick>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	2b02      	cmp	r3, #2
 8003f34:	d901      	bls.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8003f36:	2303      	movs	r3, #3
 8003f38:	e06c      	b.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003f3a:	4b3a      	ldr	r3, [pc, #232]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d0f0      	beq.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f46:	4b36      	ldr	r3, [pc, #216]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f4e:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d02f      	beq.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	691b      	ldr	r3, [r3, #16]
 8003f5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f5e:	693a      	ldr	r2, [r7, #16]
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d028      	beq.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f64:	4b2e      	ldr	r3, [pc, #184]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f68:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f6c:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f6e:	4b2e      	ldr	r3, [pc, #184]	@ (8004028 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003f70:	2201      	movs	r2, #1
 8003f72:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f74:	4b2c      	ldr	r3, [pc, #176]	@ (8004028 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003f76:	2200      	movs	r2, #0
 8003f78:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003f7a:	4a29      	ldr	r2, [pc, #164]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003f80:	4b27      	ldr	r3, [pc, #156]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f84:	f003 0301 	and.w	r3, r3, #1
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d114      	bne.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003f8c:	f7fd fb62 	bl	8001654 <HAL_GetTick>
 8003f90:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f92:	e00a      	b.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f94:	f7fd fb5e 	bl	8001654 <HAL_GetTick>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d901      	bls.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8003fa6:	2303      	movs	r3, #3
 8003fa8:	e034      	b.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003faa:	4b1d      	ldr	r3, [pc, #116]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fae:	f003 0302 	and.w	r3, r3, #2
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d0ee      	beq.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	691b      	ldr	r3, [r3, #16]
 8003fba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fbe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003fc2:	d10d      	bne.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8003fc4:	4b16      	ldr	r3, [pc, #88]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	691b      	ldr	r3, [r3, #16]
 8003fd0:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003fd4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003fd8:	4911      	ldr	r1, [pc, #68]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	608b      	str	r3, [r1, #8]
 8003fde:	e005      	b.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8003fe0:	4b0f      	ldr	r3, [pc, #60]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	4a0e      	ldr	r2, [pc, #56]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fe6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003fea:	6093      	str	r3, [r2, #8]
 8003fec:	4b0c      	ldr	r3, [pc, #48]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fee:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	691b      	ldr	r3, [r3, #16]
 8003ff4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ff8:	4909      	ldr	r1, [pc, #36]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 0308 	and.w	r3, r3, #8
 8004006:	2b00      	cmp	r3, #0
 8004008:	d003      	beq.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	7d1a      	ldrb	r2, [r3, #20]
 800400e:	4b07      	ldr	r3, [pc, #28]	@ (800402c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004010:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004012:	2300      	movs	r3, #0
}
 8004014:	4618      	mov	r0, r3
 8004016:	3718      	adds	r7, #24
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}
 800401c:	42470068 	.word	0x42470068
 8004020:	40023800 	.word	0x40023800
 8004024:	40007000 	.word	0x40007000
 8004028:	42470e40 	.word	0x42470e40
 800402c:	424711e0 	.word	0x424711e0

08004030 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004030:	b480      	push	{r7}
 8004032:	b087      	sub	sp, #28
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004038:	2300      	movs	r3, #0
 800403a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800403c:	2300      	movs	r3, #0
 800403e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004040:	2300      	movs	r3, #0
 8004042:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004044:	2300      	movs	r3, #0
 8004046:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2b01      	cmp	r3, #1
 800404c:	d141      	bne.n	80040d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800404e:	4b25      	ldr	r3, [pc, #148]	@ (80040e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004056:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d006      	beq.n	800406c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004064:	d131      	bne.n	80040ca <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004066:	4b20      	ldr	r3, [pc, #128]	@ (80040e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004068:	617b      	str	r3, [r7, #20]
          break;
 800406a:	e031      	b.n	80040d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800406c:	4b1d      	ldr	r3, [pc, #116]	@ (80040e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004074:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004078:	d109      	bne.n	800408e <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800407a:	4b1a      	ldr	r3, [pc, #104]	@ (80040e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800407c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004080:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004084:	4a19      	ldr	r2, [pc, #100]	@ (80040ec <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004086:	fbb2 f3f3 	udiv	r3, r2, r3
 800408a:	613b      	str	r3, [r7, #16]
 800408c:	e008      	b.n	80040a0 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800408e:	4b15      	ldr	r3, [pc, #84]	@ (80040e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004090:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004094:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004098:	4a15      	ldr	r2, [pc, #84]	@ (80040f0 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 800409a:	fbb2 f3f3 	udiv	r3, r2, r3
 800409e:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80040a0:	4b10      	ldr	r3, [pc, #64]	@ (80040e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80040a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040a6:	099b      	lsrs	r3, r3, #6
 80040a8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	fb02 f303 	mul.w	r3, r2, r3
 80040b2:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80040b4:	4b0b      	ldr	r3, [pc, #44]	@ (80040e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80040b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040ba:	0f1b      	lsrs	r3, r3, #28
 80040bc:	f003 0307 	and.w	r3, r3, #7
 80040c0:	68ba      	ldr	r2, [r7, #8]
 80040c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80040c6:	617b      	str	r3, [r7, #20]
          break;
 80040c8:	e002      	b.n	80040d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 80040ca:	2300      	movs	r3, #0
 80040cc:	617b      	str	r3, [r7, #20]
          break;
 80040ce:	bf00      	nop
        }
      }
      break;
 80040d0:	e000      	b.n	80040d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
    }
    default:
    {
      break;
 80040d2:	bf00      	nop
    }
  }
  return frequency;
 80040d4:	697b      	ldr	r3, [r7, #20]
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	371c      	adds	r7, #28
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr
 80040e2:	bf00      	nop
 80040e4:	40023800 	.word	0x40023800
 80040e8:	00bb8000 	.word	0x00bb8000
 80040ec:	017d7840 	.word	0x017d7840
 80040f0:	00f42400 	.word	0x00f42400

080040f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b082      	sub	sp, #8
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d101      	bne.n	8004106 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e041      	b.n	800418a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800410c:	b2db      	uxtb	r3, r3
 800410e:	2b00      	cmp	r3, #0
 8004110:	d106      	bne.n	8004120 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f7fd f9e4 	bl	80014e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2202      	movs	r2, #2
 8004124:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	3304      	adds	r3, #4
 8004130:	4619      	mov	r1, r3
 8004132:	4610      	mov	r0, r2
 8004134:	f000 fa72 	bl	800461c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2201      	movs	r2, #1
 8004154:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2201      	movs	r2, #1
 8004164:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2201      	movs	r2, #1
 8004174:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2201      	movs	r2, #1
 800417c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004188:	2300      	movs	r3, #0
}
 800418a:	4618      	mov	r0, r3
 800418c:	3708      	adds	r7, #8
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
	...

08004194 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004194:	b480      	push	{r7}
 8004196:	b085      	sub	sp, #20
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d001      	beq.n	80041ac <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e03c      	b.n	8004226 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2202      	movs	r2, #2
 80041b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a1e      	ldr	r2, [pc, #120]	@ (8004234 <HAL_TIM_Base_Start+0xa0>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d018      	beq.n	80041f0 <HAL_TIM_Base_Start+0x5c>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041c6:	d013      	beq.n	80041f0 <HAL_TIM_Base_Start+0x5c>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a1a      	ldr	r2, [pc, #104]	@ (8004238 <HAL_TIM_Base_Start+0xa4>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d00e      	beq.n	80041f0 <HAL_TIM_Base_Start+0x5c>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a19      	ldr	r2, [pc, #100]	@ (800423c <HAL_TIM_Base_Start+0xa8>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d009      	beq.n	80041f0 <HAL_TIM_Base_Start+0x5c>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a17      	ldr	r2, [pc, #92]	@ (8004240 <HAL_TIM_Base_Start+0xac>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d004      	beq.n	80041f0 <HAL_TIM_Base_Start+0x5c>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a16      	ldr	r2, [pc, #88]	@ (8004244 <HAL_TIM_Base_Start+0xb0>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d111      	bne.n	8004214 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	f003 0307 	and.w	r3, r3, #7
 80041fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2b06      	cmp	r3, #6
 8004200:	d010      	beq.n	8004224 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f042 0201 	orr.w	r2, r2, #1
 8004210:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004212:	e007      	b.n	8004224 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f042 0201 	orr.w	r2, r2, #1
 8004222:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004224:	2300      	movs	r3, #0
}
 8004226:	4618      	mov	r0, r3
 8004228:	3714      	adds	r7, #20
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr
 8004232:	bf00      	nop
 8004234:	40010000 	.word	0x40010000
 8004238:	40000400 	.word	0x40000400
 800423c:	40000800 	.word	0x40000800
 8004240:	40000c00 	.word	0x40000c00
 8004244:	40014000 	.word	0x40014000

08004248 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b084      	sub	sp, #16
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	68db      	ldr	r3, [r3, #12]
 8004256:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	691b      	ldr	r3, [r3, #16]
 800425e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	f003 0302 	and.w	r3, r3, #2
 8004266:	2b00      	cmp	r3, #0
 8004268:	d020      	beq.n	80042ac <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	f003 0302 	and.w	r3, r3, #2
 8004270:	2b00      	cmp	r3, #0
 8004272:	d01b      	beq.n	80042ac <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f06f 0202 	mvn.w	r2, #2
 800427c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2201      	movs	r2, #1
 8004282:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	699b      	ldr	r3, [r3, #24]
 800428a:	f003 0303 	and.w	r3, r3, #3
 800428e:	2b00      	cmp	r3, #0
 8004290:	d003      	beq.n	800429a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f000 f9a3 	bl	80045de <HAL_TIM_IC_CaptureCallback>
 8004298:	e005      	b.n	80042a6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f000 f995 	bl	80045ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f000 f9a6 	bl	80045f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	f003 0304 	and.w	r3, r3, #4
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d020      	beq.n	80042f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	f003 0304 	and.w	r3, r3, #4
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d01b      	beq.n	80042f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f06f 0204 	mvn.w	r2, #4
 80042c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2202      	movs	r2, #2
 80042ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	699b      	ldr	r3, [r3, #24]
 80042d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d003      	beq.n	80042e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f000 f97d 	bl	80045de <HAL_TIM_IC_CaptureCallback>
 80042e4:	e005      	b.n	80042f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f000 f96f 	bl	80045ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f000 f980 	bl	80045f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2200      	movs	r2, #0
 80042f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	f003 0308 	and.w	r3, r3, #8
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d020      	beq.n	8004344 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	f003 0308 	and.w	r3, r3, #8
 8004308:	2b00      	cmp	r3, #0
 800430a:	d01b      	beq.n	8004344 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f06f 0208 	mvn.w	r2, #8
 8004314:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2204      	movs	r2, #4
 800431a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	69db      	ldr	r3, [r3, #28]
 8004322:	f003 0303 	and.w	r3, r3, #3
 8004326:	2b00      	cmp	r3, #0
 8004328:	d003      	beq.n	8004332 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f000 f957 	bl	80045de <HAL_TIM_IC_CaptureCallback>
 8004330:	e005      	b.n	800433e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f000 f949 	bl	80045ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f000 f95a 	bl	80045f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	f003 0310 	and.w	r3, r3, #16
 800434a:	2b00      	cmp	r3, #0
 800434c:	d020      	beq.n	8004390 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f003 0310 	and.w	r3, r3, #16
 8004354:	2b00      	cmp	r3, #0
 8004356:	d01b      	beq.n	8004390 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f06f 0210 	mvn.w	r2, #16
 8004360:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2208      	movs	r2, #8
 8004366:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	69db      	ldr	r3, [r3, #28]
 800436e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004372:	2b00      	cmp	r3, #0
 8004374:	d003      	beq.n	800437e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f000 f931 	bl	80045de <HAL_TIM_IC_CaptureCallback>
 800437c:	e005      	b.n	800438a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f000 f923 	bl	80045ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f000 f934 	bl	80045f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	f003 0301 	and.w	r3, r3, #1
 8004396:	2b00      	cmp	r3, #0
 8004398:	d00c      	beq.n	80043b4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	f003 0301 	and.w	r3, r3, #1
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d007      	beq.n	80043b4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f06f 0201 	mvn.w	r2, #1
 80043ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f000 f901 	bl	80045b6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d00c      	beq.n	80043d8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d007      	beq.n	80043d8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80043d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f000 faba 	bl	800494c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d00c      	beq.n	80043fc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d007      	beq.n	80043fc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80043f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f000 f905 	bl	8004606 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	f003 0320 	and.w	r3, r3, #32
 8004402:	2b00      	cmp	r3, #0
 8004404:	d00c      	beq.n	8004420 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	f003 0320 	and.w	r3, r3, #32
 800440c:	2b00      	cmp	r3, #0
 800440e:	d007      	beq.n	8004420 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f06f 0220 	mvn.w	r2, #32
 8004418:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f000 fa8c 	bl	8004938 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004420:	bf00      	nop
 8004422:	3710      	adds	r7, #16
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}

08004428 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b084      	sub	sp, #16
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004432:	2300      	movs	r3, #0
 8004434:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800443c:	2b01      	cmp	r3, #1
 800443e:	d101      	bne.n	8004444 <HAL_TIM_ConfigClockSource+0x1c>
 8004440:	2302      	movs	r3, #2
 8004442:	e0b4      	b.n	80045ae <HAL_TIM_ConfigClockSource+0x186>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2201      	movs	r2, #1
 8004448:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2202      	movs	r2, #2
 8004450:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004462:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800446a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	68ba      	ldr	r2, [r7, #8]
 8004472:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800447c:	d03e      	beq.n	80044fc <HAL_TIM_ConfigClockSource+0xd4>
 800447e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004482:	f200 8087 	bhi.w	8004594 <HAL_TIM_ConfigClockSource+0x16c>
 8004486:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800448a:	f000 8086 	beq.w	800459a <HAL_TIM_ConfigClockSource+0x172>
 800448e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004492:	d87f      	bhi.n	8004594 <HAL_TIM_ConfigClockSource+0x16c>
 8004494:	2b70      	cmp	r3, #112	@ 0x70
 8004496:	d01a      	beq.n	80044ce <HAL_TIM_ConfigClockSource+0xa6>
 8004498:	2b70      	cmp	r3, #112	@ 0x70
 800449a:	d87b      	bhi.n	8004594 <HAL_TIM_ConfigClockSource+0x16c>
 800449c:	2b60      	cmp	r3, #96	@ 0x60
 800449e:	d050      	beq.n	8004542 <HAL_TIM_ConfigClockSource+0x11a>
 80044a0:	2b60      	cmp	r3, #96	@ 0x60
 80044a2:	d877      	bhi.n	8004594 <HAL_TIM_ConfigClockSource+0x16c>
 80044a4:	2b50      	cmp	r3, #80	@ 0x50
 80044a6:	d03c      	beq.n	8004522 <HAL_TIM_ConfigClockSource+0xfa>
 80044a8:	2b50      	cmp	r3, #80	@ 0x50
 80044aa:	d873      	bhi.n	8004594 <HAL_TIM_ConfigClockSource+0x16c>
 80044ac:	2b40      	cmp	r3, #64	@ 0x40
 80044ae:	d058      	beq.n	8004562 <HAL_TIM_ConfigClockSource+0x13a>
 80044b0:	2b40      	cmp	r3, #64	@ 0x40
 80044b2:	d86f      	bhi.n	8004594 <HAL_TIM_ConfigClockSource+0x16c>
 80044b4:	2b30      	cmp	r3, #48	@ 0x30
 80044b6:	d064      	beq.n	8004582 <HAL_TIM_ConfigClockSource+0x15a>
 80044b8:	2b30      	cmp	r3, #48	@ 0x30
 80044ba:	d86b      	bhi.n	8004594 <HAL_TIM_ConfigClockSource+0x16c>
 80044bc:	2b20      	cmp	r3, #32
 80044be:	d060      	beq.n	8004582 <HAL_TIM_ConfigClockSource+0x15a>
 80044c0:	2b20      	cmp	r3, #32
 80044c2:	d867      	bhi.n	8004594 <HAL_TIM_ConfigClockSource+0x16c>
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d05c      	beq.n	8004582 <HAL_TIM_ConfigClockSource+0x15a>
 80044c8:	2b10      	cmp	r3, #16
 80044ca:	d05a      	beq.n	8004582 <HAL_TIM_ConfigClockSource+0x15a>
 80044cc:	e062      	b.n	8004594 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80044de:	f000 f99d 	bl	800481c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80044f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	68ba      	ldr	r2, [r7, #8]
 80044f8:	609a      	str	r2, [r3, #8]
      break;
 80044fa:	e04f      	b.n	800459c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800450c:	f000 f986 	bl	800481c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	689a      	ldr	r2, [r3, #8]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800451e:	609a      	str	r2, [r3, #8]
      break;
 8004520:	e03c      	b.n	800459c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800452e:	461a      	mov	r2, r3
 8004530:	f000 f8fa 	bl	8004728 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	2150      	movs	r1, #80	@ 0x50
 800453a:	4618      	mov	r0, r3
 800453c:	f000 f953 	bl	80047e6 <TIM_ITRx_SetConfig>
      break;
 8004540:	e02c      	b.n	800459c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800454e:	461a      	mov	r2, r3
 8004550:	f000 f919 	bl	8004786 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	2160      	movs	r1, #96	@ 0x60
 800455a:	4618      	mov	r0, r3
 800455c:	f000 f943 	bl	80047e6 <TIM_ITRx_SetConfig>
      break;
 8004560:	e01c      	b.n	800459c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800456e:	461a      	mov	r2, r3
 8004570:	f000 f8da 	bl	8004728 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	2140      	movs	r1, #64	@ 0x40
 800457a:	4618      	mov	r0, r3
 800457c:	f000 f933 	bl	80047e6 <TIM_ITRx_SetConfig>
      break;
 8004580:	e00c      	b.n	800459c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4619      	mov	r1, r3
 800458c:	4610      	mov	r0, r2
 800458e:	f000 f92a 	bl	80047e6 <TIM_ITRx_SetConfig>
      break;
 8004592:	e003      	b.n	800459c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	73fb      	strb	r3, [r7, #15]
      break;
 8004598:	e000      	b.n	800459c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800459a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2201      	movs	r2, #1
 80045a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80045ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3710      	adds	r7, #16
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}

080045b6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80045b6:	b480      	push	{r7}
 80045b8:	b083      	sub	sp, #12
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80045be:	bf00      	nop
 80045c0:	370c      	adds	r7, #12
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr

080045ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80045ca:	b480      	push	{r7}
 80045cc:	b083      	sub	sp, #12
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80045d2:	bf00      	nop
 80045d4:	370c      	adds	r7, #12
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr

080045de <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80045de:	b480      	push	{r7}
 80045e0:	b083      	sub	sp, #12
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80045e6:	bf00      	nop
 80045e8:	370c      	adds	r7, #12
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr

080045f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80045f2:	b480      	push	{r7}
 80045f4:	b083      	sub	sp, #12
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80045fa:	bf00      	nop
 80045fc:	370c      	adds	r7, #12
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr

08004606 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004606:	b480      	push	{r7}
 8004608:	b083      	sub	sp, #12
 800460a:	af00      	add	r7, sp, #0
 800460c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800460e:	bf00      	nop
 8004610:	370c      	adds	r7, #12
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr
	...

0800461c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800461c:	b480      	push	{r7}
 800461e:	b085      	sub	sp, #20
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	4a37      	ldr	r2, [pc, #220]	@ (800470c <TIM_Base_SetConfig+0xf0>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d00f      	beq.n	8004654 <TIM_Base_SetConfig+0x38>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800463a:	d00b      	beq.n	8004654 <TIM_Base_SetConfig+0x38>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	4a34      	ldr	r2, [pc, #208]	@ (8004710 <TIM_Base_SetConfig+0xf4>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d007      	beq.n	8004654 <TIM_Base_SetConfig+0x38>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	4a33      	ldr	r2, [pc, #204]	@ (8004714 <TIM_Base_SetConfig+0xf8>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d003      	beq.n	8004654 <TIM_Base_SetConfig+0x38>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	4a32      	ldr	r2, [pc, #200]	@ (8004718 <TIM_Base_SetConfig+0xfc>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d108      	bne.n	8004666 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800465a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	68fa      	ldr	r2, [r7, #12]
 8004662:	4313      	orrs	r3, r2
 8004664:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4a28      	ldr	r2, [pc, #160]	@ (800470c <TIM_Base_SetConfig+0xf0>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d01b      	beq.n	80046a6 <TIM_Base_SetConfig+0x8a>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004674:	d017      	beq.n	80046a6 <TIM_Base_SetConfig+0x8a>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4a25      	ldr	r2, [pc, #148]	@ (8004710 <TIM_Base_SetConfig+0xf4>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d013      	beq.n	80046a6 <TIM_Base_SetConfig+0x8a>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	4a24      	ldr	r2, [pc, #144]	@ (8004714 <TIM_Base_SetConfig+0xf8>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d00f      	beq.n	80046a6 <TIM_Base_SetConfig+0x8a>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	4a23      	ldr	r2, [pc, #140]	@ (8004718 <TIM_Base_SetConfig+0xfc>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d00b      	beq.n	80046a6 <TIM_Base_SetConfig+0x8a>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4a22      	ldr	r2, [pc, #136]	@ (800471c <TIM_Base_SetConfig+0x100>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d007      	beq.n	80046a6 <TIM_Base_SetConfig+0x8a>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4a21      	ldr	r2, [pc, #132]	@ (8004720 <TIM_Base_SetConfig+0x104>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d003      	beq.n	80046a6 <TIM_Base_SetConfig+0x8a>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4a20      	ldr	r2, [pc, #128]	@ (8004724 <TIM_Base_SetConfig+0x108>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d108      	bne.n	80046b8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	68fa      	ldr	r2, [r7, #12]
 80046b4:	4313      	orrs	r3, r2
 80046b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	695b      	ldr	r3, [r3, #20]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	689a      	ldr	r2, [r3, #8]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4a0c      	ldr	r2, [pc, #48]	@ (800470c <TIM_Base_SetConfig+0xf0>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d103      	bne.n	80046e6 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	691a      	ldr	r2, [r3, #16]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f043 0204 	orr.w	r2, r3, #4
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2201      	movs	r2, #1
 80046f6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	68fa      	ldr	r2, [r7, #12]
 80046fc:	601a      	str	r2, [r3, #0]
}
 80046fe:	bf00      	nop
 8004700:	3714      	adds	r7, #20
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr
 800470a:	bf00      	nop
 800470c:	40010000 	.word	0x40010000
 8004710:	40000400 	.word	0x40000400
 8004714:	40000800 	.word	0x40000800
 8004718:	40000c00 	.word	0x40000c00
 800471c:	40014000 	.word	0x40014000
 8004720:	40014400 	.word	0x40014400
 8004724:	40014800 	.word	0x40014800

08004728 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004728:	b480      	push	{r7}
 800472a:	b087      	sub	sp, #28
 800472c:	af00      	add	r7, sp, #0
 800472e:	60f8      	str	r0, [r7, #12]
 8004730:	60b9      	str	r1, [r7, #8]
 8004732:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	6a1b      	ldr	r3, [r3, #32]
 8004738:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	6a1b      	ldr	r3, [r3, #32]
 800473e:	f023 0201 	bic.w	r2, r3, #1
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	699b      	ldr	r3, [r3, #24]
 800474a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004752:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	011b      	lsls	r3, r3, #4
 8004758:	693a      	ldr	r2, [r7, #16]
 800475a:	4313      	orrs	r3, r2
 800475c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	f023 030a 	bic.w	r3, r3, #10
 8004764:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004766:	697a      	ldr	r2, [r7, #20]
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	4313      	orrs	r3, r2
 800476c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	693a      	ldr	r2, [r7, #16]
 8004772:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	697a      	ldr	r2, [r7, #20]
 8004778:	621a      	str	r2, [r3, #32]
}
 800477a:	bf00      	nop
 800477c:	371c      	adds	r7, #28
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr

08004786 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004786:	b480      	push	{r7}
 8004788:	b087      	sub	sp, #28
 800478a:	af00      	add	r7, sp, #0
 800478c:	60f8      	str	r0, [r7, #12]
 800478e:	60b9      	str	r1, [r7, #8]
 8004790:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	6a1b      	ldr	r3, [r3, #32]
 8004796:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6a1b      	ldr	r3, [r3, #32]
 800479c:	f023 0210 	bic.w	r2, r3, #16
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	699b      	ldr	r3, [r3, #24]
 80047a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80047b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	031b      	lsls	r3, r3, #12
 80047b6:	693a      	ldr	r2, [r7, #16]
 80047b8:	4313      	orrs	r3, r2
 80047ba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80047c2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	011b      	lsls	r3, r3, #4
 80047c8:	697a      	ldr	r2, [r7, #20]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	693a      	ldr	r2, [r7, #16]
 80047d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	697a      	ldr	r2, [r7, #20]
 80047d8:	621a      	str	r2, [r3, #32]
}
 80047da:	bf00      	nop
 80047dc:	371c      	adds	r7, #28
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr

080047e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80047e6:	b480      	push	{r7}
 80047e8:	b085      	sub	sp, #20
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	6078      	str	r0, [r7, #4]
 80047ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80047fe:	683a      	ldr	r2, [r7, #0]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	4313      	orrs	r3, r2
 8004804:	f043 0307 	orr.w	r3, r3, #7
 8004808:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	68fa      	ldr	r2, [r7, #12]
 800480e:	609a      	str	r2, [r3, #8]
}
 8004810:	bf00      	nop
 8004812:	3714      	adds	r7, #20
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr

0800481c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800481c:	b480      	push	{r7}
 800481e:	b087      	sub	sp, #28
 8004820:	af00      	add	r7, sp, #0
 8004822:	60f8      	str	r0, [r7, #12]
 8004824:	60b9      	str	r1, [r7, #8]
 8004826:	607a      	str	r2, [r7, #4]
 8004828:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004836:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	021a      	lsls	r2, r3, #8
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	431a      	orrs	r2, r3
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	4313      	orrs	r3, r2
 8004844:	697a      	ldr	r2, [r7, #20]
 8004846:	4313      	orrs	r3, r2
 8004848:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	697a      	ldr	r2, [r7, #20]
 800484e:	609a      	str	r2, [r3, #8]
}
 8004850:	bf00      	nop
 8004852:	371c      	adds	r7, #28
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr

0800485c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800485c:	b480      	push	{r7}
 800485e:	b085      	sub	sp, #20
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800486c:	2b01      	cmp	r3, #1
 800486e:	d101      	bne.n	8004874 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004870:	2302      	movs	r3, #2
 8004872:	e050      	b.n	8004916 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2201      	movs	r2, #1
 8004878:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2202      	movs	r2, #2
 8004880:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800489a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	68fa      	ldr	r2, [r7, #12]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	68fa      	ldr	r2, [r7, #12]
 80048ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a1c      	ldr	r2, [pc, #112]	@ (8004924 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d018      	beq.n	80048ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048c0:	d013      	beq.n	80048ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a18      	ldr	r2, [pc, #96]	@ (8004928 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d00e      	beq.n	80048ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a16      	ldr	r2, [pc, #88]	@ (800492c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d009      	beq.n	80048ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a15      	ldr	r2, [pc, #84]	@ (8004930 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d004      	beq.n	80048ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a13      	ldr	r2, [pc, #76]	@ (8004934 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d10c      	bne.n	8004904 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80048f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	68ba      	ldr	r2, [r7, #8]
 80048f8:	4313      	orrs	r3, r2
 80048fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	68ba      	ldr	r2, [r7, #8]
 8004902:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2201      	movs	r2, #1
 8004908:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004914:	2300      	movs	r3, #0
}
 8004916:	4618      	mov	r0, r3
 8004918:	3714      	adds	r7, #20
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr
 8004922:	bf00      	nop
 8004924:	40010000 	.word	0x40010000
 8004928:	40000400 	.word	0x40000400
 800492c:	40000800 	.word	0x40000800
 8004930:	40000c00 	.word	0x40000c00
 8004934:	40014000 	.word	0x40014000

08004938 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004938:	b480      	push	{r7}
 800493a:	b083      	sub	sp, #12
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004940:	bf00      	nop
 8004942:	370c      	adds	r7, #12
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr

0800494c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800494c:	b480      	push	{r7}
 800494e:	b083      	sub	sp, #12
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004954:	bf00      	nop
 8004956:	370c      	adds	r7, #12
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr

08004960 <memset>:
 8004960:	4402      	add	r2, r0
 8004962:	4603      	mov	r3, r0
 8004964:	4293      	cmp	r3, r2
 8004966:	d100      	bne.n	800496a <memset+0xa>
 8004968:	4770      	bx	lr
 800496a:	f803 1b01 	strb.w	r1, [r3], #1
 800496e:	e7f9      	b.n	8004964 <memset+0x4>

08004970 <__libc_init_array>:
 8004970:	b570      	push	{r4, r5, r6, lr}
 8004972:	4d0d      	ldr	r5, [pc, #52]	@ (80049a8 <__libc_init_array+0x38>)
 8004974:	4c0d      	ldr	r4, [pc, #52]	@ (80049ac <__libc_init_array+0x3c>)
 8004976:	1b64      	subs	r4, r4, r5
 8004978:	10a4      	asrs	r4, r4, #2
 800497a:	2600      	movs	r6, #0
 800497c:	42a6      	cmp	r6, r4
 800497e:	d109      	bne.n	8004994 <__libc_init_array+0x24>
 8004980:	4d0b      	ldr	r5, [pc, #44]	@ (80049b0 <__libc_init_array+0x40>)
 8004982:	4c0c      	ldr	r4, [pc, #48]	@ (80049b4 <__libc_init_array+0x44>)
 8004984:	f000 f818 	bl	80049b8 <_init>
 8004988:	1b64      	subs	r4, r4, r5
 800498a:	10a4      	asrs	r4, r4, #2
 800498c:	2600      	movs	r6, #0
 800498e:	42a6      	cmp	r6, r4
 8004990:	d105      	bne.n	800499e <__libc_init_array+0x2e>
 8004992:	bd70      	pop	{r4, r5, r6, pc}
 8004994:	f855 3b04 	ldr.w	r3, [r5], #4
 8004998:	4798      	blx	r3
 800499a:	3601      	adds	r6, #1
 800499c:	e7ee      	b.n	800497c <__libc_init_array+0xc>
 800499e:	f855 3b04 	ldr.w	r3, [r5], #4
 80049a2:	4798      	blx	r3
 80049a4:	3601      	adds	r6, #1
 80049a6:	e7f2      	b.n	800498e <__libc_init_array+0x1e>
 80049a8:	080049f0 	.word	0x080049f0
 80049ac:	080049f0 	.word	0x080049f0
 80049b0:	080049f0 	.word	0x080049f0
 80049b4:	080049f4 	.word	0x080049f4

080049b8 <_init>:
 80049b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049ba:	bf00      	nop
 80049bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049be:	bc08      	pop	{r3}
 80049c0:	469e      	mov	lr, r3
 80049c2:	4770      	bx	lr

080049c4 <_fini>:
 80049c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049c6:	bf00      	nop
 80049c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049ca:	bc08      	pop	{r3}
 80049cc:	469e      	mov	lr, r3
 80049ce:	4770      	bx	lr
