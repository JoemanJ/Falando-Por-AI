
Falando por AI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fe8  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08005180  08005180  00006180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005238  08005238  00007018  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005238  08005238  00006238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005240  08005240  00007018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005240  08005240  00006240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005244  08005244  00006244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  08005248  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006560  20000018  08005260  00007018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006578  08005260  00007578  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fd6a  00000000  00000000  00007048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fcf  00000000  00000000  00016db2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f18  00000000  00000000  00019d88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b7e  00000000  00000000  0001aca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000192f9  00000000  00000000  0001b81e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012b03  00000000  00000000  00034b17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ade5  00000000  00000000  0004761a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e23ff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c48  00000000  00000000  000e2444  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000040  00000000  00000000  000e608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000018 	.word	0x20000018
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005168 	.word	0x08005168

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000001c 	.word	0x2000001c
 80001d4:	08005168 	.word	0x08005168

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001ec:	f000 b988 	b.w	8000500 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	468e      	mov	lr, r1
 8000210:	4604      	mov	r4, r0
 8000212:	4688      	mov	r8, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d962      	bls.n	80002e4 <__udivmoddi4+0xdc>
 800021e:	fab2 f682 	clz	r6, r2
 8000222:	b14e      	cbz	r6, 8000238 <__udivmoddi4+0x30>
 8000224:	f1c6 0320 	rsb	r3, r6, #32
 8000228:	fa01 f806 	lsl.w	r8, r1, r6
 800022c:	fa20 f303 	lsr.w	r3, r0, r3
 8000230:	40b7      	lsls	r7, r6
 8000232:	ea43 0808 	orr.w	r8, r3, r8
 8000236:	40b4      	lsls	r4, r6
 8000238:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800023c:	fa1f fc87 	uxth.w	ip, r7
 8000240:	fbb8 f1fe 	udiv	r1, r8, lr
 8000244:	0c23      	lsrs	r3, r4, #16
 8000246:	fb0e 8811 	mls	r8, lr, r1, r8
 800024a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024e:	fb01 f20c 	mul.w	r2, r1, ip
 8000252:	429a      	cmp	r2, r3
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0x62>
 8000256:	18fb      	adds	r3, r7, r3
 8000258:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800025c:	f080 80ea 	bcs.w	8000434 <__udivmoddi4+0x22c>
 8000260:	429a      	cmp	r2, r3
 8000262:	f240 80e7 	bls.w	8000434 <__udivmoddi4+0x22c>
 8000266:	3902      	subs	r1, #2
 8000268:	443b      	add	r3, r7
 800026a:	1a9a      	subs	r2, r3, r2
 800026c:	b2a3      	uxth	r3, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800027a:	fb00 fc0c 	mul.w	ip, r0, ip
 800027e:	459c      	cmp	ip, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x8e>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000288:	f080 80d6 	bcs.w	8000438 <__udivmoddi4+0x230>
 800028c:	459c      	cmp	ip, r3
 800028e:	f240 80d3 	bls.w	8000438 <__udivmoddi4+0x230>
 8000292:	443b      	add	r3, r7
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029a:	eba3 030c 	sub.w	r3, r3, ip
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40f3      	lsrs	r3, r6
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xb6>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb0>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa2>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x14c>
 80002c6:	4573      	cmp	r3, lr
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xc8>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 8105 	bhi.w	80004da <__udivmoddi4+0x2d2>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4690      	mov	r8, r2
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e5      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002de:	e9c5 4800 	strd	r4, r8, [r5]
 80002e2:	e7e2      	b.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f000 8090 	beq.w	800040a <__udivmoddi4+0x202>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f040 80a4 	bne.w	800043c <__udivmoddi4+0x234>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	0c03      	lsrs	r3, r0, #16
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	b280      	uxth	r0, r0
 80002fe:	b2bc      	uxth	r4, r7
 8000300:	2101      	movs	r1, #1
 8000302:	fbb2 fcfe 	udiv	ip, r2, lr
 8000306:	fb0e 221c 	mls	r2, lr, ip, r2
 800030a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030e:	fb04 f20c 	mul.w	r2, r4, ip
 8000312:	429a      	cmp	r2, r3
 8000314:	d907      	bls.n	8000326 <__udivmoddi4+0x11e>
 8000316:	18fb      	adds	r3, r7, r3
 8000318:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x11c>
 800031e:	429a      	cmp	r2, r3
 8000320:	f200 80e0 	bhi.w	80004e4 <__udivmoddi4+0x2dc>
 8000324:	46c4      	mov	ip, r8
 8000326:	1a9b      	subs	r3, r3, r2
 8000328:	fbb3 f2fe 	udiv	r2, r3, lr
 800032c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000330:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000334:	fb02 f404 	mul.w	r4, r2, r4
 8000338:	429c      	cmp	r4, r3
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x144>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x142>
 8000344:	429c      	cmp	r4, r3
 8000346:	f200 80ca 	bhi.w	80004de <__udivmoddi4+0x2d6>
 800034a:	4602      	mov	r2, r0
 800034c:	1b1b      	subs	r3, r3, r4
 800034e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x98>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa0e f401 	lsl.w	r4, lr, r1
 8000364:	fa20 f306 	lsr.w	r3, r0, r6
 8000368:	fa2e fe06 	lsr.w	lr, lr, r6
 800036c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	fa1f fc87 	uxth.w	ip, r7
 800037a:	fbbe f0f9 	udiv	r0, lr, r9
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	fb09 ee10 	mls	lr, r9, r0, lr
 8000384:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000388:	fb00 fe0c 	mul.w	lr, r0, ip
 800038c:	45a6      	cmp	lr, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x1a0>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800039a:	f080 809c 	bcs.w	80004d6 <__udivmoddi4+0x2ce>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8099 	bls.w	80004d6 <__udivmoddi4+0x2ce>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 040e 	sub.w	r4, r4, lr
 80003ac:	fa1f fe83 	uxth.w	lr, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c0:	45a4      	cmp	ip, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1ce>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003ca:	f080 8082 	bcs.w	80004d2 <__udivmoddi4+0x2ca>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d97f      	bls.n	80004d2 <__udivmoddi4+0x2ca>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	fba0 ec02 	umull	lr, ip, r0, r2
 80003e2:	4564      	cmp	r4, ip
 80003e4:	4673      	mov	r3, lr
 80003e6:	46e1      	mov	r9, ip
 80003e8:	d362      	bcc.n	80004b0 <__udivmoddi4+0x2a8>
 80003ea:	d05f      	beq.n	80004ac <__udivmoddi4+0x2a4>
 80003ec:	b15d      	cbz	r5, 8000406 <__udivmoddi4+0x1fe>
 80003ee:	ebb8 0203 	subs.w	r2, r8, r3
 80003f2:	eb64 0409 	sbc.w	r4, r4, r9
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	fa22 f301 	lsr.w	r3, r2, r1
 80003fe:	431e      	orrs	r6, r3
 8000400:	40cc      	lsrs	r4, r1
 8000402:	e9c5 6400 	strd	r6, r4, [r5]
 8000406:	2100      	movs	r1, #0
 8000408:	e74f      	b.n	80002aa <__udivmoddi4+0xa2>
 800040a:	fbb1 fcf2 	udiv	ip, r1, r2
 800040e:	0c01      	lsrs	r1, r0, #16
 8000410:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000414:	b280      	uxth	r0, r0
 8000416:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800041a:	463b      	mov	r3, r7
 800041c:	4638      	mov	r0, r7
 800041e:	463c      	mov	r4, r7
 8000420:	46b8      	mov	r8, r7
 8000422:	46be      	mov	lr, r7
 8000424:	2620      	movs	r6, #32
 8000426:	fbb1 f1f7 	udiv	r1, r1, r7
 800042a:	eba2 0208 	sub.w	r2, r2, r8
 800042e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000432:	e766      	b.n	8000302 <__udivmoddi4+0xfa>
 8000434:	4601      	mov	r1, r0
 8000436:	e718      	b.n	800026a <__udivmoddi4+0x62>
 8000438:	4610      	mov	r0, r2
 800043a:	e72c      	b.n	8000296 <__udivmoddi4+0x8e>
 800043c:	f1c6 0220 	rsb	r2, r6, #32
 8000440:	fa2e f302 	lsr.w	r3, lr, r2
 8000444:	40b7      	lsls	r7, r6
 8000446:	40b1      	lsls	r1, r6
 8000448:	fa20 f202 	lsr.w	r2, r0, r2
 800044c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000450:	430a      	orrs	r2, r1
 8000452:	fbb3 f8fe 	udiv	r8, r3, lr
 8000456:	b2bc      	uxth	r4, r7
 8000458:	fb0e 3318 	mls	r3, lr, r8, r3
 800045c:	0c11      	lsrs	r1, r2, #16
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb08 f904 	mul.w	r9, r8, r4
 8000466:	40b0      	lsls	r0, r6
 8000468:	4589      	cmp	r9, r1
 800046a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046e:	b280      	uxth	r0, r0
 8000470:	d93e      	bls.n	80004f0 <__udivmoddi4+0x2e8>
 8000472:	1879      	adds	r1, r7, r1
 8000474:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000478:	d201      	bcs.n	800047e <__udivmoddi4+0x276>
 800047a:	4589      	cmp	r9, r1
 800047c:	d81f      	bhi.n	80004be <__udivmoddi4+0x2b6>
 800047e:	eba1 0109 	sub.w	r1, r1, r9
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fb09 f804 	mul.w	r8, r9, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	b292      	uxth	r2, r2
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	4542      	cmp	r2, r8
 8000496:	d229      	bcs.n	80004ec <__udivmoddi4+0x2e4>
 8000498:	18ba      	adds	r2, r7, r2
 800049a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800049e:	d2c4      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a0:	4542      	cmp	r2, r8
 80004a2:	d2c2      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a4:	f1a9 0102 	sub.w	r1, r9, #2
 80004a8:	443a      	add	r2, r7
 80004aa:	e7be      	b.n	800042a <__udivmoddi4+0x222>
 80004ac:	45f0      	cmp	r8, lr
 80004ae:	d29d      	bcs.n	80003ec <__udivmoddi4+0x1e4>
 80004b0:	ebbe 0302 	subs.w	r3, lr, r2
 80004b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b8:	3801      	subs	r0, #1
 80004ba:	46e1      	mov	r9, ip
 80004bc:	e796      	b.n	80003ec <__udivmoddi4+0x1e4>
 80004be:	eba7 0909 	sub.w	r9, r7, r9
 80004c2:	4449      	add	r1, r9
 80004c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004cc:	fb09 f804 	mul.w	r8, r9, r4
 80004d0:	e7db      	b.n	800048a <__udivmoddi4+0x282>
 80004d2:	4673      	mov	r3, lr
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1ce>
 80004d6:	4650      	mov	r0, sl
 80004d8:	e766      	b.n	80003a8 <__udivmoddi4+0x1a0>
 80004da:	4608      	mov	r0, r1
 80004dc:	e6fd      	b.n	80002da <__udivmoddi4+0xd2>
 80004de:	443b      	add	r3, r7
 80004e0:	3a02      	subs	r2, #2
 80004e2:	e733      	b.n	800034c <__udivmoddi4+0x144>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	443b      	add	r3, r7
 80004ea:	e71c      	b.n	8000326 <__udivmoddi4+0x11e>
 80004ec:	4649      	mov	r1, r9
 80004ee:	e79c      	b.n	800042a <__udivmoddi4+0x222>
 80004f0:	eba1 0109 	sub.w	r1, r1, r9
 80004f4:	46c4      	mov	ip, r8
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fb09 f804 	mul.w	r8, r9, r4
 80004fe:	e7c4      	b.n	800048a <__udivmoddi4+0x282>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <send_to_lcd>:
}
*/
/****************************************************************************************************************************************************************/

void send_to_lcd (char data, int rs)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
 800050a:	4603      	mov	r3, r0
 800050c:	6039      	str	r1, [r7, #0]
 800050e:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, rs);  // rs = 1 for data, rs=0 for command
 8000510:	683b      	ldr	r3, [r7, #0]
 8000512:	b2db      	uxtb	r3, r3
 8000514:	461a      	mov	r2, r3
 8000516:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800051a:	481d      	ldr	r0, [pc, #116]	@ (8000590 <send_to_lcd+0x8c>)
 800051c:	f002 fe72 	bl	8003204 <HAL_GPIO_WritePin>

	/* write the data to the respective pin */
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, ((data>>3)&0x01));
 8000520:	79fb      	ldrb	r3, [r7, #7]
 8000522:	08db      	lsrs	r3, r3, #3
 8000524:	b2db      	uxtb	r3, r3
 8000526:	f003 0301 	and.w	r3, r3, #1
 800052a:	b2db      	uxtb	r3, r3
 800052c:	461a      	mov	r2, r3
 800052e:	2108      	movs	r1, #8
 8000530:	4817      	ldr	r0, [pc, #92]	@ (8000590 <send_to_lcd+0x8c>)
 8000532:	f002 fe67 	bl	8003204 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, ((data>>2)&0x01));
 8000536:	79fb      	ldrb	r3, [r7, #7]
 8000538:	089b      	lsrs	r3, r3, #2
 800053a:	b2db      	uxtb	r3, r3
 800053c:	f003 0301 	and.w	r3, r3, #1
 8000540:	b2db      	uxtb	r3, r3
 8000542:	461a      	mov	r2, r3
 8000544:	2110      	movs	r1, #16
 8000546:	4812      	ldr	r0, [pc, #72]	@ (8000590 <send_to_lcd+0x8c>)
 8000548:	f002 fe5c 	bl	8003204 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, ((data>>1)&0x01));
 800054c:	79fb      	ldrb	r3, [r7, #7]
 800054e:	085b      	lsrs	r3, r3, #1
 8000550:	b2db      	uxtb	r3, r3
 8000552:	f003 0301 	and.w	r3, r3, #1
 8000556:	b2db      	uxtb	r3, r3
 8000558:	461a      	mov	r2, r3
 800055a:	2120      	movs	r1, #32
 800055c:	480c      	ldr	r0, [pc, #48]	@ (8000590 <send_to_lcd+0x8c>)
 800055e:	f002 fe51 	bl	8003204 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, ((data>>0)&0x01));
 8000562:	79fb      	ldrb	r3, [r7, #7]
 8000564:	f003 0301 	and.w	r3, r3, #1
 8000568:	b2db      	uxtb	r3, r3
 800056a:	461a      	mov	r2, r3
 800056c:	2140      	movs	r1, #64	@ 0x40
 800056e:	4808      	ldr	r0, [pc, #32]	@ (8000590 <send_to_lcd+0x8c>)
 8000570:	f002 fe48 	bl	8003204 <HAL_GPIO_WritePin>

	/* Toggle EN PIN to send the data
	 * if the HCLK > 100 MHz, use the  20 us delay
	 * if the LCD still doesn't work, increase the delay to 50, 80 or 100..
	 */
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 1);
 8000574:	2201      	movs	r2, #1
 8000576:	2180      	movs	r1, #128	@ 0x80
 8000578:	4805      	ldr	r0, [pc, #20]	@ (8000590 <send_to_lcd+0x8c>)
 800057a:	f002 fe43 	bl	8003204 <HAL_GPIO_WritePin>
//	HAL_Delay(20);
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 0);
 800057e:	2200      	movs	r2, #0
 8000580:	2180      	movs	r1, #128	@ 0x80
 8000582:	4803      	ldr	r0, [pc, #12]	@ (8000590 <send_to_lcd+0x8c>)
 8000584:	f002 fe3e 	bl	8003204 <HAL_GPIO_WritePin>
//	HAL_Delay(20);
}
 8000588:	bf00      	nop
 800058a:	3708      	adds	r7, #8
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	40020400 	.word	0x40020400

08000594 <lcd_send_cmd>:

void lcd_send_cmd (char cmd)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0
 800059a:	4603      	mov	r3, r0
 800059c:	71fb      	strb	r3, [r7, #7]
    char datatosend;

    /* send upper nibble first */
    datatosend = ((cmd>>4)&0x0f);
 800059e:	79fb      	ldrb	r3, [r7, #7]
 80005a0:	091b      	lsrs	r3, r3, #4
 80005a2:	73fb      	strb	r3, [r7, #15]
    send_to_lcd(datatosend,0);  // RS must be 0 while sending command
 80005a4:	7bfb      	ldrb	r3, [r7, #15]
 80005a6:	2100      	movs	r1, #0
 80005a8:	4618      	mov	r0, r3
 80005aa:	f7ff ffab 	bl	8000504 <send_to_lcd>

    /* send Lower Nibble */
    datatosend = ((cmd)&0x0f);
 80005ae:	79fb      	ldrb	r3, [r7, #7]
 80005b0:	f003 030f 	and.w	r3, r3, #15
 80005b4:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 0);
 80005b6:	7bfb      	ldrb	r3, [r7, #15]
 80005b8:	2100      	movs	r1, #0
 80005ba:	4618      	mov	r0, r3
 80005bc:	f7ff ffa2 	bl	8000504 <send_to_lcd>
}
 80005c0:	bf00      	nop
 80005c2:	3710      	adds	r7, #16
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}

080005c8 <lcd_send_data>:

void lcd_send_data (char data)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b084      	sub	sp, #16
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	4603      	mov	r3, r0
 80005d0:	71fb      	strb	r3, [r7, #7]
	char datatosend;

	/* send higher nibble */
	datatosend = ((data>>4)&0x0f);
 80005d2:	79fb      	ldrb	r3, [r7, #7]
 80005d4:	091b      	lsrs	r3, r3, #4
 80005d6:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);  // rs =1 for sending data
 80005d8:	7bfb      	ldrb	r3, [r7, #15]
 80005da:	2101      	movs	r1, #1
 80005dc:	4618      	mov	r0, r3
 80005de:	f7ff ff91 	bl	8000504 <send_to_lcd>

	/* send Lower nibble */
	datatosend = ((data)&0x0f);
 80005e2:	79fb      	ldrb	r3, [r7, #7]
 80005e4:	f003 030f 	and.w	r3, r3, #15
 80005e8:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);
 80005ea:	7bfb      	ldrb	r3, [r7, #15]
 80005ec:	2101      	movs	r1, #1
 80005ee:	4618      	mov	r0, r3
 80005f0:	f7ff ff88 	bl	8000504 <send_to_lcd>
}
 80005f4:	bf00      	nop
 80005f6:	3710      	adds	r7, #16
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}

080005fc <lcd_put_cur>:
	lcd_send_cmd(0x01);
	HAL_Delay(2);
}

void lcd_put_cur(int row, int col)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
 8000604:	6039      	str	r1, [r7, #0]
    switch (row)
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d003      	beq.n	8000614 <lcd_put_cur+0x18>
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	2b01      	cmp	r3, #1
 8000610:	d005      	beq.n	800061e <lcd_put_cur+0x22>
 8000612:	e009      	b.n	8000628 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000614:	683b      	ldr	r3, [r7, #0]
 8000616:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800061a:	603b      	str	r3, [r7, #0]
            break;
 800061c:	e004      	b.n	8000628 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 800061e:	683b      	ldr	r3, [r7, #0]
 8000620:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000624:	603b      	str	r3, [r7, #0]
            break;
 8000626:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000628:	683b      	ldr	r3, [r7, #0]
 800062a:	b2db      	uxtb	r3, r3
 800062c:	4618      	mov	r0, r3
 800062e:	f7ff ffb1 	bl	8000594 <lcd_send_cmd>
}
 8000632:	bf00      	nop
 8000634:	3708      	adds	r7, #8
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}

0800063a <lcd_init>:


void lcd_init (void)
{
 800063a:	b580      	push	{r7, lr}
 800063c:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 800063e:	2032      	movs	r0, #50	@ 0x32
 8000640:	f001 fbb0 	bl	8001da4 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000644:	2030      	movs	r0, #48	@ 0x30
 8000646:	f7ff ffa5 	bl	8000594 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 800064a:	2005      	movs	r0, #5
 800064c:	f001 fbaa 	bl	8001da4 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000650:	2030      	movs	r0, #48	@ 0x30
 8000652:	f7ff ff9f 	bl	8000594 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000656:	2001      	movs	r0, #1
 8000658:	f001 fba4 	bl	8001da4 <HAL_Delay>
	lcd_send_cmd (0x30);
 800065c:	2030      	movs	r0, #48	@ 0x30
 800065e:	f7ff ff99 	bl	8000594 <lcd_send_cmd>
	HAL_Delay(10);
 8000662:	200a      	movs	r0, #10
 8000664:	f001 fb9e 	bl	8001da4 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000668:	2020      	movs	r0, #32
 800066a:	f7ff ff93 	bl	8000594 <lcd_send_cmd>
	HAL_Delay(10);
 800066e:	200a      	movs	r0, #10
 8000670:	f001 fb98 	bl	8001da4 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000674:	2028      	movs	r0, #40	@ 0x28
 8000676:	f7ff ff8d 	bl	8000594 <lcd_send_cmd>
	HAL_Delay(1);
 800067a:	2001      	movs	r0, #1
 800067c:	f001 fb92 	bl	8001da4 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000680:	2008      	movs	r0, #8
 8000682:	f7ff ff87 	bl	8000594 <lcd_send_cmd>
	HAL_Delay(1);
 8000686:	2001      	movs	r0, #1
 8000688:	f001 fb8c 	bl	8001da4 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 800068c:	2001      	movs	r0, #1
 800068e:	f7ff ff81 	bl	8000594 <lcd_send_cmd>
	HAL_Delay(1);
 8000692:	2001      	movs	r0, #1
 8000694:	f001 fb86 	bl	8001da4 <HAL_Delay>
	HAL_Delay(1);
 8000698:	2001      	movs	r0, #1
 800069a:	f001 fb83 	bl	8001da4 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 800069e:	2006      	movs	r0, #6
 80006a0:	f7ff ff78 	bl	8000594 <lcd_send_cmd>
	HAL_Delay(1);
 80006a4:	2001      	movs	r0, #1
 80006a6:	f001 fb7d 	bl	8001da4 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80006aa:	200c      	movs	r0, #12
 80006ac:	f7ff ff72 	bl	8000594 <lcd_send_cmd>
}
 80006b0:	bf00      	nop
 80006b2:	bd80      	pop	{r7, pc}

080006b4 <lcd_send_string>:

void lcd_send_string (char *str)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80006bc:	e006      	b.n	80006cc <lcd_send_string+0x18>
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	1c5a      	adds	r2, r3, #1
 80006c2:	607a      	str	r2, [r7, #4]
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	4618      	mov	r0, r3
 80006c8:	f7ff ff7e 	bl	80005c8 <lcd_send_data>
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d1f4      	bne.n	80006be <lcd_send_string+0xa>
}
 80006d4:	bf00      	nop
 80006d6:	bf00      	nop
 80006d8:	3708      	adds	r7, #8
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
	...

080006e0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b084      	sub	sp, #16
 80006e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006e6:	463b      	mov	r3, r7
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
 80006ec:	605a      	str	r2, [r3, #4]
 80006ee:	609a      	str	r2, [r3, #8]
 80006f0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006f2:	4b22      	ldr	r3, [pc, #136]	@ (800077c <MX_ADC1_Init+0x9c>)
 80006f4:	4a22      	ldr	r2, [pc, #136]	@ (8000780 <MX_ADC1_Init+0xa0>)
 80006f6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80006f8:	4b20      	ldr	r3, [pc, #128]	@ (800077c <MX_ADC1_Init+0x9c>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006fe:	4b1f      	ldr	r3, [pc, #124]	@ (800077c <MX_ADC1_Init+0x9c>)
 8000700:	2200      	movs	r2, #0
 8000702:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000704:	4b1d      	ldr	r3, [pc, #116]	@ (800077c <MX_ADC1_Init+0x9c>)
 8000706:	2200      	movs	r2, #0
 8000708:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800070a:	4b1c      	ldr	r3, [pc, #112]	@ (800077c <MX_ADC1_Init+0x9c>)
 800070c:	2200      	movs	r2, #0
 800070e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000710:	4b1a      	ldr	r3, [pc, #104]	@ (800077c <MX_ADC1_Init+0x9c>)
 8000712:	2200      	movs	r2, #0
 8000714:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000718:	4b18      	ldr	r3, [pc, #96]	@ (800077c <MX_ADC1_Init+0x9c>)
 800071a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800071e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8000720:	4b16      	ldr	r3, [pc, #88]	@ (800077c <MX_ADC1_Init+0x9c>)
 8000722:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8000726:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000728:	4b14      	ldr	r3, [pc, #80]	@ (800077c <MX_ADC1_Init+0x9c>)
 800072a:	2200      	movs	r2, #0
 800072c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800072e:	4b13      	ldr	r3, [pc, #76]	@ (800077c <MX_ADC1_Init+0x9c>)
 8000730:	2201      	movs	r2, #1
 8000732:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000734:	4b11      	ldr	r3, [pc, #68]	@ (800077c <MX_ADC1_Init+0x9c>)
 8000736:	2201      	movs	r2, #1
 8000738:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800073c:	4b0f      	ldr	r3, [pc, #60]	@ (800077c <MX_ADC1_Init+0x9c>)
 800073e:	2201      	movs	r2, #1
 8000740:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000742:	480e      	ldr	r0, [pc, #56]	@ (800077c <MX_ADC1_Init+0x9c>)
 8000744:	f001 fb52 	bl	8001dec <HAL_ADC_Init>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 800074e:	f001 f807 	bl	8001760 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000752:	2301      	movs	r3, #1
 8000754:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000756:	2301      	movs	r3, #1
 8000758:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800075a:	2300      	movs	r3, #0
 800075c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800075e:	463b      	mov	r3, r7
 8000760:	4619      	mov	r1, r3
 8000762:	4806      	ldr	r0, [pc, #24]	@ (800077c <MX_ADC1_Init+0x9c>)
 8000764:	f001 fc98 	bl	8002098 <HAL_ADC_ConfigChannel>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800076e:	f000 fff7 	bl	8001760 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000772:	bf00      	nop
 8000774:	3710      	adds	r7, #16
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	20000034 	.word	0x20000034
 8000780:	40012000 	.word	0x40012000

08000784 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b08a      	sub	sp, #40	@ 0x28
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078c:	f107 0314 	add.w	r3, r7, #20
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
 8000794:	605a      	str	r2, [r3, #4]
 8000796:	609a      	str	r2, [r3, #8]
 8000798:	60da      	str	r2, [r3, #12]
 800079a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a2e      	ldr	r2, [pc, #184]	@ (800085c <HAL_ADC_MspInit+0xd8>)
 80007a2:	4293      	cmp	r3, r2
 80007a4:	d156      	bne.n	8000854 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	613b      	str	r3, [r7, #16]
 80007aa:	4b2d      	ldr	r3, [pc, #180]	@ (8000860 <HAL_ADC_MspInit+0xdc>)
 80007ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007ae:	4a2c      	ldr	r2, [pc, #176]	@ (8000860 <HAL_ADC_MspInit+0xdc>)
 80007b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80007b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80007b6:	4b2a      	ldr	r3, [pc, #168]	@ (8000860 <HAL_ADC_MspInit+0xdc>)
 80007b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80007be:	613b      	str	r3, [r7, #16]
 80007c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	60fb      	str	r3, [r7, #12]
 80007c6:	4b26      	ldr	r3, [pc, #152]	@ (8000860 <HAL_ADC_MspInit+0xdc>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ca:	4a25      	ldr	r2, [pc, #148]	@ (8000860 <HAL_ADC_MspInit+0xdc>)
 80007cc:	f043 0301 	orr.w	r3, r3, #1
 80007d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007d2:	4b23      	ldr	r3, [pc, #140]	@ (8000860 <HAL_ADC_MspInit+0xdc>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d6:	f003 0301 	and.w	r3, r3, #1
 80007da:	60fb      	str	r3, [r7, #12]
 80007dc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80007de:	2302      	movs	r3, #2
 80007e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007e2:	2303      	movs	r3, #3
 80007e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e6:	2300      	movs	r3, #0
 80007e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ea:	f107 0314 	add.w	r3, r7, #20
 80007ee:	4619      	mov	r1, r3
 80007f0:	481c      	ldr	r0, [pc, #112]	@ (8000864 <HAL_ADC_MspInit+0xe0>)
 80007f2:	f002 fb83 	bl	8002efc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80007f6:	4b1c      	ldr	r3, [pc, #112]	@ (8000868 <HAL_ADC_MspInit+0xe4>)
 80007f8:	4a1c      	ldr	r2, [pc, #112]	@ (800086c <HAL_ADC_MspInit+0xe8>)
 80007fa:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80007fc:	4b1a      	ldr	r3, [pc, #104]	@ (8000868 <HAL_ADC_MspInit+0xe4>)
 80007fe:	2200      	movs	r2, #0
 8000800:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000802:	4b19      	ldr	r3, [pc, #100]	@ (8000868 <HAL_ADC_MspInit+0xe4>)
 8000804:	2200      	movs	r2, #0
 8000806:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000808:	4b17      	ldr	r3, [pc, #92]	@ (8000868 <HAL_ADC_MspInit+0xe4>)
 800080a:	2200      	movs	r2, #0
 800080c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800080e:	4b16      	ldr	r3, [pc, #88]	@ (8000868 <HAL_ADC_MspInit+0xe4>)
 8000810:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000814:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000816:	4b14      	ldr	r3, [pc, #80]	@ (8000868 <HAL_ADC_MspInit+0xe4>)
 8000818:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800081c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800081e:	4b12      	ldr	r3, [pc, #72]	@ (8000868 <HAL_ADC_MspInit+0xe4>)
 8000820:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000824:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000826:	4b10      	ldr	r3, [pc, #64]	@ (8000868 <HAL_ADC_MspInit+0xe4>)
 8000828:	2200      	movs	r2, #0
 800082a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800082c:	4b0e      	ldr	r3, [pc, #56]	@ (8000868 <HAL_ADC_MspInit+0xe4>)
 800082e:	2200      	movs	r2, #0
 8000830:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000832:	4b0d      	ldr	r3, [pc, #52]	@ (8000868 <HAL_ADC_MspInit+0xe4>)
 8000834:	2200      	movs	r2, #0
 8000836:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000838:	480b      	ldr	r0, [pc, #44]	@ (8000868 <HAL_ADC_MspInit+0xe4>)
 800083a:	f001 ffef 	bl	800281c <HAL_DMA_Init>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8000844:	f000 ff8c 	bl	8001760 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	4a07      	ldr	r2, [pc, #28]	@ (8000868 <HAL_ADC_MspInit+0xe4>)
 800084c:	639a      	str	r2, [r3, #56]	@ 0x38
 800084e:	4a06      	ldr	r2, [pc, #24]	@ (8000868 <HAL_ADC_MspInit+0xe4>)
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000854:	bf00      	nop
 8000856:	3728      	adds	r7, #40	@ 0x28
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	40012000 	.word	0x40012000
 8000860:	40023800 	.word	0x40023800
 8000864:	40020000 	.word	0x40020000
 8000868:	2000007c 	.word	0x2000007c
 800086c:	40026410 	.word	0x40026410

08000870 <filters_init>:
HPF hpf;
Reverb optimus_prime;
DarthVader dv;
PitchShifter hps, lps;
inline void filters_init()
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b088      	sub	sp, #32
 8000874:	af00      	add	r7, sp, #0
	//DarthVader
	darthvader_init(&dv,
 8000876:	4b33      	ldr	r3, [pc, #204]	@ (8000944 <filters_init+0xd4>)
 8000878:	edd3 7a00 	vldr	s15, [r3]
 800087c:	eef0 5a67 	vmov.f32	s11, s15
 8000880:	eeb7 5a08 	vmov.f32	s10, #120	@ 0x3fc00000  1.5
 8000884:	eddf 4a30 	vldr	s9, [pc, #192]	@ 8000948 <filters_init+0xd8>
 8000888:	ed9f 4a30 	vldr	s8, [pc, #192]	@ 800094c <filters_init+0xdc>
 800088c:	eddf 3a30 	vldr	s7, [pc, #192]	@ 8000950 <filters_init+0xe0>
 8000890:	eeb3 3a04 	vmov.f32	s6, #52	@ 0x41a00000  20.0
 8000894:	eddf 2a2f 	vldr	s5, [pc, #188]	@ 8000954 <filters_init+0xe4>
 8000898:	ed9f 2a2f 	vldr	s4, [pc, #188]	@ 8000958 <filters_init+0xe8>
 800089c:	eddf 1a2f 	vldr	s3, [pc, #188]	@ 800095c <filters_init+0xec>
 80008a0:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 80008a4:	eef6 0a00 	vmov.f32	s1, #96	@ 0x3f000000  0.5
 80008a8:	eeb7 0a08 	vmov.f32	s0, #120	@ 0x3fc00000  1.5
 80008ac:	482c      	ldr	r0, [pc, #176]	@ (8000960 <filters_init+0xf0>)
 80008ae:	f000 fc51 	bl	8001154 <darthvader_init>
	                        0.3f,   // distortion_threshold
	                        1.5f,   // volume_gain
							samplerate);

	// Filtro OPTIMUS PRIME (soh esse reverb msm)
	float r_delayms = 100;
 80008b2:	4b2c      	ldr	r3, [pc, #176]	@ (8000964 <filters_init+0xf4>)
 80008b4:	61fb      	str	r3, [r7, #28]
	float r_feedback = 0.8;
 80008b6:	4b2c      	ldr	r3, [pc, #176]	@ (8000968 <filters_init+0xf8>)
 80008b8:	61bb      	str	r3, [r7, #24]
	float r_mix = 0.5;
 80008ba:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 80008be:	617b      	str	r3, [r7, #20]
	reverb_init(&optimus_prime, r_delayms, r_feedback, r_mix, samplerate);
 80008c0:	4b20      	ldr	r3, [pc, #128]	@ (8000944 <filters_init+0xd4>)
 80008c2:	edd3 7a00 	vldr	s15, [r3]
 80008c6:	eef0 1a67 	vmov.f32	s3, s15
 80008ca:	ed97 1a05 	vldr	s2, [r7, #20]
 80008ce:	edd7 0a06 	vldr	s1, [r7, #24]
 80008d2:	ed97 0a07 	vldr	s0, [r7, #28]
 80008d6:	4825      	ldr	r0, [pc, #148]	@ (800096c <filters_init+0xfc>)
 80008d8:	f000 fa0a 	bl	8000cf0 <reverb_init>

	//
	float lpf_cutoff = 2000;
 80008dc:	4b24      	ldr	r3, [pc, #144]	@ (8000970 <filters_init+0x100>)
 80008de:	613b      	str	r3, [r7, #16]
	lpf_init(&lpf, lpf_cutoff, samplerate);
 80008e0:	4b18      	ldr	r3, [pc, #96]	@ (8000944 <filters_init+0xd4>)
 80008e2:	edd3 7a00 	vldr	s15, [r3]
 80008e6:	eef0 0a67 	vmov.f32	s1, s15
 80008ea:	ed97 0a04 	vldr	s0, [r7, #16]
 80008ee:	4821      	ldr	r0, [pc, #132]	@ (8000974 <filters_init+0x104>)
 80008f0:	f000 f98e 	bl	8000c10 <lpf_init>

	float hpf_cutoff = 500;
 80008f4:	4b20      	ldr	r3, [pc, #128]	@ (8000978 <filters_init+0x108>)
 80008f6:	60fb      	str	r3, [r7, #12]
	hpf_init(&hpf, hpf_cutoff, samplerate);
 80008f8:	4b12      	ldr	r3, [pc, #72]	@ (8000944 <filters_init+0xd4>)
 80008fa:	edd3 7a00 	vldr	s15, [r3]
 80008fe:	eef0 0a67 	vmov.f32	s1, s15
 8000902:	ed97 0a03 	vldr	s0, [r7, #12]
 8000906:	481d      	ldr	r0, [pc, #116]	@ (800097c <filters_init+0x10c>)
 8000908:	f000 f9b8 	bl	8000c7c <hpf_init>

	float pitch_factor_high = 1.3;
 800090c:	4b1c      	ldr	r3, [pc, #112]	@ (8000980 <filters_init+0x110>)
 800090e:	60bb      	str	r3, [r7, #8]
	float pitch_factor_low = 0.7;
 8000910:	4b1c      	ldr	r3, [pc, #112]	@ (8000984 <filters_init+0x114>)
 8000912:	607b      	str	r3, [r7, #4]
	pitchshifter_init(&hps, pitch_factor_high, samplerate);
 8000914:	4b0b      	ldr	r3, [pc, #44]	@ (8000944 <filters_init+0xd4>)
 8000916:	edd3 7a00 	vldr	s15, [r3]
 800091a:	eef0 0a67 	vmov.f32	s1, s15
 800091e:	ed97 0a02 	vldr	s0, [r7, #8]
 8000922:	4819      	ldr	r0, [pc, #100]	@ (8000988 <filters_init+0x118>)
 8000924:	f000 fa26 	bl	8000d74 <pitchshifter_init>
	pitchshifter_init(&lps, pitch_factor_low, samplerate);
 8000928:	4b06      	ldr	r3, [pc, #24]	@ (8000944 <filters_init+0xd4>)
 800092a:	edd3 7a00 	vldr	s15, [r3]
 800092e:	eef0 0a67 	vmov.f32	s1, s15
 8000932:	ed97 0a01 	vldr	s0, [r7, #4]
 8000936:	4815      	ldr	r0, [pc, #84]	@ (800098c <filters_init+0x11c>)
 8000938:	f000 fa1c 	bl	8000d74 <pitchshifter_init>
}
 800093c:	bf00      	nop
 800093e:	3720      	adds	r7, #32
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	20000008 	.word	0x20000008
 8000948:	3e99999a 	.word	0x3e99999a
 800094c:	3eb33333 	.word	0x3eb33333
 8000950:	3e19999a 	.word	0x3e19999a
 8000954:	3f4ccccd 	.word	0x3f4ccccd
 8000958:	459c4000 	.word	0x459c4000
 800095c:	43480000 	.word	0x43480000
 8000960:	20002800 	.word	0x20002800
 8000964:	42c80000 	.word	0x42c80000
 8000968:	3f4ccccd 	.word	0x3f4ccccd
 800096c:	200018f0 	.word	0x200018f0
 8000970:	44fa0000 	.word	0x44fa0000
 8000974:	200018dc 	.word	0x200018dc
 8000978:	43fa0000 	.word	0x43fa0000
 800097c:	200018e4 	.word	0x200018e4
 8000980:	3fa66666 	.word	0x3fa66666
 8000984:	3f333333 	.word	0x3f333333
 8000988:	2000465c 	.word	0x2000465c
 800098c:	2000556c 	.word	0x2000556c

08000990 <clamp>:

inline uint16_t clamp(uint16_t min, uint16_t x, uint16_t max)
{
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
 8000996:	4603      	mov	r3, r0
 8000998:	80fb      	strh	r3, [r7, #6]
 800099a:	460b      	mov	r3, r1
 800099c:	80bb      	strh	r3, [r7, #4]
 800099e:	4613      	mov	r3, r2
 80009a0:	807b      	strh	r3, [r7, #2]
	x = x<min? min: x;
 80009a2:	88ba      	ldrh	r2, [r7, #4]
 80009a4:	88fb      	ldrh	r3, [r7, #6]
 80009a6:	4293      	cmp	r3, r2
 80009a8:	bf38      	it	cc
 80009aa:	4613      	movcc	r3, r2
 80009ac:	80bb      	strh	r3, [r7, #4]
	x = x>max? max: x;
 80009ae:	88ba      	ldrh	r2, [r7, #4]
 80009b0:	887b      	ldrh	r3, [r7, #2]
 80009b2:	4293      	cmp	r3, r2
 80009b4:	bf28      	it	cs
 80009b6:	4613      	movcs	r3, r2
 80009b8:	80bb      	strh	r3, [r7, #4]
	return x;
 80009ba:	88bb      	ldrh	r3, [r7, #4]
}
 80009bc:	4618      	mov	r0, r3
 80009be:	370c      	adds	r7, #12
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr

080009c8 <normalizeAudio>:
/*
	Receives a 12 bits unsigned audio input between 310 and 2792 and maps it
	into a float value between -1.0 and 1.0
*/
inline float normalizeAudio(uint16_t input)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	4603      	mov	r3, r0
 80009d0:	80fb      	strh	r3, [r7, #6]
//	clamp values to the working range
	input = clamp(310, input, 2792);
 80009d2:	88fb      	ldrh	r3, [r7, #6]
 80009d4:	f640 22e8 	movw	r2, #2792	@ 0xae8
 80009d8:	4619      	mov	r1, r3
 80009da:	f44f 709b 	mov.w	r0, #310	@ 0x136
 80009de:	f7ff ffd7 	bl	8000990 <clamp>
 80009e2:	4603      	mov	r3, r0
 80009e4:	80fb      	strh	r3, [r7, #6]
	return (input-1551)/(1241.0f);
 80009e6:	88fb      	ldrh	r3, [r7, #6]
 80009e8:	f2a3 630f 	subw	r3, r3, #1551	@ 0x60f
 80009ec:	ee07 3a90 	vmov	s15, r3
 80009f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009f4:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8000a0c <normalizeAudio+0x44>
 80009f8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80009fc:	eef0 7a66 	vmov.f32	s15, s13

//	return (input-2048)/4096.0;
}
 8000a00:	eeb0 0a67 	vmov.f32	s0, s15
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	449b2000 	.word	0x449b2000

08000a10 <deNormalizeAudio>:
/*
 * Receives a normalized audio input between -1.0 and 1.0 and converts it into
 * a signed 32bits uint32_t value, left-justified.
 */
inline int16_t deNormalizeAudio(float input)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	ed87 0a01 	vstr	s0, [r7, #4]
	    input *= ((double) 32767.0f); //Maximum positive 16-bit value
 8000a1a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000a1e:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8000a44 <deNormalizeAudio+0x34>
 8000a22:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a26:	edc7 7a01 	vstr	s15, [r7, #4]
	    return (int16_t) input;
 8000a2a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000a2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a32:	ee17 3a90 	vmov	r3, s15
 8000a36:	b21b      	sxth	r3, r3
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	370c      	adds	r7, #12
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr
 8000a44:	46fffe00 	.word	0x46fffe00

08000a48 <processHalfBuffer>:

/*
 * TODO
 */
void processHalfBuffer()
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b084      	sub	sp, #16
 8000a4c:	af00      	add	r7, sp, #0
	uint16_t int_input = 0;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	81bb      	strh	r3, [r7, #12]
	float normalized_input = 0.0;
 8000a52:	f04f 0300 	mov.w	r3, #0
 8000a56:	60bb      	str	r3, [r7, #8]
	float normalized_output = 0.0;
 8000a58:	f04f 0300 	mov.w	r3, #0
 8000a5c:	607b      	str	r3, [r7, #4]
	int16_t int_output = 0;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	807b      	strh	r3, [r7, #2]

	uint16_t i = 0;
 8000a62:	2300      	movs	r3, #0
 8000a64:	81fb      	strh	r3, [r7, #14]
	for (i=0; i<BUFFER_SIZE/2; i++)
 8000a66:	2300      	movs	r3, #0
 8000a68:	81fb      	strh	r3, [r7, #14]
 8000a6a:	e02a      	b.n	8000ac2 <processHalfBuffer+0x7a>
	{
		int_input = process_in_buffer[i];
 8000a6c:	4b19      	ldr	r3, [pc, #100]	@ (8000ad4 <processHalfBuffer+0x8c>)
 8000a6e:	681a      	ldr	r2, [r3, #0]
 8000a70:	89fb      	ldrh	r3, [r7, #14]
 8000a72:	005b      	lsls	r3, r3, #1
 8000a74:	4413      	add	r3, r2
 8000a76:	881b      	ldrh	r3, [r3, #0]
 8000a78:	81bb      	strh	r3, [r7, #12]
		normalized_input = normalizeAudio(int_input);
 8000a7a:	89bb      	ldrh	r3, [r7, #12]
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f7ff ffa3 	bl	80009c8 <normalizeAudio>
 8000a82:	ed87 0a02 	vstr	s0, [r7, #8]
		normalized_output = processAudio(normalized_input) * OUTPUT_VOLUME; // COLOCAR EFEITO AQUI
 8000a86:	ed97 0a02 	vldr	s0, [r7, #8]
 8000a8a:	f000 f827 	bl	8000adc <processAudio>
 8000a8e:	ed87 0a01 	vstr	s0, [r7, #4]
		int_output = deNormalizeAudio(normalized_output) ;
 8000a92:	ed97 0a01 	vldr	s0, [r7, #4]
 8000a96:	f7ff ffbb 	bl	8000a10 <deNormalizeAudio>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	807b      	strh	r3, [r7, #2]
		process_out_buffer[2*i] = int_output;
 8000a9e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ad8 <processHalfBuffer+0x90>)
 8000aa0:	681a      	ldr	r2, [r3, #0]
 8000aa2:	89fb      	ldrh	r3, [r7, #14]
 8000aa4:	009b      	lsls	r3, r3, #2
 8000aa6:	4413      	add	r3, r2
 8000aa8:	887a      	ldrh	r2, [r7, #2]
 8000aaa:	801a      	strh	r2, [r3, #0]
		process_out_buffer[2*i+1] = int_output;
 8000aac:	4b0a      	ldr	r3, [pc, #40]	@ (8000ad8 <processHalfBuffer+0x90>)
 8000aae:	681a      	ldr	r2, [r3, #0]
 8000ab0:	89fb      	ldrh	r3, [r7, #14]
 8000ab2:	009b      	lsls	r3, r3, #2
 8000ab4:	3302      	adds	r3, #2
 8000ab6:	4413      	add	r3, r2
 8000ab8:	887a      	ldrh	r2, [r7, #2]
 8000aba:	801a      	strh	r2, [r3, #0]
	for (i=0; i<BUFFER_SIZE/2; i++)
 8000abc:	89fb      	ldrh	r3, [r7, #14]
 8000abe:	3301      	adds	r3, #1
 8000ac0:	81fb      	strh	r3, [r7, #14]
 8000ac2:	89fb      	ldrh	r3, [r7, #14]
 8000ac4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000ac8:	d3d0      	bcc.n	8000a6c <processHalfBuffer+0x24>
	}

	return;
 8000aca:	bf00      	nop
}
 8000acc:	3710      	adds	r7, #16
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	20000000 	.word	0x20000000
 8000ad8:	20000004 	.word	0x20000004

08000adc <processAudio>:

/*
 * Placeholder audio processing function that applies no effect
 */
float processAudio(float input)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	ed87 0a01 	vstr	s0, [r7, #4]
	switch (CURRENT_FILTER)
 8000ae6:	4b28      	ldr	r3, [pc, #160]	@ (8000b88 <processAudio+0xac>)
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	2b05      	cmp	r3, #5
 8000aec:	d83e      	bhi.n	8000b6c <processAudio+0x90>
 8000aee:	a201      	add	r2, pc, #4	@ (adr r2, 8000af4 <processAudio+0x18>)
 8000af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000af4:	08000b0d 	.word	0x08000b0d
 8000af8:	08000b1d 	.word	0x08000b1d
 8000afc:	08000b2d 	.word	0x08000b2d
 8000b00:	08000b3d 	.word	0x08000b3d
 8000b04:	08000b4d 	.word	0x08000b4d
 8000b08:	08000b5d 	.word	0x08000b5d
	{
		case DARTH_VADER:
			return apply_darthvader(&dv, input);
 8000b0c:	ed97 0a01 	vldr	s0, [r7, #4]
 8000b10:	481e      	ldr	r0, [pc, #120]	@ (8000b8c <processAudio+0xb0>)
 8000b12:	f000 fbef 	bl	80012f4 <apply_darthvader>
 8000b16:	eef0 7a40 	vmov.f32	s15, s0
 8000b1a:	e030      	b.n	8000b7e <processAudio+0xa2>
			break;

		case OPTIMUS_PRIME:
			return apply_reverb(&optimus_prime, input);
 8000b1c:	ed97 0a01 	vldr	s0, [r7, #4]
 8000b20:	481b      	ldr	r0, [pc, #108]	@ (8000b90 <processAudio+0xb4>)
 8000b22:	f000 f9cd 	bl	8000ec0 <apply_reverb>
 8000b26:	eef0 7a40 	vmov.f32	s15, s0
 8000b2a:	e028      	b.n	8000b7e <processAudio+0xa2>
			break;

		case LOW_PASS:
			return apply_lpf(&lpf, input);
 8000b2c:	ed97 0a01 	vldr	s0, [r7, #4]
 8000b30:	4818      	ldr	r0, [pc, #96]	@ (8000b94 <processAudio+0xb8>)
 8000b32:	f000 f946 	bl	8000dc2 <apply_lpf>
 8000b36:	eef0 7a40 	vmov.f32	s15, s0
 8000b3a:	e020      	b.n	8000b7e <processAudio+0xa2>
			break;

		case HIGH_PASS:
			return apply_hpf(&hpf, input);
 8000b3c:	ed97 0a01 	vldr	s0, [r7, #4]
 8000b40:	4815      	ldr	r0, [pc, #84]	@ (8000b98 <processAudio+0xbc>)
 8000b42:	f000 f968 	bl	8000e16 <apply_hpf>
 8000b46:	eef0 7a40 	vmov.f32	s15, s0
 8000b4a:	e018      	b.n	8000b7e <processAudio+0xa2>
			break;

		case LOW_PITCH:
			return apply_pitchshifter(&lps, input);
 8000b4c:	ed97 0a01 	vldr	s0, [r7, #4]
 8000b50:	4812      	ldr	r0, [pc, #72]	@ (8000b9c <processAudio+0xc0>)
 8000b52:	f000 fa29 	bl	8000fa8 <apply_pitchshifter>
 8000b56:	eef0 7a40 	vmov.f32	s15, s0
 8000b5a:	e010      	b.n	8000b7e <processAudio+0xa2>
			break;

		case HIGH_PITCH:
			return apply_pitchshifter(&hps, input);
 8000b5c:	ed97 0a01 	vldr	s0, [r7, #4]
 8000b60:	480f      	ldr	r0, [pc, #60]	@ (8000ba0 <processAudio+0xc4>)
 8000b62:	f000 fa21 	bl	8000fa8 <apply_pitchshifter>
 8000b66:	eef0 7a40 	vmov.f32	s15, s0
 8000b6a:	e008      	b.n	8000b7e <processAudio+0xa2>
			break;

		default:
			CURRENT_FILTER = 0;
 8000b6c:	4b06      	ldr	r3, [pc, #24]	@ (8000b88 <processAudio+0xac>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	701a      	strb	r2, [r3, #0]
			return processAudio(input);
 8000b72:	ed97 0a01 	vldr	s0, [r7, #4]
 8000b76:	f7ff ffb1 	bl	8000adc <processAudio>
 8000b7a:	eef0 7a40 	vmov.f32	s15, s0
//
//		case ECHO:
//			return apply_echo(&echo, input);
//			break;
	}
}
 8000b7e:	eeb0 0a67 	vmov.f32	s0, s15
 8000b82:	3708      	adds	r7, #8
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	2000647c 	.word	0x2000647c
 8000b8c:	20002800 	.word	0x20002800
 8000b90:	200018f0 	.word	0x200018f0
 8000b94:	200018dc 	.word	0x200018dc
 8000b98:	200018e4 	.word	0x200018e4
 8000b9c:	2000556c 	.word	0x2000556c
 8000ba0:	2000465c 	.word	0x2000465c

08000ba4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	607b      	str	r3, [r7, #4]
 8000bae:	4b17      	ldr	r3, [pc, #92]	@ (8000c0c <MX_DMA_Init+0x68>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb2:	4a16      	ldr	r2, [pc, #88]	@ (8000c0c <MX_DMA_Init+0x68>)
 8000bb4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000bb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bba:	4b14      	ldr	r3, [pc, #80]	@ (8000c0c <MX_DMA_Init+0x68>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000bc2:	607b      	str	r3, [r7, #4]
 8000bc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	603b      	str	r3, [r7, #0]
 8000bca:	4b10      	ldr	r3, [pc, #64]	@ (8000c0c <MX_DMA_Init+0x68>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bce:	4a0f      	ldr	r2, [pc, #60]	@ (8000c0c <MX_DMA_Init+0x68>)
 8000bd0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000bd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bd6:	4b0d      	ldr	r3, [pc, #52]	@ (8000c0c <MX_DMA_Init+0x68>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bda:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000bde:	603b      	str	r3, [r7, #0]
 8000be0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000be2:	2200      	movs	r2, #0
 8000be4:	2100      	movs	r1, #0
 8000be6:	200f      	movs	r0, #15
 8000be8:	f001 fde1 	bl	80027ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000bec:	200f      	movs	r0, #15
 8000bee:	f001 fdfa 	bl	80027e6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	2038      	movs	r0, #56	@ 0x38
 8000bf8:	f001 fdd9 	bl	80027ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000bfc:	2038      	movs	r0, #56	@ 0x38
 8000bfe:	f001 fdf2 	bl	80027e6 <HAL_NVIC_EnableIRQ>

}
 8000c02:	bf00      	nop
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	40023800 	.word	0x40023800

08000c10 <lpf_init>:
// ---------------------------
// Filter init functions
// ---------------------------

// Initialize the low-pass filter
void lpf_init(LPF *f, float cutoff_freq, float sample_rate) {
 8000c10:	b480      	push	{r7}
 8000c12:	b087      	sub	sp, #28
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	60f8      	str	r0, [r7, #12]
 8000c18:	ed87 0a02 	vstr	s0, [r7, #8]
 8000c1c:	edc7 0a01 	vstr	s1, [r7, #4]
	float dt = 1.0f / sample_rate;                  // Time step
 8000c20:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8000c24:	ed97 7a01 	vldr	s14, [r7, #4]
 8000c28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c2c:	edc7 7a05 	vstr	s15, [r7, #20]
    float RC = 1.0f / (2.0f * M_PI * cutoff_freq);  // RC time constant
 8000c30:	edd7 7a02 	vldr	s15, [r7, #8]
 8000c34:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8000c78 <lpf_init+0x68>
 8000c38:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000c3c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8000c40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c44:	edc7 7a04 	vstr	s15, [r7, #16]
    f->alpha = dt / (RC + dt);                      // Alpha coefficient
 8000c48:	ed97 7a04 	vldr	s14, [r7, #16]
 8000c4c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000c50:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000c54:	edd7 6a05 	vldr	s13, [r7, #20]
 8000c58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	edc3 7a00 	vstr	s15, [r3]
    f->prev = 0.0f;                                 // Previous output sample
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	f04f 0200 	mov.w	r2, #0
 8000c68:	605a      	str	r2, [r3, #4]
}
 8000c6a:	bf00      	nop
 8000c6c:	371c      	adds	r7, #28
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	40c90fdb 	.word	0x40c90fdb

08000c7c <hpf_init>:

void hpf_init(HPF *f, float cutoff_freq, float sample_rate) {
 8000c7c:	b480      	push	{r7}
 8000c7e:	b087      	sub	sp, #28
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	60f8      	str	r0, [r7, #12]
 8000c84:	ed87 0a02 	vstr	s0, [r7, #8]
 8000c88:	edc7 0a01 	vstr	s1, [r7, #4]
    float dt = 1.0f / sample_rate;                  // Time step
 8000c8c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8000c90:	ed97 7a01 	vldr	s14, [r7, #4]
 8000c94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c98:	edc7 7a05 	vstr	s15, [r7, #20]
    float RC = 1.0f / (2.0f * M_PI * cutoff_freq);  // RC time constant
 8000c9c:	edd7 7a02 	vldr	s15, [r7, #8]
 8000ca0:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8000cec <hpf_init+0x70>
 8000ca4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000ca8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8000cac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000cb0:	edc7 7a04 	vstr	s15, [r7, #16]
    f->alpha = RC / (RC + dt);                      // Alpha coefficient
 8000cb4:	ed97 7a04 	vldr	s14, [r7, #16]
 8000cb8:	edd7 7a05 	vldr	s15, [r7, #20]
 8000cbc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000cc0:	edd7 6a04 	vldr	s13, [r7, #16]
 8000cc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	edc3 7a00 	vstr	s15, [r3]
    f->prev_x = 0.0f;                               // Previous input sample
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	f04f 0200 	mov.w	r2, #0
 8000cd4:	605a      	str	r2, [r3, #4]
    f->prev_y = 0.0f;                               // Previous output sample
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	f04f 0200 	mov.w	r2, #0
 8000cdc:	609a      	str	r2, [r3, #8]
}
 8000cde:	bf00      	nop
 8000ce0:	371c      	adds	r7, #28
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	40c90fdb 	.word	0x40c90fdb

08000cf0 <reverb_init>:
    e->decay = decay;                                                               // Set decay factor
    memset(e->buffer, 0, sizeof(e->buffer));                                        // Clear buffer
}

// Initialize the reverb effect
void reverb_init(Reverb* r, float delay_ms, float feedback, float mix, float sample_rate) {
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b088      	sub	sp, #32
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6178      	str	r0, [r7, #20]
 8000cf8:	ed87 0a04 	vstr	s0, [r7, #16]
 8000cfc:	edc7 0a03 	vstr	s1, [r7, #12]
 8000d00:	ed87 1a02 	vstr	s2, [r7, #8]
 8000d04:	edc7 1a01 	vstr	s3, [r7, #4]
    int delay_samples = (int)(sample_rate * delay_ms / 1000.0f);                // Convert delay time to samples
 8000d08:	ed97 7a01 	vldr	s14, [r7, #4]
 8000d0c:	edd7 7a04 	vldr	s15, [r7, #16]
 8000d10:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d14:	eddf 6a16 	vldr	s13, [pc, #88]	@ 8000d70 <reverb_init+0x80>
 8000d18:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d20:	ee17 3a90 	vmov	r3, s15
 8000d24:	61fb      	str	r3, [r7, #28]
    if (delay_samples > MAX_DELAY_SAMPLES) delay_samples = MAX_DELAY_SAMPLES;   // Clamp to max size
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	f5b3 7f70 	cmp.w	r3, #960	@ 0x3c0
 8000d2c:	dd02      	ble.n	8000d34 <reverb_init+0x44>
 8000d2e:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8000d32:	61fb      	str	r3, [r7, #28]
    r->size = delay_samples;                                                    // Set size
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	69fa      	ldr	r2, [r7, #28]
 8000d38:	f8c3 2f00 	str.w	r2, [r3, #3840]	@ 0xf00
    r->index = 0;                                                               // Reset index
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	2200      	movs	r2, #0
 8000d40:	f8c3 2f04 	str.w	r2, [r3, #3844]	@ 0xf04
    r->feedback = feedback;                                                     // Set feedback amount                                 
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	f603 7308 	addw	r3, r3, #3848	@ 0xf08
 8000d4a:	68fa      	ldr	r2, [r7, #12]
 8000d4c:	601a      	str	r2, [r3, #0]
    r->mix = mix;                                                               // Set mix amount                                   
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	f603 730c 	addw	r3, r3, #3852	@ 0xf0c
 8000d54:	68ba      	ldr	r2, [r7, #8]
 8000d56:	601a      	str	r2, [r3, #0]
    memset(r->buffer, 0, sizeof(r->buffer));                                    // Clear buffer
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 8000d5e:	2100      	movs	r1, #0
 8000d60:	4618      	mov	r0, r3
 8000d62:	f004 f9d5 	bl	8005110 <memset>
}
 8000d66:	bf00      	nop
 8000d68:	3720      	adds	r7, #32
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	447a0000 	.word	0x447a0000

08000d74 <pitchshifter_init>:

// Initialize the pitch shifter
// pitch_factor: e.g. 0.7 for ~7 semitones down
void pitchshifter_init(PitchShifter* ps, float pitch_factor, float sample_rate) {
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b084      	sub	sp, #16
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	60f8      	str	r0, [r7, #12]
 8000d7c:	ed87 0a02 	vstr	s0, [r7, #8]
 8000d80:	edc7 0a01 	vstr	s1, [r7, #4]
    memset(ps->buffer, 0, sizeof(ps->buffer));  // Clear buffer
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f004 f9bf 	bl	8005110 <memset>
    ps->write_index = 0;                        // Reset write index
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	2200      	movs	r2, #0
 8000d96:	f8c3 2f00 	str.w	r2, [r3, #3840]	@ 0xf00
    ps->read_index = 0.0f;                      // Reset read index
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	f603 7304 	addw	r3, r3, #3844	@ 0xf04
 8000da0:	f04f 0200 	mov.w	r2, #0
 8000da4:	601a      	str	r2, [r3, #0]
    ps->pitch_factor = pitch_factor;            // Set pitch factor
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	f603 7308 	addw	r3, r3, #3848	@ 0xf08
 8000dac:	68ba      	ldr	r2, [r7, #8]
 8000dae:	601a      	str	r2, [r3, #0]
    ps->size = MAX_DELAY_SAMPLES;               // Set size to max delay samples
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	f44f 7270 	mov.w	r2, #960	@ 0x3c0
 8000db6:	f8c3 2f0c 	str.w	r2, [r3, #3852]	@ 0xf0c
}
 8000dba:	bf00      	nop
 8000dbc:	3710      	adds	r7, #16
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <apply_lpf>:
// ---------------------------
// Filter apply functions
// ---------------------------

// Apply low-pass filter
float apply_lpf(LPF *f, float x) {
 8000dc2:	b480      	push	{r7}
 8000dc4:	b085      	sub	sp, #20
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	6078      	str	r0, [r7, #4]
 8000dca:	ed87 0a00 	vstr	s0, [r7]
    float y = f->alpha * x + (1.0f - f->alpha) * f->prev; // Apply low-pass filter formula
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	ed93 7a00 	vldr	s14, [r3]
 8000dd4:	edd7 7a00 	vldr	s15, [r7]
 8000dd8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	edd3 7a00 	vldr	s15, [r3]
 8000de2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8000de6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	edd3 7a01 	vldr	s15, [r3, #4]
 8000df0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000df4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000df8:	edc7 7a03 	vstr	s15, [r7, #12]
    f->prev = y;                                          // Update previous output sample
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	68fa      	ldr	r2, [r7, #12]
 8000e00:	605a      	str	r2, [r3, #4]
    return y;
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	ee07 3a90 	vmov	s15, r3
}
 8000e08:	eeb0 0a67 	vmov.f32	s0, s15
 8000e0c:	3714      	adds	r7, #20
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr

08000e16 <apply_hpf>:

float apply_hpf(HPF *f, float x) {
 8000e16:	b480      	push	{r7}
 8000e18:	b085      	sub	sp, #20
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	6078      	str	r0, [r7, #4]
 8000e1e:	ed87 0a00 	vstr	s0, [r7]
    float y = f->alpha * (f->prev_y + x - f->prev_x);   // Apply high-pass filter formula
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	ed93 7a00 	vldr	s14, [r3]
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	edd3 6a02 	vldr	s13, [r3, #8]
 8000e2e:	edd7 7a00 	vldr	s15, [r7]
 8000e32:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	edd3 7a01 	vldr	s15, [r3, #4]
 8000e3c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000e40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e44:	edc7 7a03 	vstr	s15, [r7, #12]
    f->prev_x = x;                                      // Update previous input sample
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	683a      	ldr	r2, [r7, #0]
 8000e4c:	605a      	str	r2, [r3, #4]
    f->prev_y = y;                                      // Update previous output sample
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	68fa      	ldr	r2, [r7, #12]
 8000e52:	609a      	str	r2, [r3, #8]
    return y;
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	ee07 3a90 	vmov	s15, r3
}
 8000e5a:	eeb0 0a67 	vmov.f32	s0, s15
 8000e5e:	3714      	adds	r7, #20
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr

08000e68 <apply_distortion>:

float apply_distortion(float x, float threshold) {
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000e72:	edc7 0a00 	vstr	s1, [r7]
    if (x > threshold) return threshold;    // Clamp to threshold
 8000e76:	ed97 7a01 	vldr	s14, [r7, #4]
 8000e7a:	edd7 7a00 	vldr	s15, [r7]
 8000e7e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000e82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e86:	dd02      	ble.n	8000e8e <apply_distortion+0x26>
 8000e88:	edd7 7a00 	vldr	s15, [r7]
 8000e8c:	e011      	b.n	8000eb2 <apply_distortion+0x4a>
    if (x < -threshold) return -threshold;  // Clamp to negative threshold
 8000e8e:	edd7 7a00 	vldr	s15, [r7]
 8000e92:	eef1 7a67 	vneg.f32	s15, s15
 8000e96:	ed97 7a01 	vldr	s14, [r7, #4]
 8000e9a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000e9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ea2:	d504      	bpl.n	8000eae <apply_distortion+0x46>
 8000ea4:	edd7 7a00 	vldr	s15, [r7]
 8000ea8:	eef1 7a67 	vneg.f32	s15, s15
 8000eac:	e001      	b.n	8000eb2 <apply_distortion+0x4a>
    return x;
 8000eae:	edd7 7a01 	vldr	s15, [r7, #4]
}
 8000eb2:	eeb0 0a67 	vmov.f32	s0, s15
 8000eb6:	370c      	adds	r7, #12
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr

08000ec0 <apply_reverb>:
    e->index = (e->index + 1) % e->size;    // Increment index circularly

    return y;
}

float apply_reverb(Reverb* r, float x) {
 8000ec0:	b480      	push	{r7}
 8000ec2:	b085      	sub	sp, #20
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
 8000ec8:	ed87 0a00 	vstr	s0, [r7]
    float delayed = r->buffer[r->index];                // Get delayed sample
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	f8d3 3f04 	ldr.w	r3, [r3, #3844]	@ 0xf04
 8000ed2:	687a      	ldr	r2, [r7, #4]
 8000ed4:	009b      	lsls	r3, r3, #2
 8000ed6:	4413      	add	r3, r2
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	60fb      	str	r3, [r7, #12]
    float y = x * (1.0f - r->mix) + delayed * r->mix;   // Mix input with delayed sample
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	f603 730c 	addw	r3, r3, #3852	@ 0xf0c
 8000ee2:	edd3 7a00 	vldr	s15, [r3]
 8000ee6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000eea:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000eee:	edd7 7a00 	vldr	s15, [r7]
 8000ef2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	f603 730c 	addw	r3, r3, #3852	@ 0xf0c
 8000efc:	edd3 6a00 	vldr	s13, [r3]
 8000f00:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f04:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f0c:	edc7 7a02 	vstr	s15, [r7, #8]

    r->buffer[r->index] = x + delayed * r->feedback;    // Store new sample in buffer
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	f603 7308 	addw	r3, r3, #3848	@ 0xf08
 8000f16:	ed93 7a00 	vldr	s14, [r3]
 8000f1a:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f1e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	f8d3 3f04 	ldr.w	r3, [r3, #3844]	@ 0xf04
 8000f28:	edd7 7a00 	vldr	s15, [r7]
 8000f2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f30:	687a      	ldr	r2, [r7, #4]
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	4413      	add	r3, r2
 8000f36:	edc3 7a00 	vstr	s15, [r3]
    r->index = (r->index + 1) % r->size;                // Increment index circularly
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	f8d3 3f04 	ldr.w	r3, [r3, #3844]	@ 0xf04
 8000f40:	3301      	adds	r3, #1
 8000f42:	687a      	ldr	r2, [r7, #4]
 8000f44:	f8d2 2f00 	ldr.w	r2, [r2, #3840]	@ 0xf00
 8000f48:	fb93 f1f2 	sdiv	r1, r3, r2
 8000f4c:	fb01 f202 	mul.w	r2, r1, r2
 8000f50:	1a9a      	subs	r2, r3, r2
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	f8c3 2f04 	str.w	r2, [r3, #3844]	@ 0xf04

    return y;
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	ee07 3a90 	vmov	s15, r3
}
 8000f5e:	eeb0 0a67 	vmov.f32	s0, s15
 8000f62:	3714      	adds	r7, #20
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr

08000f6c <lerp>:

// Linear interpolation helper
static float lerp(float a, float b, float t) {
 8000f6c:	b480      	push	{r7}
 8000f6e:	b085      	sub	sp, #20
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	ed87 0a03 	vstr	s0, [r7, #12]
 8000f76:	edc7 0a02 	vstr	s1, [r7, #8]
 8000f7a:	ed87 1a01 	vstr	s2, [r7, #4]
    return a + t * (b - a);
 8000f7e:	ed97 7a02 	vldr	s14, [r7, #8]
 8000f82:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f86:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000f8a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f8e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f92:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f96:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8000f9a:	eeb0 0a67 	vmov.f32	s0, s15
 8000f9e:	3714      	adds	r7, #20
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr

08000fa8 <apply_pitchshifter>:

// Process one sample with pitch shifting down
float apply_pitchshifter(PitchShifter* ps, float input) {
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b086      	sub	sp, #24
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	ed87 0a00 	vstr	s0, [r7]
    ps->buffer[ps->write_index] = input;                    // Store input sample in buffer 
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	f8d3 3f00 	ldr.w	r3, [r3, #3840]	@ 0xf00
 8000fba:	687a      	ldr	r2, [r7, #4]
 8000fbc:	009b      	lsls	r3, r3, #2
 8000fbe:	4413      	add	r3, r2
 8000fc0:	683a      	ldr	r2, [r7, #0]
 8000fc2:	601a      	str	r2, [r3, #0]

    // Calculate read index
    float output = 0.0f;                                    // Read sample at slower rate for pitch down
 8000fc4:	f04f 0300 	mov.w	r3, #0
 8000fc8:	617b      	str	r3, [r7, #20]
    int idx1 = (int)ps->read_index;                         // Get integer part of read index
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	f603 7304 	addw	r3, r3, #3844	@ 0xf04
 8000fd0:	edd3 7a00 	vldr	s15, [r3]
 8000fd4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fd8:	ee17 3a90 	vmov	r3, s15
 8000fdc:	613b      	str	r3, [r7, #16]
    int idx2 = (idx1 + 1) % ps->size;                       // Get next index circularly
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	687a      	ldr	r2, [r7, #4]
 8000fe4:	f8d2 2f0c 	ldr.w	r2, [r2, #3852]	@ 0xf0c
 8000fe8:	fb93 f1f2 	sdiv	r1, r3, r2
 8000fec:	fb01 f202 	mul.w	r2, r1, r2
 8000ff0:	1a9b      	subs	r3, r3, r2
 8000ff2:	60fb      	str	r3, [r7, #12]
    float frac = ps->read_index - idx1;                     // Fractional part for interpolation
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	f603 7304 	addw	r3, r3, #3844	@ 0xf04
 8000ffa:	ed93 7a00 	vldr	s14, [r3]
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	ee07 3a90 	vmov	s15, r3
 8001004:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001008:	ee77 7a67 	vsub.f32	s15, s14, s15
 800100c:	edc7 7a02 	vstr	s15, [r7, #8]

    // Linear interpolate between two samples
    output = lerp(ps->buffer[idx1], ps->buffer[idx2], frac);
 8001010:	687a      	ldr	r2, [r7, #4]
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	4413      	add	r3, r2
 8001018:	edd3 7a00 	vldr	s15, [r3]
 800101c:	687a      	ldr	r2, [r7, #4]
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	4413      	add	r3, r2
 8001024:	ed93 7a00 	vldr	s14, [r3]
 8001028:	ed97 1a02 	vldr	s2, [r7, #8]
 800102c:	eef0 0a47 	vmov.f32	s1, s14
 8001030:	eeb0 0a67 	vmov.f32	s0, s15
 8001034:	f7ff ff9a 	bl	8000f6c <lerp>
 8001038:	ed87 0a05 	vstr	s0, [r7, #20]

    // Increment write index
    ps->write_index = (ps->write_index + 1) % ps->size;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	f8d3 3f00 	ldr.w	r3, [r3, #3840]	@ 0xf00
 8001042:	3301      	adds	r3, #1
 8001044:	687a      	ldr	r2, [r7, #4]
 8001046:	f8d2 2f0c 	ldr.w	r2, [r2, #3852]	@ 0xf0c
 800104a:	fb93 f1f2 	sdiv	r1, r3, r2
 800104e:	fb01 f202 	mul.w	r2, r1, r2
 8001052:	1a9a      	subs	r2, r3, r2
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	f8c3 2f00 	str.w	r2, [r3, #3840]	@ 0xf00

    // Increment read index slower for pitch down
    ps->read_index += ps->pitch_factor;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	f603 7304 	addw	r3, r3, #3844	@ 0xf04
 8001060:	ed93 7a00 	vldr	s14, [r3]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	f603 7308 	addw	r3, r3, #3848	@ 0xf08
 800106a:	edd3 7a00 	vldr	s15, [r3]
 800106e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	f603 7304 	addw	r3, r3, #3844	@ 0xf04
 8001078:	edc3 7a00 	vstr	s15, [r3]
    if (ps->read_index >= ps->size) {
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	f603 7304 	addw	r3, r3, #3844	@ 0xf04
 8001082:	ed93 7a00 	vldr	s14, [r3]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	f8d3 3f0c 	ldr.w	r3, [r3, #3852]	@ 0xf0c
 800108c:	ee07 3a90 	vmov	s15, r3
 8001090:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001094:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001098:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800109c:	db12      	blt.n	80010c4 <apply_pitchshifter+0x11c>
        ps->read_index -= ps->size;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	f603 7304 	addw	r3, r3, #3844	@ 0xf04
 80010a4:	ed93 7a00 	vldr	s14, [r3]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	f8d3 3f0c 	ldr.w	r3, [r3, #3852]	@ 0xf0c
 80010ae:	ee07 3a90 	vmov	s15, r3
 80010b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	f603 7304 	addw	r3, r3, #3844	@ 0xf04
 80010c0:	edc3 7a00 	vstr	s15, [r3]
    }

    return output;
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	ee07 3a90 	vmov	s15, r3
}
 80010ca:	eeb0 0a67 	vmov.f32	s0, s15
 80010ce:	3718      	adds	r7, #24
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <equalizer_init>:
// ---------------------------

void equalizer_init(Equalizer* eq,
                    float low_gain, float mid_gain, float high_gain,
                    float low_cutoff, float high_cutoff,
                    float sample_rate) {
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b088      	sub	sp, #32
 80010d8:	af00      	add	r7, sp, #0
 80010da:	61f8      	str	r0, [r7, #28]
 80010dc:	ed87 0a06 	vstr	s0, [r7, #24]
 80010e0:	edc7 0a05 	vstr	s1, [r7, #20]
 80010e4:	ed87 1a04 	vstr	s2, [r7, #16]
 80010e8:	edc7 1a03 	vstr	s3, [r7, #12]
 80010ec:	ed87 2a02 	vstr	s4, [r7, #8]
 80010f0:	edc7 2a01 	vstr	s5, [r7, #4]
    eq->low_gain = low_gain;    // Set gains for each band
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	629a      	str	r2, [r3, #40]	@ 0x28
    eq->mid_gain = mid_gain;    // Mid band gain
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	697a      	ldr	r2, [r7, #20]
 80010fe:	62da      	str	r2, [r3, #44]	@ 0x2c
    eq->high_gain = high_gain;  // High band gain
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	631a      	str	r2, [r3, #48]	@ 0x30

    // Initialize filters
    lpf_init(&eq->lpf, low_cutoff, sample_rate);        // Low band
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	edd7 0a01 	vldr	s1, [r7, #4]
 800110c:	ed97 0a03 	vldr	s0, [r7, #12]
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff fd7d 	bl	8000c10 <lpf_init>
    hpf_init(&eq->hpf, high_cutoff, sample_rate);       // High band
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	3308      	adds	r3, #8
 800111a:	edd7 0a01 	vldr	s1, [r7, #4]
 800111e:	ed97 0a02 	vldr	s0, [r7, #8]
 8001122:	4618      	mov	r0, r3
 8001124:	f7ff fdaa 	bl	8000c7c <hpf_init>

    hpf_init(&eq->mid_hpf, low_cutoff, sample_rate);    // Mid band = Bandpass (HPF + LPF)
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	3314      	adds	r3, #20
 800112c:	edd7 0a01 	vldr	s1, [r7, #4]
 8001130:	ed97 0a03 	vldr	s0, [r7, #12]
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff fda1 	bl	8000c7c <hpf_init>
    lpf_init(&eq->mid_lpf, high_cutoff, sample_rate);   // Mid band = Bandpass (HPF + LPF)
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	3320      	adds	r3, #32
 800113e:	edd7 0a01 	vldr	s1, [r7, #4]
 8001142:	ed97 0a02 	vldr	s0, [r7, #8]
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff fd62 	bl	8000c10 <lpf_init>
}
 800114c:	bf00      	nop
 800114e:	3720      	adds	r7, #32
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}

08001154 <darthvader_init>:
                     float low_cutoff, float high_cutoff,
                     float pitch_factor, 
                     float reverb_delay_ms, float reverb_feedback,float reverb_mix, 
                     float distortion_threshold,
                     float volume_gain,
                     float sample_rate) {
 8001154:	b580      	push	{r7, lr}
 8001156:	b08e      	sub	sp, #56	@ 0x38
 8001158:	af00      	add	r7, sp, #0
 800115a:	6378      	str	r0, [r7, #52]	@ 0x34
 800115c:	ed87 0a0c 	vstr	s0, [r7, #48]	@ 0x30
 8001160:	edc7 0a0b 	vstr	s1, [r7, #44]	@ 0x2c
 8001164:	ed87 1a0a 	vstr	s2, [r7, #40]	@ 0x28
 8001168:	edc7 1a09 	vstr	s3, [r7, #36]	@ 0x24
 800116c:	ed87 2a08 	vstr	s4, [r7, #32]
 8001170:	edc7 2a07 	vstr	s5, [r7, #28]
 8001174:	ed87 3a06 	vstr	s6, [r7, #24]
 8001178:	edc7 3a05 	vstr	s7, [r7, #20]
 800117c:	ed87 4a04 	vstr	s8, [r7, #16]
 8001180:	edc7 4a03 	vstr	s9, [r7, #12]
 8001184:	ed87 5a02 	vstr	s10, [r7, #8]
 8001188:	edc7 5a01 	vstr	s11, [r7, #4]

    dv->distortion_threshold = distortion_threshold; // Set distortion threshold
 800118c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800118e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001192:	f603 6354 	addw	r3, r3, #3668	@ 0xe54
 8001196:	68fa      	ldr	r2, [r7, #12]
 8001198:	601a      	str	r2, [r3, #0]
    dv->volume_gain = volume_gain;                   // Set volume gain
 800119a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800119c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80011a0:	f603 6358 	addw	r3, r3, #3672	@ 0xe58
 80011a4:	68ba      	ldr	r2, [r7, #8]
 80011a6:	601a      	str	r2, [r3, #0]

    equalizer_init(&dv->eq, low_gain, mid_gain, high_gain, low_cutoff, high_cutoff, sample_rate);
 80011a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011aa:	edd7 2a01 	vldr	s5, [r7, #4]
 80011ae:	ed97 2a08 	vldr	s4, [r7, #32]
 80011b2:	edd7 1a09 	vldr	s3, [r7, #36]	@ 0x24
 80011b6:	ed97 1a0a 	vldr	s2, [r7, #40]	@ 0x28
 80011ba:	edd7 0a0b 	vldr	s1, [r7, #44]	@ 0x2c
 80011be:	ed97 0a0c 	vldr	s0, [r7, #48]	@ 0x30
 80011c2:	4618      	mov	r0, r3
 80011c4:	f7ff ff86 	bl	80010d4 <equalizer_init>
    pitchshifter_init(&dv->ps, pitch_factor, sample_rate);
 80011c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011ca:	3334      	adds	r3, #52	@ 0x34
 80011cc:	edd7 0a01 	vldr	s1, [r7, #4]
 80011d0:	ed97 0a07 	vldr	s0, [r7, #28]
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff fdcd 	bl	8000d74 <pitchshifter_init>
    reverb_init(&dv->reverb, reverb_delay_ms, reverb_feedback, reverb_mix, sample_rate);
 80011da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011dc:	f603 7344 	addw	r3, r3, #3908	@ 0xf44
 80011e0:	edd7 1a01 	vldr	s3, [r7, #4]
 80011e4:	ed97 1a04 	vldr	s2, [r7, #16]
 80011e8:	edd7 0a05 	vldr	s1, [r7, #20]
 80011ec:	ed97 0a06 	vldr	s0, [r7, #24]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff fd7d 	bl	8000cf0 <reverb_init>
}
 80011f6:	bf00      	nop
 80011f8:	3738      	adds	r7, #56	@ 0x38
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <apply_equalizer>:

// ---------------------------
// Custom Filter Apply Functions
// ---------------------------

float apply_equalizer(Equalizer* eq, float x) {
 80011fe:	b580      	push	{r7, lr}
 8001200:	b086      	sub	sp, #24
 8001202:	af00      	add	r7, sp, #0
 8001204:	6078      	str	r0, [r7, #4]
 8001206:	ed87 0a00 	vstr	s0, [r7]
    // Low band: low-pass only
    float low = apply_lpf(&eq->lpf, x);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	ed97 0a00 	vldr	s0, [r7]
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff fdd6 	bl	8000dc2 <apply_lpf>
 8001216:	ed87 0a05 	vstr	s0, [r7, #20]

    // High band: high-pass only
    float high = apply_hpf(&eq->hpf, x);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	3308      	adds	r3, #8
 800121e:	ed97 0a00 	vldr	s0, [r7]
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff fdf7 	bl	8000e16 <apply_hpf>
 8001228:	ed87 0a04 	vstr	s0, [r7, #16]

    // Mid band: band-pass (HPF followed by LPF)
    float mid = apply_hpf(&eq->mid_hpf, x);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	3314      	adds	r3, #20
 8001230:	ed97 0a00 	vldr	s0, [r7]
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff fdee 	bl	8000e16 <apply_hpf>
 800123a:	ed87 0a03 	vstr	s0, [r7, #12]
    mid = apply_lpf(&eq->mid_lpf, mid);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	3320      	adds	r3, #32
 8001242:	ed97 0a03 	vldr	s0, [r7, #12]
 8001246:	4618      	mov	r0, r3
 8001248:	f7ff fdbb 	bl	8000dc2 <apply_lpf>
 800124c:	ed87 0a03 	vstr	s0, [r7, #12]

    // Apply gain
    return low * eq->low_gain + mid * eq->mid_gain + high * eq->high_gain;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8001256:	edd7 7a05 	vldr	s15, [r7, #20]
 800125a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 8001264:	edd7 7a03 	vldr	s15, [r7, #12]
 8001268:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800126c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8001276:	edd7 7a04 	vldr	s15, [r7, #16]
 800127a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800127e:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001282:	eeb0 0a67 	vmov.f32	s0, s15
 8001286:	3718      	adds	r7, #24
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}

0800128c <apply_volume_gain>:

// Function to increase volume of a single audio sample
float apply_volume_gain(float sample, float gain) {
 800128c:	b480      	push	{r7}
 800128e:	b085      	sub	sp, #20
 8001290:	af00      	add	r7, sp, #0
 8001292:	ed87 0a01 	vstr	s0, [r7, #4]
 8001296:	edc7 0a00 	vstr	s1, [r7]
    // Apply gain to the sample
    float amplified = sample * gain;
 800129a:	ed97 7a01 	vldr	s14, [r7, #4]
 800129e:	edd7 7a00 	vldr	s15, [r7]
 80012a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012a6:	edc7 7a03 	vstr	s15, [r7, #12]

    // Clamp the result to the normalized range [-1.0f, 1.0f] to avoid clipping
    if (amplified > 1.0f) {
 80012aa:	edd7 7a03 	vldr	s15, [r7, #12]
 80012ae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80012b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ba:	dd03      	ble.n	80012c4 <apply_volume_gain+0x38>
        amplified = 1.0f;
 80012bc:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80012c0:	60fb      	str	r3, [r7, #12]
 80012c2:	e00a      	b.n	80012da <apply_volume_gain+0x4e>
    } else if (amplified < -1.0f) {
 80012c4:	edd7 7a03 	vldr	s15, [r7, #12]
 80012c8:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80012cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012d4:	d501      	bpl.n	80012da <apply_volume_gain+0x4e>
        amplified = -1.0f;
 80012d6:	4b06      	ldr	r3, [pc, #24]	@ (80012f0 <apply_volume_gain+0x64>)
 80012d8:	60fb      	str	r3, [r7, #12]
    }

    return amplified;
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	ee07 3a90 	vmov	s15, r3
}
 80012e0:	eeb0 0a67 	vmov.f32	s0, s15
 80012e4:	3714      	adds	r7, #20
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	bf800000 	.word	0xbf800000

080012f4 <apply_darthvader>:

float apply_darthvader(DarthVader* dv, float x) {
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	ed87 0a00 	vstr	s0, [r7]

    x = apply_pitchshifter(&dv->ps, x);                 // Apply pitch shifter
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	3334      	adds	r3, #52	@ 0x34
 8001304:	ed97 0a00 	vldr	s0, [r7]
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff fe4d 	bl	8000fa8 <apply_pitchshifter>
 800130e:	ed87 0a00 	vstr	s0, [r7]
    x = apply_distortion(x, dv->distortion_threshold);  // Apply distortion
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001318:	f603 6354 	addw	r3, r3, #3668	@ 0xe54
 800131c:	edd3 7a00 	vldr	s15, [r3]
 8001320:	eef0 0a67 	vmov.f32	s1, s15
 8001324:	ed97 0a00 	vldr	s0, [r7]
 8001328:	f7ff fd9e 	bl	8000e68 <apply_distortion>
 800132c:	ed87 0a00 	vstr	s0, [r7]
	x = apply_equalizer(&dv->eq, x);                    // then equalizer
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	ed97 0a00 	vldr	s0, [r7]
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff ff61 	bl	80011fe <apply_equalizer>
 800133c:	ed87 0a00 	vstr	s0, [r7]
	x = apply_reverb(&dv->reverb, x);                   // reverb
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	f603 7344 	addw	r3, r3, #3908	@ 0xf44
 8001346:	ed97 0a00 	vldr	s0, [r7]
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff fdb8 	bl	8000ec0 <apply_reverb>
 8001350:	ed87 0a00 	vstr	s0, [r7]
    x = apply_volume_gain(x, dv->volume_gain);          // volume gain last
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800135a:	f603 6358 	addw	r3, r3, #3672	@ 0xe58
 800135e:	edd3 7a00 	vldr	s15, [r3]
 8001362:	eef0 0a67 	vmov.f32	s1, s15
 8001366:	ed97 0a00 	vldr	s0, [r7]
 800136a:	f7ff ff8f 	bl	800128c <apply_volume_gain>
 800136e:	ed87 0a00 	vstr	s0, [r7]

    return x;
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	ee07 3a90 	vmov	s15, r3
}
 8001378:	eeb0 0a67 	vmov.f32	s0, s15
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
	...

08001384 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b088      	sub	sp, #32
 8001388:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800138a:	f107 030c 	add.w	r3, r7, #12
 800138e:	2200      	movs	r2, #0
 8001390:	601a      	str	r2, [r3, #0]
 8001392:	605a      	str	r2, [r3, #4]
 8001394:	609a      	str	r2, [r3, #8]
 8001396:	60da      	str	r2, [r3, #12]
 8001398:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800139a:	2300      	movs	r3, #0
 800139c:	60bb      	str	r3, [r7, #8]
 800139e:	4b3d      	ldr	r3, [pc, #244]	@ (8001494 <MX_GPIO_Init+0x110>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a2:	4a3c      	ldr	r2, [pc, #240]	@ (8001494 <MX_GPIO_Init+0x110>)
 80013a4:	f043 0304 	orr.w	r3, r3, #4
 80013a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013aa:	4b3a      	ldr	r3, [pc, #232]	@ (8001494 <MX_GPIO_Init+0x110>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ae:	f003 0304 	and.w	r3, r3, #4
 80013b2:	60bb      	str	r3, [r7, #8]
 80013b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	607b      	str	r3, [r7, #4]
 80013ba:	4b36      	ldr	r3, [pc, #216]	@ (8001494 <MX_GPIO_Init+0x110>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013be:	4a35      	ldr	r2, [pc, #212]	@ (8001494 <MX_GPIO_Init+0x110>)
 80013c0:	f043 0301 	orr.w	r3, r3, #1
 80013c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013c6:	4b33      	ldr	r3, [pc, #204]	@ (8001494 <MX_GPIO_Init+0x110>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ca:	f003 0301 	and.w	r3, r3, #1
 80013ce:	607b      	str	r3, [r7, #4]
 80013d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	603b      	str	r3, [r7, #0]
 80013d6:	4b2f      	ldr	r3, [pc, #188]	@ (8001494 <MX_GPIO_Init+0x110>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013da:	4a2e      	ldr	r2, [pc, #184]	@ (8001494 <MX_GPIO_Init+0x110>)
 80013dc:	f043 0302 	orr.w	r3, r3, #2
 80013e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013e2:	4b2c      	ldr	r3, [pc, #176]	@ (8001494 <MX_GPIO_Init+0x110>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e6:	f003 0302 	and.w	r3, r3, #2
 80013ea:	603b      	str	r3, [r7, #0]
 80013ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80013ee:	2200      	movs	r2, #0
 80013f0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80013f4:	4828      	ldr	r0, [pc, #160]	@ (8001498 <MX_GPIO_Init+0x114>)
 80013f6:	f001 ff05 	bl	8003204 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80013fa:	2200      	movs	r2, #0
 80013fc:	f44f 717e 	mov.w	r1, #1016	@ 0x3f8
 8001400:	4826      	ldr	r0, [pc, #152]	@ (800149c <MX_GPIO_Init+0x118>)
 8001402:	f001 feff 	bl	8003204 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001406:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800140a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800140c:	2301      	movs	r3, #1
 800140e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001410:	2300      	movs	r3, #0
 8001412:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001414:	2300      	movs	r3, #0
 8001416:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001418:	f107 030c 	add.w	r3, r7, #12
 800141c:	4619      	mov	r1, r3
 800141e:	481e      	ldr	r0, [pc, #120]	@ (8001498 <MX_GPIO_Init+0x114>)
 8001420:	f001 fd6c 	bl	8002efc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001424:	2307      	movs	r3, #7
 8001426:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001428:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800142c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800142e:	2301      	movs	r3, #1
 8001430:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001432:	f107 030c 	add.w	r3, r7, #12
 8001436:	4619      	mov	r1, r3
 8001438:	4818      	ldr	r0, [pc, #96]	@ (800149c <MX_GPIO_Init+0x118>)
 800143a:	f001 fd5f 	bl	8002efc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 800143e:	f44f 737e 	mov.w	r3, #1016	@ 0x3f8
 8001442:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001444:	2301      	movs	r3, #1
 8001446:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001448:	2300      	movs	r3, #0
 800144a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144c:	2300      	movs	r3, #0
 800144e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001450:	f107 030c 	add.w	r3, r7, #12
 8001454:	4619      	mov	r1, r3
 8001456:	4811      	ldr	r0, [pc, #68]	@ (800149c <MX_GPIO_Init+0x118>)
 8001458:	f001 fd50 	bl	8002efc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800145c:	2200      	movs	r2, #0
 800145e:	2100      	movs	r1, #0
 8001460:	2006      	movs	r0, #6
 8001462:	f001 f9a4 	bl	80027ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001466:	2006      	movs	r0, #6
 8001468:	f001 f9bd 	bl	80027e6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800146c:	2200      	movs	r2, #0
 800146e:	2100      	movs	r1, #0
 8001470:	2007      	movs	r0, #7
 8001472:	f001 f99c 	bl	80027ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001476:	2007      	movs	r0, #7
 8001478:	f001 f9b5 	bl	80027e6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800147c:	2200      	movs	r2, #0
 800147e:	2100      	movs	r1, #0
 8001480:	2008      	movs	r0, #8
 8001482:	f001 f994 	bl	80027ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001486:	2008      	movs	r0, #8
 8001488:	f001 f9ad 	bl	80027e6 <HAL_NVIC_EnableIRQ>

}
 800148c:	bf00      	nop
 800148e:	3720      	adds	r7, #32
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	40023800 	.word	0x40023800
 8001498:	40020800 	.word	0x40020800
 800149c:	40020400 	.word	0x40020400

080014a0 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_tx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80014a4:	4b13      	ldr	r3, [pc, #76]	@ (80014f4 <MX_I2S2_Init+0x54>)
 80014a6:	4a14      	ldr	r2, [pc, #80]	@ (80014f8 <MX_I2S2_Init+0x58>)
 80014a8:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80014aa:	4b12      	ldr	r3, [pc, #72]	@ (80014f4 <MX_I2S2_Init+0x54>)
 80014ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80014b0:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80014b2:	4b10      	ldr	r3, [pc, #64]	@ (80014f4 <MX_I2S2_Init+0x54>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 80014b8:	4b0e      	ldr	r3, [pc, #56]	@ (80014f4 <MX_I2S2_Init+0x54>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80014be:	4b0d      	ldr	r3, [pc, #52]	@ (80014f4 <MX_I2S2_Init+0x54>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 80014c4:	4b0b      	ldr	r3, [pc, #44]	@ (80014f4 <MX_I2S2_Init+0x54>)
 80014c6:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 80014ca:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80014cc:	4b09      	ldr	r3, [pc, #36]	@ (80014f4 <MX_I2S2_Init+0x54>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80014d2:	4b08      	ldr	r3, [pc, #32]	@ (80014f4 <MX_I2S2_Init+0x54>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80014d8:	4b06      	ldr	r3, [pc, #24]	@ (80014f4 <MX_I2S2_Init+0x54>)
 80014da:	2200      	movs	r2, #0
 80014dc:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80014de:	4805      	ldr	r0, [pc, #20]	@ (80014f4 <MX_I2S2_Init+0x54>)
 80014e0:	f001 fedc 	bl	800329c <HAL_I2S_Init>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 80014ea:	f000 f939 	bl	8001760 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80014ee:	bf00      	nop
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	20006480 	.word	0x20006480
 80014f8:	40003800 	.word	0x40003800

080014fc <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b090      	sub	sp, #64	@ 0x40
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001504:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	605a      	str	r2, [r3, #4]
 800150e:	609a      	str	r2, [r3, #8]
 8001510:	60da      	str	r2, [r3, #12]
 8001512:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001514:	f107 0314 	add.w	r3, r7, #20
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]
 800151c:	605a      	str	r2, [r3, #4]
 800151e:	609a      	str	r2, [r3, #8]
 8001520:	60da      	str	r2, [r3, #12]
 8001522:	611a      	str	r2, [r3, #16]
 8001524:	615a      	str	r2, [r3, #20]
  if(i2sHandle->Instance==SPI2)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a3b      	ldr	r2, [pc, #236]	@ (8001618 <HAL_I2S_MspInit+0x11c>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d16e      	bne.n	800160e <HAL_I2S_MspInit+0x112>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001530:	2301      	movs	r3, #1
 8001532:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001534:	23c0      	movs	r3, #192	@ 0xc0
 8001536:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 16;
 8001538:	2310      	movs	r3, #16
 800153a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800153c:	2302      	movs	r3, #2
 800153e:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001540:	f107 0314 	add.w	r3, r7, #20
 8001544:	4618      	mov	r0, r3
 8001546:	f003 f85b 	bl	8004600 <HAL_RCCEx_PeriphCLKConfig>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <HAL_I2S_MspInit+0x58>
    {
      Error_Handler();
 8001550:	f000 f906 	bl	8001760 <Error_Handler>
    }

    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001554:	2300      	movs	r3, #0
 8001556:	613b      	str	r3, [r7, #16]
 8001558:	4b30      	ldr	r3, [pc, #192]	@ (800161c <HAL_I2S_MspInit+0x120>)
 800155a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800155c:	4a2f      	ldr	r2, [pc, #188]	@ (800161c <HAL_I2S_MspInit+0x120>)
 800155e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001562:	6413      	str	r3, [r2, #64]	@ 0x40
 8001564:	4b2d      	ldr	r3, [pc, #180]	@ (800161c <HAL_I2S_MspInit+0x120>)
 8001566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001568:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800156c:	613b      	str	r3, [r7, #16]
 800156e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001570:	2300      	movs	r3, #0
 8001572:	60fb      	str	r3, [r7, #12]
 8001574:	4b29      	ldr	r3, [pc, #164]	@ (800161c <HAL_I2S_MspInit+0x120>)
 8001576:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001578:	4a28      	ldr	r2, [pc, #160]	@ (800161c <HAL_I2S_MspInit+0x120>)
 800157a:	f043 0302 	orr.w	r3, r3, #2
 800157e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001580:	4b26      	ldr	r3, [pc, #152]	@ (800161c <HAL_I2S_MspInit+0x120>)
 8001582:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001584:	f003 0302 	and.w	r3, r3, #2
 8001588:	60fb      	str	r3, [r7, #12]
 800158a:	68fb      	ldr	r3, [r7, #12]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 800158c:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 8001590:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001592:	2302      	movs	r3, #2
 8001594:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001596:	2300      	movs	r3, #0
 8001598:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159a:	2300      	movs	r3, #0
 800159c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800159e:	2305      	movs	r3, #5
 80015a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015a2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80015a6:	4619      	mov	r1, r3
 80015a8:	481d      	ldr	r0, [pc, #116]	@ (8001620 <HAL_I2S_MspInit+0x124>)
 80015aa:	f001 fca7 	bl	8002efc <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 80015ae:	4b1d      	ldr	r3, [pc, #116]	@ (8001624 <HAL_I2S_MspInit+0x128>)
 80015b0:	4a1d      	ldr	r2, [pc, #116]	@ (8001628 <HAL_I2S_MspInit+0x12c>)
 80015b2:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 80015b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001624 <HAL_I2S_MspInit+0x128>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015ba:	4b1a      	ldr	r3, [pc, #104]	@ (8001624 <HAL_I2S_MspInit+0x128>)
 80015bc:	2240      	movs	r2, #64	@ 0x40
 80015be:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015c0:	4b18      	ldr	r3, [pc, #96]	@ (8001624 <HAL_I2S_MspInit+0x128>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80015c6:	4b17      	ldr	r3, [pc, #92]	@ (8001624 <HAL_I2S_MspInit+0x128>)
 80015c8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80015cc:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80015ce:	4b15      	ldr	r3, [pc, #84]	@ (8001624 <HAL_I2S_MspInit+0x128>)
 80015d0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80015d4:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80015d6:	4b13      	ldr	r3, [pc, #76]	@ (8001624 <HAL_I2S_MspInit+0x128>)
 80015d8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015dc:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 80015de:	4b11      	ldr	r3, [pc, #68]	@ (8001624 <HAL_I2S_MspInit+0x128>)
 80015e0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80015e4:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80015e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001624 <HAL_I2S_MspInit+0x128>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015ec:	4b0d      	ldr	r3, [pc, #52]	@ (8001624 <HAL_I2S_MspInit+0x128>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80015f2:	480c      	ldr	r0, [pc, #48]	@ (8001624 <HAL_I2S_MspInit+0x128>)
 80015f4:	f001 f912 	bl	800281c <HAL_DMA_Init>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <HAL_I2S_MspInit+0x106>
    {
      Error_Handler();
 80015fe:	f000 f8af 	bl	8001760 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmatx,hdma_spi2_tx);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4a07      	ldr	r2, [pc, #28]	@ (8001624 <HAL_I2S_MspInit+0x128>)
 8001606:	639a      	str	r2, [r3, #56]	@ 0x38
 8001608:	4a06      	ldr	r2, [pc, #24]	@ (8001624 <HAL_I2S_MspInit+0x128>)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800160e:	bf00      	nop
 8001610:	3740      	adds	r7, #64	@ 0x40
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	40003800 	.word	0x40003800
 800161c:	40023800 	.word	0x40023800
 8001620:	40020400 	.word	0x40020400
 8001624:	200064c8 	.word	0x200064c8
 8001628:	40026070 	.word	0x40026070

0800162c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  filters_init();
 8001630:	f7ff f91e 	bl	8000870 <filters_init>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001634:	f000 fb44 	bl	8001cc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001638:	f000 f828 	bl	800168c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800163c:	f7ff fea2 	bl	8001384 <MX_GPIO_Init>
  MX_DMA_Init();
 8001640:	f7ff fab0 	bl	8000ba4 <MX_DMA_Init>
  MX_ADC1_Init();
 8001644:	f7ff f84c 	bl	80006e0 <MX_ADC1_Init>
  MX_TIM2_Init();
 8001648:	f000 fa9e 	bl	8001b88 <MX_TIM2_Init>
  MX_I2S2_Init();
 800164c:	f7ff ff28 	bl	80014a0 <MX_I2S2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 8001650:	4809      	ldr	r0, [pc, #36]	@ (8001678 <main+0x4c>)
 8001652:	f003 f977 	bl	8004944 <HAL_TIM_Base_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) IN_BUFFER, BUFFER_SIZE/2);
 8001656:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800165a:	4908      	ldr	r1, [pc, #32]	@ (800167c <main+0x50>)
 800165c:	4808      	ldr	r0, [pc, #32]	@ (8001680 <main+0x54>)
 800165e:	f000 fc09 	bl	8001e74 <HAL_ADC_Start_DMA>
  HAL_I2S_Transmit_DMA(&hi2s2, (uint16_t*) OUT_BUFFER, BUFFER_SIZE*2);
 8001662:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001666:	4907      	ldr	r1, [pc, #28]	@ (8001684 <main+0x58>)
 8001668:	4807      	ldr	r0, [pc, #28]	@ (8001688 <main+0x5c>)
 800166a:	f001 ff57 	bl	800351c <HAL_I2S_Transmit_DMA>
  lcd_init();
 800166e:	f7fe ffe4 	bl	800063a <lcd_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001672:	bf00      	nop
 8001674:	e7fd      	b.n	8001672 <main+0x46>
 8001676:	bf00      	nop
 8001678:	2000652c 	.word	0x2000652c
 800167c:	200000dc 	.word	0x200000dc
 8001680:	20000034 	.word	0x20000034
 8001684:	200008dc 	.word	0x200008dc
 8001688:	20006480 	.word	0x20006480

0800168c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b094      	sub	sp, #80	@ 0x50
 8001690:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001692:	f107 0320 	add.w	r3, r7, #32
 8001696:	2230      	movs	r2, #48	@ 0x30
 8001698:	2100      	movs	r1, #0
 800169a:	4618      	mov	r0, r3
 800169c:	f003 fd38 	bl	8005110 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016a0:	f107 030c 	add.w	r3, r7, #12
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	605a      	str	r2, [r3, #4]
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	60da      	str	r2, [r3, #12]
 80016ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016b0:	2300      	movs	r3, #0
 80016b2:	60bb      	str	r3, [r7, #8]
 80016b4:	4b28      	ldr	r3, [pc, #160]	@ (8001758 <SystemClock_Config+0xcc>)
 80016b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016b8:	4a27      	ldr	r2, [pc, #156]	@ (8001758 <SystemClock_Config+0xcc>)
 80016ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016be:	6413      	str	r3, [r2, #64]	@ 0x40
 80016c0:	4b25      	ldr	r3, [pc, #148]	@ (8001758 <SystemClock_Config+0xcc>)
 80016c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016c8:	60bb      	str	r3, [r7, #8]
 80016ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016cc:	2300      	movs	r3, #0
 80016ce:	607b      	str	r3, [r7, #4]
 80016d0:	4b22      	ldr	r3, [pc, #136]	@ (800175c <SystemClock_Config+0xd0>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a21      	ldr	r2, [pc, #132]	@ (800175c <SystemClock_Config+0xd0>)
 80016d6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80016da:	6013      	str	r3, [r2, #0]
 80016dc:	4b1f      	ldr	r3, [pc, #124]	@ (800175c <SystemClock_Config+0xd0>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80016e4:	607b      	str	r3, [r7, #4]
 80016e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016e8:	2302      	movs	r3, #2
 80016ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016ec:	2301      	movs	r3, #1
 80016ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016f0:	2310      	movs	r3, #16
 80016f2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016f4:	2302      	movs	r3, #2
 80016f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016f8:	2300      	movs	r3, #0
 80016fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80016fc:	2308      	movs	r3, #8
 80016fe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001700:	2360      	movs	r3, #96	@ 0x60
 8001702:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001704:	2302      	movs	r3, #2
 8001706:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001708:	2304      	movs	r3, #4
 800170a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800170c:	f107 0320 	add.w	r3, r7, #32
 8001710:	4618      	mov	r0, r3
 8001712:	f002 fb51 	bl	8003db8 <HAL_RCC_OscConfig>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800171c:	f000 f820 	bl	8001760 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001720:	230f      	movs	r3, #15
 8001722:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001724:	2302      	movs	r3, #2
 8001726:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001728:	2380      	movs	r3, #128	@ 0x80
 800172a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800172c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001730:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001732:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001736:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001738:	f107 030c 	add.w	r3, r7, #12
 800173c:	2101      	movs	r1, #1
 800173e:	4618      	mov	r0, r3
 8001740:	f002 fdb2 	bl	80042a8 <HAL_RCC_ClockConfig>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800174a:	f000 f809 	bl	8001760 <Error_Handler>
  }
}
 800174e:	bf00      	nop
 8001750:	3750      	adds	r7, #80	@ 0x50
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	40023800 	.word	0x40023800
 800175c:	40007000 	.word	0x40007000

08001760 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001764:	b672      	cpsid	i
}
 8001766:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001768:	bf00      	nop
 800176a:	e7fd      	b.n	8001768 <Error_Handler+0x8>

0800176c <mainMenuDisplay>:
static void mainMenuDisplay();

enum SELECT_FILTER SELECTED_FILTER = 0;

void mainMenuDisplay()
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
	lcd_put_cur(0, 0);
 8001770:	2100      	movs	r1, #0
 8001772:	2000      	movs	r0, #0
 8001774:	f7fe ff42 	bl	80005fc <lcd_put_cur>
	//               0123456789abcdef
	if ((int) SELECTED_FILTER == (int) CURRENT_FILTER){
 8001778:	4b1f      	ldr	r3, [pc, #124]	@ (80017f8 <mainMenuDisplay+0x8c>)
 800177a:	781a      	ldrb	r2, [r3, #0]
 800177c:	4b1f      	ldr	r3, [pc, #124]	@ (80017fc <mainMenuDisplay+0x90>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	429a      	cmp	r2, r3
 8001782:	d103      	bne.n	800178c <mainMenuDisplay+0x20>
		lcd_send_string("  Filtro atual: ");
 8001784:	481e      	ldr	r0, [pc, #120]	@ (8001800 <mainMenuDisplay+0x94>)
 8001786:	f7fe ff95 	bl	80006b4 <lcd_send_string>
 800178a:	e002      	b.n	8001792 <mainMenuDisplay+0x26>
	}
	else{
		lcd_send_string("  Selecionar ?  ");
 800178c:	481d      	ldr	r0, [pc, #116]	@ (8001804 <mainMenuDisplay+0x98>)
 800178e:	f7fe ff91 	bl	80006b4 <lcd_send_string>
	}

	lcd_put_cur(1, 0);
 8001792:	2100      	movs	r1, #0
 8001794:	2001      	movs	r0, #1
 8001796:	f7fe ff31 	bl	80005fc <lcd_put_cur>
	switch(SELECTED_FILTER)
 800179a:	4b17      	ldr	r3, [pc, #92]	@ (80017f8 <mainMenuDisplay+0x8c>)
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	2b05      	cmp	r3, #5
 80017a0:	d826      	bhi.n	80017f0 <mainMenuDisplay+0x84>
 80017a2:	a201      	add	r2, pc, #4	@ (adr r2, 80017a8 <mainMenuDisplay+0x3c>)
 80017a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017a8:	080017c1 	.word	0x080017c1
 80017ac:	080017c9 	.word	0x080017c9
 80017b0:	080017d1 	.word	0x080017d1
 80017b4:	080017d9 	.word	0x080017d9
 80017b8:	080017e1 	.word	0x080017e1
 80017bc:	080017e9 	.word	0x080017e9
	    {
	        case S_VADER:
	        	//               0123456789abcdef
	        	lcd_send_string("  Darth  Vader  ");
 80017c0:	4811      	ldr	r0, [pc, #68]	@ (8001808 <mainMenuDisplay+0x9c>)
 80017c2:	f7fe ff77 	bl	80006b4 <lcd_send_string>
	            break;
 80017c6:	e014      	b.n	80017f2 <mainMenuDisplay+0x86>

	        case S_PRIME:
	        	//               0123456789abcdef
	        	lcd_send_string(" Optimus  Prime ");
 80017c8:	4810      	ldr	r0, [pc, #64]	@ (800180c <mainMenuDisplay+0xa0>)
 80017ca:	f7fe ff73 	bl	80006b4 <lcd_send_string>
	        	break;
 80017ce:	e010      	b.n	80017f2 <mainMenuDisplay+0x86>

	        case S_LOW_PASS:
	        	//               0123456789abcdef
	        	lcd_send_string("  Passa  Baixa  ");
 80017d0:	480f      	ldr	r0, [pc, #60]	@ (8001810 <mainMenuDisplay+0xa4>)
 80017d2:	f7fe ff6f 	bl	80006b4 <lcd_send_string>
	        	break;
 80017d6:	e00c      	b.n	80017f2 <mainMenuDisplay+0x86>

	        case S_HIGH_PASS:
	        	//               0123456789abcdef
	        	lcd_send_string("   Passa Alta   ");
 80017d8:	480e      	ldr	r0, [pc, #56]	@ (8001814 <mainMenuDisplay+0xa8>)
 80017da:	f7fe ff6b 	bl	80006b4 <lcd_send_string>
	        	break;
 80017de:	e008      	b.n	80017f2 <mainMenuDisplay+0x86>

	        case S_LOW_PITCH:
	        	//               0123456789abcdef
	        	lcd_send_string("   Voz  Aguda   ");
 80017e0:	480d      	ldr	r0, [pc, #52]	@ (8001818 <mainMenuDisplay+0xac>)
 80017e2:	f7fe ff67 	bl	80006b4 <lcd_send_string>
	        	break;
 80017e6:	e004      	b.n	80017f2 <mainMenuDisplay+0x86>

	        case S_HIGH_PITCH:
	        	//               0123456789abcdef
	        	lcd_send_string("   Voz  Grave   ");
 80017e8:	480c      	ldr	r0, [pc, #48]	@ (800181c <mainMenuDisplay+0xb0>)
 80017ea:	f7fe ff63 	bl	80006b4 <lcd_send_string>
	        	break;
 80017ee:	e000      	b.n	80017f2 <mainMenuDisplay+0x86>
	        default:
	            break;
 80017f0:	bf00      	nop
	    }
}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	20006528 	.word	0x20006528
 80017fc:	2000647c 	.word	0x2000647c
 8001800:	08005180 	.word	0x08005180
 8001804:	08005194 	.word	0x08005194
 8001808:	080051a8 	.word	0x080051a8
 800180c:	080051bc 	.word	0x080051bc
 8001810:	080051d0 	.word	0x080051d0
 8001814:	080051e4 	.word	0x080051e4
 8001818:	080051f8 	.word	0x080051f8
 800181c:	0800520c 	.word	0x0800520c

08001820 <mainMenuOnLeft>:

void mainMenuOnLeft()
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
	switch(SELECTED_FILTER)
 8001824:	4b18      	ldr	r3, [pc, #96]	@ (8001888 <mainMenuOnLeft+0x68>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	2b05      	cmp	r3, #5
 800182a:	d827      	bhi.n	800187c <mainMenuOnLeft+0x5c>
 800182c:	a201      	add	r2, pc, #4	@ (adr r2, 8001834 <mainMenuOnLeft+0x14>)
 800182e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001832:	bf00      	nop
 8001834:	0800184d 	.word	0x0800184d
 8001838:	08001855 	.word	0x08001855
 800183c:	0800185d 	.word	0x0800185d
 8001840:	08001865 	.word	0x08001865
 8001844:	0800186d 	.word	0x0800186d
 8001848:	08001875 	.word	0x08001875
		{
			case S_VADER:
				SELECTED_FILTER = S_HIGH_PITCH;
 800184c:	4b0e      	ldr	r3, [pc, #56]	@ (8001888 <mainMenuOnLeft+0x68>)
 800184e:	2205      	movs	r2, #5
 8001850:	701a      	strb	r2, [r3, #0]
				break;
 8001852:	e014      	b.n	800187e <mainMenuOnLeft+0x5e>

			case S_PRIME:
				SELECTED_FILTER = S_VADER;
 8001854:	4b0c      	ldr	r3, [pc, #48]	@ (8001888 <mainMenuOnLeft+0x68>)
 8001856:	2200      	movs	r2, #0
 8001858:	701a      	strb	r2, [r3, #0]
				break;
 800185a:	e010      	b.n	800187e <mainMenuOnLeft+0x5e>

			case S_LOW_PASS:
				SELECTED_FILTER = S_PRIME;
 800185c:	4b0a      	ldr	r3, [pc, #40]	@ (8001888 <mainMenuOnLeft+0x68>)
 800185e:	2201      	movs	r2, #1
 8001860:	701a      	strb	r2, [r3, #0]
				break;
 8001862:	e00c      	b.n	800187e <mainMenuOnLeft+0x5e>

			case S_HIGH_PASS:
				SELECTED_FILTER = S_LOW_PASS;
 8001864:	4b08      	ldr	r3, [pc, #32]	@ (8001888 <mainMenuOnLeft+0x68>)
 8001866:	2202      	movs	r2, #2
 8001868:	701a      	strb	r2, [r3, #0]
				break;
 800186a:	e008      	b.n	800187e <mainMenuOnLeft+0x5e>

			case S_LOW_PITCH:
				SELECTED_FILTER = S_HIGH_PASS;
 800186c:	4b06      	ldr	r3, [pc, #24]	@ (8001888 <mainMenuOnLeft+0x68>)
 800186e:	2203      	movs	r2, #3
 8001870:	701a      	strb	r2, [r3, #0]
				break;
 8001872:	e004      	b.n	800187e <mainMenuOnLeft+0x5e>

			case S_HIGH_PITCH:
				SELECTED_FILTER = S_LOW_PITCH;
 8001874:	4b04      	ldr	r3, [pc, #16]	@ (8001888 <mainMenuOnLeft+0x68>)
 8001876:	2204      	movs	r2, #4
 8001878:	701a      	strb	r2, [r3, #0]
				break;
 800187a:	e000      	b.n	800187e <mainMenuOnLeft+0x5e>
			default:
				break;
 800187c:	bf00      	nop
		}

	mainMenuDisplay();
 800187e:	f7ff ff75 	bl	800176c <mainMenuDisplay>
}
 8001882:	bf00      	nop
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	20006528 	.word	0x20006528

0800188c <mainMenuOnRight>:

void mainMenuOnRight()
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
	switch(SELECTED_FILTER)
 8001890:	4b18      	ldr	r3, [pc, #96]	@ (80018f4 <mainMenuOnRight+0x68>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	2b05      	cmp	r3, #5
 8001896:	d827      	bhi.n	80018e8 <mainMenuOnRight+0x5c>
 8001898:	a201      	add	r2, pc, #4	@ (adr r2, 80018a0 <mainMenuOnRight+0x14>)
 800189a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800189e:	bf00      	nop
 80018a0:	080018b9 	.word	0x080018b9
 80018a4:	080018c1 	.word	0x080018c1
 80018a8:	080018c9 	.word	0x080018c9
 80018ac:	080018d1 	.word	0x080018d1
 80018b0:	080018d9 	.word	0x080018d9
 80018b4:	080018e1 	.word	0x080018e1
		{
			case S_VADER:
				SELECTED_FILTER = S_PRIME;
 80018b8:	4b0e      	ldr	r3, [pc, #56]	@ (80018f4 <mainMenuOnRight+0x68>)
 80018ba:	2201      	movs	r2, #1
 80018bc:	701a      	strb	r2, [r3, #0]
				break;
 80018be:	e014      	b.n	80018ea <mainMenuOnRight+0x5e>

			case S_PRIME:
				SELECTED_FILTER = S_LOW_PASS;
 80018c0:	4b0c      	ldr	r3, [pc, #48]	@ (80018f4 <mainMenuOnRight+0x68>)
 80018c2:	2202      	movs	r2, #2
 80018c4:	701a      	strb	r2, [r3, #0]
				break;
 80018c6:	e010      	b.n	80018ea <mainMenuOnRight+0x5e>

			case S_LOW_PASS:
				SELECTED_FILTER = S_HIGH_PASS;
 80018c8:	4b0a      	ldr	r3, [pc, #40]	@ (80018f4 <mainMenuOnRight+0x68>)
 80018ca:	2203      	movs	r2, #3
 80018cc:	701a      	strb	r2, [r3, #0]
				break;
 80018ce:	e00c      	b.n	80018ea <mainMenuOnRight+0x5e>

			case S_HIGH_PASS:
				SELECTED_FILTER = S_LOW_PITCH;
 80018d0:	4b08      	ldr	r3, [pc, #32]	@ (80018f4 <mainMenuOnRight+0x68>)
 80018d2:	2204      	movs	r2, #4
 80018d4:	701a      	strb	r2, [r3, #0]
				break;
 80018d6:	e008      	b.n	80018ea <mainMenuOnRight+0x5e>

			case S_LOW_PITCH:
				SELECTED_FILTER = S_HIGH_PITCH;
 80018d8:	4b06      	ldr	r3, [pc, #24]	@ (80018f4 <mainMenuOnRight+0x68>)
 80018da:	2205      	movs	r2, #5
 80018dc:	701a      	strb	r2, [r3, #0]
				break;
 80018de:	e004      	b.n	80018ea <mainMenuOnRight+0x5e>

			case S_HIGH_PITCH:
				SELECTED_FILTER = S_VADER;
 80018e0:	4b04      	ldr	r3, [pc, #16]	@ (80018f4 <mainMenuOnRight+0x68>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	701a      	strb	r2, [r3, #0]
				break;
 80018e6:	e000      	b.n	80018ea <mainMenuOnRight+0x5e>
			default:
				break;
 80018e8:	bf00      	nop
		}

	mainMenuDisplay();
 80018ea:	f7ff ff3f 	bl	800176c <mainMenuDisplay>
}
 80018ee:	bf00      	nop
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	20006528 	.word	0x20006528

080018f8 <mainMenuOnPress>:

void mainMenuOnPress()
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
	switch(SELECTED_FILTER)
 80018fc:	4b18      	ldr	r3, [pc, #96]	@ (8001960 <mainMenuOnPress+0x68>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	2b05      	cmp	r3, #5
 8001902:	d827      	bhi.n	8001954 <mainMenuOnPress+0x5c>
 8001904:	a201      	add	r2, pc, #4	@ (adr r2, 800190c <mainMenuOnPress+0x14>)
 8001906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800190a:	bf00      	nop
 800190c:	08001925 	.word	0x08001925
 8001910:	0800192d 	.word	0x0800192d
 8001914:	08001935 	.word	0x08001935
 8001918:	0800193d 	.word	0x0800193d
 800191c:	08001945 	.word	0x08001945
 8001920:	0800194d 	.word	0x0800194d
		{
			case S_VADER:
				CURRENT_FILTER = DARTH_VADER;
 8001924:	4b0f      	ldr	r3, [pc, #60]	@ (8001964 <mainMenuOnPress+0x6c>)
 8001926:	2200      	movs	r2, #0
 8001928:	701a      	strb	r2, [r3, #0]
				break;
 800192a:	e014      	b.n	8001956 <mainMenuOnPress+0x5e>

			case S_PRIME:
				CURRENT_FILTER = OPTIMUS_PRIME;
 800192c:	4b0d      	ldr	r3, [pc, #52]	@ (8001964 <mainMenuOnPress+0x6c>)
 800192e:	2201      	movs	r2, #1
 8001930:	701a      	strb	r2, [r3, #0]
				break;
 8001932:	e010      	b.n	8001956 <mainMenuOnPress+0x5e>

			case S_LOW_PASS:
				CURRENT_FILTER = LOW_PASS;
 8001934:	4b0b      	ldr	r3, [pc, #44]	@ (8001964 <mainMenuOnPress+0x6c>)
 8001936:	2202      	movs	r2, #2
 8001938:	701a      	strb	r2, [r3, #0]
				break;
 800193a:	e00c      	b.n	8001956 <mainMenuOnPress+0x5e>

			case S_HIGH_PASS:
				CURRENT_FILTER = HIGH_PASS;
 800193c:	4b09      	ldr	r3, [pc, #36]	@ (8001964 <mainMenuOnPress+0x6c>)
 800193e:	2203      	movs	r2, #3
 8001940:	701a      	strb	r2, [r3, #0]
				break;
 8001942:	e008      	b.n	8001956 <mainMenuOnPress+0x5e>

			case S_LOW_PITCH:
				CURRENT_FILTER = LOW_PITCH;
 8001944:	4b07      	ldr	r3, [pc, #28]	@ (8001964 <mainMenuOnPress+0x6c>)
 8001946:	2204      	movs	r2, #4
 8001948:	701a      	strb	r2, [r3, #0]
				break;
 800194a:	e004      	b.n	8001956 <mainMenuOnPress+0x5e>

			case S_HIGH_PITCH:
				CURRENT_FILTER = HIGH_PITCH;
 800194c:	4b05      	ldr	r3, [pc, #20]	@ (8001964 <mainMenuOnPress+0x6c>)
 800194e:	2205      	movs	r2, #5
 8001950:	701a      	strb	r2, [r3, #0]
				break;
 8001952:	e000      	b.n	8001956 <mainMenuOnPress+0x5e>
			default:
				break;
 8001954:	bf00      	nop
		}

	mainMenuDisplay();
 8001956:	f7ff ff09 	bl	800176c <mainMenuDisplay>
}
 800195a:	bf00      	nop
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	20006528 	.word	0x20006528
 8001964:	2000647c 	.word	0x2000647c

08001968 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800196e:	2300      	movs	r3, #0
 8001970:	607b      	str	r3, [r7, #4]
 8001972:	4b10      	ldr	r3, [pc, #64]	@ (80019b4 <HAL_MspInit+0x4c>)
 8001974:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001976:	4a0f      	ldr	r2, [pc, #60]	@ (80019b4 <HAL_MspInit+0x4c>)
 8001978:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800197c:	6453      	str	r3, [r2, #68]	@ 0x44
 800197e:	4b0d      	ldr	r3, [pc, #52]	@ (80019b4 <HAL_MspInit+0x4c>)
 8001980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001982:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001986:	607b      	str	r3, [r7, #4]
 8001988:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800198a:	2300      	movs	r3, #0
 800198c:	603b      	str	r3, [r7, #0]
 800198e:	4b09      	ldr	r3, [pc, #36]	@ (80019b4 <HAL_MspInit+0x4c>)
 8001990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001992:	4a08      	ldr	r2, [pc, #32]	@ (80019b4 <HAL_MspInit+0x4c>)
 8001994:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001998:	6413      	str	r3, [r2, #64]	@ 0x40
 800199a:	4b06      	ldr	r3, [pc, #24]	@ (80019b4 <HAL_MspInit+0x4c>)
 800199c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800199e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019a2:	603b      	str	r3, [r7, #0]
 80019a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019a6:	bf00      	nop
 80019a8:	370c      	adds	r7, #12
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	40023800 	.word	0x40023800

080019b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019bc:	bf00      	nop
 80019be:	e7fd      	b.n	80019bc <NMI_Handler+0x4>

080019c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019c4:	bf00      	nop
 80019c6:	e7fd      	b.n	80019c4 <HardFault_Handler+0x4>

080019c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019cc:	bf00      	nop
 80019ce:	e7fd      	b.n	80019cc <MemManage_Handler+0x4>

080019d0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019d4:	bf00      	nop
 80019d6:	e7fd      	b.n	80019d4 <BusFault_Handler+0x4>

080019d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019dc:	bf00      	nop
 80019de:	e7fd      	b.n	80019dc <UsageFault_Handler+0x4>

080019e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019e4:	bf00      	nop
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr

080019ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019ee:	b480      	push	{r7}
 80019f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019f2:	bf00      	nop
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a00:	bf00      	nop
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr

08001a0a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a0e:	f000 f9a9 	bl	8001d64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a12:	bf00      	nop
 8001a14:	bd80      	pop	{r7, pc}

08001a16 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001a16:	b580      	push	{r7, lr}
 8001a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001a1a:	2001      	movs	r0, #1
 8001a1c:	f001 fc26 	bl	800326c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001a20:	bf00      	nop
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001a28:	2002      	movs	r0, #2
 8001a2a:	f001 fc1f 	bl	800326c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001a2e:	bf00      	nop
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001a32:	b580      	push	{r7, lr}
 8001a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001a36:	2004      	movs	r0, #4
 8001a38:	f001 fc18 	bl	800326c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001a3c:	bf00      	nop
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001a44:	4802      	ldr	r0, [pc, #8]	@ (8001a50 <DMA1_Stream4_IRQHandler+0x10>)
 8001a46:	f000 ffef 	bl	8002a28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001a4a:	bf00      	nop
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	200064c8 	.word	0x200064c8

08001a54 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a58:	4802      	ldr	r0, [pc, #8]	@ (8001a64 <TIM2_IRQHandler+0x10>)
 8001a5a:	f002 ffcd 	bl	80049f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a5e:	bf00      	nop
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	2000652c 	.word	0x2000652c

08001a68 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001a6c:	4802      	ldr	r0, [pc, #8]	@ (8001a78 <DMA2_Stream0_IRQHandler+0x10>)
 8001a6e:	f000 ffdb 	bl	8002a28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001a72:	bf00      	nop
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	2000007c 	.word	0x2000007c

08001a7c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Callback (uint16_t GPIO_Pin)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	4603      	mov	r3, r0
 8001a84:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == GPIO_PIN_0){
 8001a86:	88fb      	ldrh	r3, [r7, #6]
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d102      	bne.n	8001a92 <HAL_GPIO_EXTI_Callback+0x16>
		mainMenuOnLeft();
 8001a8c:	f7ff fec8 	bl	8001820 <mainMenuOnLeft>
	}
	else if(GPIO_Pin == GPIO_PIN_2)
	{
		mainMenuOnRight();
	}
}
 8001a90:	e00a      	b.n	8001aa8 <HAL_GPIO_EXTI_Callback+0x2c>
	else if(GPIO_Pin == GPIO_PIN_1)
 8001a92:	88fb      	ldrh	r3, [r7, #6]
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d102      	bne.n	8001a9e <HAL_GPIO_EXTI_Callback+0x22>
		mainMenuOnPress();
 8001a98:	f7ff ff2e 	bl	80018f8 <mainMenuOnPress>
}
 8001a9c:	e004      	b.n	8001aa8 <HAL_GPIO_EXTI_Callback+0x2c>
	else if(GPIO_Pin == GPIO_PIN_2)
 8001a9e:	88fb      	ldrh	r3, [r7, #6]
 8001aa0:	2b04      	cmp	r3, #4
 8001aa2:	d101      	bne.n	8001aa8 <HAL_GPIO_EXTI_Callback+0x2c>
		mainMenuOnRight();
 8001aa4:	f7ff fef2 	bl	800188c <mainMenuOnRight>
}
 8001aa8:	bf00      	nop
 8001aaa:	3708      	adds	r7, #8
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}

08001ab0 <HAL_I2S_TxHalfCpltCallback>:


uint16_t count = 0;
void HAL_I2S_TxHalfCpltCallback (I2S_HandleTypeDef * hi2s)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
	process_in_buffer = &(IN_BUFFER[0]);
 8001ab8:	4b08      	ldr	r3, [pc, #32]	@ (8001adc <HAL_I2S_TxHalfCpltCallback+0x2c>)
 8001aba:	4a09      	ldr	r2, [pc, #36]	@ (8001ae0 <HAL_I2S_TxHalfCpltCallback+0x30>)
 8001abc:	601a      	str	r2, [r3, #0]
	process_out_buffer = &(OUT_BUFFER[0]);
 8001abe:	4b09      	ldr	r3, [pc, #36]	@ (8001ae4 <HAL_I2S_TxHalfCpltCallback+0x34>)
 8001ac0:	4a09      	ldr	r2, [pc, #36]	@ (8001ae8 <HAL_I2S_TxHalfCpltCallback+0x38>)
 8001ac2:	601a      	str	r2, [r3, #0]
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &(IN_BUFFER[BUFFER_SIZE/2]), BUFFER_SIZE/2);
 8001ac4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ac8:	4908      	ldr	r1, [pc, #32]	@ (8001aec <HAL_I2S_TxHalfCpltCallback+0x3c>)
 8001aca:	4809      	ldr	r0, [pc, #36]	@ (8001af0 <HAL_I2S_TxHalfCpltCallback+0x40>)
 8001acc:	f000 f9d2 	bl	8001e74 <HAL_ADC_Start_DMA>
	processHalfBuffer();
 8001ad0:	f7fe ffba 	bl	8000a48 <processHalfBuffer>
}
 8001ad4:	bf00      	nop
 8001ad6:	3708      	adds	r7, #8
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	20000000 	.word	0x20000000
 8001ae0:	200000dc 	.word	0x200000dc
 8001ae4:	20000004 	.word	0x20000004
 8001ae8:	200008dc 	.word	0x200008dc
 8001aec:	200004dc 	.word	0x200004dc
 8001af0:	20000034 	.word	0x20000034

08001af4 <HAL_I2S_TxCpltCallback>:

void HAL_I2S_TxCpltCallback (I2S_HandleTypeDef * hi2s)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
	count++;
 8001afc:	4b11      	ldr	r3, [pc, #68]	@ (8001b44 <HAL_I2S_TxCpltCallback+0x50>)
 8001afe:	881b      	ldrh	r3, [r3, #0]
 8001b00:	3301      	adds	r3, #1
 8001b02:	b29a      	uxth	r2, r3
 8001b04:	4b0f      	ldr	r3, [pc, #60]	@ (8001b44 <HAL_I2S_TxCpltCallback+0x50>)
 8001b06:	801a      	strh	r2, [r3, #0]
	if (count==48)
 8001b08:	4b0e      	ldr	r3, [pc, #56]	@ (8001b44 <HAL_I2S_TxCpltCallback+0x50>)
 8001b0a:	881b      	ldrh	r3, [r3, #0]
 8001b0c:	2b30      	cmp	r3, #48	@ 0x30
 8001b0e:	d107      	bne.n	8001b20 <HAL_I2S_TxCpltCallback+0x2c>
	{
		count = 0;
 8001b10:	4b0c      	ldr	r3, [pc, #48]	@ (8001b44 <HAL_I2S_TxCpltCallback+0x50>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001b16:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001b1a:	480b      	ldr	r0, [pc, #44]	@ (8001b48 <HAL_I2S_TxCpltCallback+0x54>)
 8001b1c:	f001 fb8b 	bl	8003236 <HAL_GPIO_TogglePin>
	}
	process_in_buffer = &(IN_BUFFER[BUFFER_SIZE/2]);
 8001b20:	4b0a      	ldr	r3, [pc, #40]	@ (8001b4c <HAL_I2S_TxCpltCallback+0x58>)
 8001b22:	4a0b      	ldr	r2, [pc, #44]	@ (8001b50 <HAL_I2S_TxCpltCallback+0x5c>)
 8001b24:	601a      	str	r2, [r3, #0]
	process_out_buffer = &(OUT_BUFFER[BUFFER_SIZE]);
 8001b26:	4b0b      	ldr	r3, [pc, #44]	@ (8001b54 <HAL_I2S_TxCpltCallback+0x60>)
 8001b28:	4a0b      	ldr	r2, [pc, #44]	@ (8001b58 <HAL_I2S_TxCpltCallback+0x64>)
 8001b2a:	601a      	str	r2, [r3, #0]
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &(IN_BUFFER[0]), BUFFER_SIZE/2);
 8001b2c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b30:	490a      	ldr	r1, [pc, #40]	@ (8001b5c <HAL_I2S_TxCpltCallback+0x68>)
 8001b32:	480b      	ldr	r0, [pc, #44]	@ (8001b60 <HAL_I2S_TxCpltCallback+0x6c>)
 8001b34:	f000 f99e 	bl	8001e74 <HAL_ADC_Start_DMA>
	processHalfBuffer();
 8001b38:	f7fe ff86 	bl	8000a48 <processHalfBuffer>
}
 8001b3c:	bf00      	nop
 8001b3e:	3708      	adds	r7, #8
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	2000652a 	.word	0x2000652a
 8001b48:	40020800 	.word	0x40020800
 8001b4c:	20000000 	.word	0x20000000
 8001b50:	200004dc 	.word	0x200004dc
 8001b54:	20000004 	.word	0x20000004
 8001b58:	200010dc 	.word	0x200010dc
 8001b5c:	200000dc 	.word	0x200000dc
 8001b60:	20000034 	.word	0x20000034

08001b64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b68:	4b06      	ldr	r3, [pc, #24]	@ (8001b84 <SystemInit+0x20>)
 8001b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b6e:	4a05      	ldr	r2, [pc, #20]	@ (8001b84 <SystemInit+0x20>)
 8001b70:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b74:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b78:	bf00      	nop
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	e000ed00 	.word	0xe000ed00

08001b88 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b086      	sub	sp, #24
 8001b8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b8e:	f107 0308 	add.w	r3, r7, #8
 8001b92:	2200      	movs	r2, #0
 8001b94:	601a      	str	r2, [r3, #0]
 8001b96:	605a      	str	r2, [r3, #4]
 8001b98:	609a      	str	r2, [r3, #8]
 8001b9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b9c:	463b      	mov	r3, r7
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	601a      	str	r2, [r3, #0]
 8001ba2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ba4:	4b1d      	ldr	r3, [pc, #116]	@ (8001c1c <MX_TIM2_Init+0x94>)
 8001ba6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001baa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001bac:	4b1b      	ldr	r3, [pc, #108]	@ (8001c1c <MX_TIM2_Init+0x94>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bb2:	4b1a      	ldr	r3, [pc, #104]	@ (8001c1c <MX_TIM2_Init+0x94>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 501;
 8001bb8:	4b18      	ldr	r3, [pc, #96]	@ (8001c1c <MX_TIM2_Init+0x94>)
 8001bba:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8001bbe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bc0:	4b16      	ldr	r3, [pc, #88]	@ (8001c1c <MX_TIM2_Init+0x94>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bc6:	4b15      	ldr	r3, [pc, #84]	@ (8001c1c <MX_TIM2_Init+0x94>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001bcc:	4813      	ldr	r0, [pc, #76]	@ (8001c1c <MX_TIM2_Init+0x94>)
 8001bce:	f002 fe69 	bl	80048a4 <HAL_TIM_Base_Init>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001bd8:	f7ff fdc2 	bl	8001760 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bdc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001be0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001be2:	f107 0308 	add.w	r3, r7, #8
 8001be6:	4619      	mov	r1, r3
 8001be8:	480c      	ldr	r0, [pc, #48]	@ (8001c1c <MX_TIM2_Init+0x94>)
 8001bea:	f002 fff5 	bl	8004bd8 <HAL_TIM_ConfigClockSource>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001bf4:	f7ff fdb4 	bl	8001760 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001bf8:	2320      	movs	r3, #32
 8001bfa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c00:	463b      	mov	r3, r7
 8001c02:	4619      	mov	r1, r3
 8001c04:	4805      	ldr	r0, [pc, #20]	@ (8001c1c <MX_TIM2_Init+0x94>)
 8001c06:	f003 fa01 	bl	800500c <HAL_TIMEx_MasterConfigSynchronization>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001c10:	f7ff fda6 	bl	8001760 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001c14:	bf00      	nop
 8001c16:	3718      	adds	r7, #24
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	2000652c 	.word	0x2000652c

08001c20 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b084      	sub	sp, #16
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c30:	d115      	bne.n	8001c5e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c32:	2300      	movs	r3, #0
 8001c34:	60fb      	str	r3, [r7, #12]
 8001c36:	4b0c      	ldr	r3, [pc, #48]	@ (8001c68 <HAL_TIM_Base_MspInit+0x48>)
 8001c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c3a:	4a0b      	ldr	r2, [pc, #44]	@ (8001c68 <HAL_TIM_Base_MspInit+0x48>)
 8001c3c:	f043 0301 	orr.w	r3, r3, #1
 8001c40:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c42:	4b09      	ldr	r3, [pc, #36]	@ (8001c68 <HAL_TIM_Base_MspInit+0x48>)
 8001c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c46:	f003 0301 	and.w	r3, r3, #1
 8001c4a:	60fb      	str	r3, [r7, #12]
 8001c4c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001c4e:	2200      	movs	r2, #0
 8001c50:	2100      	movs	r1, #0
 8001c52:	201c      	movs	r0, #28
 8001c54:	f000 fdab 	bl	80027ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c58:	201c      	movs	r0, #28
 8001c5a:	f000 fdc4 	bl	80027e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001c5e:	bf00      	nop
 8001c60:	3710      	adds	r7, #16
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	40023800 	.word	0x40023800

08001c6c <Reset_Handler>:
 8001c6c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ca4 <LoopFillZerobss+0xe>
 8001c70:	f7ff ff78 	bl	8001b64 <SystemInit>
 8001c74:	480c      	ldr	r0, [pc, #48]	@ (8001ca8 <LoopFillZerobss+0x12>)
 8001c76:	490d      	ldr	r1, [pc, #52]	@ (8001cac <LoopFillZerobss+0x16>)
 8001c78:	4a0d      	ldr	r2, [pc, #52]	@ (8001cb0 <LoopFillZerobss+0x1a>)
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	e002      	b.n	8001c84 <LoopCopyDataInit>

08001c7e <CopyDataInit>:
 8001c7e:	58d4      	ldr	r4, [r2, r3]
 8001c80:	50c4      	str	r4, [r0, r3]
 8001c82:	3304      	adds	r3, #4

08001c84 <LoopCopyDataInit>:
 8001c84:	18c4      	adds	r4, r0, r3
 8001c86:	428c      	cmp	r4, r1
 8001c88:	d3f9      	bcc.n	8001c7e <CopyDataInit>
 8001c8a:	4a0a      	ldr	r2, [pc, #40]	@ (8001cb4 <LoopFillZerobss+0x1e>)
 8001c8c:	4c0a      	ldr	r4, [pc, #40]	@ (8001cb8 <LoopFillZerobss+0x22>)
 8001c8e:	2300      	movs	r3, #0
 8001c90:	e001      	b.n	8001c96 <LoopFillZerobss>

08001c92 <FillZerobss>:
 8001c92:	6013      	str	r3, [r2, #0]
 8001c94:	3204      	adds	r2, #4

08001c96 <LoopFillZerobss>:
 8001c96:	42a2      	cmp	r2, r4
 8001c98:	d3fb      	bcc.n	8001c92 <FillZerobss>
 8001c9a:	f003 fa41 	bl	8005120 <__libc_init_array>
 8001c9e:	f7ff fcc5 	bl	800162c <main>
 8001ca2:	4770      	bx	lr
 8001ca4:	20020000 	.word	0x20020000
 8001ca8:	20000000 	.word	0x20000000
 8001cac:	20000018 	.word	0x20000018
 8001cb0:	08005248 	.word	0x08005248
 8001cb4:	20000018 	.word	0x20000018
 8001cb8:	20006578 	.word	0x20006578

08001cbc <ADC_IRQHandler>:
 8001cbc:	e7fe      	b.n	8001cbc <ADC_IRQHandler>
	...

08001cc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001cc4:	4b0e      	ldr	r3, [pc, #56]	@ (8001d00 <HAL_Init+0x40>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a0d      	ldr	r2, [pc, #52]	@ (8001d00 <HAL_Init+0x40>)
 8001cca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001cce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001cd0:	4b0b      	ldr	r3, [pc, #44]	@ (8001d00 <HAL_Init+0x40>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a0a      	ldr	r2, [pc, #40]	@ (8001d00 <HAL_Init+0x40>)
 8001cd6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001cda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cdc:	4b08      	ldr	r3, [pc, #32]	@ (8001d00 <HAL_Init+0x40>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a07      	ldr	r2, [pc, #28]	@ (8001d00 <HAL_Init+0x40>)
 8001ce2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ce6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ce8:	2003      	movs	r0, #3
 8001cea:	f000 fd55 	bl	8002798 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cee:	200f      	movs	r0, #15
 8001cf0:	f000 f808 	bl	8001d04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cf4:	f7ff fe38 	bl	8001968 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cf8:	2300      	movs	r3, #0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	40023c00 	.word	0x40023c00

08001d04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d0c:	4b12      	ldr	r3, [pc, #72]	@ (8001d58 <HAL_InitTick+0x54>)
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	4b12      	ldr	r3, [pc, #72]	@ (8001d5c <HAL_InitTick+0x58>)
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	4619      	mov	r1, r3
 8001d16:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d22:	4618      	mov	r0, r3
 8001d24:	f000 fd6d 	bl	8002802 <HAL_SYSTICK_Config>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e00e      	b.n	8001d50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2b0f      	cmp	r3, #15
 8001d36:	d80a      	bhi.n	8001d4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d38:	2200      	movs	r2, #0
 8001d3a:	6879      	ldr	r1, [r7, #4]
 8001d3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001d40:	f000 fd35 	bl	80027ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d44:	4a06      	ldr	r2, [pc, #24]	@ (8001d60 <HAL_InitTick+0x5c>)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	e000      	b.n	8001d50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3708      	adds	r7, #8
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	2000000c 	.word	0x2000000c
 8001d5c:	20000014 	.word	0x20000014
 8001d60:	20000010 	.word	0x20000010

08001d64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d68:	4b06      	ldr	r3, [pc, #24]	@ (8001d84 <HAL_IncTick+0x20>)
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	4b06      	ldr	r3, [pc, #24]	@ (8001d88 <HAL_IncTick+0x24>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4413      	add	r3, r2
 8001d74:	4a04      	ldr	r2, [pc, #16]	@ (8001d88 <HAL_IncTick+0x24>)
 8001d76:	6013      	str	r3, [r2, #0]
}
 8001d78:	bf00      	nop
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	20000014 	.word	0x20000014
 8001d88:	20006574 	.word	0x20006574

08001d8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d90:	4b03      	ldr	r3, [pc, #12]	@ (8001da0 <HAL_GetTick+0x14>)
 8001d92:	681b      	ldr	r3, [r3, #0]
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	20006574 	.word	0x20006574

08001da4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001dac:	f7ff ffee 	bl	8001d8c <HAL_GetTick>
 8001db0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001dbc:	d005      	beq.n	8001dca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dbe:	4b0a      	ldr	r3, [pc, #40]	@ (8001de8 <HAL_Delay+0x44>)
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	4413      	add	r3, r2
 8001dc8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001dca:	bf00      	nop
 8001dcc:	f7ff ffde 	bl	8001d8c <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	68fa      	ldr	r2, [r7, #12]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d8f7      	bhi.n	8001dcc <HAL_Delay+0x28>
  {
  }
}
 8001ddc:	bf00      	nop
 8001dde:	bf00      	nop
 8001de0:	3710      	adds	r7, #16
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	20000014 	.word	0x20000014

08001dec <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001df4:	2300      	movs	r3, #0
 8001df6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d101      	bne.n	8001e02 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e033      	b.n	8001e6a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d109      	bne.n	8001e1e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f7fe fcba 	bl	8000784 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2200      	movs	r2, #0
 8001e14:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e22:	f003 0310 	and.w	r3, r3, #16
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d118      	bne.n	8001e5c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e2e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001e32:	f023 0302 	bic.w	r3, r3, #2
 8001e36:	f043 0202 	orr.w	r2, r3, #2
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f000 fa5c 	bl	80022fc <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2200      	movs	r2, #0
 8001e48:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e4e:	f023 0303 	bic.w	r3, r3, #3
 8001e52:	f043 0201 	orr.w	r2, r3, #1
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	641a      	str	r2, [r3, #64]	@ 0x40
 8001e5a:	e001      	b.n	8001e60 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3710      	adds	r7, #16
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
	...

08001e74 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b088      	sub	sp, #32
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	60f8      	str	r0, [r7, #12]
 8001e7c:	60b9      	str	r1, [r7, #8]
 8001e7e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001e80:	2300      	movs	r3, #0
 8001e82:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e84:	2300      	movs	r3, #0
 8001e86:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d101      	bne.n	8001e96 <HAL_ADC_Start_DMA+0x22>
 8001e92:	2302      	movs	r3, #2
 8001e94:	e0d0      	b.n	8002038 <HAL_ADC_Start_DMA+0x1c4>
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2201      	movs	r2, #1
 8001e9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	f003 0301 	and.w	r3, r3, #1
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d018      	beq.n	8001ede <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	689a      	ldr	r2, [r3, #8]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f042 0201 	orr.w	r2, r2, #1
 8001eba:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001ebc:	4b60      	ldr	r3, [pc, #384]	@ (8002040 <HAL_ADC_Start_DMA+0x1cc>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a60      	ldr	r2, [pc, #384]	@ (8002044 <HAL_ADC_Start_DMA+0x1d0>)
 8001ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ec6:	0c9a      	lsrs	r2, r3, #18
 8001ec8:	4613      	mov	r3, r2
 8001eca:	005b      	lsls	r3, r3, #1
 8001ecc:	4413      	add	r3, r2
 8001ece:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8001ed0:	e002      	b.n	8001ed8 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	3b01      	subs	r3, #1
 8001ed6:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d1f9      	bne.n	8001ed2 <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ee8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001eec:	d107      	bne.n	8001efe <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	689a      	ldr	r2, [r3, #8]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001efc:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	f003 0301 	and.w	r3, r3, #1
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	f040 8088 	bne.w	800201e <HAL_ADC_Start_DMA+0x1aa>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f12:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001f16:	f023 0301 	bic.w	r3, r3, #1
 8001f1a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d007      	beq.n	8001f40 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f34:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001f38:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f44:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f4c:	d106      	bne.n	8001f5c <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f52:	f023 0206 	bic.w	r2, r3, #6
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	645a      	str	r2, [r3, #68]	@ 0x44
 8001f5a:	e002      	b.n	8001f62 <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2200      	movs	r2, #0
 8001f66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f6a:	4b37      	ldr	r3, [pc, #220]	@ (8002048 <HAL_ADC_Start_DMA+0x1d4>)
 8001f6c:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f72:	4a36      	ldr	r2, [pc, #216]	@ (800204c <HAL_ADC_Start_DMA+0x1d8>)
 8001f74:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f7a:	4a35      	ldr	r2, [pc, #212]	@ (8002050 <HAL_ADC_Start_DMA+0x1dc>)
 8001f7c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f82:	4a34      	ldr	r2, [pc, #208]	@ (8002054 <HAL_ADC_Start_DMA+0x1e0>)
 8001f84:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001f8e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	685a      	ldr	r2, [r3, #4]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001f9e:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	689a      	ldr	r2, [r3, #8]
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001fae:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	334c      	adds	r3, #76	@ 0x4c
 8001fba:	4619      	mov	r1, r3
 8001fbc:	68ba      	ldr	r2, [r7, #8]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	f000 fcda 	bl	8002978 <HAL_DMA_Start_IT>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f003 031f 	and.w	r3, r3, #31
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d10f      	bne.n	8001ff4 <HAL_ADC_Start_DMA+0x180>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d129      	bne.n	8002036 <HAL_ADC_Start_DMA+0x1c2>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	689a      	ldr	r2, [r3, #8]
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001ff0:	609a      	str	r2, [r3, #8]
 8001ff2:	e020      	b.n	8002036 <HAL_ADC_Start_DMA+0x1c2>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a17      	ldr	r2, [pc, #92]	@ (8002058 <HAL_ADC_Start_DMA+0x1e4>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d11b      	bne.n	8002036 <HAL_ADC_Start_DMA+0x1c2>
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d114      	bne.n	8002036 <HAL_ADC_Start_DMA+0x1c2>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	689a      	ldr	r2, [r3, #8]
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800201a:	609a      	str	r2, [r3, #8]
 800201c:	e00b      	b.n	8002036 <HAL_ADC_Start_DMA+0x1c2>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002022:	f043 0210 	orr.w	r2, r3, #16
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800202e:	f043 0201 	orr.w	r2, r3, #1
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 8002036:	7ffb      	ldrb	r3, [r7, #31]
}
 8002038:	4618      	mov	r0, r3
 800203a:	3720      	adds	r7, #32
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	2000000c 	.word	0x2000000c
 8002044:	431bde83 	.word	0x431bde83
 8002048:	40012300 	.word	0x40012300
 800204c:	080024f5 	.word	0x080024f5
 8002050:	080025af 	.word	0x080025af
 8002054:	080025cb 	.word	0x080025cb
 8002058:	40012000 	.word	0x40012000

0800205c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002064:	bf00      	nop
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002078:	bf00      	nop
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800208c:	bf00      	nop
 800208e:	370c      	adds	r7, #12
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr

08002098 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002098:	b480      	push	{r7}
 800209a:	b085      	sub	sp, #20
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80020a2:	2300      	movs	r3, #0
 80020a4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d101      	bne.n	80020b4 <HAL_ADC_ConfigChannel+0x1c>
 80020b0:	2302      	movs	r3, #2
 80020b2:	e113      	b.n	80022dc <HAL_ADC_ConfigChannel+0x244>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2201      	movs	r2, #1
 80020b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2b09      	cmp	r3, #9
 80020c2:	d925      	bls.n	8002110 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	68d9      	ldr	r1, [r3, #12]
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	461a      	mov	r2, r3
 80020d2:	4613      	mov	r3, r2
 80020d4:	005b      	lsls	r3, r3, #1
 80020d6:	4413      	add	r3, r2
 80020d8:	3b1e      	subs	r3, #30
 80020da:	2207      	movs	r2, #7
 80020dc:	fa02 f303 	lsl.w	r3, r2, r3
 80020e0:	43da      	mvns	r2, r3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	400a      	ands	r2, r1
 80020e8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	68d9      	ldr	r1, [r3, #12]
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	689a      	ldr	r2, [r3, #8]
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	4618      	mov	r0, r3
 80020fc:	4603      	mov	r3, r0
 80020fe:	005b      	lsls	r3, r3, #1
 8002100:	4403      	add	r3, r0
 8002102:	3b1e      	subs	r3, #30
 8002104:	409a      	lsls	r2, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	430a      	orrs	r2, r1
 800210c:	60da      	str	r2, [r3, #12]
 800210e:	e022      	b.n	8002156 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	6919      	ldr	r1, [r3, #16]
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	b29b      	uxth	r3, r3
 800211c:	461a      	mov	r2, r3
 800211e:	4613      	mov	r3, r2
 8002120:	005b      	lsls	r3, r3, #1
 8002122:	4413      	add	r3, r2
 8002124:	2207      	movs	r2, #7
 8002126:	fa02 f303 	lsl.w	r3, r2, r3
 800212a:	43da      	mvns	r2, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	400a      	ands	r2, r1
 8002132:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	6919      	ldr	r1, [r3, #16]
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	689a      	ldr	r2, [r3, #8]
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	b29b      	uxth	r3, r3
 8002144:	4618      	mov	r0, r3
 8002146:	4603      	mov	r3, r0
 8002148:	005b      	lsls	r3, r3, #1
 800214a:	4403      	add	r3, r0
 800214c:	409a      	lsls	r2, r3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	430a      	orrs	r2, r1
 8002154:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	2b06      	cmp	r3, #6
 800215c:	d824      	bhi.n	80021a8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685a      	ldr	r2, [r3, #4]
 8002168:	4613      	mov	r3, r2
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	4413      	add	r3, r2
 800216e:	3b05      	subs	r3, #5
 8002170:	221f      	movs	r2, #31
 8002172:	fa02 f303 	lsl.w	r3, r2, r3
 8002176:	43da      	mvns	r2, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	400a      	ands	r2, r1
 800217e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	b29b      	uxth	r3, r3
 800218c:	4618      	mov	r0, r3
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	685a      	ldr	r2, [r3, #4]
 8002192:	4613      	mov	r3, r2
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	4413      	add	r3, r2
 8002198:	3b05      	subs	r3, #5
 800219a:	fa00 f203 	lsl.w	r2, r0, r3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	430a      	orrs	r2, r1
 80021a4:	635a      	str	r2, [r3, #52]	@ 0x34
 80021a6:	e04c      	b.n	8002242 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	2b0c      	cmp	r3, #12
 80021ae:	d824      	bhi.n	80021fa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	685a      	ldr	r2, [r3, #4]
 80021ba:	4613      	mov	r3, r2
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	4413      	add	r3, r2
 80021c0:	3b23      	subs	r3, #35	@ 0x23
 80021c2:	221f      	movs	r2, #31
 80021c4:	fa02 f303 	lsl.w	r3, r2, r3
 80021c8:	43da      	mvns	r2, r3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	400a      	ands	r2, r1
 80021d0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	b29b      	uxth	r3, r3
 80021de:	4618      	mov	r0, r3
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685a      	ldr	r2, [r3, #4]
 80021e4:	4613      	mov	r3, r2
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	4413      	add	r3, r2
 80021ea:	3b23      	subs	r3, #35	@ 0x23
 80021ec:	fa00 f203 	lsl.w	r2, r0, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	430a      	orrs	r2, r1
 80021f6:	631a      	str	r2, [r3, #48]	@ 0x30
 80021f8:	e023      	b.n	8002242 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	685a      	ldr	r2, [r3, #4]
 8002204:	4613      	mov	r3, r2
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	4413      	add	r3, r2
 800220a:	3b41      	subs	r3, #65	@ 0x41
 800220c:	221f      	movs	r2, #31
 800220e:	fa02 f303 	lsl.w	r3, r2, r3
 8002212:	43da      	mvns	r2, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	400a      	ands	r2, r1
 800221a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	b29b      	uxth	r3, r3
 8002228:	4618      	mov	r0, r3
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	685a      	ldr	r2, [r3, #4]
 800222e:	4613      	mov	r3, r2
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	4413      	add	r3, r2
 8002234:	3b41      	subs	r3, #65	@ 0x41
 8002236:	fa00 f203 	lsl.w	r2, r0, r3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	430a      	orrs	r2, r1
 8002240:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002242:	4b29      	ldr	r3, [pc, #164]	@ (80022e8 <HAL_ADC_ConfigChannel+0x250>)
 8002244:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a28      	ldr	r2, [pc, #160]	@ (80022ec <HAL_ADC_ConfigChannel+0x254>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d10f      	bne.n	8002270 <HAL_ADC_ConfigChannel+0x1d8>
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	2b12      	cmp	r3, #18
 8002256:	d10b      	bne.n	8002270 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a1d      	ldr	r2, [pc, #116]	@ (80022ec <HAL_ADC_ConfigChannel+0x254>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d12b      	bne.n	80022d2 <HAL_ADC_ConfigChannel+0x23a>
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a1c      	ldr	r2, [pc, #112]	@ (80022f0 <HAL_ADC_ConfigChannel+0x258>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d003      	beq.n	800228c <HAL_ADC_ConfigChannel+0x1f4>
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2b11      	cmp	r3, #17
 800228a:	d122      	bne.n	80022d2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a11      	ldr	r2, [pc, #68]	@ (80022f0 <HAL_ADC_ConfigChannel+0x258>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d111      	bne.n	80022d2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80022ae:	4b11      	ldr	r3, [pc, #68]	@ (80022f4 <HAL_ADC_ConfigChannel+0x25c>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a11      	ldr	r2, [pc, #68]	@ (80022f8 <HAL_ADC_ConfigChannel+0x260>)
 80022b4:	fba2 2303 	umull	r2, r3, r2, r3
 80022b8:	0c9a      	lsrs	r2, r3, #18
 80022ba:	4613      	mov	r3, r2
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	4413      	add	r3, r2
 80022c0:	005b      	lsls	r3, r3, #1
 80022c2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80022c4:	e002      	b.n	80022cc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	3b01      	subs	r3, #1
 80022ca:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d1f9      	bne.n	80022c6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2200      	movs	r2, #0
 80022d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80022da:	2300      	movs	r3, #0
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3714      	adds	r7, #20
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr
 80022e8:	40012300 	.word	0x40012300
 80022ec:	40012000 	.word	0x40012000
 80022f0:	10000012 	.word	0x10000012
 80022f4:	2000000c 	.word	0x2000000c
 80022f8:	431bde83 	.word	0x431bde83

080022fc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b085      	sub	sp, #20
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002304:	4b79      	ldr	r3, [pc, #484]	@ (80024ec <ADC_Init+0x1f0>)
 8002306:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	685a      	ldr	r2, [r3, #4]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	431a      	orrs	r2, r3
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	685a      	ldr	r2, [r3, #4]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002330:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	6859      	ldr	r1, [r3, #4]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	691b      	ldr	r3, [r3, #16]
 800233c:	021a      	lsls	r2, r3, #8
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	430a      	orrs	r2, r1
 8002344:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	685a      	ldr	r2, [r3, #4]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002354:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	6859      	ldr	r1, [r3, #4]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	689a      	ldr	r2, [r3, #8]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	430a      	orrs	r2, r1
 8002366:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	689a      	ldr	r2, [r3, #8]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002376:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	6899      	ldr	r1, [r3, #8]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	68da      	ldr	r2, [r3, #12]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	430a      	orrs	r2, r1
 8002388:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800238e:	4a58      	ldr	r2, [pc, #352]	@ (80024f0 <ADC_Init+0x1f4>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d022      	beq.n	80023da <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	689a      	ldr	r2, [r3, #8]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80023a2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	6899      	ldr	r1, [r3, #8]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	430a      	orrs	r2, r1
 80023b4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	689a      	ldr	r2, [r3, #8]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80023c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	6899      	ldr	r1, [r3, #8]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	430a      	orrs	r2, r1
 80023d6:	609a      	str	r2, [r3, #8]
 80023d8:	e00f      	b.n	80023fa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	689a      	ldr	r2, [r3, #8]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80023e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	689a      	ldr	r2, [r3, #8]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80023f8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	689a      	ldr	r2, [r3, #8]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f022 0202 	bic.w	r2, r2, #2
 8002408:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	6899      	ldr	r1, [r3, #8]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	7e1b      	ldrb	r3, [r3, #24]
 8002414:	005a      	lsls	r2, r3, #1
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	430a      	orrs	r2, r1
 800241c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d01b      	beq.n	8002460 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	685a      	ldr	r2, [r3, #4]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002436:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	685a      	ldr	r2, [r3, #4]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002446:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	6859      	ldr	r1, [r3, #4]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002452:	3b01      	subs	r3, #1
 8002454:	035a      	lsls	r2, r3, #13
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	430a      	orrs	r2, r1
 800245c:	605a      	str	r2, [r3, #4]
 800245e:	e007      	b.n	8002470 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	685a      	ldr	r2, [r3, #4]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800246e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800247e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	69db      	ldr	r3, [r3, #28]
 800248a:	3b01      	subs	r3, #1
 800248c:	051a      	lsls	r2, r3, #20
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	430a      	orrs	r2, r1
 8002494:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	689a      	ldr	r2, [r3, #8]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80024a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	6899      	ldr	r1, [r3, #8]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80024b2:	025a      	lsls	r2, r3, #9
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	430a      	orrs	r2, r1
 80024ba:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	689a      	ldr	r2, [r3, #8]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80024ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	6899      	ldr	r1, [r3, #8]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	695b      	ldr	r3, [r3, #20]
 80024d6:	029a      	lsls	r2, r3, #10
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	430a      	orrs	r2, r1
 80024de:	609a      	str	r2, [r3, #8]
}
 80024e0:	bf00      	nop
 80024e2:	3714      	adds	r7, #20
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr
 80024ec:	40012300 	.word	0x40012300
 80024f0:	0f000001 	.word	0x0f000001

080024f4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002500:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002506:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800250a:	2b00      	cmp	r3, #0
 800250c:	d13c      	bne.n	8002588 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002512:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d12b      	bne.n	8002580 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800252c:	2b00      	cmp	r3, #0
 800252e:	d127      	bne.n	8002580 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002536:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800253a:	2b00      	cmp	r3, #0
 800253c:	d006      	beq.n	800254c <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002548:	2b00      	cmp	r3, #0
 800254a:	d119      	bne.n	8002580 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	685a      	ldr	r2, [r3, #4]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f022 0220 	bic.w	r2, r2, #32
 800255a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002560:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800256c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d105      	bne.n	8002580 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002578:	f043 0201 	orr.w	r2, r3, #1
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002580:	68f8      	ldr	r0, [r7, #12]
 8002582:	f7ff fd6b 	bl	800205c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002586:	e00e      	b.n	80025a6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800258c:	f003 0310 	and.w	r3, r3, #16
 8002590:	2b00      	cmp	r3, #0
 8002592:	d003      	beq.n	800259c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002594:	68f8      	ldr	r0, [r7, #12]
 8002596:	f7ff fd75 	bl	8002084 <HAL_ADC_ErrorCallback>
}
 800259a:	e004      	b.n	80025a6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	4798      	blx	r3
}
 80025a6:	bf00      	nop
 80025a8:	3710      	adds	r7, #16
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}

080025ae <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80025ae:	b580      	push	{r7, lr}
 80025b0:	b084      	sub	sp, #16
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025ba:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80025bc:	68f8      	ldr	r0, [r7, #12]
 80025be:	f7ff fd57 	bl	8002070 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80025c2:	bf00      	nop
 80025c4:	3710      	adds	r7, #16
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}

080025ca <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80025ca:	b580      	push	{r7, lr}
 80025cc:	b084      	sub	sp, #16
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025d6:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2240      	movs	r2, #64	@ 0x40
 80025dc:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025e2:	f043 0204 	orr.w	r2, r3, #4
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80025ea:	68f8      	ldr	r0, [r7, #12]
 80025ec:	f7ff fd4a 	bl	8002084 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80025f0:	bf00      	nop
 80025f2:	3710      	adds	r7, #16
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}

080025f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b085      	sub	sp, #20
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	f003 0307 	and.w	r3, r3, #7
 8002606:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002608:	4b0c      	ldr	r3, [pc, #48]	@ (800263c <__NVIC_SetPriorityGrouping+0x44>)
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800260e:	68ba      	ldr	r2, [r7, #8]
 8002610:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002614:	4013      	ands	r3, r2
 8002616:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002620:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002624:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002628:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800262a:	4a04      	ldr	r2, [pc, #16]	@ (800263c <__NVIC_SetPriorityGrouping+0x44>)
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	60d3      	str	r3, [r2, #12]
}
 8002630:	bf00      	nop
 8002632:	3714      	adds	r7, #20
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr
 800263c:	e000ed00 	.word	0xe000ed00

08002640 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002640:	b480      	push	{r7}
 8002642:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002644:	4b04      	ldr	r3, [pc, #16]	@ (8002658 <__NVIC_GetPriorityGrouping+0x18>)
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	0a1b      	lsrs	r3, r3, #8
 800264a:	f003 0307 	and.w	r3, r3, #7
}
 800264e:	4618      	mov	r0, r3
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr
 8002658:	e000ed00 	.word	0xe000ed00

0800265c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800265c:	b480      	push	{r7}
 800265e:	b083      	sub	sp, #12
 8002660:	af00      	add	r7, sp, #0
 8002662:	4603      	mov	r3, r0
 8002664:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800266a:	2b00      	cmp	r3, #0
 800266c:	db0b      	blt.n	8002686 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800266e:	79fb      	ldrb	r3, [r7, #7]
 8002670:	f003 021f 	and.w	r2, r3, #31
 8002674:	4907      	ldr	r1, [pc, #28]	@ (8002694 <__NVIC_EnableIRQ+0x38>)
 8002676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800267a:	095b      	lsrs	r3, r3, #5
 800267c:	2001      	movs	r0, #1
 800267e:	fa00 f202 	lsl.w	r2, r0, r2
 8002682:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002686:	bf00      	nop
 8002688:	370c      	adds	r7, #12
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	e000e100 	.word	0xe000e100

08002698 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	4603      	mov	r3, r0
 80026a0:	6039      	str	r1, [r7, #0]
 80026a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	db0a      	blt.n	80026c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	b2da      	uxtb	r2, r3
 80026b0:	490c      	ldr	r1, [pc, #48]	@ (80026e4 <__NVIC_SetPriority+0x4c>)
 80026b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b6:	0112      	lsls	r2, r2, #4
 80026b8:	b2d2      	uxtb	r2, r2
 80026ba:	440b      	add	r3, r1
 80026bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026c0:	e00a      	b.n	80026d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	b2da      	uxtb	r2, r3
 80026c6:	4908      	ldr	r1, [pc, #32]	@ (80026e8 <__NVIC_SetPriority+0x50>)
 80026c8:	79fb      	ldrb	r3, [r7, #7]
 80026ca:	f003 030f 	and.w	r3, r3, #15
 80026ce:	3b04      	subs	r3, #4
 80026d0:	0112      	lsls	r2, r2, #4
 80026d2:	b2d2      	uxtb	r2, r2
 80026d4:	440b      	add	r3, r1
 80026d6:	761a      	strb	r2, [r3, #24]
}
 80026d8:	bf00      	nop
 80026da:	370c      	adds	r7, #12
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr
 80026e4:	e000e100 	.word	0xe000e100
 80026e8:	e000ed00 	.word	0xe000ed00

080026ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b089      	sub	sp, #36	@ 0x24
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	60f8      	str	r0, [r7, #12]
 80026f4:	60b9      	str	r1, [r7, #8]
 80026f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	f003 0307 	and.w	r3, r3, #7
 80026fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	f1c3 0307 	rsb	r3, r3, #7
 8002706:	2b04      	cmp	r3, #4
 8002708:	bf28      	it	cs
 800270a:	2304      	movcs	r3, #4
 800270c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	3304      	adds	r3, #4
 8002712:	2b06      	cmp	r3, #6
 8002714:	d902      	bls.n	800271c <NVIC_EncodePriority+0x30>
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	3b03      	subs	r3, #3
 800271a:	e000      	b.n	800271e <NVIC_EncodePriority+0x32>
 800271c:	2300      	movs	r3, #0
 800271e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002720:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002724:	69bb      	ldr	r3, [r7, #24]
 8002726:	fa02 f303 	lsl.w	r3, r2, r3
 800272a:	43da      	mvns	r2, r3
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	401a      	ands	r2, r3
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002734:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	fa01 f303 	lsl.w	r3, r1, r3
 800273e:	43d9      	mvns	r1, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002744:	4313      	orrs	r3, r2
         );
}
 8002746:	4618      	mov	r0, r3
 8002748:	3724      	adds	r7, #36	@ 0x24
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
	...

08002754 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	3b01      	subs	r3, #1
 8002760:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002764:	d301      	bcc.n	800276a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002766:	2301      	movs	r3, #1
 8002768:	e00f      	b.n	800278a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800276a:	4a0a      	ldr	r2, [pc, #40]	@ (8002794 <SysTick_Config+0x40>)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	3b01      	subs	r3, #1
 8002770:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002772:	210f      	movs	r1, #15
 8002774:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002778:	f7ff ff8e 	bl	8002698 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800277c:	4b05      	ldr	r3, [pc, #20]	@ (8002794 <SysTick_Config+0x40>)
 800277e:	2200      	movs	r2, #0
 8002780:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002782:	4b04      	ldr	r3, [pc, #16]	@ (8002794 <SysTick_Config+0x40>)
 8002784:	2207      	movs	r2, #7
 8002786:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002788:	2300      	movs	r3, #0
}
 800278a:	4618      	mov	r0, r3
 800278c:	3708      	adds	r7, #8
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	e000e010 	.word	0xe000e010

08002798 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f7ff ff29 	bl	80025f8 <__NVIC_SetPriorityGrouping>
}
 80027a6:	bf00      	nop
 80027a8:	3708      	adds	r7, #8
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}

080027ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027ae:	b580      	push	{r7, lr}
 80027b0:	b086      	sub	sp, #24
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	4603      	mov	r3, r0
 80027b6:	60b9      	str	r1, [r7, #8]
 80027b8:	607a      	str	r2, [r7, #4]
 80027ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027bc:	2300      	movs	r3, #0
 80027be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027c0:	f7ff ff3e 	bl	8002640 <__NVIC_GetPriorityGrouping>
 80027c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	68b9      	ldr	r1, [r7, #8]
 80027ca:	6978      	ldr	r0, [r7, #20]
 80027cc:	f7ff ff8e 	bl	80026ec <NVIC_EncodePriority>
 80027d0:	4602      	mov	r2, r0
 80027d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027d6:	4611      	mov	r1, r2
 80027d8:	4618      	mov	r0, r3
 80027da:	f7ff ff5d 	bl	8002698 <__NVIC_SetPriority>
}
 80027de:	bf00      	nop
 80027e0:	3718      	adds	r7, #24
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}

080027e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027e6:	b580      	push	{r7, lr}
 80027e8:	b082      	sub	sp, #8
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	4603      	mov	r3, r0
 80027ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f4:	4618      	mov	r0, r3
 80027f6:	f7ff ff31 	bl	800265c <__NVIC_EnableIRQ>
}
 80027fa:	bf00      	nop
 80027fc:	3708      	adds	r7, #8
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}

08002802 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002802:	b580      	push	{r7, lr}
 8002804:	b082      	sub	sp, #8
 8002806:	af00      	add	r7, sp, #0
 8002808:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f7ff ffa2 	bl	8002754 <SysTick_Config>
 8002810:	4603      	mov	r3, r0
}
 8002812:	4618      	mov	r0, r3
 8002814:	3708      	adds	r7, #8
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
	...

0800281c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b086      	sub	sp, #24
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002824:	2300      	movs	r3, #0
 8002826:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002828:	f7ff fab0 	bl	8001d8c <HAL_GetTick>
 800282c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d101      	bne.n	8002838 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e099      	b.n	800296c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2202      	movs	r2, #2
 800283c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2200      	movs	r2, #0
 8002844:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f022 0201 	bic.w	r2, r2, #1
 8002856:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002858:	e00f      	b.n	800287a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800285a:	f7ff fa97 	bl	8001d8c <HAL_GetTick>
 800285e:	4602      	mov	r2, r0
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	2b05      	cmp	r3, #5
 8002866:	d908      	bls.n	800287a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2220      	movs	r2, #32
 800286c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2203      	movs	r2, #3
 8002872:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e078      	b.n	800296c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0301 	and.w	r3, r3, #1
 8002884:	2b00      	cmp	r3, #0
 8002886:	d1e8      	bne.n	800285a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002890:	697a      	ldr	r2, [r7, #20]
 8002892:	4b38      	ldr	r3, [pc, #224]	@ (8002974 <HAL_DMA_Init+0x158>)
 8002894:	4013      	ands	r3, r2
 8002896:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	685a      	ldr	r2, [r3, #4]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	691b      	ldr	r3, [r3, #16]
 80028ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	699b      	ldr	r3, [r3, #24]
 80028b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6a1b      	ldr	r3, [r3, #32]
 80028c4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028c6:	697a      	ldr	r2, [r7, #20]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028d0:	2b04      	cmp	r3, #4
 80028d2:	d107      	bne.n	80028e4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028dc:	4313      	orrs	r3, r2
 80028de:	697a      	ldr	r2, [r7, #20]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	697a      	ldr	r2, [r7, #20]
 80028ea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	695b      	ldr	r3, [r3, #20]
 80028f2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	f023 0307 	bic.w	r3, r3, #7
 80028fa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002900:	697a      	ldr	r2, [r7, #20]
 8002902:	4313      	orrs	r3, r2
 8002904:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800290a:	2b04      	cmp	r3, #4
 800290c:	d117      	bne.n	800293e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002912:	697a      	ldr	r2, [r7, #20]
 8002914:	4313      	orrs	r3, r2
 8002916:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800291c:	2b00      	cmp	r3, #0
 800291e:	d00e      	beq.n	800293e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f000 fa6f 	bl	8002e04 <DMA_CheckFifoParam>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d008      	beq.n	800293e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2240      	movs	r2, #64	@ 0x40
 8002930:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2201      	movs	r2, #1
 8002936:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800293a:	2301      	movs	r3, #1
 800293c:	e016      	b.n	800296c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	697a      	ldr	r2, [r7, #20]
 8002944:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f000 fa26 	bl	8002d98 <DMA_CalcBaseAndBitshift>
 800294c:	4603      	mov	r3, r0
 800294e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002954:	223f      	movs	r2, #63	@ 0x3f
 8002956:	409a      	lsls	r2, r3
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2200      	movs	r2, #0
 8002960:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2201      	movs	r2, #1
 8002966:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800296a:	2300      	movs	r3, #0
}
 800296c:	4618      	mov	r0, r3
 800296e:	3718      	adds	r7, #24
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}
 8002974:	f010803f 	.word	0xf010803f

08002978 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b086      	sub	sp, #24
 800297c:	af00      	add	r7, sp, #0
 800297e:	60f8      	str	r0, [r7, #12]
 8002980:	60b9      	str	r1, [r7, #8]
 8002982:	607a      	str	r2, [r7, #4]
 8002984:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002986:	2300      	movs	r3, #0
 8002988:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800298e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002996:	2b01      	cmp	r3, #1
 8002998:	d101      	bne.n	800299e <HAL_DMA_Start_IT+0x26>
 800299a:	2302      	movs	r3, #2
 800299c:	e040      	b.n	8002a20 <HAL_DMA_Start_IT+0xa8>
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2201      	movs	r2, #1
 80029a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d12f      	bne.n	8002a12 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2202      	movs	r2, #2
 80029b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2200      	movs	r2, #0
 80029be:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	68b9      	ldr	r1, [r7, #8]
 80029c6:	68f8      	ldr	r0, [r7, #12]
 80029c8:	f000 f9b8 	bl	8002d3c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029d0:	223f      	movs	r2, #63	@ 0x3f
 80029d2:	409a      	lsls	r2, r3
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f042 0216 	orr.w	r2, r2, #22
 80029e6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d007      	beq.n	8002a00 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f042 0208 	orr.w	r2, r2, #8
 80029fe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f042 0201 	orr.w	r2, r2, #1
 8002a0e:	601a      	str	r2, [r3, #0]
 8002a10:	e005      	b.n	8002a1e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002a1a:	2302      	movs	r3, #2
 8002a1c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002a1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3718      	adds	r7, #24
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b086      	sub	sp, #24
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002a30:	2300      	movs	r3, #0
 8002a32:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002a34:	4b8e      	ldr	r3, [pc, #568]	@ (8002c70 <HAL_DMA_IRQHandler+0x248>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a8e      	ldr	r2, [pc, #568]	@ (8002c74 <HAL_DMA_IRQHandler+0x24c>)
 8002a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a3e:	0a9b      	lsrs	r3, r3, #10
 8002a40:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a46:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a52:	2208      	movs	r2, #8
 8002a54:	409a      	lsls	r2, r3
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	4013      	ands	r3, r2
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d01a      	beq.n	8002a94 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0304 	and.w	r3, r3, #4
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d013      	beq.n	8002a94 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f022 0204 	bic.w	r2, r2, #4
 8002a7a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a80:	2208      	movs	r2, #8
 8002a82:	409a      	lsls	r2, r3
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a8c:	f043 0201 	orr.w	r2, r3, #1
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a98:	2201      	movs	r2, #1
 8002a9a:	409a      	lsls	r2, r3
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d012      	beq.n	8002aca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	695b      	ldr	r3, [r3, #20]
 8002aaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d00b      	beq.n	8002aca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	409a      	lsls	r2, r3
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ac2:	f043 0202 	orr.w	r2, r3, #2
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ace:	2204      	movs	r2, #4
 8002ad0:	409a      	lsls	r2, r3
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d012      	beq.n	8002b00 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0302 	and.w	r3, r3, #2
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d00b      	beq.n	8002b00 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002aec:	2204      	movs	r2, #4
 8002aee:	409a      	lsls	r2, r3
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002af8:	f043 0204 	orr.w	r2, r3, #4
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b04:	2210      	movs	r2, #16
 8002b06:	409a      	lsls	r2, r3
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d043      	beq.n	8002b98 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0308 	and.w	r3, r3, #8
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d03c      	beq.n	8002b98 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b22:	2210      	movs	r2, #16
 8002b24:	409a      	lsls	r2, r3
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d018      	beq.n	8002b6a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d108      	bne.n	8002b58 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d024      	beq.n	8002b98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	4798      	blx	r3
 8002b56:	e01f      	b.n	8002b98 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d01b      	beq.n	8002b98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	4798      	blx	r3
 8002b68:	e016      	b.n	8002b98 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d107      	bne.n	8002b88 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f022 0208 	bic.w	r2, r2, #8
 8002b86:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d003      	beq.n	8002b98 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b9c:	2220      	movs	r2, #32
 8002b9e:	409a      	lsls	r2, r3
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	f000 808f 	beq.w	8002cc8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0310 	and.w	r3, r3, #16
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	f000 8087 	beq.w	8002cc8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bbe:	2220      	movs	r2, #32
 8002bc0:	409a      	lsls	r2, r3
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	2b05      	cmp	r3, #5
 8002bd0:	d136      	bne.n	8002c40 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f022 0216 	bic.w	r2, r2, #22
 8002be0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	695a      	ldr	r2, [r3, #20]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002bf0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d103      	bne.n	8002c02 <HAL_DMA_IRQHandler+0x1da>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d007      	beq.n	8002c12 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f022 0208 	bic.w	r2, r2, #8
 8002c10:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c16:	223f      	movs	r2, #63	@ 0x3f
 8002c18:	409a      	lsls	r2, r3
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2201      	movs	r2, #1
 8002c22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d07e      	beq.n	8002d34 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	4798      	blx	r3
        }
        return;
 8002c3e:	e079      	b.n	8002d34 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d01d      	beq.n	8002c8a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d10d      	bne.n	8002c78 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d031      	beq.n	8002cc8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	4798      	blx	r3
 8002c6c:	e02c      	b.n	8002cc8 <HAL_DMA_IRQHandler+0x2a0>
 8002c6e:	bf00      	nop
 8002c70:	2000000c 	.word	0x2000000c
 8002c74:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d023      	beq.n	8002cc8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	4798      	blx	r3
 8002c88:	e01e      	b.n	8002cc8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d10f      	bne.n	8002cb8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f022 0210 	bic.w	r2, r2, #16
 8002ca6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d003      	beq.n	8002cc8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d032      	beq.n	8002d36 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cd4:	f003 0301 	and.w	r3, r3, #1
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d022      	beq.n	8002d22 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2205      	movs	r2, #5
 8002ce0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f022 0201 	bic.w	r2, r2, #1
 8002cf2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	60bb      	str	r3, [r7, #8]
 8002cfa:	697a      	ldr	r2, [r7, #20]
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d307      	bcc.n	8002d10 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0301 	and.w	r3, r3, #1
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d1f2      	bne.n	8002cf4 <HAL_DMA_IRQHandler+0x2cc>
 8002d0e:	e000      	b.n	8002d12 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002d10:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2201      	movs	r2, #1
 8002d16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d005      	beq.n	8002d36 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	4798      	blx	r3
 8002d32:	e000      	b.n	8002d36 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002d34:	bf00      	nop
    }
  }
}
 8002d36:	3718      	adds	r7, #24
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}

08002d3c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b085      	sub	sp, #20
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	60f8      	str	r0, [r7, #12]
 8002d44:	60b9      	str	r1, [r7, #8]
 8002d46:	607a      	str	r2, [r7, #4]
 8002d48:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002d58:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	683a      	ldr	r2, [r7, #0]
 8002d60:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	2b40      	cmp	r3, #64	@ 0x40
 8002d68:	d108      	bne.n	8002d7c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	68ba      	ldr	r2, [r7, #8]
 8002d78:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002d7a:	e007      	b.n	8002d8c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	68ba      	ldr	r2, [r7, #8]
 8002d82:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	60da      	str	r2, [r3, #12]
}
 8002d8c:	bf00      	nop
 8002d8e:	3714      	adds	r7, #20
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr

08002d98 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b085      	sub	sp, #20
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	3b10      	subs	r3, #16
 8002da8:	4a14      	ldr	r2, [pc, #80]	@ (8002dfc <DMA_CalcBaseAndBitshift+0x64>)
 8002daa:	fba2 2303 	umull	r2, r3, r2, r3
 8002dae:	091b      	lsrs	r3, r3, #4
 8002db0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002db2:	4a13      	ldr	r2, [pc, #76]	@ (8002e00 <DMA_CalcBaseAndBitshift+0x68>)
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	4413      	add	r3, r2
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	461a      	mov	r2, r3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2b03      	cmp	r3, #3
 8002dc4:	d909      	bls.n	8002dda <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002dce:	f023 0303 	bic.w	r3, r3, #3
 8002dd2:	1d1a      	adds	r2, r3, #4
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	659a      	str	r2, [r3, #88]	@ 0x58
 8002dd8:	e007      	b.n	8002dea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002de2:	f023 0303 	bic.w	r3, r3, #3
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3714      	adds	r7, #20
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop
 8002dfc:	aaaaaaab 	.word	0xaaaaaaab
 8002e00:	08005230 	.word	0x08005230

08002e04 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b085      	sub	sp, #20
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e14:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	699b      	ldr	r3, [r3, #24]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d11f      	bne.n	8002e5e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	2b03      	cmp	r3, #3
 8002e22:	d856      	bhi.n	8002ed2 <DMA_CheckFifoParam+0xce>
 8002e24:	a201      	add	r2, pc, #4	@ (adr r2, 8002e2c <DMA_CheckFifoParam+0x28>)
 8002e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e2a:	bf00      	nop
 8002e2c:	08002e3d 	.word	0x08002e3d
 8002e30:	08002e4f 	.word	0x08002e4f
 8002e34:	08002e3d 	.word	0x08002e3d
 8002e38:	08002ed3 	.word	0x08002ed3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e40:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d046      	beq.n	8002ed6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e4c:	e043      	b.n	8002ed6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e52:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002e56:	d140      	bne.n	8002eda <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e5c:	e03d      	b.n	8002eda <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	699b      	ldr	r3, [r3, #24]
 8002e62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e66:	d121      	bne.n	8002eac <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	2b03      	cmp	r3, #3
 8002e6c:	d837      	bhi.n	8002ede <DMA_CheckFifoParam+0xda>
 8002e6e:	a201      	add	r2, pc, #4	@ (adr r2, 8002e74 <DMA_CheckFifoParam+0x70>)
 8002e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e74:	08002e85 	.word	0x08002e85
 8002e78:	08002e8b 	.word	0x08002e8b
 8002e7c:	08002e85 	.word	0x08002e85
 8002e80:	08002e9d 	.word	0x08002e9d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	73fb      	strb	r3, [r7, #15]
      break;
 8002e88:	e030      	b.n	8002eec <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e8e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d025      	beq.n	8002ee2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e9a:	e022      	b.n	8002ee2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ea0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002ea4:	d11f      	bne.n	8002ee6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002eaa:	e01c      	b.n	8002ee6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	d903      	bls.n	8002eba <DMA_CheckFifoParam+0xb6>
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	2b03      	cmp	r3, #3
 8002eb6:	d003      	beq.n	8002ec0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002eb8:	e018      	b.n	8002eec <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	73fb      	strb	r3, [r7, #15]
      break;
 8002ebe:	e015      	b.n	8002eec <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ec4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d00e      	beq.n	8002eea <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	73fb      	strb	r3, [r7, #15]
      break;
 8002ed0:	e00b      	b.n	8002eea <DMA_CheckFifoParam+0xe6>
      break;
 8002ed2:	bf00      	nop
 8002ed4:	e00a      	b.n	8002eec <DMA_CheckFifoParam+0xe8>
      break;
 8002ed6:	bf00      	nop
 8002ed8:	e008      	b.n	8002eec <DMA_CheckFifoParam+0xe8>
      break;
 8002eda:	bf00      	nop
 8002edc:	e006      	b.n	8002eec <DMA_CheckFifoParam+0xe8>
      break;
 8002ede:	bf00      	nop
 8002ee0:	e004      	b.n	8002eec <DMA_CheckFifoParam+0xe8>
      break;
 8002ee2:	bf00      	nop
 8002ee4:	e002      	b.n	8002eec <DMA_CheckFifoParam+0xe8>
      break;   
 8002ee6:	bf00      	nop
 8002ee8:	e000      	b.n	8002eec <DMA_CheckFifoParam+0xe8>
      break;
 8002eea:	bf00      	nop
    }
  } 
  
  return status; 
 8002eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3714      	adds	r7, #20
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr
 8002efa:	bf00      	nop

08002efc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b089      	sub	sp, #36	@ 0x24
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f06:	2300      	movs	r3, #0
 8002f08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f12:	2300      	movs	r3, #0
 8002f14:	61fb      	str	r3, [r7, #28]
 8002f16:	e159      	b.n	80031cc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f18:	2201      	movs	r2, #1
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	697a      	ldr	r2, [r7, #20]
 8002f28:	4013      	ands	r3, r2
 8002f2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f2c:	693a      	ldr	r2, [r7, #16]
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	429a      	cmp	r2, r3
 8002f32:	f040 8148 	bne.w	80031c6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	f003 0303 	and.w	r3, r3, #3
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d005      	beq.n	8002f4e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d130      	bne.n	8002fb0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	005b      	lsls	r3, r3, #1
 8002f58:	2203      	movs	r2, #3
 8002f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5e:	43db      	mvns	r3, r3
 8002f60:	69ba      	ldr	r2, [r7, #24]
 8002f62:	4013      	ands	r3, r2
 8002f64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	68da      	ldr	r2, [r3, #12]
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	005b      	lsls	r3, r3, #1
 8002f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f72:	69ba      	ldr	r2, [r7, #24]
 8002f74:	4313      	orrs	r3, r2
 8002f76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	69ba      	ldr	r2, [r7, #24]
 8002f7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f84:	2201      	movs	r2, #1
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8c:	43db      	mvns	r3, r3
 8002f8e:	69ba      	ldr	r2, [r7, #24]
 8002f90:	4013      	ands	r3, r2
 8002f92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	091b      	lsrs	r3, r3, #4
 8002f9a:	f003 0201 	and.w	r2, r3, #1
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa4:	69ba      	ldr	r2, [r7, #24]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	69ba      	ldr	r2, [r7, #24]
 8002fae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f003 0303 	and.w	r3, r3, #3
 8002fb8:	2b03      	cmp	r3, #3
 8002fba:	d017      	beq.n	8002fec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	005b      	lsls	r3, r3, #1
 8002fc6:	2203      	movs	r2, #3
 8002fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fcc:	43db      	mvns	r3, r3
 8002fce:	69ba      	ldr	r2, [r7, #24]
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	689a      	ldr	r2, [r3, #8]
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	005b      	lsls	r3, r3, #1
 8002fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe0:	69ba      	ldr	r2, [r7, #24]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	69ba      	ldr	r2, [r7, #24]
 8002fea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f003 0303 	and.w	r3, r3, #3
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	d123      	bne.n	8003040 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	08da      	lsrs	r2, r3, #3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	3208      	adds	r2, #8
 8003000:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003004:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	f003 0307 	and.w	r3, r3, #7
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	220f      	movs	r2, #15
 8003010:	fa02 f303 	lsl.w	r3, r2, r3
 8003014:	43db      	mvns	r3, r3
 8003016:	69ba      	ldr	r2, [r7, #24]
 8003018:	4013      	ands	r3, r2
 800301a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	691a      	ldr	r2, [r3, #16]
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	f003 0307 	and.w	r3, r3, #7
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	fa02 f303 	lsl.w	r3, r2, r3
 800302c:	69ba      	ldr	r2, [r7, #24]
 800302e:	4313      	orrs	r3, r2
 8003030:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	08da      	lsrs	r2, r3, #3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	3208      	adds	r2, #8
 800303a:	69b9      	ldr	r1, [r7, #24]
 800303c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	005b      	lsls	r3, r3, #1
 800304a:	2203      	movs	r2, #3
 800304c:	fa02 f303 	lsl.w	r3, r2, r3
 8003050:	43db      	mvns	r3, r3
 8003052:	69ba      	ldr	r2, [r7, #24]
 8003054:	4013      	ands	r3, r2
 8003056:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f003 0203 	and.w	r2, r3, #3
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	005b      	lsls	r3, r3, #1
 8003064:	fa02 f303 	lsl.w	r3, r2, r3
 8003068:	69ba      	ldr	r2, [r7, #24]
 800306a:	4313      	orrs	r3, r2
 800306c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	69ba      	ldr	r2, [r7, #24]
 8003072:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800307c:	2b00      	cmp	r3, #0
 800307e:	f000 80a2 	beq.w	80031c6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003082:	2300      	movs	r3, #0
 8003084:	60fb      	str	r3, [r7, #12]
 8003086:	4b57      	ldr	r3, [pc, #348]	@ (80031e4 <HAL_GPIO_Init+0x2e8>)
 8003088:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800308a:	4a56      	ldr	r2, [pc, #344]	@ (80031e4 <HAL_GPIO_Init+0x2e8>)
 800308c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003090:	6453      	str	r3, [r2, #68]	@ 0x44
 8003092:	4b54      	ldr	r3, [pc, #336]	@ (80031e4 <HAL_GPIO_Init+0x2e8>)
 8003094:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003096:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800309a:	60fb      	str	r3, [r7, #12]
 800309c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800309e:	4a52      	ldr	r2, [pc, #328]	@ (80031e8 <HAL_GPIO_Init+0x2ec>)
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	089b      	lsrs	r3, r3, #2
 80030a4:	3302      	adds	r3, #2
 80030a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	f003 0303 	and.w	r3, r3, #3
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	220f      	movs	r2, #15
 80030b6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ba:	43db      	mvns	r3, r3
 80030bc:	69ba      	ldr	r2, [r7, #24]
 80030be:	4013      	ands	r3, r2
 80030c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a49      	ldr	r2, [pc, #292]	@ (80031ec <HAL_GPIO_Init+0x2f0>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d019      	beq.n	80030fe <HAL_GPIO_Init+0x202>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a48      	ldr	r2, [pc, #288]	@ (80031f0 <HAL_GPIO_Init+0x2f4>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d013      	beq.n	80030fa <HAL_GPIO_Init+0x1fe>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a47      	ldr	r2, [pc, #284]	@ (80031f4 <HAL_GPIO_Init+0x2f8>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d00d      	beq.n	80030f6 <HAL_GPIO_Init+0x1fa>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a46      	ldr	r2, [pc, #280]	@ (80031f8 <HAL_GPIO_Init+0x2fc>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d007      	beq.n	80030f2 <HAL_GPIO_Init+0x1f6>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a45      	ldr	r2, [pc, #276]	@ (80031fc <HAL_GPIO_Init+0x300>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d101      	bne.n	80030ee <HAL_GPIO_Init+0x1f2>
 80030ea:	2304      	movs	r3, #4
 80030ec:	e008      	b.n	8003100 <HAL_GPIO_Init+0x204>
 80030ee:	2307      	movs	r3, #7
 80030f0:	e006      	b.n	8003100 <HAL_GPIO_Init+0x204>
 80030f2:	2303      	movs	r3, #3
 80030f4:	e004      	b.n	8003100 <HAL_GPIO_Init+0x204>
 80030f6:	2302      	movs	r3, #2
 80030f8:	e002      	b.n	8003100 <HAL_GPIO_Init+0x204>
 80030fa:	2301      	movs	r3, #1
 80030fc:	e000      	b.n	8003100 <HAL_GPIO_Init+0x204>
 80030fe:	2300      	movs	r3, #0
 8003100:	69fa      	ldr	r2, [r7, #28]
 8003102:	f002 0203 	and.w	r2, r2, #3
 8003106:	0092      	lsls	r2, r2, #2
 8003108:	4093      	lsls	r3, r2
 800310a:	69ba      	ldr	r2, [r7, #24]
 800310c:	4313      	orrs	r3, r2
 800310e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003110:	4935      	ldr	r1, [pc, #212]	@ (80031e8 <HAL_GPIO_Init+0x2ec>)
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	089b      	lsrs	r3, r3, #2
 8003116:	3302      	adds	r3, #2
 8003118:	69ba      	ldr	r2, [r7, #24]
 800311a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800311e:	4b38      	ldr	r3, [pc, #224]	@ (8003200 <HAL_GPIO_Init+0x304>)
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	43db      	mvns	r3, r3
 8003128:	69ba      	ldr	r2, [r7, #24]
 800312a:	4013      	ands	r3, r2
 800312c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d003      	beq.n	8003142 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800313a:	69ba      	ldr	r2, [r7, #24]
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	4313      	orrs	r3, r2
 8003140:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003142:	4a2f      	ldr	r2, [pc, #188]	@ (8003200 <HAL_GPIO_Init+0x304>)
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003148:	4b2d      	ldr	r3, [pc, #180]	@ (8003200 <HAL_GPIO_Init+0x304>)
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	43db      	mvns	r3, r3
 8003152:	69ba      	ldr	r2, [r7, #24]
 8003154:	4013      	ands	r3, r2
 8003156:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003160:	2b00      	cmp	r3, #0
 8003162:	d003      	beq.n	800316c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003164:	69ba      	ldr	r2, [r7, #24]
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	4313      	orrs	r3, r2
 800316a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800316c:	4a24      	ldr	r2, [pc, #144]	@ (8003200 <HAL_GPIO_Init+0x304>)
 800316e:	69bb      	ldr	r3, [r7, #24]
 8003170:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003172:	4b23      	ldr	r3, [pc, #140]	@ (8003200 <HAL_GPIO_Init+0x304>)
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	43db      	mvns	r3, r3
 800317c:	69ba      	ldr	r2, [r7, #24]
 800317e:	4013      	ands	r3, r2
 8003180:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d003      	beq.n	8003196 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800318e:	69ba      	ldr	r2, [r7, #24]
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	4313      	orrs	r3, r2
 8003194:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003196:	4a1a      	ldr	r2, [pc, #104]	@ (8003200 <HAL_GPIO_Init+0x304>)
 8003198:	69bb      	ldr	r3, [r7, #24]
 800319a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800319c:	4b18      	ldr	r3, [pc, #96]	@ (8003200 <HAL_GPIO_Init+0x304>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	43db      	mvns	r3, r3
 80031a6:	69ba      	ldr	r2, [r7, #24]
 80031a8:	4013      	ands	r3, r2
 80031aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d003      	beq.n	80031c0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80031b8:	69ba      	ldr	r2, [r7, #24]
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	4313      	orrs	r3, r2
 80031be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031c0:	4a0f      	ldr	r2, [pc, #60]	@ (8003200 <HAL_GPIO_Init+0x304>)
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	3301      	adds	r3, #1
 80031ca:	61fb      	str	r3, [r7, #28]
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	2b0f      	cmp	r3, #15
 80031d0:	f67f aea2 	bls.w	8002f18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80031d4:	bf00      	nop
 80031d6:	bf00      	nop
 80031d8:	3724      	adds	r7, #36	@ 0x24
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr
 80031e2:	bf00      	nop
 80031e4:	40023800 	.word	0x40023800
 80031e8:	40013800 	.word	0x40013800
 80031ec:	40020000 	.word	0x40020000
 80031f0:	40020400 	.word	0x40020400
 80031f4:	40020800 	.word	0x40020800
 80031f8:	40020c00 	.word	0x40020c00
 80031fc:	40021000 	.word	0x40021000
 8003200:	40013c00 	.word	0x40013c00

08003204 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	460b      	mov	r3, r1
 800320e:	807b      	strh	r3, [r7, #2]
 8003210:	4613      	mov	r3, r2
 8003212:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003214:	787b      	ldrb	r3, [r7, #1]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d003      	beq.n	8003222 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800321a:	887a      	ldrh	r2, [r7, #2]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003220:	e003      	b.n	800322a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003222:	887b      	ldrh	r3, [r7, #2]
 8003224:	041a      	lsls	r2, r3, #16
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	619a      	str	r2, [r3, #24]
}
 800322a:	bf00      	nop
 800322c:	370c      	adds	r7, #12
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr

08003236 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003236:	b480      	push	{r7}
 8003238:	b085      	sub	sp, #20
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
 800323e:	460b      	mov	r3, r1
 8003240:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	695b      	ldr	r3, [r3, #20]
 8003246:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003248:	887a      	ldrh	r2, [r7, #2]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	4013      	ands	r3, r2
 800324e:	041a      	lsls	r2, r3, #16
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	43d9      	mvns	r1, r3
 8003254:	887b      	ldrh	r3, [r7, #2]
 8003256:	400b      	ands	r3, r1
 8003258:	431a      	orrs	r2, r3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	619a      	str	r2, [r3, #24]
}
 800325e:	bf00      	nop
 8003260:	3714      	adds	r7, #20
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
	...

0800326c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af00      	add	r7, sp, #0
 8003272:	4603      	mov	r3, r0
 8003274:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003276:	4b08      	ldr	r3, [pc, #32]	@ (8003298 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003278:	695a      	ldr	r2, [r3, #20]
 800327a:	88fb      	ldrh	r3, [r7, #6]
 800327c:	4013      	ands	r3, r2
 800327e:	2b00      	cmp	r3, #0
 8003280:	d006      	beq.n	8003290 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003282:	4a05      	ldr	r2, [pc, #20]	@ (8003298 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003284:	88fb      	ldrh	r3, [r7, #6]
 8003286:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003288:	88fb      	ldrh	r3, [r7, #6]
 800328a:	4618      	mov	r0, r3
 800328c:	f7fe fbf6 	bl	8001a7c <HAL_GPIO_EXTI_Callback>
  }
}
 8003290:	bf00      	nop
 8003292:	3708      	adds	r7, #8
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}
 8003298:	40013c00 	.word	0x40013c00

0800329c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b088      	sub	sp, #32
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d101      	bne.n	80032ae <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e128      	b.n	8003500 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d109      	bne.n	80032ce <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a90      	ldr	r2, [pc, #576]	@ (8003508 <HAL_I2S_Init+0x26c>)
 80032c6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f7fe f917 	bl	80014fc <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2202      	movs	r2, #2
 80032d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	69db      	ldr	r3, [r3, #28]
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	6812      	ldr	r2, [r2, #0]
 80032e0:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80032e4:	f023 030f 	bic.w	r3, r3, #15
 80032e8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	2202      	movs	r2, #2
 80032f0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	695b      	ldr	r3, [r3, #20]
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d060      	beq.n	80033bc <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d102      	bne.n	8003308 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003302:	2310      	movs	r3, #16
 8003304:	617b      	str	r3, [r7, #20]
 8003306:	e001      	b.n	800330c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003308:	2320      	movs	r3, #32
 800330a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	2b20      	cmp	r3, #32
 8003312:	d802      	bhi.n	800331a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	005b      	lsls	r3, r3, #1
 8003318:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800331a:	2001      	movs	r0, #1
 800331c:	f001 fa60 	bl	80047e0 <HAL_RCCEx_GetPeriphCLKFreq>
 8003320:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	691b      	ldr	r3, [r3, #16]
 8003326:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800332a:	d125      	bne.n	8003378 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d010      	beq.n	8003356 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	68fa      	ldr	r2, [r7, #12]
 800333a:	fbb2 f2f3 	udiv	r2, r2, r3
 800333e:	4613      	mov	r3, r2
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	4413      	add	r3, r2
 8003344:	005b      	lsls	r3, r3, #1
 8003346:	461a      	mov	r2, r3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	695b      	ldr	r3, [r3, #20]
 800334c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003350:	3305      	adds	r3, #5
 8003352:	613b      	str	r3, [r7, #16]
 8003354:	e01f      	b.n	8003396 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	00db      	lsls	r3, r3, #3
 800335a:	68fa      	ldr	r2, [r7, #12]
 800335c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003360:	4613      	mov	r3, r2
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	4413      	add	r3, r2
 8003366:	005b      	lsls	r3, r3, #1
 8003368:	461a      	mov	r2, r3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	695b      	ldr	r3, [r3, #20]
 800336e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003372:	3305      	adds	r3, #5
 8003374:	613b      	str	r3, [r7, #16]
 8003376:	e00e      	b.n	8003396 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003378:	68fa      	ldr	r2, [r7, #12]
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003380:	4613      	mov	r3, r2
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	4413      	add	r3, r2
 8003386:	005b      	lsls	r3, r3, #1
 8003388:	461a      	mov	r2, r3
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	695b      	ldr	r3, [r3, #20]
 800338e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003392:	3305      	adds	r3, #5
 8003394:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	4a5c      	ldr	r2, [pc, #368]	@ (800350c <HAL_I2S_Init+0x270>)
 800339a:	fba2 2303 	umull	r2, r3, r2, r3
 800339e:	08db      	lsrs	r3, r3, #3
 80033a0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	f003 0301 	and.w	r3, r3, #1
 80033a8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80033aa:	693a      	ldr	r2, [r7, #16]
 80033ac:	69bb      	ldr	r3, [r7, #24]
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	085b      	lsrs	r3, r3, #1
 80033b2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80033b4:	69bb      	ldr	r3, [r7, #24]
 80033b6:	021b      	lsls	r3, r3, #8
 80033b8:	61bb      	str	r3, [r7, #24]
 80033ba:	e003      	b.n	80033c4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80033bc:	2302      	movs	r3, #2
 80033be:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80033c0:	2300      	movs	r3, #0
 80033c2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d902      	bls.n	80033d0 <HAL_I2S_Init+0x134>
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	2bff      	cmp	r3, #255	@ 0xff
 80033ce:	d907      	bls.n	80033e0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033d4:	f043 0210 	orr.w	r2, r3, #16
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e08f      	b.n	8003500 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	691a      	ldr	r2, [r3, #16]
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	ea42 0103 	orr.w	r1, r2, r3
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	69fa      	ldr	r2, [r7, #28]
 80033f0:	430a      	orrs	r2, r1
 80033f2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	69db      	ldr	r3, [r3, #28]
 80033fa:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80033fe:	f023 030f 	bic.w	r3, r3, #15
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	6851      	ldr	r1, [r2, #4]
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	6892      	ldr	r2, [r2, #8]
 800340a:	4311      	orrs	r1, r2
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	68d2      	ldr	r2, [r2, #12]
 8003410:	4311      	orrs	r1, r2
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	6992      	ldr	r2, [r2, #24]
 8003416:	430a      	orrs	r2, r1
 8003418:	431a      	orrs	r2, r3
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003422:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6a1b      	ldr	r3, [r3, #32]
 8003428:	2b01      	cmp	r3, #1
 800342a:	d161      	bne.n	80034f0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	4a38      	ldr	r2, [pc, #224]	@ (8003510 <HAL_I2S_Init+0x274>)
 8003430:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a37      	ldr	r2, [pc, #220]	@ (8003514 <HAL_I2S_Init+0x278>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d101      	bne.n	8003440 <HAL_I2S_Init+0x1a4>
 800343c:	4b36      	ldr	r3, [pc, #216]	@ (8003518 <HAL_I2S_Init+0x27c>)
 800343e:	e001      	b.n	8003444 <HAL_I2S_Init+0x1a8>
 8003440:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003444:	69db      	ldr	r3, [r3, #28]
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	6812      	ldr	r2, [r2, #0]
 800344a:	4932      	ldr	r1, [pc, #200]	@ (8003514 <HAL_I2S_Init+0x278>)
 800344c:	428a      	cmp	r2, r1
 800344e:	d101      	bne.n	8003454 <HAL_I2S_Init+0x1b8>
 8003450:	4a31      	ldr	r2, [pc, #196]	@ (8003518 <HAL_I2S_Init+0x27c>)
 8003452:	e001      	b.n	8003458 <HAL_I2S_Init+0x1bc>
 8003454:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003458:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800345c:	f023 030f 	bic.w	r3, r3, #15
 8003460:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a2b      	ldr	r2, [pc, #172]	@ (8003514 <HAL_I2S_Init+0x278>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d101      	bne.n	8003470 <HAL_I2S_Init+0x1d4>
 800346c:	4b2a      	ldr	r3, [pc, #168]	@ (8003518 <HAL_I2S_Init+0x27c>)
 800346e:	e001      	b.n	8003474 <HAL_I2S_Init+0x1d8>
 8003470:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003474:	2202      	movs	r2, #2
 8003476:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a25      	ldr	r2, [pc, #148]	@ (8003514 <HAL_I2S_Init+0x278>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d101      	bne.n	8003486 <HAL_I2S_Init+0x1ea>
 8003482:	4b25      	ldr	r3, [pc, #148]	@ (8003518 <HAL_I2S_Init+0x27c>)
 8003484:	e001      	b.n	800348a <HAL_I2S_Init+0x1ee>
 8003486:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800348a:	69db      	ldr	r3, [r3, #28]
 800348c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003496:	d003      	beq.n	80034a0 <HAL_I2S_Init+0x204>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d103      	bne.n	80034a8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80034a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80034a4:	613b      	str	r3, [r7, #16]
 80034a6:	e001      	b.n	80034ac <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80034a8:	2300      	movs	r3, #0
 80034aa:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80034b6:	4313      	orrs	r3, r2
 80034b8:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	68db      	ldr	r3, [r3, #12]
 80034be:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80034c0:	4313      	orrs	r3, r2
 80034c2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	699b      	ldr	r3, [r3, #24]
 80034c8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80034ca:	4313      	orrs	r3, r2
 80034cc:	b29a      	uxth	r2, r3
 80034ce:	897b      	ldrh	r3, [r7, #10]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80034d8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a0d      	ldr	r2, [pc, #52]	@ (8003514 <HAL_I2S_Init+0x278>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d101      	bne.n	80034e8 <HAL_I2S_Init+0x24c>
 80034e4:	4b0c      	ldr	r3, [pc, #48]	@ (8003518 <HAL_I2S_Init+0x27c>)
 80034e6:	e001      	b.n	80034ec <HAL_I2S_Init+0x250>
 80034e8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80034ec:	897a      	ldrh	r2, [r7, #10]
 80034ee:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2201      	movs	r2, #1
 80034fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 80034fe:	2300      	movs	r3, #0
}
 8003500:	4618      	mov	r0, r3
 8003502:	3720      	adds	r7, #32
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}
 8003508:	080037f1 	.word	0x080037f1
 800350c:	cccccccd 	.word	0xcccccccd
 8003510:	08003905 	.word	0x08003905
 8003514:	40003800 	.word	0x40003800
 8003518:	40003400 	.word	0x40003400

0800351c <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b086      	sub	sp, #24
 8003520:	af00      	add	r7, sp, #0
 8003522:	60f8      	str	r0, [r7, #12]
 8003524:	60b9      	str	r1, [r7, #8]
 8003526:	4613      	mov	r3, r2
 8003528:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d002      	beq.n	8003536 <HAL_I2S_Transmit_DMA+0x1a>
 8003530:	88fb      	ldrh	r3, [r7, #6]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d101      	bne.n	800353a <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e08a      	b.n	8003650 <HAL_I2S_Transmit_DMA+0x134>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003540:	b2db      	uxtb	r3, r3
 8003542:	2b01      	cmp	r3, #1
 8003544:	d001      	beq.n	800354a <HAL_I2S_Transmit_DMA+0x2e>
  {
    return HAL_BUSY;
 8003546:	2302      	movs	r3, #2
 8003548:	e082      	b.n	8003650 <HAL_I2S_Transmit_DMA+0x134>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003550:	b2db      	uxtb	r3, r3
 8003552:	2b01      	cmp	r3, #1
 8003554:	d101      	bne.n	800355a <HAL_I2S_Transmit_DMA+0x3e>
 8003556:	2302      	movs	r3, #2
 8003558:	e07a      	b.n	8003650 <HAL_I2S_Transmit_DMA+0x134>
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2201      	movs	r2, #1
 800355e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2203      	movs	r2, #3
 8003566:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2200      	movs	r2, #0
 800356e:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pTxBuffPtr = pData;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	68ba      	ldr	r2, [r7, #8]
 8003574:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	69db      	ldr	r3, [r3, #28]
 800357c:	f003 0307 	and.w	r3, r3, #7
 8003580:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	2b03      	cmp	r3, #3
 8003586:	d002      	beq.n	800358e <HAL_I2S_Transmit_DMA+0x72>
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	2b05      	cmp	r3, #5
 800358c:	d10a      	bne.n	80035a4 <HAL_I2S_Transmit_DMA+0x88>
  {
    hi2s->TxXferSize = (Size << 1U);
 800358e:	88fb      	ldrh	r3, [r7, #6]
 8003590:	005b      	lsls	r3, r3, #1
 8003592:	b29a      	uxth	r2, r3
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 8003598:	88fb      	ldrh	r3, [r7, #6]
 800359a:	005b      	lsls	r3, r3, #1
 800359c:	b29a      	uxth	r2, r3
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80035a2:	e005      	b.n	80035b0 <HAL_I2S_Transmit_DMA+0x94>
  }
  else
  {
    hi2s->TxXferSize = Size;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	88fa      	ldrh	r2, [r7, #6]
 80035a8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	88fa      	ldrh	r2, [r7, #6]
 80035ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035b4:	4a28      	ldr	r2, [pc, #160]	@ (8003658 <HAL_I2S_Transmit_DMA+0x13c>)
 80035b6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035bc:	4a27      	ldr	r2, [pc, #156]	@ (800365c <HAL_I2S_Transmit_DMA+0x140>)
 80035be:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035c4:	4a26      	ldr	r2, [pc, #152]	@ (8003660 <HAL_I2S_Transmit_DMA+0x144>)
 80035c6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	6b98      	ldr	r0, [r3, #56]	@ 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80035d0:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80035d8:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035de:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80035e0:	f7ff f9ca 	bl	8002978 <HAL_DMA_Start_IT>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d00f      	beq.n	800360a <HAL_I2S_Transmit_DMA+0xee>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035ee:	f043 0208 	orr.w	r2, r3, #8
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2201      	movs	r2, #1
 80035fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2200      	movs	r2, #0
 8003602:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e022      	b.n	8003650 <HAL_I2S_Transmit_DMA+0x134>
  }

  __HAL_UNLOCK(hi2s);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2200      	movs	r2, #0
 800360e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f003 0302 	and.w	r3, r3, #2
 800361c:	2b00      	cmp	r3, #0
 800361e:	d107      	bne.n	8003630 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	685a      	ldr	r2, [r3, #4]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f042 0202 	orr.w	r2, r2, #2
 800362e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	69db      	ldr	r3, [r3, #28]
 8003636:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800363a:	2b00      	cmp	r3, #0
 800363c:	d107      	bne.n	800364e <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	69da      	ldr	r2, [r3, #28]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800364c:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 800364e:	2300      	movs	r3, #0
}
 8003650:	4618      	mov	r0, r3
 8003652:	3718      	adds	r7, #24
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}
 8003658:	080036cf 	.word	0x080036cf
 800365c:	0800368d 	.word	0x0800368d
 8003660:	080036eb 	.word	0x080036eb

08003664 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003664:	b480      	push	{r7}
 8003666:	b083      	sub	sp, #12
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800366c:	bf00      	nop
 800366e:	370c      	adds	r7, #12
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr

08003678 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003680:	bf00      	nop
 8003682:	370c      	adds	r7, #12
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr

0800368c <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b084      	sub	sp, #16
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003698:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	69db      	ldr	r3, [r3, #28]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d10e      	bne.n	80036c0 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	685a      	ldr	r2, [r3, #4]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f022 0202 	bic.w	r2, r2, #2
 80036b0:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2200      	movs	r2, #0
 80036b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2201      	movs	r2, #1
 80036bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 80036c0:	68f8      	ldr	r0, [r7, #12]
 80036c2:	f7fe fa17 	bl	8001af4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80036c6:	bf00      	nop
 80036c8:	3710      	adds	r7, #16
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}

080036ce <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80036ce:	b580      	push	{r7, lr}
 80036d0:	b084      	sub	sp, #16
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036da:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 80036dc:	68f8      	ldr	r0, [r7, #12]
 80036de:	f7fe f9e7 	bl	8001ab0 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80036e2:	bf00      	nop
 80036e4:	3710      	adds	r7, #16
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}

080036ea <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 80036ea:	b580      	push	{r7, lr}
 80036ec:	b084      	sub	sp, #16
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036f6:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	685a      	ldr	r2, [r3, #4]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f022 0203 	bic.w	r2, r2, #3
 8003706:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2200      	movs	r2, #0
 800370c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2200      	movs	r2, #0
 8003712:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003720:	f043 0208 	orr.w	r2, r3, #8
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8003728:	68f8      	ldr	r0, [r7, #12]
 800372a:	f7ff ffa5 	bl	8003678 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800372e:	bf00      	nop
 8003730:	3710      	adds	r7, #16
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}

08003736 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003736:	b580      	push	{r7, lr}
 8003738:	b082      	sub	sp, #8
 800373a:	af00      	add	r7, sp, #0
 800373c:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003742:	881a      	ldrh	r2, [r3, #0]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800374e:	1c9a      	adds	r2, r3, #2
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003758:	b29b      	uxth	r3, r3
 800375a:	3b01      	subs	r3, #1
 800375c:	b29a      	uxth	r2, r3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003766:	b29b      	uxth	r3, r3
 8003768:	2b00      	cmp	r3, #0
 800376a:	d10e      	bne.n	800378a <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	685a      	ldr	r2, [r3, #4]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800377a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f7fe f9b5 	bl	8001af4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800378a:	bf00      	nop
 800378c:	3708      	adds	r7, #8
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}

08003792 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003792:	b580      	push	{r7, lr}
 8003794:	b082      	sub	sp, #8
 8003796:	af00      	add	r7, sp, #0
 8003798:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	68da      	ldr	r2, [r3, #12]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037a4:	b292      	uxth	r2, r2
 80037a6:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037ac:	1c9a      	adds	r2, r3, #2
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80037b6:	b29b      	uxth	r3, r3
 80037b8:	3b01      	subs	r3, #1
 80037ba:	b29a      	uxth	r2, r3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d10e      	bne.n	80037e8 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	685a      	ldr	r2, [r3, #4]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80037d8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2201      	movs	r2, #1
 80037de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f7ff ff3e 	bl	8003664 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80037e8:	bf00      	nop
 80037ea:	3708      	adds	r7, #8
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}

080037f0 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b086      	sub	sp, #24
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003806:	b2db      	uxtb	r3, r3
 8003808:	2b04      	cmp	r3, #4
 800380a:	d13a      	bne.n	8003882 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	f003 0301 	and.w	r3, r3, #1
 8003812:	2b01      	cmp	r3, #1
 8003814:	d109      	bne.n	800382a <I2S_IRQHandler+0x3a>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003820:	2b40      	cmp	r3, #64	@ 0x40
 8003822:	d102      	bne.n	800382a <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f7ff ffb4 	bl	8003792 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003830:	2b40      	cmp	r3, #64	@ 0x40
 8003832:	d126      	bne.n	8003882 <I2S_IRQHandler+0x92>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	f003 0320 	and.w	r3, r3, #32
 800383e:	2b20      	cmp	r3, #32
 8003840:	d11f      	bne.n	8003882 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	685a      	ldr	r2, [r3, #4]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003850:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003852:	2300      	movs	r3, #0
 8003854:	613b      	str	r3, [r7, #16]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	613b      	str	r3, [r7, #16]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	613b      	str	r3, [r7, #16]
 8003866:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003874:	f043 0202 	orr.w	r2, r3, #2
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f7ff fefb 	bl	8003678 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003888:	b2db      	uxtb	r3, r3
 800388a:	2b03      	cmp	r3, #3
 800388c:	d136      	bne.n	80038fc <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	f003 0302 	and.w	r3, r3, #2
 8003894:	2b02      	cmp	r3, #2
 8003896:	d109      	bne.n	80038ac <I2S_IRQHandler+0xbc>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038a2:	2b80      	cmp	r3, #128	@ 0x80
 80038a4:	d102      	bne.n	80038ac <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f7ff ff45 	bl	8003736 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	f003 0308 	and.w	r3, r3, #8
 80038b2:	2b08      	cmp	r3, #8
 80038b4:	d122      	bne.n	80038fc <I2S_IRQHandler+0x10c>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	f003 0320 	and.w	r3, r3, #32
 80038c0:	2b20      	cmp	r3, #32
 80038c2:	d11b      	bne.n	80038fc <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	685a      	ldr	r2, [r3, #4]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80038d2:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80038d4:	2300      	movs	r3, #0
 80038d6:	60fb      	str	r3, [r7, #12]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	60fb      	str	r3, [r7, #12]
 80038e0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2201      	movs	r2, #1
 80038e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038ee:	f043 0204 	orr.w	r2, r3, #4
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f7ff febe 	bl	8003678 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80038fc:	bf00      	nop
 80038fe:	3718      	adds	r7, #24
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}

08003904 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b088      	sub	sp, #32
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a92      	ldr	r2, [pc, #584]	@ (8003b64 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d101      	bne.n	8003922 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800391e:	4b92      	ldr	r3, [pc, #584]	@ (8003b68 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003920:	e001      	b.n	8003926 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003922:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a8b      	ldr	r2, [pc, #556]	@ (8003b64 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d101      	bne.n	8003940 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800393c:	4b8a      	ldr	r3, [pc, #552]	@ (8003b68 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800393e:	e001      	b.n	8003944 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003940:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003950:	d004      	beq.n	800395c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	2b00      	cmp	r3, #0
 8003958:	f040 8099 	bne.w	8003a8e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	f003 0302 	and.w	r3, r3, #2
 8003962:	2b02      	cmp	r3, #2
 8003964:	d107      	bne.n	8003976 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800396c:	2b00      	cmp	r3, #0
 800396e:	d002      	beq.n	8003976 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f000 f925 	bl	8003bc0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003976:	69bb      	ldr	r3, [r7, #24]
 8003978:	f003 0301 	and.w	r3, r3, #1
 800397c:	2b01      	cmp	r3, #1
 800397e:	d107      	bne.n	8003990 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003986:	2b00      	cmp	r3, #0
 8003988:	d002      	beq.n	8003990 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f000 f9c8 	bl	8003d20 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003990:	69bb      	ldr	r3, [r7, #24]
 8003992:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003996:	2b40      	cmp	r3, #64	@ 0x40
 8003998:	d13a      	bne.n	8003a10 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	f003 0320 	and.w	r3, r3, #32
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d035      	beq.n	8003a10 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a6e      	ldr	r2, [pc, #440]	@ (8003b64 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d101      	bne.n	80039b2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80039ae:	4b6e      	ldr	r3, [pc, #440]	@ (8003b68 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80039b0:	e001      	b.n	80039b6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80039b2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80039b6:	685a      	ldr	r2, [r3, #4]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4969      	ldr	r1, [pc, #420]	@ (8003b64 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80039be:	428b      	cmp	r3, r1
 80039c0:	d101      	bne.n	80039c6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80039c2:	4b69      	ldr	r3, [pc, #420]	@ (8003b68 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80039c4:	e001      	b.n	80039ca <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80039c6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80039ca:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80039ce:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	685a      	ldr	r2, [r3, #4]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80039de:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80039e0:	2300      	movs	r3, #0
 80039e2:	60fb      	str	r3, [r7, #12]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	68db      	ldr	r3, [r3, #12]
 80039ea:	60fb      	str	r3, [r7, #12]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	60fb      	str	r3, [r7, #12]
 80039f4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2201      	movs	r2, #1
 80039fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a02:	f043 0202 	orr.w	r2, r3, #2
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f7ff fe34 	bl	8003678 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	f003 0308 	and.w	r3, r3, #8
 8003a16:	2b08      	cmp	r3, #8
 8003a18:	f040 80c3 	bne.w	8003ba2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	f003 0320 	and.w	r3, r3, #32
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	f000 80bd 	beq.w	8003ba2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	685a      	ldr	r2, [r3, #4]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003a36:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a49      	ldr	r2, [pc, #292]	@ (8003b64 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d101      	bne.n	8003a46 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003a42:	4b49      	ldr	r3, [pc, #292]	@ (8003b68 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003a44:	e001      	b.n	8003a4a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003a46:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003a4a:	685a      	ldr	r2, [r3, #4]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4944      	ldr	r1, [pc, #272]	@ (8003b64 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003a52:	428b      	cmp	r3, r1
 8003a54:	d101      	bne.n	8003a5a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003a56:	4b44      	ldr	r3, [pc, #272]	@ (8003b68 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003a58:	e001      	b.n	8003a5e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003a5a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003a5e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003a62:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003a64:	2300      	movs	r3, #0
 8003a66:	60bb      	str	r3, [r7, #8]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	60bb      	str	r3, [r7, #8]
 8003a70:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2201      	movs	r2, #1
 8003a76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a7e:	f043 0204 	orr.w	r2, r3, #4
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f7ff fdf6 	bl	8003678 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003a8c:	e089      	b.n	8003ba2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003a8e:	69bb      	ldr	r3, [r7, #24]
 8003a90:	f003 0302 	and.w	r3, r3, #2
 8003a94:	2b02      	cmp	r3, #2
 8003a96:	d107      	bne.n	8003aa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d002      	beq.n	8003aa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f000 f8be 	bl	8003c24 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	f003 0301 	and.w	r3, r3, #1
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d107      	bne.n	8003ac2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d002      	beq.n	8003ac2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f000 f8fd 	bl	8003cbc <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ac8:	2b40      	cmp	r3, #64	@ 0x40
 8003aca:	d12f      	bne.n	8003b2c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	f003 0320 	and.w	r3, r3, #32
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d02a      	beq.n	8003b2c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	685a      	ldr	r2, [r3, #4]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003ae4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a1e      	ldr	r2, [pc, #120]	@ (8003b64 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d101      	bne.n	8003af4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003af0:	4b1d      	ldr	r3, [pc, #116]	@ (8003b68 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003af2:	e001      	b.n	8003af8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003af4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003af8:	685a      	ldr	r2, [r3, #4]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4919      	ldr	r1, [pc, #100]	@ (8003b64 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003b00:	428b      	cmp	r3, r1
 8003b02:	d101      	bne.n	8003b08 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003b04:	4b18      	ldr	r3, [pc, #96]	@ (8003b68 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003b06:	e001      	b.n	8003b0c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003b08:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003b0c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003b10:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2201      	movs	r2, #1
 8003b16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b1e:	f043 0202 	orr.w	r2, r3, #2
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f7ff fda6 	bl	8003678 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003b2c:	69bb      	ldr	r3, [r7, #24]
 8003b2e:	f003 0308 	and.w	r3, r3, #8
 8003b32:	2b08      	cmp	r3, #8
 8003b34:	d136      	bne.n	8003ba4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	f003 0320 	and.w	r3, r3, #32
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d031      	beq.n	8003ba4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a07      	ldr	r2, [pc, #28]	@ (8003b64 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d101      	bne.n	8003b4e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003b4a:	4b07      	ldr	r3, [pc, #28]	@ (8003b68 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003b4c:	e001      	b.n	8003b52 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003b4e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003b52:	685a      	ldr	r2, [r3, #4]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4902      	ldr	r1, [pc, #8]	@ (8003b64 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003b5a:	428b      	cmp	r3, r1
 8003b5c:	d106      	bne.n	8003b6c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003b5e:	4b02      	ldr	r3, [pc, #8]	@ (8003b68 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003b60:	e006      	b.n	8003b70 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003b62:	bf00      	nop
 8003b64:	40003800 	.word	0x40003800
 8003b68:	40003400 	.word	0x40003400
 8003b6c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003b70:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003b74:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	685a      	ldr	r2, [r3, #4]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003b84:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b92:	f043 0204 	orr.w	r2, r3, #4
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f7ff fd6c 	bl	8003678 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003ba0:	e000      	b.n	8003ba4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003ba2:	bf00      	nop
}
 8003ba4:	bf00      	nop
 8003ba6:	3720      	adds	r7, #32
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}

08003bac <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003bb4:	bf00      	nop
 8003bb6:	370c      	adds	r7, #12
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr

08003bc0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b082      	sub	sp, #8
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bcc:	1c99      	adds	r1, r3, #2
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	6251      	str	r1, [r2, #36]	@ 0x24
 8003bd2:	881a      	ldrh	r2, [r3, #0]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	3b01      	subs	r3, #1
 8003be2:	b29a      	uxth	r2, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d113      	bne.n	8003c1a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	685a      	ldr	r2, [r3, #4]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003c00:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d106      	bne.n	8003c1a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f7ff ffc9 	bl	8003bac <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003c1a:	bf00      	nop
 8003c1c:	3708      	adds	r7, #8
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
	...

08003c24 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b082      	sub	sp, #8
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c30:	1c99      	adds	r1, r3, #2
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	6251      	str	r1, [r2, #36]	@ 0x24
 8003c36:	8819      	ldrh	r1, [r3, #0]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a1d      	ldr	r2, [pc, #116]	@ (8003cb4 <I2SEx_TxISR_I2SExt+0x90>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d101      	bne.n	8003c46 <I2SEx_TxISR_I2SExt+0x22>
 8003c42:	4b1d      	ldr	r3, [pc, #116]	@ (8003cb8 <I2SEx_TxISR_I2SExt+0x94>)
 8003c44:	e001      	b.n	8003c4a <I2SEx_TxISR_I2SExt+0x26>
 8003c46:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003c4a:	460a      	mov	r2, r1
 8003c4c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	3b01      	subs	r3, #1
 8003c56:	b29a      	uxth	r2, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d121      	bne.n	8003caa <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a12      	ldr	r2, [pc, #72]	@ (8003cb4 <I2SEx_TxISR_I2SExt+0x90>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d101      	bne.n	8003c74 <I2SEx_TxISR_I2SExt+0x50>
 8003c70:	4b11      	ldr	r3, [pc, #68]	@ (8003cb8 <I2SEx_TxISR_I2SExt+0x94>)
 8003c72:	e001      	b.n	8003c78 <I2SEx_TxISR_I2SExt+0x54>
 8003c74:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003c78:	685a      	ldr	r2, [r3, #4]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	490d      	ldr	r1, [pc, #52]	@ (8003cb4 <I2SEx_TxISR_I2SExt+0x90>)
 8003c80:	428b      	cmp	r3, r1
 8003c82:	d101      	bne.n	8003c88 <I2SEx_TxISR_I2SExt+0x64>
 8003c84:	4b0c      	ldr	r3, [pc, #48]	@ (8003cb8 <I2SEx_TxISR_I2SExt+0x94>)
 8003c86:	e001      	b.n	8003c8c <I2SEx_TxISR_I2SExt+0x68>
 8003c88:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003c8c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003c90:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003c96:	b29b      	uxth	r3, r3
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d106      	bne.n	8003caa <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f7ff ff81 	bl	8003bac <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003caa:	bf00      	nop
 8003cac:	3708      	adds	r7, #8
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	40003800 	.word	0x40003800
 8003cb8:	40003400 	.word	0x40003400

08003cbc <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b082      	sub	sp, #8
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	68d8      	ldr	r0, [r3, #12]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cce:	1c99      	adds	r1, r3, #2
 8003cd0:	687a      	ldr	r2, [r7, #4]
 8003cd2:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8003cd4:	b282      	uxth	r2, r0
 8003cd6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	3b01      	subs	r3, #1
 8003ce0:	b29a      	uxth	r2, r3
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d113      	bne.n	8003d18 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	685a      	ldr	r2, [r3, #4]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003cfe:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d106      	bne.n	8003d18 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f7ff ff4a 	bl	8003bac <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003d18:	bf00      	nop
 8003d1a:	3708      	adds	r7, #8
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}

08003d20 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b082      	sub	sp, #8
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a20      	ldr	r2, [pc, #128]	@ (8003db0 <I2SEx_RxISR_I2SExt+0x90>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d101      	bne.n	8003d36 <I2SEx_RxISR_I2SExt+0x16>
 8003d32:	4b20      	ldr	r3, [pc, #128]	@ (8003db4 <I2SEx_RxISR_I2SExt+0x94>)
 8003d34:	e001      	b.n	8003d3a <I2SEx_RxISR_I2SExt+0x1a>
 8003d36:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003d3a:	68d8      	ldr	r0, [r3, #12]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d40:	1c99      	adds	r1, r3, #2
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8003d46:	b282      	uxth	r2, r0
 8003d48:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	3b01      	subs	r3, #1
 8003d52:	b29a      	uxth	r2, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d121      	bne.n	8003da6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a12      	ldr	r2, [pc, #72]	@ (8003db0 <I2SEx_RxISR_I2SExt+0x90>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d101      	bne.n	8003d70 <I2SEx_RxISR_I2SExt+0x50>
 8003d6c:	4b11      	ldr	r3, [pc, #68]	@ (8003db4 <I2SEx_RxISR_I2SExt+0x94>)
 8003d6e:	e001      	b.n	8003d74 <I2SEx_RxISR_I2SExt+0x54>
 8003d70:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003d74:	685a      	ldr	r2, [r3, #4]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	490d      	ldr	r1, [pc, #52]	@ (8003db0 <I2SEx_RxISR_I2SExt+0x90>)
 8003d7c:	428b      	cmp	r3, r1
 8003d7e:	d101      	bne.n	8003d84 <I2SEx_RxISR_I2SExt+0x64>
 8003d80:	4b0c      	ldr	r3, [pc, #48]	@ (8003db4 <I2SEx_RxISR_I2SExt+0x94>)
 8003d82:	e001      	b.n	8003d88 <I2SEx_RxISR_I2SExt+0x68>
 8003d84:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003d88:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003d8c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d106      	bne.n	8003da6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f7ff ff03 	bl	8003bac <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003da6:	bf00      	nop
 8003da8:	3708      	adds	r7, #8
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	bf00      	nop
 8003db0:	40003800 	.word	0x40003800
 8003db4:	40003400 	.word	0x40003400

08003db8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b086      	sub	sp, #24
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d101      	bne.n	8003dca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e267      	b.n	800429a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0301 	and.w	r3, r3, #1
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d075      	beq.n	8003ec2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003dd6:	4b88      	ldr	r3, [pc, #544]	@ (8003ff8 <HAL_RCC_OscConfig+0x240>)
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	f003 030c 	and.w	r3, r3, #12
 8003dde:	2b04      	cmp	r3, #4
 8003de0:	d00c      	beq.n	8003dfc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003de2:	4b85      	ldr	r3, [pc, #532]	@ (8003ff8 <HAL_RCC_OscConfig+0x240>)
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003dea:	2b08      	cmp	r3, #8
 8003dec:	d112      	bne.n	8003e14 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dee:	4b82      	ldr	r3, [pc, #520]	@ (8003ff8 <HAL_RCC_OscConfig+0x240>)
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003df6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003dfa:	d10b      	bne.n	8003e14 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dfc:	4b7e      	ldr	r3, [pc, #504]	@ (8003ff8 <HAL_RCC_OscConfig+0x240>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d05b      	beq.n	8003ec0 <HAL_RCC_OscConfig+0x108>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d157      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e242      	b.n	800429a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e1c:	d106      	bne.n	8003e2c <HAL_RCC_OscConfig+0x74>
 8003e1e:	4b76      	ldr	r3, [pc, #472]	@ (8003ff8 <HAL_RCC_OscConfig+0x240>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a75      	ldr	r2, [pc, #468]	@ (8003ff8 <HAL_RCC_OscConfig+0x240>)
 8003e24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e28:	6013      	str	r3, [r2, #0]
 8003e2a:	e01d      	b.n	8003e68 <HAL_RCC_OscConfig+0xb0>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e34:	d10c      	bne.n	8003e50 <HAL_RCC_OscConfig+0x98>
 8003e36:	4b70      	ldr	r3, [pc, #448]	@ (8003ff8 <HAL_RCC_OscConfig+0x240>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a6f      	ldr	r2, [pc, #444]	@ (8003ff8 <HAL_RCC_OscConfig+0x240>)
 8003e3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e40:	6013      	str	r3, [r2, #0]
 8003e42:	4b6d      	ldr	r3, [pc, #436]	@ (8003ff8 <HAL_RCC_OscConfig+0x240>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a6c      	ldr	r2, [pc, #432]	@ (8003ff8 <HAL_RCC_OscConfig+0x240>)
 8003e48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e4c:	6013      	str	r3, [r2, #0]
 8003e4e:	e00b      	b.n	8003e68 <HAL_RCC_OscConfig+0xb0>
 8003e50:	4b69      	ldr	r3, [pc, #420]	@ (8003ff8 <HAL_RCC_OscConfig+0x240>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a68      	ldr	r2, [pc, #416]	@ (8003ff8 <HAL_RCC_OscConfig+0x240>)
 8003e56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e5a:	6013      	str	r3, [r2, #0]
 8003e5c:	4b66      	ldr	r3, [pc, #408]	@ (8003ff8 <HAL_RCC_OscConfig+0x240>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a65      	ldr	r2, [pc, #404]	@ (8003ff8 <HAL_RCC_OscConfig+0x240>)
 8003e62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d013      	beq.n	8003e98 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e70:	f7fd ff8c 	bl	8001d8c <HAL_GetTick>
 8003e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e76:	e008      	b.n	8003e8a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e78:	f7fd ff88 	bl	8001d8c <HAL_GetTick>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	2b64      	cmp	r3, #100	@ 0x64
 8003e84:	d901      	bls.n	8003e8a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e86:	2303      	movs	r3, #3
 8003e88:	e207      	b.n	800429a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e8a:	4b5b      	ldr	r3, [pc, #364]	@ (8003ff8 <HAL_RCC_OscConfig+0x240>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d0f0      	beq.n	8003e78 <HAL_RCC_OscConfig+0xc0>
 8003e96:	e014      	b.n	8003ec2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e98:	f7fd ff78 	bl	8001d8c <HAL_GetTick>
 8003e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e9e:	e008      	b.n	8003eb2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ea0:	f7fd ff74 	bl	8001d8c <HAL_GetTick>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	2b64      	cmp	r3, #100	@ 0x64
 8003eac:	d901      	bls.n	8003eb2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	e1f3      	b.n	800429a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eb2:	4b51      	ldr	r3, [pc, #324]	@ (8003ff8 <HAL_RCC_OscConfig+0x240>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d1f0      	bne.n	8003ea0 <HAL_RCC_OscConfig+0xe8>
 8003ebe:	e000      	b.n	8003ec2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ec0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 0302 	and.w	r3, r3, #2
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d063      	beq.n	8003f96 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003ece:	4b4a      	ldr	r3, [pc, #296]	@ (8003ff8 <HAL_RCC_OscConfig+0x240>)
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	f003 030c 	and.w	r3, r3, #12
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d00b      	beq.n	8003ef2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003eda:	4b47      	ldr	r3, [pc, #284]	@ (8003ff8 <HAL_RCC_OscConfig+0x240>)
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003ee2:	2b08      	cmp	r3, #8
 8003ee4:	d11c      	bne.n	8003f20 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ee6:	4b44      	ldr	r3, [pc, #272]	@ (8003ff8 <HAL_RCC_OscConfig+0x240>)
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d116      	bne.n	8003f20 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ef2:	4b41      	ldr	r3, [pc, #260]	@ (8003ff8 <HAL_RCC_OscConfig+0x240>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 0302 	and.w	r3, r3, #2
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d005      	beq.n	8003f0a <HAL_RCC_OscConfig+0x152>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	68db      	ldr	r3, [r3, #12]
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d001      	beq.n	8003f0a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e1c7      	b.n	800429a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f0a:	4b3b      	ldr	r3, [pc, #236]	@ (8003ff8 <HAL_RCC_OscConfig+0x240>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	691b      	ldr	r3, [r3, #16]
 8003f16:	00db      	lsls	r3, r3, #3
 8003f18:	4937      	ldr	r1, [pc, #220]	@ (8003ff8 <HAL_RCC_OscConfig+0x240>)
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f1e:	e03a      	b.n	8003f96 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d020      	beq.n	8003f6a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f28:	4b34      	ldr	r3, [pc, #208]	@ (8003ffc <HAL_RCC_OscConfig+0x244>)
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f2e:	f7fd ff2d 	bl	8001d8c <HAL_GetTick>
 8003f32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f34:	e008      	b.n	8003f48 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f36:	f7fd ff29 	bl	8001d8c <HAL_GetTick>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	2b02      	cmp	r3, #2
 8003f42:	d901      	bls.n	8003f48 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003f44:	2303      	movs	r3, #3
 8003f46:	e1a8      	b.n	800429a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f48:	4b2b      	ldr	r3, [pc, #172]	@ (8003ff8 <HAL_RCC_OscConfig+0x240>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 0302 	and.w	r3, r3, #2
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d0f0      	beq.n	8003f36 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f54:	4b28      	ldr	r3, [pc, #160]	@ (8003ff8 <HAL_RCC_OscConfig+0x240>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	691b      	ldr	r3, [r3, #16]
 8003f60:	00db      	lsls	r3, r3, #3
 8003f62:	4925      	ldr	r1, [pc, #148]	@ (8003ff8 <HAL_RCC_OscConfig+0x240>)
 8003f64:	4313      	orrs	r3, r2
 8003f66:	600b      	str	r3, [r1, #0]
 8003f68:	e015      	b.n	8003f96 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f6a:	4b24      	ldr	r3, [pc, #144]	@ (8003ffc <HAL_RCC_OscConfig+0x244>)
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f70:	f7fd ff0c 	bl	8001d8c <HAL_GetTick>
 8003f74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f76:	e008      	b.n	8003f8a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f78:	f7fd ff08 	bl	8001d8c <HAL_GetTick>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	2b02      	cmp	r3, #2
 8003f84:	d901      	bls.n	8003f8a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003f86:	2303      	movs	r3, #3
 8003f88:	e187      	b.n	800429a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f8a:	4b1b      	ldr	r3, [pc, #108]	@ (8003ff8 <HAL_RCC_OscConfig+0x240>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0302 	and.w	r3, r3, #2
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d1f0      	bne.n	8003f78 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 0308 	and.w	r3, r3, #8
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d036      	beq.n	8004010 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	695b      	ldr	r3, [r3, #20]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d016      	beq.n	8003fd8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003faa:	4b15      	ldr	r3, [pc, #84]	@ (8004000 <HAL_RCC_OscConfig+0x248>)
 8003fac:	2201      	movs	r2, #1
 8003fae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fb0:	f7fd feec 	bl	8001d8c <HAL_GetTick>
 8003fb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fb6:	e008      	b.n	8003fca <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fb8:	f7fd fee8 	bl	8001d8c <HAL_GetTick>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	2b02      	cmp	r3, #2
 8003fc4:	d901      	bls.n	8003fca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e167      	b.n	800429a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fca:	4b0b      	ldr	r3, [pc, #44]	@ (8003ff8 <HAL_RCC_OscConfig+0x240>)
 8003fcc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fce:	f003 0302 	and.w	r3, r3, #2
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d0f0      	beq.n	8003fb8 <HAL_RCC_OscConfig+0x200>
 8003fd6:	e01b      	b.n	8004010 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fd8:	4b09      	ldr	r3, [pc, #36]	@ (8004000 <HAL_RCC_OscConfig+0x248>)
 8003fda:	2200      	movs	r2, #0
 8003fdc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fde:	f7fd fed5 	bl	8001d8c <HAL_GetTick>
 8003fe2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fe4:	e00e      	b.n	8004004 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fe6:	f7fd fed1 	bl	8001d8c <HAL_GetTick>
 8003fea:	4602      	mov	r2, r0
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	1ad3      	subs	r3, r2, r3
 8003ff0:	2b02      	cmp	r3, #2
 8003ff2:	d907      	bls.n	8004004 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ff4:	2303      	movs	r3, #3
 8003ff6:	e150      	b.n	800429a <HAL_RCC_OscConfig+0x4e2>
 8003ff8:	40023800 	.word	0x40023800
 8003ffc:	42470000 	.word	0x42470000
 8004000:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004004:	4b88      	ldr	r3, [pc, #544]	@ (8004228 <HAL_RCC_OscConfig+0x470>)
 8004006:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004008:	f003 0302 	and.w	r3, r3, #2
 800400c:	2b00      	cmp	r3, #0
 800400e:	d1ea      	bne.n	8003fe6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 0304 	and.w	r3, r3, #4
 8004018:	2b00      	cmp	r3, #0
 800401a:	f000 8097 	beq.w	800414c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800401e:	2300      	movs	r3, #0
 8004020:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004022:	4b81      	ldr	r3, [pc, #516]	@ (8004228 <HAL_RCC_OscConfig+0x470>)
 8004024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004026:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d10f      	bne.n	800404e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800402e:	2300      	movs	r3, #0
 8004030:	60bb      	str	r3, [r7, #8]
 8004032:	4b7d      	ldr	r3, [pc, #500]	@ (8004228 <HAL_RCC_OscConfig+0x470>)
 8004034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004036:	4a7c      	ldr	r2, [pc, #496]	@ (8004228 <HAL_RCC_OscConfig+0x470>)
 8004038:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800403c:	6413      	str	r3, [r2, #64]	@ 0x40
 800403e:	4b7a      	ldr	r3, [pc, #488]	@ (8004228 <HAL_RCC_OscConfig+0x470>)
 8004040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004042:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004046:	60bb      	str	r3, [r7, #8]
 8004048:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800404a:	2301      	movs	r3, #1
 800404c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800404e:	4b77      	ldr	r3, [pc, #476]	@ (800422c <HAL_RCC_OscConfig+0x474>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004056:	2b00      	cmp	r3, #0
 8004058:	d118      	bne.n	800408c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800405a:	4b74      	ldr	r3, [pc, #464]	@ (800422c <HAL_RCC_OscConfig+0x474>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a73      	ldr	r2, [pc, #460]	@ (800422c <HAL_RCC_OscConfig+0x474>)
 8004060:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004064:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004066:	f7fd fe91 	bl	8001d8c <HAL_GetTick>
 800406a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800406c:	e008      	b.n	8004080 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800406e:	f7fd fe8d 	bl	8001d8c <HAL_GetTick>
 8004072:	4602      	mov	r2, r0
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	2b02      	cmp	r3, #2
 800407a:	d901      	bls.n	8004080 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800407c:	2303      	movs	r3, #3
 800407e:	e10c      	b.n	800429a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004080:	4b6a      	ldr	r3, [pc, #424]	@ (800422c <HAL_RCC_OscConfig+0x474>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004088:	2b00      	cmp	r3, #0
 800408a:	d0f0      	beq.n	800406e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	2b01      	cmp	r3, #1
 8004092:	d106      	bne.n	80040a2 <HAL_RCC_OscConfig+0x2ea>
 8004094:	4b64      	ldr	r3, [pc, #400]	@ (8004228 <HAL_RCC_OscConfig+0x470>)
 8004096:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004098:	4a63      	ldr	r2, [pc, #396]	@ (8004228 <HAL_RCC_OscConfig+0x470>)
 800409a:	f043 0301 	orr.w	r3, r3, #1
 800409e:	6713      	str	r3, [r2, #112]	@ 0x70
 80040a0:	e01c      	b.n	80040dc <HAL_RCC_OscConfig+0x324>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	2b05      	cmp	r3, #5
 80040a8:	d10c      	bne.n	80040c4 <HAL_RCC_OscConfig+0x30c>
 80040aa:	4b5f      	ldr	r3, [pc, #380]	@ (8004228 <HAL_RCC_OscConfig+0x470>)
 80040ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040ae:	4a5e      	ldr	r2, [pc, #376]	@ (8004228 <HAL_RCC_OscConfig+0x470>)
 80040b0:	f043 0304 	orr.w	r3, r3, #4
 80040b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80040b6:	4b5c      	ldr	r3, [pc, #368]	@ (8004228 <HAL_RCC_OscConfig+0x470>)
 80040b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040ba:	4a5b      	ldr	r2, [pc, #364]	@ (8004228 <HAL_RCC_OscConfig+0x470>)
 80040bc:	f043 0301 	orr.w	r3, r3, #1
 80040c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80040c2:	e00b      	b.n	80040dc <HAL_RCC_OscConfig+0x324>
 80040c4:	4b58      	ldr	r3, [pc, #352]	@ (8004228 <HAL_RCC_OscConfig+0x470>)
 80040c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040c8:	4a57      	ldr	r2, [pc, #348]	@ (8004228 <HAL_RCC_OscConfig+0x470>)
 80040ca:	f023 0301 	bic.w	r3, r3, #1
 80040ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80040d0:	4b55      	ldr	r3, [pc, #340]	@ (8004228 <HAL_RCC_OscConfig+0x470>)
 80040d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040d4:	4a54      	ldr	r2, [pc, #336]	@ (8004228 <HAL_RCC_OscConfig+0x470>)
 80040d6:	f023 0304 	bic.w	r3, r3, #4
 80040da:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d015      	beq.n	8004110 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040e4:	f7fd fe52 	bl	8001d8c <HAL_GetTick>
 80040e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040ea:	e00a      	b.n	8004102 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040ec:	f7fd fe4e 	bl	8001d8c <HAL_GetTick>
 80040f0:	4602      	mov	r2, r0
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d901      	bls.n	8004102 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80040fe:	2303      	movs	r3, #3
 8004100:	e0cb      	b.n	800429a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004102:	4b49      	ldr	r3, [pc, #292]	@ (8004228 <HAL_RCC_OscConfig+0x470>)
 8004104:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004106:	f003 0302 	and.w	r3, r3, #2
 800410a:	2b00      	cmp	r3, #0
 800410c:	d0ee      	beq.n	80040ec <HAL_RCC_OscConfig+0x334>
 800410e:	e014      	b.n	800413a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004110:	f7fd fe3c 	bl	8001d8c <HAL_GetTick>
 8004114:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004116:	e00a      	b.n	800412e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004118:	f7fd fe38 	bl	8001d8c <HAL_GetTick>
 800411c:	4602      	mov	r2, r0
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004126:	4293      	cmp	r3, r2
 8004128:	d901      	bls.n	800412e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800412a:	2303      	movs	r3, #3
 800412c:	e0b5      	b.n	800429a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800412e:	4b3e      	ldr	r3, [pc, #248]	@ (8004228 <HAL_RCC_OscConfig+0x470>)
 8004130:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004132:	f003 0302 	and.w	r3, r3, #2
 8004136:	2b00      	cmp	r3, #0
 8004138:	d1ee      	bne.n	8004118 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800413a:	7dfb      	ldrb	r3, [r7, #23]
 800413c:	2b01      	cmp	r3, #1
 800413e:	d105      	bne.n	800414c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004140:	4b39      	ldr	r3, [pc, #228]	@ (8004228 <HAL_RCC_OscConfig+0x470>)
 8004142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004144:	4a38      	ldr	r2, [pc, #224]	@ (8004228 <HAL_RCC_OscConfig+0x470>)
 8004146:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800414a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	699b      	ldr	r3, [r3, #24]
 8004150:	2b00      	cmp	r3, #0
 8004152:	f000 80a1 	beq.w	8004298 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004156:	4b34      	ldr	r3, [pc, #208]	@ (8004228 <HAL_RCC_OscConfig+0x470>)
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	f003 030c 	and.w	r3, r3, #12
 800415e:	2b08      	cmp	r3, #8
 8004160:	d05c      	beq.n	800421c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	699b      	ldr	r3, [r3, #24]
 8004166:	2b02      	cmp	r3, #2
 8004168:	d141      	bne.n	80041ee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800416a:	4b31      	ldr	r3, [pc, #196]	@ (8004230 <HAL_RCC_OscConfig+0x478>)
 800416c:	2200      	movs	r2, #0
 800416e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004170:	f7fd fe0c 	bl	8001d8c <HAL_GetTick>
 8004174:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004176:	e008      	b.n	800418a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004178:	f7fd fe08 	bl	8001d8c <HAL_GetTick>
 800417c:	4602      	mov	r2, r0
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	2b02      	cmp	r3, #2
 8004184:	d901      	bls.n	800418a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004186:	2303      	movs	r3, #3
 8004188:	e087      	b.n	800429a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800418a:	4b27      	ldr	r3, [pc, #156]	@ (8004228 <HAL_RCC_OscConfig+0x470>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004192:	2b00      	cmp	r3, #0
 8004194:	d1f0      	bne.n	8004178 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	69da      	ldr	r2, [r3, #28]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a1b      	ldr	r3, [r3, #32]
 800419e:	431a      	orrs	r2, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041a4:	019b      	lsls	r3, r3, #6
 80041a6:	431a      	orrs	r2, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041ac:	085b      	lsrs	r3, r3, #1
 80041ae:	3b01      	subs	r3, #1
 80041b0:	041b      	lsls	r3, r3, #16
 80041b2:	431a      	orrs	r2, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041b8:	061b      	lsls	r3, r3, #24
 80041ba:	491b      	ldr	r1, [pc, #108]	@ (8004228 <HAL_RCC_OscConfig+0x470>)
 80041bc:	4313      	orrs	r3, r2
 80041be:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041c0:	4b1b      	ldr	r3, [pc, #108]	@ (8004230 <HAL_RCC_OscConfig+0x478>)
 80041c2:	2201      	movs	r2, #1
 80041c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041c6:	f7fd fde1 	bl	8001d8c <HAL_GetTick>
 80041ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041cc:	e008      	b.n	80041e0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041ce:	f7fd fddd 	bl	8001d8c <HAL_GetTick>
 80041d2:	4602      	mov	r2, r0
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	1ad3      	subs	r3, r2, r3
 80041d8:	2b02      	cmp	r3, #2
 80041da:	d901      	bls.n	80041e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80041dc:	2303      	movs	r3, #3
 80041de:	e05c      	b.n	800429a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041e0:	4b11      	ldr	r3, [pc, #68]	@ (8004228 <HAL_RCC_OscConfig+0x470>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d0f0      	beq.n	80041ce <HAL_RCC_OscConfig+0x416>
 80041ec:	e054      	b.n	8004298 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041ee:	4b10      	ldr	r3, [pc, #64]	@ (8004230 <HAL_RCC_OscConfig+0x478>)
 80041f0:	2200      	movs	r2, #0
 80041f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041f4:	f7fd fdca 	bl	8001d8c <HAL_GetTick>
 80041f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041fa:	e008      	b.n	800420e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041fc:	f7fd fdc6 	bl	8001d8c <HAL_GetTick>
 8004200:	4602      	mov	r2, r0
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	2b02      	cmp	r3, #2
 8004208:	d901      	bls.n	800420e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800420a:	2303      	movs	r3, #3
 800420c:	e045      	b.n	800429a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800420e:	4b06      	ldr	r3, [pc, #24]	@ (8004228 <HAL_RCC_OscConfig+0x470>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004216:	2b00      	cmp	r3, #0
 8004218:	d1f0      	bne.n	80041fc <HAL_RCC_OscConfig+0x444>
 800421a:	e03d      	b.n	8004298 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	699b      	ldr	r3, [r3, #24]
 8004220:	2b01      	cmp	r3, #1
 8004222:	d107      	bne.n	8004234 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	e038      	b.n	800429a <HAL_RCC_OscConfig+0x4e2>
 8004228:	40023800 	.word	0x40023800
 800422c:	40007000 	.word	0x40007000
 8004230:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004234:	4b1b      	ldr	r3, [pc, #108]	@ (80042a4 <HAL_RCC_OscConfig+0x4ec>)
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	699b      	ldr	r3, [r3, #24]
 800423e:	2b01      	cmp	r3, #1
 8004240:	d028      	beq.n	8004294 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800424c:	429a      	cmp	r2, r3
 800424e:	d121      	bne.n	8004294 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800425a:	429a      	cmp	r2, r3
 800425c:	d11a      	bne.n	8004294 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800425e:	68fa      	ldr	r2, [r7, #12]
 8004260:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004264:	4013      	ands	r3, r2
 8004266:	687a      	ldr	r2, [r7, #4]
 8004268:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800426a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800426c:	4293      	cmp	r3, r2
 800426e:	d111      	bne.n	8004294 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800427a:	085b      	lsrs	r3, r3, #1
 800427c:	3b01      	subs	r3, #1
 800427e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004280:	429a      	cmp	r2, r3
 8004282:	d107      	bne.n	8004294 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800428e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004290:	429a      	cmp	r2, r3
 8004292:	d001      	beq.n	8004298 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	e000      	b.n	800429a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004298:	2300      	movs	r3, #0
}
 800429a:	4618      	mov	r0, r3
 800429c:	3718      	adds	r7, #24
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	bf00      	nop
 80042a4:	40023800 	.word	0x40023800

080042a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b084      	sub	sp, #16
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d101      	bne.n	80042bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	e0cc      	b.n	8004456 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80042bc:	4b68      	ldr	r3, [pc, #416]	@ (8004460 <HAL_RCC_ClockConfig+0x1b8>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 0307 	and.w	r3, r3, #7
 80042c4:	683a      	ldr	r2, [r7, #0]
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d90c      	bls.n	80042e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042ca:	4b65      	ldr	r3, [pc, #404]	@ (8004460 <HAL_RCC_ClockConfig+0x1b8>)
 80042cc:	683a      	ldr	r2, [r7, #0]
 80042ce:	b2d2      	uxtb	r2, r2
 80042d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042d2:	4b63      	ldr	r3, [pc, #396]	@ (8004460 <HAL_RCC_ClockConfig+0x1b8>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 0307 	and.w	r3, r3, #7
 80042da:	683a      	ldr	r2, [r7, #0]
 80042dc:	429a      	cmp	r2, r3
 80042de:	d001      	beq.n	80042e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e0b8      	b.n	8004456 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 0302 	and.w	r3, r3, #2
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d020      	beq.n	8004332 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 0304 	and.w	r3, r3, #4
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d005      	beq.n	8004308 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042fc:	4b59      	ldr	r3, [pc, #356]	@ (8004464 <HAL_RCC_ClockConfig+0x1bc>)
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	4a58      	ldr	r2, [pc, #352]	@ (8004464 <HAL_RCC_ClockConfig+0x1bc>)
 8004302:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004306:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 0308 	and.w	r3, r3, #8
 8004310:	2b00      	cmp	r3, #0
 8004312:	d005      	beq.n	8004320 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004314:	4b53      	ldr	r3, [pc, #332]	@ (8004464 <HAL_RCC_ClockConfig+0x1bc>)
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	4a52      	ldr	r2, [pc, #328]	@ (8004464 <HAL_RCC_ClockConfig+0x1bc>)
 800431a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800431e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004320:	4b50      	ldr	r3, [pc, #320]	@ (8004464 <HAL_RCC_ClockConfig+0x1bc>)
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	494d      	ldr	r1, [pc, #308]	@ (8004464 <HAL_RCC_ClockConfig+0x1bc>)
 800432e:	4313      	orrs	r3, r2
 8004330:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0301 	and.w	r3, r3, #1
 800433a:	2b00      	cmp	r3, #0
 800433c:	d044      	beq.n	80043c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	2b01      	cmp	r3, #1
 8004344:	d107      	bne.n	8004356 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004346:	4b47      	ldr	r3, [pc, #284]	@ (8004464 <HAL_RCC_ClockConfig+0x1bc>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800434e:	2b00      	cmp	r3, #0
 8004350:	d119      	bne.n	8004386 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e07f      	b.n	8004456 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	2b02      	cmp	r3, #2
 800435c:	d003      	beq.n	8004366 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004362:	2b03      	cmp	r3, #3
 8004364:	d107      	bne.n	8004376 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004366:	4b3f      	ldr	r3, [pc, #252]	@ (8004464 <HAL_RCC_ClockConfig+0x1bc>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800436e:	2b00      	cmp	r3, #0
 8004370:	d109      	bne.n	8004386 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e06f      	b.n	8004456 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004376:	4b3b      	ldr	r3, [pc, #236]	@ (8004464 <HAL_RCC_ClockConfig+0x1bc>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 0302 	and.w	r3, r3, #2
 800437e:	2b00      	cmp	r3, #0
 8004380:	d101      	bne.n	8004386 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e067      	b.n	8004456 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004386:	4b37      	ldr	r3, [pc, #220]	@ (8004464 <HAL_RCC_ClockConfig+0x1bc>)
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	f023 0203 	bic.w	r2, r3, #3
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	4934      	ldr	r1, [pc, #208]	@ (8004464 <HAL_RCC_ClockConfig+0x1bc>)
 8004394:	4313      	orrs	r3, r2
 8004396:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004398:	f7fd fcf8 	bl	8001d8c <HAL_GetTick>
 800439c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800439e:	e00a      	b.n	80043b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043a0:	f7fd fcf4 	bl	8001d8c <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d901      	bls.n	80043b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80043b2:	2303      	movs	r3, #3
 80043b4:	e04f      	b.n	8004456 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043b6:	4b2b      	ldr	r3, [pc, #172]	@ (8004464 <HAL_RCC_ClockConfig+0x1bc>)
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	f003 020c 	and.w	r2, r3, #12
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d1eb      	bne.n	80043a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80043c8:	4b25      	ldr	r3, [pc, #148]	@ (8004460 <HAL_RCC_ClockConfig+0x1b8>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 0307 	and.w	r3, r3, #7
 80043d0:	683a      	ldr	r2, [r7, #0]
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d20c      	bcs.n	80043f0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043d6:	4b22      	ldr	r3, [pc, #136]	@ (8004460 <HAL_RCC_ClockConfig+0x1b8>)
 80043d8:	683a      	ldr	r2, [r7, #0]
 80043da:	b2d2      	uxtb	r2, r2
 80043dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043de:	4b20      	ldr	r3, [pc, #128]	@ (8004460 <HAL_RCC_ClockConfig+0x1b8>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 0307 	and.w	r3, r3, #7
 80043e6:	683a      	ldr	r2, [r7, #0]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d001      	beq.n	80043f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	e032      	b.n	8004456 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 0304 	and.w	r3, r3, #4
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d008      	beq.n	800440e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043fc:	4b19      	ldr	r3, [pc, #100]	@ (8004464 <HAL_RCC_ClockConfig+0x1bc>)
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	4916      	ldr	r1, [pc, #88]	@ (8004464 <HAL_RCC_ClockConfig+0x1bc>)
 800440a:	4313      	orrs	r3, r2
 800440c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 0308 	and.w	r3, r3, #8
 8004416:	2b00      	cmp	r3, #0
 8004418:	d009      	beq.n	800442e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800441a:	4b12      	ldr	r3, [pc, #72]	@ (8004464 <HAL_RCC_ClockConfig+0x1bc>)
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	691b      	ldr	r3, [r3, #16]
 8004426:	00db      	lsls	r3, r3, #3
 8004428:	490e      	ldr	r1, [pc, #56]	@ (8004464 <HAL_RCC_ClockConfig+0x1bc>)
 800442a:	4313      	orrs	r3, r2
 800442c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800442e:	f000 f821 	bl	8004474 <HAL_RCC_GetSysClockFreq>
 8004432:	4602      	mov	r2, r0
 8004434:	4b0b      	ldr	r3, [pc, #44]	@ (8004464 <HAL_RCC_ClockConfig+0x1bc>)
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	091b      	lsrs	r3, r3, #4
 800443a:	f003 030f 	and.w	r3, r3, #15
 800443e:	490a      	ldr	r1, [pc, #40]	@ (8004468 <HAL_RCC_ClockConfig+0x1c0>)
 8004440:	5ccb      	ldrb	r3, [r1, r3]
 8004442:	fa22 f303 	lsr.w	r3, r2, r3
 8004446:	4a09      	ldr	r2, [pc, #36]	@ (800446c <HAL_RCC_ClockConfig+0x1c4>)
 8004448:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800444a:	4b09      	ldr	r3, [pc, #36]	@ (8004470 <HAL_RCC_ClockConfig+0x1c8>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4618      	mov	r0, r3
 8004450:	f7fd fc58 	bl	8001d04 <HAL_InitTick>

  return HAL_OK;
 8004454:	2300      	movs	r3, #0
}
 8004456:	4618      	mov	r0, r3
 8004458:	3710      	adds	r7, #16
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}
 800445e:	bf00      	nop
 8004460:	40023c00 	.word	0x40023c00
 8004464:	40023800 	.word	0x40023800
 8004468:	08005220 	.word	0x08005220
 800446c:	2000000c 	.word	0x2000000c
 8004470:	20000010 	.word	0x20000010

08004474 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004474:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004478:	b090      	sub	sp, #64	@ 0x40
 800447a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800447c:	2300      	movs	r3, #0
 800447e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8004480:	2300      	movs	r3, #0
 8004482:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8004484:	2300      	movs	r3, #0
 8004486:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004488:	2300      	movs	r3, #0
 800448a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800448c:	4b59      	ldr	r3, [pc, #356]	@ (80045f4 <HAL_RCC_GetSysClockFreq+0x180>)
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	f003 030c 	and.w	r3, r3, #12
 8004494:	2b08      	cmp	r3, #8
 8004496:	d00d      	beq.n	80044b4 <HAL_RCC_GetSysClockFreq+0x40>
 8004498:	2b08      	cmp	r3, #8
 800449a:	f200 80a1 	bhi.w	80045e0 <HAL_RCC_GetSysClockFreq+0x16c>
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d002      	beq.n	80044a8 <HAL_RCC_GetSysClockFreq+0x34>
 80044a2:	2b04      	cmp	r3, #4
 80044a4:	d003      	beq.n	80044ae <HAL_RCC_GetSysClockFreq+0x3a>
 80044a6:	e09b      	b.n	80045e0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80044a8:	4b53      	ldr	r3, [pc, #332]	@ (80045f8 <HAL_RCC_GetSysClockFreq+0x184>)
 80044aa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80044ac:	e09b      	b.n	80045e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80044ae:	4b53      	ldr	r3, [pc, #332]	@ (80045fc <HAL_RCC_GetSysClockFreq+0x188>)
 80044b0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80044b2:	e098      	b.n	80045e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80044b4:	4b4f      	ldr	r3, [pc, #316]	@ (80045f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80044bc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80044be:	4b4d      	ldr	r3, [pc, #308]	@ (80045f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d028      	beq.n	800451c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044ca:	4b4a      	ldr	r3, [pc, #296]	@ (80045f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	099b      	lsrs	r3, r3, #6
 80044d0:	2200      	movs	r2, #0
 80044d2:	623b      	str	r3, [r7, #32]
 80044d4:	627a      	str	r2, [r7, #36]	@ 0x24
 80044d6:	6a3b      	ldr	r3, [r7, #32]
 80044d8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80044dc:	2100      	movs	r1, #0
 80044de:	4b47      	ldr	r3, [pc, #284]	@ (80045fc <HAL_RCC_GetSysClockFreq+0x188>)
 80044e0:	fb03 f201 	mul.w	r2, r3, r1
 80044e4:	2300      	movs	r3, #0
 80044e6:	fb00 f303 	mul.w	r3, r0, r3
 80044ea:	4413      	add	r3, r2
 80044ec:	4a43      	ldr	r2, [pc, #268]	@ (80045fc <HAL_RCC_GetSysClockFreq+0x188>)
 80044ee:	fba0 1202 	umull	r1, r2, r0, r2
 80044f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80044f4:	460a      	mov	r2, r1
 80044f6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80044f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80044fa:	4413      	add	r3, r2
 80044fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80044fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004500:	2200      	movs	r2, #0
 8004502:	61bb      	str	r3, [r7, #24]
 8004504:	61fa      	str	r2, [r7, #28]
 8004506:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800450a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800450e:	f7fb fe63 	bl	80001d8 <__aeabi_uldivmod>
 8004512:	4602      	mov	r2, r0
 8004514:	460b      	mov	r3, r1
 8004516:	4613      	mov	r3, r2
 8004518:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800451a:	e053      	b.n	80045c4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800451c:	4b35      	ldr	r3, [pc, #212]	@ (80045f4 <HAL_RCC_GetSysClockFreq+0x180>)
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	099b      	lsrs	r3, r3, #6
 8004522:	2200      	movs	r2, #0
 8004524:	613b      	str	r3, [r7, #16]
 8004526:	617a      	str	r2, [r7, #20]
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800452e:	f04f 0b00 	mov.w	fp, #0
 8004532:	4652      	mov	r2, sl
 8004534:	465b      	mov	r3, fp
 8004536:	f04f 0000 	mov.w	r0, #0
 800453a:	f04f 0100 	mov.w	r1, #0
 800453e:	0159      	lsls	r1, r3, #5
 8004540:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004544:	0150      	lsls	r0, r2, #5
 8004546:	4602      	mov	r2, r0
 8004548:	460b      	mov	r3, r1
 800454a:	ebb2 080a 	subs.w	r8, r2, sl
 800454e:	eb63 090b 	sbc.w	r9, r3, fp
 8004552:	f04f 0200 	mov.w	r2, #0
 8004556:	f04f 0300 	mov.w	r3, #0
 800455a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800455e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004562:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004566:	ebb2 0408 	subs.w	r4, r2, r8
 800456a:	eb63 0509 	sbc.w	r5, r3, r9
 800456e:	f04f 0200 	mov.w	r2, #0
 8004572:	f04f 0300 	mov.w	r3, #0
 8004576:	00eb      	lsls	r3, r5, #3
 8004578:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800457c:	00e2      	lsls	r2, r4, #3
 800457e:	4614      	mov	r4, r2
 8004580:	461d      	mov	r5, r3
 8004582:	eb14 030a 	adds.w	r3, r4, sl
 8004586:	603b      	str	r3, [r7, #0]
 8004588:	eb45 030b 	adc.w	r3, r5, fp
 800458c:	607b      	str	r3, [r7, #4]
 800458e:	f04f 0200 	mov.w	r2, #0
 8004592:	f04f 0300 	mov.w	r3, #0
 8004596:	e9d7 4500 	ldrd	r4, r5, [r7]
 800459a:	4629      	mov	r1, r5
 800459c:	028b      	lsls	r3, r1, #10
 800459e:	4621      	mov	r1, r4
 80045a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80045a4:	4621      	mov	r1, r4
 80045a6:	028a      	lsls	r2, r1, #10
 80045a8:	4610      	mov	r0, r2
 80045aa:	4619      	mov	r1, r3
 80045ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045ae:	2200      	movs	r2, #0
 80045b0:	60bb      	str	r3, [r7, #8]
 80045b2:	60fa      	str	r2, [r7, #12]
 80045b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80045b8:	f7fb fe0e 	bl	80001d8 <__aeabi_uldivmod>
 80045bc:	4602      	mov	r2, r0
 80045be:	460b      	mov	r3, r1
 80045c0:	4613      	mov	r3, r2
 80045c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80045c4:	4b0b      	ldr	r3, [pc, #44]	@ (80045f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	0c1b      	lsrs	r3, r3, #16
 80045ca:	f003 0303 	and.w	r3, r3, #3
 80045ce:	3301      	adds	r3, #1
 80045d0:	005b      	lsls	r3, r3, #1
 80045d2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80045d4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80045d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80045dc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80045de:	e002      	b.n	80045e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80045e0:	4b05      	ldr	r3, [pc, #20]	@ (80045f8 <HAL_RCC_GetSysClockFreq+0x184>)
 80045e2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80045e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3740      	adds	r7, #64	@ 0x40
 80045ec:	46bd      	mov	sp, r7
 80045ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045f2:	bf00      	nop
 80045f4:	40023800 	.word	0x40023800
 80045f8:	00f42400 	.word	0x00f42400
 80045fc:	017d7840 	.word	0x017d7840

08004600 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b086      	sub	sp, #24
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004608:	2300      	movs	r3, #0
 800460a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800460c:	2300      	movs	r3, #0
 800460e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 0301 	and.w	r3, r3, #1
 8004618:	2b00      	cmp	r3, #0
 800461a:	d105      	bne.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004624:	2b00      	cmp	r3, #0
 8004626:	d038      	beq.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004628:	4b68      	ldr	r3, [pc, #416]	@ (80047cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800462a:	2200      	movs	r2, #0
 800462c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800462e:	f7fd fbad 	bl	8001d8c <HAL_GetTick>
 8004632:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004634:	e008      	b.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004636:	f7fd fba9 	bl	8001d8c <HAL_GetTick>
 800463a:	4602      	mov	r2, r0
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	1ad3      	subs	r3, r2, r3
 8004640:	2b02      	cmp	r3, #2
 8004642:	d901      	bls.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004644:	2303      	movs	r3, #3
 8004646:	e0bd      	b.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004648:	4b61      	ldr	r3, [pc, #388]	@ (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004650:	2b00      	cmp	r3, #0
 8004652:	d1f0      	bne.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	685a      	ldr	r2, [r3, #4]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	019b      	lsls	r3, r3, #6
 800465e:	431a      	orrs	r2, r3
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	071b      	lsls	r3, r3, #28
 8004666:	495a      	ldr	r1, [pc, #360]	@ (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004668:	4313      	orrs	r3, r2
 800466a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800466e:	4b57      	ldr	r3, [pc, #348]	@ (80047cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004670:	2201      	movs	r2, #1
 8004672:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004674:	f7fd fb8a 	bl	8001d8c <HAL_GetTick>
 8004678:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800467a:	e008      	b.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800467c:	f7fd fb86 	bl	8001d8c <HAL_GetTick>
 8004680:	4602      	mov	r2, r0
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	1ad3      	subs	r3, r2, r3
 8004686:	2b02      	cmp	r3, #2
 8004688:	d901      	bls.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800468a:	2303      	movs	r3, #3
 800468c:	e09a      	b.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800468e:	4b50      	ldr	r3, [pc, #320]	@ (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004696:	2b00      	cmp	r3, #0
 8004698:	d0f0      	beq.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 0302 	and.w	r3, r3, #2
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	f000 8083 	beq.w	80047ae <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80046a8:	2300      	movs	r3, #0
 80046aa:	60fb      	str	r3, [r7, #12]
 80046ac:	4b48      	ldr	r3, [pc, #288]	@ (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046b0:	4a47      	ldr	r2, [pc, #284]	@ (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80046b8:	4b45      	ldr	r3, [pc, #276]	@ (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046c0:	60fb      	str	r3, [r7, #12]
 80046c2:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80046c4:	4b43      	ldr	r3, [pc, #268]	@ (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a42      	ldr	r2, [pc, #264]	@ (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80046ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046ce:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80046d0:	f7fd fb5c 	bl	8001d8c <HAL_GetTick>
 80046d4:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80046d6:	e008      	b.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046d8:	f7fd fb58 	bl	8001d8c <HAL_GetTick>
 80046dc:	4602      	mov	r2, r0
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	1ad3      	subs	r3, r2, r3
 80046e2:	2b02      	cmp	r3, #2
 80046e4:	d901      	bls.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80046e6:	2303      	movs	r3, #3
 80046e8:	e06c      	b.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80046ea:	4b3a      	ldr	r3, [pc, #232]	@ (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d0f0      	beq.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80046f6:	4b36      	ldr	r3, [pc, #216]	@ (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046fe:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d02f      	beq.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	691b      	ldr	r3, [r3, #16]
 800470a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800470e:	693a      	ldr	r2, [r7, #16]
 8004710:	429a      	cmp	r2, r3
 8004712:	d028      	beq.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004714:	4b2e      	ldr	r3, [pc, #184]	@ (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004716:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004718:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800471c:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800471e:	4b2e      	ldr	r3, [pc, #184]	@ (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004720:	2201      	movs	r2, #1
 8004722:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004724:	4b2c      	ldr	r3, [pc, #176]	@ (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004726:	2200      	movs	r2, #0
 8004728:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800472a:	4a29      	ldr	r2, [pc, #164]	@ (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004730:	4b27      	ldr	r3, [pc, #156]	@ (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004732:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004734:	f003 0301 	and.w	r3, r3, #1
 8004738:	2b01      	cmp	r3, #1
 800473a:	d114      	bne.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800473c:	f7fd fb26 	bl	8001d8c <HAL_GetTick>
 8004740:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004742:	e00a      	b.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004744:	f7fd fb22 	bl	8001d8c <HAL_GetTick>
 8004748:	4602      	mov	r2, r0
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	1ad3      	subs	r3, r2, r3
 800474e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004752:	4293      	cmp	r3, r2
 8004754:	d901      	bls.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8004756:	2303      	movs	r3, #3
 8004758:	e034      	b.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800475a:	4b1d      	ldr	r3, [pc, #116]	@ (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800475c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800475e:	f003 0302 	and.w	r3, r3, #2
 8004762:	2b00      	cmp	r3, #0
 8004764:	d0ee      	beq.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	691b      	ldr	r3, [r3, #16]
 800476a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800476e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004772:	d10d      	bne.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8004774:	4b16      	ldr	r3, [pc, #88]	@ (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	691b      	ldr	r3, [r3, #16]
 8004780:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004784:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004788:	4911      	ldr	r1, [pc, #68]	@ (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800478a:	4313      	orrs	r3, r2
 800478c:	608b      	str	r3, [r1, #8]
 800478e:	e005      	b.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8004790:	4b0f      	ldr	r3, [pc, #60]	@ (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	4a0e      	ldr	r2, [pc, #56]	@ (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004796:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800479a:	6093      	str	r3, [r2, #8]
 800479c:	4b0c      	ldr	r3, [pc, #48]	@ (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800479e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	691b      	ldr	r3, [r3, #16]
 80047a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047a8:	4909      	ldr	r1, [pc, #36]	@ (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047aa:	4313      	orrs	r3, r2
 80047ac:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 0308 	and.w	r3, r3, #8
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d003      	beq.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	7d1a      	ldrb	r2, [r3, #20]
 80047be:	4b07      	ldr	r3, [pc, #28]	@ (80047dc <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80047c0:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80047c2:	2300      	movs	r3, #0
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3718      	adds	r7, #24
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}
 80047cc:	42470068 	.word	0x42470068
 80047d0:	40023800 	.word	0x40023800
 80047d4:	40007000 	.word	0x40007000
 80047d8:	42470e40 	.word	0x42470e40
 80047dc:	424711e0 	.word	0x424711e0

080047e0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b087      	sub	sp, #28
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80047e8:	2300      	movs	r3, #0
 80047ea:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80047ec:	2300      	movs	r3, #0
 80047ee:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80047f0:	2300      	movs	r3, #0
 80047f2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80047f4:	2300      	movs	r3, #0
 80047f6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d141      	bne.n	8004882 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80047fe:	4b25      	ldr	r3, [pc, #148]	@ (8004894 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004806:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d006      	beq.n	800481c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004814:	d131      	bne.n	800487a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004816:	4b20      	ldr	r3, [pc, #128]	@ (8004898 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004818:	617b      	str	r3, [r7, #20]
          break;
 800481a:	e031      	b.n	8004880 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800481c:	4b1d      	ldr	r3, [pc, #116]	@ (8004894 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004824:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004828:	d109      	bne.n	800483e <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800482a:	4b1a      	ldr	r3, [pc, #104]	@ (8004894 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800482c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004830:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004834:	4a19      	ldr	r2, [pc, #100]	@ (800489c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004836:	fbb2 f3f3 	udiv	r3, r2, r3
 800483a:	613b      	str	r3, [r7, #16]
 800483c:	e008      	b.n	8004850 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800483e:	4b15      	ldr	r3, [pc, #84]	@ (8004894 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004840:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004844:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004848:	4a15      	ldr	r2, [pc, #84]	@ (80048a0 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 800484a:	fbb2 f3f3 	udiv	r3, r2, r3
 800484e:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004850:	4b10      	ldr	r3, [pc, #64]	@ (8004894 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004852:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004856:	099b      	lsrs	r3, r3, #6
 8004858:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	fb02 f303 	mul.w	r3, r2, r3
 8004862:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004864:	4b0b      	ldr	r3, [pc, #44]	@ (8004894 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004866:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800486a:	0f1b      	lsrs	r3, r3, #28
 800486c:	f003 0307 	and.w	r3, r3, #7
 8004870:	68ba      	ldr	r2, [r7, #8]
 8004872:	fbb2 f3f3 	udiv	r3, r2, r3
 8004876:	617b      	str	r3, [r7, #20]
          break;
 8004878:	e002      	b.n	8004880 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 800487a:	2300      	movs	r3, #0
 800487c:	617b      	str	r3, [r7, #20]
          break;
 800487e:	bf00      	nop
        }
      }
      break;
 8004880:	e000      	b.n	8004884 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
    }
    default:
    {
      break;
 8004882:	bf00      	nop
    }
  }
  return frequency;
 8004884:	697b      	ldr	r3, [r7, #20]
}
 8004886:	4618      	mov	r0, r3
 8004888:	371c      	adds	r7, #28
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr
 8004892:	bf00      	nop
 8004894:	40023800 	.word	0x40023800
 8004898:	00bb8000 	.word	0x00bb8000
 800489c:	017d7840 	.word	0x017d7840
 80048a0:	00f42400 	.word	0x00f42400

080048a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b082      	sub	sp, #8
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d101      	bne.n	80048b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	e041      	b.n	800493a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d106      	bne.n	80048d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f7fd f9a8 	bl	8001c20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2202      	movs	r2, #2
 80048d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	3304      	adds	r3, #4
 80048e0:	4619      	mov	r1, r3
 80048e2:	4610      	mov	r0, r2
 80048e4:	f000 fa72 	bl	8004dcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2201      	movs	r2, #1
 80048ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2201      	movs	r2, #1
 80048f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2201      	movs	r2, #1
 80048fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2201      	movs	r2, #1
 8004904:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2201      	movs	r2, #1
 800490c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2201      	movs	r2, #1
 8004914:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004938:	2300      	movs	r3, #0
}
 800493a:	4618      	mov	r0, r3
 800493c:	3708      	adds	r7, #8
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
	...

08004944 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004944:	b480      	push	{r7}
 8004946:	b085      	sub	sp, #20
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004952:	b2db      	uxtb	r3, r3
 8004954:	2b01      	cmp	r3, #1
 8004956:	d001      	beq.n	800495c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	e03c      	b.n	80049d6 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2202      	movs	r2, #2
 8004960:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a1e      	ldr	r2, [pc, #120]	@ (80049e4 <HAL_TIM_Base_Start+0xa0>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d018      	beq.n	80049a0 <HAL_TIM_Base_Start+0x5c>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004976:	d013      	beq.n	80049a0 <HAL_TIM_Base_Start+0x5c>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a1a      	ldr	r2, [pc, #104]	@ (80049e8 <HAL_TIM_Base_Start+0xa4>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d00e      	beq.n	80049a0 <HAL_TIM_Base_Start+0x5c>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a19      	ldr	r2, [pc, #100]	@ (80049ec <HAL_TIM_Base_Start+0xa8>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d009      	beq.n	80049a0 <HAL_TIM_Base_Start+0x5c>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a17      	ldr	r2, [pc, #92]	@ (80049f0 <HAL_TIM_Base_Start+0xac>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d004      	beq.n	80049a0 <HAL_TIM_Base_Start+0x5c>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a16      	ldr	r2, [pc, #88]	@ (80049f4 <HAL_TIM_Base_Start+0xb0>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d111      	bne.n	80049c4 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	f003 0307 	and.w	r3, r3, #7
 80049aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2b06      	cmp	r3, #6
 80049b0:	d010      	beq.n	80049d4 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f042 0201 	orr.w	r2, r2, #1
 80049c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049c2:	e007      	b.n	80049d4 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f042 0201 	orr.w	r2, r2, #1
 80049d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80049d4:	2300      	movs	r3, #0
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3714      	adds	r7, #20
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr
 80049e2:	bf00      	nop
 80049e4:	40010000 	.word	0x40010000
 80049e8:	40000400 	.word	0x40000400
 80049ec:	40000800 	.word	0x40000800
 80049f0:	40000c00 	.word	0x40000c00
 80049f4:	40014000 	.word	0x40014000

080049f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b084      	sub	sp, #16
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	68db      	ldr	r3, [r3, #12]
 8004a06:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	691b      	ldr	r3, [r3, #16]
 8004a0e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	f003 0302 	and.w	r3, r3, #2
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d020      	beq.n	8004a5c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	f003 0302 	and.w	r3, r3, #2
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d01b      	beq.n	8004a5c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f06f 0202 	mvn.w	r2, #2
 8004a2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2201      	movs	r2, #1
 8004a32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	699b      	ldr	r3, [r3, #24]
 8004a3a:	f003 0303 	and.w	r3, r3, #3
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d003      	beq.n	8004a4a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f000 f9a3 	bl	8004d8e <HAL_TIM_IC_CaptureCallback>
 8004a48:	e005      	b.n	8004a56 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f000 f995 	bl	8004d7a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f000 f9a6 	bl	8004da2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	f003 0304 	and.w	r3, r3, #4
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d020      	beq.n	8004aa8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	f003 0304 	and.w	r3, r3, #4
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d01b      	beq.n	8004aa8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f06f 0204 	mvn.w	r2, #4
 8004a78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2202      	movs	r2, #2
 8004a7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	699b      	ldr	r3, [r3, #24]
 8004a86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d003      	beq.n	8004a96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f000 f97d 	bl	8004d8e <HAL_TIM_IC_CaptureCallback>
 8004a94:	e005      	b.n	8004aa2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f000 f96f 	bl	8004d7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f000 f980 	bl	8004da2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	f003 0308 	and.w	r3, r3, #8
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d020      	beq.n	8004af4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	f003 0308 	and.w	r3, r3, #8
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d01b      	beq.n	8004af4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f06f 0208 	mvn.w	r2, #8
 8004ac4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2204      	movs	r2, #4
 8004aca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	69db      	ldr	r3, [r3, #28]
 8004ad2:	f003 0303 	and.w	r3, r3, #3
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d003      	beq.n	8004ae2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f000 f957 	bl	8004d8e <HAL_TIM_IC_CaptureCallback>
 8004ae0:	e005      	b.n	8004aee <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f000 f949 	bl	8004d7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f000 f95a 	bl	8004da2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2200      	movs	r2, #0
 8004af2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	f003 0310 	and.w	r3, r3, #16
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d020      	beq.n	8004b40 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	f003 0310 	and.w	r3, r3, #16
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d01b      	beq.n	8004b40 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f06f 0210 	mvn.w	r2, #16
 8004b10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2208      	movs	r2, #8
 8004b16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	69db      	ldr	r3, [r3, #28]
 8004b1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d003      	beq.n	8004b2e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f000 f931 	bl	8004d8e <HAL_TIM_IC_CaptureCallback>
 8004b2c:	e005      	b.n	8004b3a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f000 f923 	bl	8004d7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f000 f934 	bl	8004da2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	f003 0301 	and.w	r3, r3, #1
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d00c      	beq.n	8004b64 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	f003 0301 	and.w	r3, r3, #1
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d007      	beq.n	8004b64 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f06f 0201 	mvn.w	r2, #1
 8004b5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f000 f901 	bl	8004d66 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d00c      	beq.n	8004b88 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d007      	beq.n	8004b88 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004b80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 faba 	bl	80050fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d00c      	beq.n	8004bac <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d007      	beq.n	8004bac <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004ba4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f000 f905 	bl	8004db6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	f003 0320 	and.w	r3, r3, #32
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d00c      	beq.n	8004bd0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	f003 0320 	and.w	r3, r3, #32
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d007      	beq.n	8004bd0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f06f 0220 	mvn.w	r2, #32
 8004bc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f000 fa8c 	bl	80050e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004bd0:	bf00      	nop
 8004bd2:	3710      	adds	r7, #16
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}

08004bd8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b084      	sub	sp, #16
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
 8004be0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004be2:	2300      	movs	r3, #0
 8004be4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d101      	bne.n	8004bf4 <HAL_TIM_ConfigClockSource+0x1c>
 8004bf0:	2302      	movs	r3, #2
 8004bf2:	e0b4      	b.n	8004d5e <HAL_TIM_ConfigClockSource+0x186>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2202      	movs	r2, #2
 8004c00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004c12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004c1a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	68ba      	ldr	r2, [r7, #8]
 8004c22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c2c:	d03e      	beq.n	8004cac <HAL_TIM_ConfigClockSource+0xd4>
 8004c2e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c32:	f200 8087 	bhi.w	8004d44 <HAL_TIM_ConfigClockSource+0x16c>
 8004c36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c3a:	f000 8086 	beq.w	8004d4a <HAL_TIM_ConfigClockSource+0x172>
 8004c3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c42:	d87f      	bhi.n	8004d44 <HAL_TIM_ConfigClockSource+0x16c>
 8004c44:	2b70      	cmp	r3, #112	@ 0x70
 8004c46:	d01a      	beq.n	8004c7e <HAL_TIM_ConfigClockSource+0xa6>
 8004c48:	2b70      	cmp	r3, #112	@ 0x70
 8004c4a:	d87b      	bhi.n	8004d44 <HAL_TIM_ConfigClockSource+0x16c>
 8004c4c:	2b60      	cmp	r3, #96	@ 0x60
 8004c4e:	d050      	beq.n	8004cf2 <HAL_TIM_ConfigClockSource+0x11a>
 8004c50:	2b60      	cmp	r3, #96	@ 0x60
 8004c52:	d877      	bhi.n	8004d44 <HAL_TIM_ConfigClockSource+0x16c>
 8004c54:	2b50      	cmp	r3, #80	@ 0x50
 8004c56:	d03c      	beq.n	8004cd2 <HAL_TIM_ConfigClockSource+0xfa>
 8004c58:	2b50      	cmp	r3, #80	@ 0x50
 8004c5a:	d873      	bhi.n	8004d44 <HAL_TIM_ConfigClockSource+0x16c>
 8004c5c:	2b40      	cmp	r3, #64	@ 0x40
 8004c5e:	d058      	beq.n	8004d12 <HAL_TIM_ConfigClockSource+0x13a>
 8004c60:	2b40      	cmp	r3, #64	@ 0x40
 8004c62:	d86f      	bhi.n	8004d44 <HAL_TIM_ConfigClockSource+0x16c>
 8004c64:	2b30      	cmp	r3, #48	@ 0x30
 8004c66:	d064      	beq.n	8004d32 <HAL_TIM_ConfigClockSource+0x15a>
 8004c68:	2b30      	cmp	r3, #48	@ 0x30
 8004c6a:	d86b      	bhi.n	8004d44 <HAL_TIM_ConfigClockSource+0x16c>
 8004c6c:	2b20      	cmp	r3, #32
 8004c6e:	d060      	beq.n	8004d32 <HAL_TIM_ConfigClockSource+0x15a>
 8004c70:	2b20      	cmp	r3, #32
 8004c72:	d867      	bhi.n	8004d44 <HAL_TIM_ConfigClockSource+0x16c>
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d05c      	beq.n	8004d32 <HAL_TIM_ConfigClockSource+0x15a>
 8004c78:	2b10      	cmp	r3, #16
 8004c7a:	d05a      	beq.n	8004d32 <HAL_TIM_ConfigClockSource+0x15a>
 8004c7c:	e062      	b.n	8004d44 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c8e:	f000 f99d 	bl	8004fcc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004ca0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	68ba      	ldr	r2, [r7, #8]
 8004ca8:	609a      	str	r2, [r3, #8]
      break;
 8004caa:	e04f      	b.n	8004d4c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004cbc:	f000 f986 	bl	8004fcc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	689a      	ldr	r2, [r3, #8]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004cce:	609a      	str	r2, [r3, #8]
      break;
 8004cd0:	e03c      	b.n	8004d4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cde:	461a      	mov	r2, r3
 8004ce0:	f000 f8fa 	bl	8004ed8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	2150      	movs	r1, #80	@ 0x50
 8004cea:	4618      	mov	r0, r3
 8004cec:	f000 f953 	bl	8004f96 <TIM_ITRx_SetConfig>
      break;
 8004cf0:	e02c      	b.n	8004d4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004cfe:	461a      	mov	r2, r3
 8004d00:	f000 f919 	bl	8004f36 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	2160      	movs	r1, #96	@ 0x60
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f000 f943 	bl	8004f96 <TIM_ITRx_SetConfig>
      break;
 8004d10:	e01c      	b.n	8004d4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d1e:	461a      	mov	r2, r3
 8004d20:	f000 f8da 	bl	8004ed8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	2140      	movs	r1, #64	@ 0x40
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f000 f933 	bl	8004f96 <TIM_ITRx_SetConfig>
      break;
 8004d30:	e00c      	b.n	8004d4c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4619      	mov	r1, r3
 8004d3c:	4610      	mov	r0, r2
 8004d3e:	f000 f92a 	bl	8004f96 <TIM_ITRx_SetConfig>
      break;
 8004d42:	e003      	b.n	8004d4c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	73fb      	strb	r3, [r7, #15]
      break;
 8004d48:	e000      	b.n	8004d4c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004d4a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2200      	movs	r2, #0
 8004d58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3710      	adds	r7, #16
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}

08004d66 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d66:	b480      	push	{r7}
 8004d68:	b083      	sub	sp, #12
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004d6e:	bf00      	nop
 8004d70:	370c      	adds	r7, #12
 8004d72:	46bd      	mov	sp, r7
 8004d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d78:	4770      	bx	lr

08004d7a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d7a:	b480      	push	{r7}
 8004d7c:	b083      	sub	sp, #12
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d82:	bf00      	nop
 8004d84:	370c      	adds	r7, #12
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr

08004d8e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d8e:	b480      	push	{r7}
 8004d90:	b083      	sub	sp, #12
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d96:	bf00      	nop
 8004d98:	370c      	adds	r7, #12
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da0:	4770      	bx	lr

08004da2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004da2:	b480      	push	{r7}
 8004da4:	b083      	sub	sp, #12
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004daa:	bf00      	nop
 8004dac:	370c      	adds	r7, #12
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr

08004db6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004db6:	b480      	push	{r7}
 8004db8:	b083      	sub	sp, #12
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004dbe:	bf00      	nop
 8004dc0:	370c      	adds	r7, #12
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc8:	4770      	bx	lr
	...

08004dcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b085      	sub	sp, #20
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	4a37      	ldr	r2, [pc, #220]	@ (8004ebc <TIM_Base_SetConfig+0xf0>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d00f      	beq.n	8004e04 <TIM_Base_SetConfig+0x38>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004dea:	d00b      	beq.n	8004e04 <TIM_Base_SetConfig+0x38>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	4a34      	ldr	r2, [pc, #208]	@ (8004ec0 <TIM_Base_SetConfig+0xf4>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d007      	beq.n	8004e04 <TIM_Base_SetConfig+0x38>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4a33      	ldr	r2, [pc, #204]	@ (8004ec4 <TIM_Base_SetConfig+0xf8>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d003      	beq.n	8004e04 <TIM_Base_SetConfig+0x38>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	4a32      	ldr	r2, [pc, #200]	@ (8004ec8 <TIM_Base_SetConfig+0xfc>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d108      	bne.n	8004e16 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	68fa      	ldr	r2, [r7, #12]
 8004e12:	4313      	orrs	r3, r2
 8004e14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	4a28      	ldr	r2, [pc, #160]	@ (8004ebc <TIM_Base_SetConfig+0xf0>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d01b      	beq.n	8004e56 <TIM_Base_SetConfig+0x8a>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e24:	d017      	beq.n	8004e56 <TIM_Base_SetConfig+0x8a>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4a25      	ldr	r2, [pc, #148]	@ (8004ec0 <TIM_Base_SetConfig+0xf4>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d013      	beq.n	8004e56 <TIM_Base_SetConfig+0x8a>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4a24      	ldr	r2, [pc, #144]	@ (8004ec4 <TIM_Base_SetConfig+0xf8>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d00f      	beq.n	8004e56 <TIM_Base_SetConfig+0x8a>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4a23      	ldr	r2, [pc, #140]	@ (8004ec8 <TIM_Base_SetConfig+0xfc>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d00b      	beq.n	8004e56 <TIM_Base_SetConfig+0x8a>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4a22      	ldr	r2, [pc, #136]	@ (8004ecc <TIM_Base_SetConfig+0x100>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d007      	beq.n	8004e56 <TIM_Base_SetConfig+0x8a>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4a21      	ldr	r2, [pc, #132]	@ (8004ed0 <TIM_Base_SetConfig+0x104>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d003      	beq.n	8004e56 <TIM_Base_SetConfig+0x8a>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4a20      	ldr	r2, [pc, #128]	@ (8004ed4 <TIM_Base_SetConfig+0x108>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d108      	bne.n	8004e68 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	68db      	ldr	r3, [r3, #12]
 8004e62:	68fa      	ldr	r2, [r7, #12]
 8004e64:	4313      	orrs	r3, r2
 8004e66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	695b      	ldr	r3, [r3, #20]
 8004e72:	4313      	orrs	r3, r2
 8004e74:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	689a      	ldr	r2, [r3, #8]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	4a0c      	ldr	r2, [pc, #48]	@ (8004ebc <TIM_Base_SetConfig+0xf0>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d103      	bne.n	8004e96 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	691a      	ldr	r2, [r3, #16]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f043 0204 	orr.w	r2, r3, #4
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	68fa      	ldr	r2, [r7, #12]
 8004eac:	601a      	str	r2, [r3, #0]
}
 8004eae:	bf00      	nop
 8004eb0:	3714      	adds	r7, #20
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr
 8004eba:	bf00      	nop
 8004ebc:	40010000 	.word	0x40010000
 8004ec0:	40000400 	.word	0x40000400
 8004ec4:	40000800 	.word	0x40000800
 8004ec8:	40000c00 	.word	0x40000c00
 8004ecc:	40014000 	.word	0x40014000
 8004ed0:	40014400 	.word	0x40014400
 8004ed4:	40014800 	.word	0x40014800

08004ed8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b087      	sub	sp, #28
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	60f8      	str	r0, [r7, #12]
 8004ee0:	60b9      	str	r1, [r7, #8]
 8004ee2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	6a1b      	ldr	r3, [r3, #32]
 8004ee8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	6a1b      	ldr	r3, [r3, #32]
 8004eee:	f023 0201 	bic.w	r2, r3, #1
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	699b      	ldr	r3, [r3, #24]
 8004efa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004f02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	011b      	lsls	r3, r3, #4
 8004f08:	693a      	ldr	r2, [r7, #16]
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	f023 030a 	bic.w	r3, r3, #10
 8004f14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f16:	697a      	ldr	r2, [r7, #20]
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	693a      	ldr	r2, [r7, #16]
 8004f22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	697a      	ldr	r2, [r7, #20]
 8004f28:	621a      	str	r2, [r3, #32]
}
 8004f2a:	bf00      	nop
 8004f2c:	371c      	adds	r7, #28
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr

08004f36 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f36:	b480      	push	{r7}
 8004f38:	b087      	sub	sp, #28
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	60f8      	str	r0, [r7, #12]
 8004f3e:	60b9      	str	r1, [r7, #8]
 8004f40:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	6a1b      	ldr	r3, [r3, #32]
 8004f46:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	6a1b      	ldr	r3, [r3, #32]
 8004f4c:	f023 0210 	bic.w	r2, r3, #16
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	699b      	ldr	r3, [r3, #24]
 8004f58:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004f60:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	031b      	lsls	r3, r3, #12
 8004f66:	693a      	ldr	r2, [r7, #16]
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004f72:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	011b      	lsls	r3, r3, #4
 8004f78:	697a      	ldr	r2, [r7, #20]
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	693a      	ldr	r2, [r7, #16]
 8004f82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	697a      	ldr	r2, [r7, #20]
 8004f88:	621a      	str	r2, [r3, #32]
}
 8004f8a:	bf00      	nop
 8004f8c:	371c      	adds	r7, #28
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f94:	4770      	bx	lr

08004f96 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f96:	b480      	push	{r7}
 8004f98:	b085      	sub	sp, #20
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	6078      	str	r0, [r7, #4]
 8004f9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004fae:	683a      	ldr	r2, [r7, #0]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	f043 0307 	orr.w	r3, r3, #7
 8004fb8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	68fa      	ldr	r2, [r7, #12]
 8004fbe:	609a      	str	r2, [r3, #8]
}
 8004fc0:	bf00      	nop
 8004fc2:	3714      	adds	r7, #20
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr

08004fcc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b087      	sub	sp, #28
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	60f8      	str	r0, [r7, #12]
 8004fd4:	60b9      	str	r1, [r7, #8]
 8004fd6:	607a      	str	r2, [r7, #4]
 8004fd8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004fe6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	021a      	lsls	r2, r3, #8
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	431a      	orrs	r2, r3
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	697a      	ldr	r2, [r7, #20]
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	697a      	ldr	r2, [r7, #20]
 8004ffe:	609a      	str	r2, [r3, #8]
}
 8005000:	bf00      	nop
 8005002:	371c      	adds	r7, #28
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr

0800500c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800500c:	b480      	push	{r7}
 800500e:	b085      	sub	sp, #20
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800501c:	2b01      	cmp	r3, #1
 800501e:	d101      	bne.n	8005024 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005020:	2302      	movs	r3, #2
 8005022:	e050      	b.n	80050c6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2202      	movs	r2, #2
 8005030:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800504a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	68fa      	ldr	r2, [r7, #12]
 8005052:	4313      	orrs	r3, r2
 8005054:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	68fa      	ldr	r2, [r7, #12]
 800505c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a1c      	ldr	r2, [pc, #112]	@ (80050d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d018      	beq.n	800509a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005070:	d013      	beq.n	800509a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a18      	ldr	r2, [pc, #96]	@ (80050d8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d00e      	beq.n	800509a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a16      	ldr	r2, [pc, #88]	@ (80050dc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d009      	beq.n	800509a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a15      	ldr	r2, [pc, #84]	@ (80050e0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d004      	beq.n	800509a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a13      	ldr	r2, [pc, #76]	@ (80050e4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d10c      	bne.n	80050b4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80050a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	68ba      	ldr	r2, [r7, #8]
 80050a8:	4313      	orrs	r3, r2
 80050aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	68ba      	ldr	r2, [r7, #8]
 80050b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2201      	movs	r2, #1
 80050b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2200      	movs	r2, #0
 80050c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80050c4:	2300      	movs	r3, #0
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3714      	adds	r7, #20
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr
 80050d2:	bf00      	nop
 80050d4:	40010000 	.word	0x40010000
 80050d8:	40000400 	.word	0x40000400
 80050dc:	40000800 	.word	0x40000800
 80050e0:	40000c00 	.word	0x40000c00
 80050e4:	40014000 	.word	0x40014000

080050e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b083      	sub	sp, #12
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80050f0:	bf00      	nop
 80050f2:	370c      	adds	r7, #12
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr

080050fc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b083      	sub	sp, #12
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005104:	bf00      	nop
 8005106:	370c      	adds	r7, #12
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr

08005110 <memset>:
 8005110:	4402      	add	r2, r0
 8005112:	4603      	mov	r3, r0
 8005114:	4293      	cmp	r3, r2
 8005116:	d100      	bne.n	800511a <memset+0xa>
 8005118:	4770      	bx	lr
 800511a:	f803 1b01 	strb.w	r1, [r3], #1
 800511e:	e7f9      	b.n	8005114 <memset+0x4>

08005120 <__libc_init_array>:
 8005120:	b570      	push	{r4, r5, r6, lr}
 8005122:	4d0d      	ldr	r5, [pc, #52]	@ (8005158 <__libc_init_array+0x38>)
 8005124:	4c0d      	ldr	r4, [pc, #52]	@ (800515c <__libc_init_array+0x3c>)
 8005126:	1b64      	subs	r4, r4, r5
 8005128:	10a4      	asrs	r4, r4, #2
 800512a:	2600      	movs	r6, #0
 800512c:	42a6      	cmp	r6, r4
 800512e:	d109      	bne.n	8005144 <__libc_init_array+0x24>
 8005130:	4d0b      	ldr	r5, [pc, #44]	@ (8005160 <__libc_init_array+0x40>)
 8005132:	4c0c      	ldr	r4, [pc, #48]	@ (8005164 <__libc_init_array+0x44>)
 8005134:	f000 f818 	bl	8005168 <_init>
 8005138:	1b64      	subs	r4, r4, r5
 800513a:	10a4      	asrs	r4, r4, #2
 800513c:	2600      	movs	r6, #0
 800513e:	42a6      	cmp	r6, r4
 8005140:	d105      	bne.n	800514e <__libc_init_array+0x2e>
 8005142:	bd70      	pop	{r4, r5, r6, pc}
 8005144:	f855 3b04 	ldr.w	r3, [r5], #4
 8005148:	4798      	blx	r3
 800514a:	3601      	adds	r6, #1
 800514c:	e7ee      	b.n	800512c <__libc_init_array+0xc>
 800514e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005152:	4798      	blx	r3
 8005154:	3601      	adds	r6, #1
 8005156:	e7f2      	b.n	800513e <__libc_init_array+0x1e>
 8005158:	08005240 	.word	0x08005240
 800515c:	08005240 	.word	0x08005240
 8005160:	08005240 	.word	0x08005240
 8005164:	08005244 	.word	0x08005244

08005168 <_init>:
 8005168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800516a:	bf00      	nop
 800516c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800516e:	bc08      	pop	{r3}
 8005170:	469e      	mov	lr, r3
 8005172:	4770      	bx	lr

08005174 <_fini>:
 8005174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005176:	bf00      	nop
 8005178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800517a:	bc08      	pop	{r3}
 800517c:	469e      	mov	lr, r3
 800517e:	4770      	bx	lr
