
Falando por AI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e34  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003fcc  08003fcc  00004fcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003fe4  08003fe4  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003fe4  08003fe4  00004fe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003fec  08003fec  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003fec  08003fec  00004fec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003ff0  08003ff0  00004ff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003ff4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009c0  2000000c  08004000  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009cc  08004000  000059cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dfc4  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028dc  00000000  00000000  00013000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d88  00000000  00000000  000158e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a59  00000000  00000000  00016668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017ae4  00000000  00000000  000170c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011107  00000000  00000000  0002eba5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095e65  00000000  00000000  0003fcac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d5b11  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036cc  00000000  00000000  000d5b54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000d9220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003fb4 	.word	0x08003fb4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08003fb4 	.word	0x08003fb4

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001ec:	f000 b988 	b.w	8000500 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	468e      	mov	lr, r1
 8000210:	4604      	mov	r4, r0
 8000212:	4688      	mov	r8, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d962      	bls.n	80002e4 <__udivmoddi4+0xdc>
 800021e:	fab2 f682 	clz	r6, r2
 8000222:	b14e      	cbz	r6, 8000238 <__udivmoddi4+0x30>
 8000224:	f1c6 0320 	rsb	r3, r6, #32
 8000228:	fa01 f806 	lsl.w	r8, r1, r6
 800022c:	fa20 f303 	lsr.w	r3, r0, r3
 8000230:	40b7      	lsls	r7, r6
 8000232:	ea43 0808 	orr.w	r8, r3, r8
 8000236:	40b4      	lsls	r4, r6
 8000238:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800023c:	fa1f fc87 	uxth.w	ip, r7
 8000240:	fbb8 f1fe 	udiv	r1, r8, lr
 8000244:	0c23      	lsrs	r3, r4, #16
 8000246:	fb0e 8811 	mls	r8, lr, r1, r8
 800024a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024e:	fb01 f20c 	mul.w	r2, r1, ip
 8000252:	429a      	cmp	r2, r3
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0x62>
 8000256:	18fb      	adds	r3, r7, r3
 8000258:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800025c:	f080 80ea 	bcs.w	8000434 <__udivmoddi4+0x22c>
 8000260:	429a      	cmp	r2, r3
 8000262:	f240 80e7 	bls.w	8000434 <__udivmoddi4+0x22c>
 8000266:	3902      	subs	r1, #2
 8000268:	443b      	add	r3, r7
 800026a:	1a9a      	subs	r2, r3, r2
 800026c:	b2a3      	uxth	r3, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800027a:	fb00 fc0c 	mul.w	ip, r0, ip
 800027e:	459c      	cmp	ip, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x8e>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000288:	f080 80d6 	bcs.w	8000438 <__udivmoddi4+0x230>
 800028c:	459c      	cmp	ip, r3
 800028e:	f240 80d3 	bls.w	8000438 <__udivmoddi4+0x230>
 8000292:	443b      	add	r3, r7
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029a:	eba3 030c 	sub.w	r3, r3, ip
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40f3      	lsrs	r3, r6
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xb6>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb0>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa2>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x14c>
 80002c6:	4573      	cmp	r3, lr
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xc8>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 8105 	bhi.w	80004da <__udivmoddi4+0x2d2>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4690      	mov	r8, r2
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e5      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002de:	e9c5 4800 	strd	r4, r8, [r5]
 80002e2:	e7e2      	b.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f000 8090 	beq.w	800040a <__udivmoddi4+0x202>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f040 80a4 	bne.w	800043c <__udivmoddi4+0x234>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	0c03      	lsrs	r3, r0, #16
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	b280      	uxth	r0, r0
 80002fe:	b2bc      	uxth	r4, r7
 8000300:	2101      	movs	r1, #1
 8000302:	fbb2 fcfe 	udiv	ip, r2, lr
 8000306:	fb0e 221c 	mls	r2, lr, ip, r2
 800030a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030e:	fb04 f20c 	mul.w	r2, r4, ip
 8000312:	429a      	cmp	r2, r3
 8000314:	d907      	bls.n	8000326 <__udivmoddi4+0x11e>
 8000316:	18fb      	adds	r3, r7, r3
 8000318:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x11c>
 800031e:	429a      	cmp	r2, r3
 8000320:	f200 80e0 	bhi.w	80004e4 <__udivmoddi4+0x2dc>
 8000324:	46c4      	mov	ip, r8
 8000326:	1a9b      	subs	r3, r3, r2
 8000328:	fbb3 f2fe 	udiv	r2, r3, lr
 800032c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000330:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000334:	fb02 f404 	mul.w	r4, r2, r4
 8000338:	429c      	cmp	r4, r3
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x144>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x142>
 8000344:	429c      	cmp	r4, r3
 8000346:	f200 80ca 	bhi.w	80004de <__udivmoddi4+0x2d6>
 800034a:	4602      	mov	r2, r0
 800034c:	1b1b      	subs	r3, r3, r4
 800034e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x98>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa0e f401 	lsl.w	r4, lr, r1
 8000364:	fa20 f306 	lsr.w	r3, r0, r6
 8000368:	fa2e fe06 	lsr.w	lr, lr, r6
 800036c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	fa1f fc87 	uxth.w	ip, r7
 800037a:	fbbe f0f9 	udiv	r0, lr, r9
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	fb09 ee10 	mls	lr, r9, r0, lr
 8000384:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000388:	fb00 fe0c 	mul.w	lr, r0, ip
 800038c:	45a6      	cmp	lr, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x1a0>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800039a:	f080 809c 	bcs.w	80004d6 <__udivmoddi4+0x2ce>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8099 	bls.w	80004d6 <__udivmoddi4+0x2ce>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 040e 	sub.w	r4, r4, lr
 80003ac:	fa1f fe83 	uxth.w	lr, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c0:	45a4      	cmp	ip, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1ce>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003ca:	f080 8082 	bcs.w	80004d2 <__udivmoddi4+0x2ca>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d97f      	bls.n	80004d2 <__udivmoddi4+0x2ca>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	fba0 ec02 	umull	lr, ip, r0, r2
 80003e2:	4564      	cmp	r4, ip
 80003e4:	4673      	mov	r3, lr
 80003e6:	46e1      	mov	r9, ip
 80003e8:	d362      	bcc.n	80004b0 <__udivmoddi4+0x2a8>
 80003ea:	d05f      	beq.n	80004ac <__udivmoddi4+0x2a4>
 80003ec:	b15d      	cbz	r5, 8000406 <__udivmoddi4+0x1fe>
 80003ee:	ebb8 0203 	subs.w	r2, r8, r3
 80003f2:	eb64 0409 	sbc.w	r4, r4, r9
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	fa22 f301 	lsr.w	r3, r2, r1
 80003fe:	431e      	orrs	r6, r3
 8000400:	40cc      	lsrs	r4, r1
 8000402:	e9c5 6400 	strd	r6, r4, [r5]
 8000406:	2100      	movs	r1, #0
 8000408:	e74f      	b.n	80002aa <__udivmoddi4+0xa2>
 800040a:	fbb1 fcf2 	udiv	ip, r1, r2
 800040e:	0c01      	lsrs	r1, r0, #16
 8000410:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000414:	b280      	uxth	r0, r0
 8000416:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800041a:	463b      	mov	r3, r7
 800041c:	4638      	mov	r0, r7
 800041e:	463c      	mov	r4, r7
 8000420:	46b8      	mov	r8, r7
 8000422:	46be      	mov	lr, r7
 8000424:	2620      	movs	r6, #32
 8000426:	fbb1 f1f7 	udiv	r1, r1, r7
 800042a:	eba2 0208 	sub.w	r2, r2, r8
 800042e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000432:	e766      	b.n	8000302 <__udivmoddi4+0xfa>
 8000434:	4601      	mov	r1, r0
 8000436:	e718      	b.n	800026a <__udivmoddi4+0x62>
 8000438:	4610      	mov	r0, r2
 800043a:	e72c      	b.n	8000296 <__udivmoddi4+0x8e>
 800043c:	f1c6 0220 	rsb	r2, r6, #32
 8000440:	fa2e f302 	lsr.w	r3, lr, r2
 8000444:	40b7      	lsls	r7, r6
 8000446:	40b1      	lsls	r1, r6
 8000448:	fa20 f202 	lsr.w	r2, r0, r2
 800044c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000450:	430a      	orrs	r2, r1
 8000452:	fbb3 f8fe 	udiv	r8, r3, lr
 8000456:	b2bc      	uxth	r4, r7
 8000458:	fb0e 3318 	mls	r3, lr, r8, r3
 800045c:	0c11      	lsrs	r1, r2, #16
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb08 f904 	mul.w	r9, r8, r4
 8000466:	40b0      	lsls	r0, r6
 8000468:	4589      	cmp	r9, r1
 800046a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046e:	b280      	uxth	r0, r0
 8000470:	d93e      	bls.n	80004f0 <__udivmoddi4+0x2e8>
 8000472:	1879      	adds	r1, r7, r1
 8000474:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000478:	d201      	bcs.n	800047e <__udivmoddi4+0x276>
 800047a:	4589      	cmp	r9, r1
 800047c:	d81f      	bhi.n	80004be <__udivmoddi4+0x2b6>
 800047e:	eba1 0109 	sub.w	r1, r1, r9
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fb09 f804 	mul.w	r8, r9, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	b292      	uxth	r2, r2
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	4542      	cmp	r2, r8
 8000496:	d229      	bcs.n	80004ec <__udivmoddi4+0x2e4>
 8000498:	18ba      	adds	r2, r7, r2
 800049a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800049e:	d2c4      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a0:	4542      	cmp	r2, r8
 80004a2:	d2c2      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a4:	f1a9 0102 	sub.w	r1, r9, #2
 80004a8:	443a      	add	r2, r7
 80004aa:	e7be      	b.n	800042a <__udivmoddi4+0x222>
 80004ac:	45f0      	cmp	r8, lr
 80004ae:	d29d      	bcs.n	80003ec <__udivmoddi4+0x1e4>
 80004b0:	ebbe 0302 	subs.w	r3, lr, r2
 80004b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b8:	3801      	subs	r0, #1
 80004ba:	46e1      	mov	r9, ip
 80004bc:	e796      	b.n	80003ec <__udivmoddi4+0x1e4>
 80004be:	eba7 0909 	sub.w	r9, r7, r9
 80004c2:	4449      	add	r1, r9
 80004c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004cc:	fb09 f804 	mul.w	r8, r9, r4
 80004d0:	e7db      	b.n	800048a <__udivmoddi4+0x282>
 80004d2:	4673      	mov	r3, lr
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1ce>
 80004d6:	4650      	mov	r0, sl
 80004d8:	e766      	b.n	80003a8 <__udivmoddi4+0x1a0>
 80004da:	4608      	mov	r0, r1
 80004dc:	e6fd      	b.n	80002da <__udivmoddi4+0xd2>
 80004de:	443b      	add	r3, r7
 80004e0:	3a02      	subs	r2, #2
 80004e2:	e733      	b.n	800034c <__udivmoddi4+0x144>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	443b      	add	r3, r7
 80004ea:	e71c      	b.n	8000326 <__udivmoddi4+0x11e>
 80004ec:	4649      	mov	r1, r9
 80004ee:	e79c      	b.n	800042a <__udivmoddi4+0x222>
 80004f0:	eba1 0109 	sub.w	r1, r1, r9
 80004f4:	46c4      	mov	ip, r8
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fb09 f804 	mul.w	r8, r9, r4
 80004fe:	e7c4      	b.n	800048a <__udivmoddi4+0x282>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b084      	sub	sp, #16
 8000508:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800050a:	463b      	mov	r3, r7
 800050c:	2200      	movs	r2, #0
 800050e:	601a      	str	r2, [r3, #0]
 8000510:	605a      	str	r2, [r3, #4]
 8000512:	609a      	str	r2, [r3, #8]
 8000514:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000516:	4b22      	ldr	r3, [pc, #136]	@ (80005a0 <MX_ADC1_Init+0x9c>)
 8000518:	4a22      	ldr	r2, [pc, #136]	@ (80005a4 <MX_ADC1_Init+0xa0>)
 800051a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800051c:	4b20      	ldr	r3, [pc, #128]	@ (80005a0 <MX_ADC1_Init+0x9c>)
 800051e:	2200      	movs	r2, #0
 8000520:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000522:	4b1f      	ldr	r3, [pc, #124]	@ (80005a0 <MX_ADC1_Init+0x9c>)
 8000524:	2200      	movs	r2, #0
 8000526:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000528:	4b1d      	ldr	r3, [pc, #116]	@ (80005a0 <MX_ADC1_Init+0x9c>)
 800052a:	2200      	movs	r2, #0
 800052c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800052e:	4b1c      	ldr	r3, [pc, #112]	@ (80005a0 <MX_ADC1_Init+0x9c>)
 8000530:	2200      	movs	r2, #0
 8000532:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000534:	4b1a      	ldr	r3, [pc, #104]	@ (80005a0 <MX_ADC1_Init+0x9c>)
 8000536:	2200      	movs	r2, #0
 8000538:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800053c:	4b18      	ldr	r3, [pc, #96]	@ (80005a0 <MX_ADC1_Init+0x9c>)
 800053e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000542:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8000544:	4b16      	ldr	r3, [pc, #88]	@ (80005a0 <MX_ADC1_Init+0x9c>)
 8000546:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 800054a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800054c:	4b14      	ldr	r3, [pc, #80]	@ (80005a0 <MX_ADC1_Init+0x9c>)
 800054e:	2200      	movs	r2, #0
 8000550:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000552:	4b13      	ldr	r3, [pc, #76]	@ (80005a0 <MX_ADC1_Init+0x9c>)
 8000554:	2201      	movs	r2, #1
 8000556:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000558:	4b11      	ldr	r3, [pc, #68]	@ (80005a0 <MX_ADC1_Init+0x9c>)
 800055a:	2201      	movs	r2, #1
 800055c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000560:	4b0f      	ldr	r3, [pc, #60]	@ (80005a0 <MX_ADC1_Init+0x9c>)
 8000562:	2201      	movs	r2, #1
 8000564:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000566:	480e      	ldr	r0, [pc, #56]	@ (80005a0 <MX_ADC1_Init+0x9c>)
 8000568:	f000 fc80 	bl	8000e6c <HAL_ADC_Init>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8000572:	f000 fabb 	bl	8000aec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000576:	2301      	movs	r3, #1
 8000578:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800057a:	2301      	movs	r3, #1
 800057c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800057e:	2300      	movs	r3, #0
 8000580:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000582:	463b      	mov	r3, r7
 8000584:	4619      	mov	r1, r3
 8000586:	4806      	ldr	r0, [pc, #24]	@ (80005a0 <MX_ADC1_Init+0x9c>)
 8000588:	f000 fdbc 	bl	8001104 <HAL_ADC_ConfigChannel>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000592:	f000 faab 	bl	8000aec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000596:	bf00      	nop
 8000598:	3710      	adds	r7, #16
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	20000028 	.word	0x20000028
 80005a4:	40012000 	.word	0x40012000

080005a8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b08a      	sub	sp, #40	@ 0x28
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b0:	f107 0314 	add.w	r3, r7, #20
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
 80005b8:	605a      	str	r2, [r3, #4]
 80005ba:	609a      	str	r2, [r3, #8]
 80005bc:	60da      	str	r2, [r3, #12]
 80005be:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a2e      	ldr	r2, [pc, #184]	@ (8000680 <HAL_ADC_MspInit+0xd8>)
 80005c6:	4293      	cmp	r3, r2
 80005c8:	d156      	bne.n	8000678 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005ca:	2300      	movs	r3, #0
 80005cc:	613b      	str	r3, [r7, #16]
 80005ce:	4b2d      	ldr	r3, [pc, #180]	@ (8000684 <HAL_ADC_MspInit+0xdc>)
 80005d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005d2:	4a2c      	ldr	r2, [pc, #176]	@ (8000684 <HAL_ADC_MspInit+0xdc>)
 80005d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80005d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80005da:	4b2a      	ldr	r3, [pc, #168]	@ (8000684 <HAL_ADC_MspInit+0xdc>)
 80005dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80005e2:	613b      	str	r3, [r7, #16]
 80005e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e6:	2300      	movs	r3, #0
 80005e8:	60fb      	str	r3, [r7, #12]
 80005ea:	4b26      	ldr	r3, [pc, #152]	@ (8000684 <HAL_ADC_MspInit+0xdc>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ee:	4a25      	ldr	r2, [pc, #148]	@ (8000684 <HAL_ADC_MspInit+0xdc>)
 80005f0:	f043 0301 	orr.w	r3, r3, #1
 80005f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005f6:	4b23      	ldr	r3, [pc, #140]	@ (8000684 <HAL_ADC_MspInit+0xdc>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005fa:	f003 0301 	and.w	r3, r3, #1
 80005fe:	60fb      	str	r3, [r7, #12]
 8000600:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000602:	2302      	movs	r3, #2
 8000604:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000606:	2303      	movs	r3, #3
 8000608:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060a:	2300      	movs	r3, #0
 800060c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800060e:	f107 0314 	add.w	r3, r7, #20
 8000612:	4619      	mov	r1, r3
 8000614:	481c      	ldr	r0, [pc, #112]	@ (8000688 <HAL_ADC_MspInit+0xe0>)
 8000616:	f001 fca7 	bl	8001f68 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800061a:	4b1c      	ldr	r3, [pc, #112]	@ (800068c <HAL_ADC_MspInit+0xe4>)
 800061c:	4a1c      	ldr	r2, [pc, #112]	@ (8000690 <HAL_ADC_MspInit+0xe8>)
 800061e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000620:	4b1a      	ldr	r3, [pc, #104]	@ (800068c <HAL_ADC_MspInit+0xe4>)
 8000622:	2200      	movs	r2, #0
 8000624:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000626:	4b19      	ldr	r3, [pc, #100]	@ (800068c <HAL_ADC_MspInit+0xe4>)
 8000628:	2200      	movs	r2, #0
 800062a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800062c:	4b17      	ldr	r3, [pc, #92]	@ (800068c <HAL_ADC_MspInit+0xe4>)
 800062e:	2200      	movs	r2, #0
 8000630:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000632:	4b16      	ldr	r3, [pc, #88]	@ (800068c <HAL_ADC_MspInit+0xe4>)
 8000634:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000638:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800063a:	4b14      	ldr	r3, [pc, #80]	@ (800068c <HAL_ADC_MspInit+0xe4>)
 800063c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000640:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000642:	4b12      	ldr	r3, [pc, #72]	@ (800068c <HAL_ADC_MspInit+0xe4>)
 8000644:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000648:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800064a:	4b10      	ldr	r3, [pc, #64]	@ (800068c <HAL_ADC_MspInit+0xe4>)
 800064c:	2200      	movs	r2, #0
 800064e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000650:	4b0e      	ldr	r3, [pc, #56]	@ (800068c <HAL_ADC_MspInit+0xe4>)
 8000652:	2200      	movs	r2, #0
 8000654:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000656:	4b0d      	ldr	r3, [pc, #52]	@ (800068c <HAL_ADC_MspInit+0xe4>)
 8000658:	2200      	movs	r2, #0
 800065a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800065c:	480b      	ldr	r0, [pc, #44]	@ (800068c <HAL_ADC_MspInit+0xe4>)
 800065e:	f001 f913 	bl	8001888 <HAL_DMA_Init>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8000668:	f000 fa40 	bl	8000aec <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	4a07      	ldr	r2, [pc, #28]	@ (800068c <HAL_ADC_MspInit+0xe4>)
 8000670:	639a      	str	r2, [r3, #56]	@ 0x38
 8000672:	4a06      	ldr	r2, [pc, #24]	@ (800068c <HAL_ADC_MspInit+0xe4>)
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000678:	bf00      	nop
 800067a:	3728      	adds	r7, #40	@ 0x28
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	40012000 	.word	0x40012000
 8000684:	40023800 	.word	0x40023800
 8000688:	40020000 	.word	0x40020000
 800068c:	20000070 	.word	0x20000070
 8000690:	40026410 	.word	0x40026410

08000694 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800069a:	2300      	movs	r3, #0
 800069c:	607b      	str	r3, [r7, #4]
 800069e:	4b17      	ldr	r3, [pc, #92]	@ (80006fc <MX_DMA_Init+0x68>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a2:	4a16      	ldr	r2, [pc, #88]	@ (80006fc <MX_DMA_Init+0x68>)
 80006a4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80006a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006aa:	4b14      	ldr	r3, [pc, #80]	@ (80006fc <MX_DMA_Init+0x68>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80006b2:	607b      	str	r3, [r7, #4]
 80006b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006b6:	2300      	movs	r3, #0
 80006b8:	603b      	str	r3, [r7, #0]
 80006ba:	4b10      	ldr	r3, [pc, #64]	@ (80006fc <MX_DMA_Init+0x68>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006be:	4a0f      	ldr	r2, [pc, #60]	@ (80006fc <MX_DMA_Init+0x68>)
 80006c0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80006c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006c6:	4b0d      	ldr	r3, [pc, #52]	@ (80006fc <MX_DMA_Init+0x68>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80006ce:	603b      	str	r3, [r7, #0]
 80006d0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80006d2:	2200      	movs	r2, #0
 80006d4:	2100      	movs	r1, #0
 80006d6:	200f      	movs	r0, #15
 80006d8:	f001 f89f 	bl	800181a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80006dc:	200f      	movs	r0, #15
 80006de:	f001 f8b8 	bl	8001852 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80006e2:	2200      	movs	r2, #0
 80006e4:	2100      	movs	r1, #0
 80006e6:	2038      	movs	r0, #56	@ 0x38
 80006e8:	f001 f897 	bl	800181a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80006ec:	2038      	movs	r0, #56	@ 0x38
 80006ee:	f001 f8b0 	bl	8001852 <HAL_NVIC_EnableIRQ>

}
 80006f2:	bf00      	nop
 80006f4:	3708      	adds	r7, #8
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	40023800 	.word	0x40023800

08000700 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b088      	sub	sp, #32
 8000704:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000706:	f107 030c 	add.w	r3, r7, #12
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]
 800070e:	605a      	str	r2, [r3, #4]
 8000710:	609a      	str	r2, [r3, #8]
 8000712:	60da      	str	r2, [r3, #12]
 8000714:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	60bb      	str	r3, [r7, #8]
 800071a:	4b27      	ldr	r3, [pc, #156]	@ (80007b8 <MX_GPIO_Init+0xb8>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071e:	4a26      	ldr	r2, [pc, #152]	@ (80007b8 <MX_GPIO_Init+0xb8>)
 8000720:	f043 0304 	orr.w	r3, r3, #4
 8000724:	6313      	str	r3, [r2, #48]	@ 0x30
 8000726:	4b24      	ldr	r3, [pc, #144]	@ (80007b8 <MX_GPIO_Init+0xb8>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072a:	f003 0304 	and.w	r3, r3, #4
 800072e:	60bb      	str	r3, [r7, #8]
 8000730:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	4b20      	ldr	r3, [pc, #128]	@ (80007b8 <MX_GPIO_Init+0xb8>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073a:	4a1f      	ldr	r2, [pc, #124]	@ (80007b8 <MX_GPIO_Init+0xb8>)
 800073c:	f043 0301 	orr.w	r3, r3, #1
 8000740:	6313      	str	r3, [r2, #48]	@ 0x30
 8000742:	4b1d      	ldr	r3, [pc, #116]	@ (80007b8 <MX_GPIO_Init+0xb8>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000746:	f003 0301 	and.w	r3, r3, #1
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	603b      	str	r3, [r7, #0]
 8000752:	4b19      	ldr	r3, [pc, #100]	@ (80007b8 <MX_GPIO_Init+0xb8>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000756:	4a18      	ldr	r2, [pc, #96]	@ (80007b8 <MX_GPIO_Init+0xb8>)
 8000758:	f043 0302 	orr.w	r3, r3, #2
 800075c:	6313      	str	r3, [r2, #48]	@ 0x30
 800075e:	4b16      	ldr	r3, [pc, #88]	@ (80007b8 <MX_GPIO_Init+0xb8>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000762:	f003 0302 	and.w	r3, r3, #2
 8000766:	603b      	str	r3, [r7, #0]
 8000768:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800076a:	2200      	movs	r2, #0
 800076c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000770:	4812      	ldr	r0, [pc, #72]	@ (80007bc <MX_GPIO_Init+0xbc>)
 8000772:	f001 fd7d 	bl	8002270 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000776:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800077a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800077c:	2301      	movs	r3, #1
 800077e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000780:	2300      	movs	r3, #0
 8000782:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000784:	2300      	movs	r3, #0
 8000786:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000788:	f107 030c 	add.w	r3, r7, #12
 800078c:	4619      	mov	r1, r3
 800078e:	480b      	ldr	r0, [pc, #44]	@ (80007bc <MX_GPIO_Init+0xbc>)
 8000790:	f001 fbea 	bl	8001f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY_Pin */
  GPIO_InitStruct.Pin = KEY_Pin;
 8000794:	2301      	movs	r3, #1
 8000796:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000798:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800079c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079e:	2300      	movs	r3, #0
 80007a0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 80007a2:	f107 030c 	add.w	r3, r7, #12
 80007a6:	4619      	mov	r1, r3
 80007a8:	4805      	ldr	r0, [pc, #20]	@ (80007c0 <MX_GPIO_Init+0xc0>)
 80007aa:	f001 fbdd 	bl	8001f68 <HAL_GPIO_Init>

}
 80007ae:	bf00      	nop
 80007b0:	3720      	adds	r7, #32
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	40023800 	.word	0x40023800
 80007bc:	40020800 	.word	0x40020800
 80007c0:	40020000 	.word	0x40020000

080007c4 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_tx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80007c8:	4b13      	ldr	r3, [pc, #76]	@ (8000818 <MX_I2S2_Init+0x54>)
 80007ca:	4a14      	ldr	r2, [pc, #80]	@ (800081c <MX_I2S2_Init+0x58>)
 80007cc:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80007ce:	4b12      	ldr	r3, [pc, #72]	@ (8000818 <MX_I2S2_Init+0x54>)
 80007d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007d4:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80007d6:	4b10      	ldr	r3, [pc, #64]	@ (8000818 <MX_I2S2_Init+0x54>)
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 80007dc:	4b0e      	ldr	r3, [pc, #56]	@ (8000818 <MX_I2S2_Init+0x54>)
 80007de:	2203      	movs	r2, #3
 80007e0:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80007e2:	4b0d      	ldr	r3, [pc, #52]	@ (8000818 <MX_I2S2_Init+0x54>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 80007e8:	4b0b      	ldr	r3, [pc, #44]	@ (8000818 <MX_I2S2_Init+0x54>)
 80007ea:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 80007ee:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80007f0:	4b09      	ldr	r3, [pc, #36]	@ (8000818 <MX_I2S2_Init+0x54>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80007f6:	4b08      	ldr	r3, [pc, #32]	@ (8000818 <MX_I2S2_Init+0x54>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 80007fc:	4b06      	ldr	r3, [pc, #24]	@ (8000818 <MX_I2S2_Init+0x54>)
 80007fe:	2201      	movs	r2, #1
 8000800:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000802:	4805      	ldr	r0, [pc, #20]	@ (8000818 <MX_I2S2_Init+0x54>)
 8000804:	f001 fd68 	bl	80022d8 <HAL_I2S_Init>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 800080e:	f000 f96d 	bl	8000aec <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000812:	bf00      	nop
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	200000d0 	.word	0x200000d0
 800081c:	40003800 	.word	0x40003800

08000820 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b090      	sub	sp, #64	@ 0x40
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000828:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]
 8000830:	605a      	str	r2, [r3, #4]
 8000832:	609a      	str	r2, [r3, #8]
 8000834:	60da      	str	r2, [r3, #12]
 8000836:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000838:	f107 0314 	add.w	r3, r7, #20
 800083c:	2200      	movs	r2, #0
 800083e:	601a      	str	r2, [r3, #0]
 8000840:	605a      	str	r2, [r3, #4]
 8000842:	609a      	str	r2, [r3, #8]
 8000844:	60da      	str	r2, [r3, #12]
 8000846:	611a      	str	r2, [r3, #16]
 8000848:	615a      	str	r2, [r3, #20]
  if(i2sHandle->Instance==SPI2)
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	4a42      	ldr	r2, [pc, #264]	@ (8000958 <HAL_I2S_MspInit+0x138>)
 8000850:	4293      	cmp	r3, r2
 8000852:	d17d      	bne.n	8000950 <HAL_I2S_MspInit+0x130>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000854:	2301      	movs	r3, #1
 8000856:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000858:	23c0      	movs	r3, #192	@ 0xc0
 800085a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 16;
 800085c:	2310      	movs	r3, #16
 800085e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000860:	2302      	movs	r3, #2
 8000862:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000864:	f107 0314 	add.w	r3, r7, #20
 8000868:	4618      	mov	r0, r3
 800086a:	f002 fdf9 	bl	8003460 <HAL_RCCEx_PeriphCLKConfig>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <HAL_I2S_MspInit+0x58>
    {
      Error_Handler();
 8000874:	f000 f93a 	bl	8000aec <Error_Handler>
    }

    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000878:	2300      	movs	r3, #0
 800087a:	613b      	str	r3, [r7, #16]
 800087c:	4b37      	ldr	r3, [pc, #220]	@ (800095c <HAL_I2S_MspInit+0x13c>)
 800087e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000880:	4a36      	ldr	r2, [pc, #216]	@ (800095c <HAL_I2S_MspInit+0x13c>)
 8000882:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000886:	6413      	str	r3, [r2, #64]	@ 0x40
 8000888:	4b34      	ldr	r3, [pc, #208]	@ (800095c <HAL_I2S_MspInit+0x13c>)
 800088a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800088c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000890:	613b      	str	r3, [r7, #16]
 8000892:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000894:	2300      	movs	r3, #0
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	4b30      	ldr	r3, [pc, #192]	@ (800095c <HAL_I2S_MspInit+0x13c>)
 800089a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089c:	4a2f      	ldr	r2, [pc, #188]	@ (800095c <HAL_I2S_MspInit+0x13c>)
 800089e:	f043 0302 	orr.w	r3, r3, #2
 80008a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80008a4:	4b2d      	ldr	r3, [pc, #180]	@ (800095c <HAL_I2S_MspInit+0x13c>)
 80008a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a8:	f003 0302 	and.w	r3, r3, #2
 80008ac:	60fb      	str	r3, [r7, #12]
 80008ae:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB14     ------> I2S2_ext_SD
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80008b0:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 80008b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b6:	2302      	movs	r3, #2
 80008b8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ba:	2300      	movs	r3, #0
 80008bc:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008be:	2300      	movs	r3, #0
 80008c0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008c2:	2305      	movs	r3, #5
 80008c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008c6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80008ca:	4619      	mov	r1, r3
 80008cc:	4824      	ldr	r0, [pc, #144]	@ (8000960 <HAL_I2S_MspInit+0x140>)
 80008ce:	f001 fb4b 	bl	8001f68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80008d2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80008d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d8:	2302      	movs	r3, #2
 80008da:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e0:	2300      	movs	r3, #0
 80008e2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 80008e4:	2306      	movs	r3, #6
 80008e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80008ec:	4619      	mov	r1, r3
 80008ee:	481c      	ldr	r0, [pc, #112]	@ (8000960 <HAL_I2S_MspInit+0x140>)
 80008f0:	f001 fb3a 	bl	8001f68 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 80008f4:	4b1b      	ldr	r3, [pc, #108]	@ (8000964 <HAL_I2S_MspInit+0x144>)
 80008f6:	4a1c      	ldr	r2, [pc, #112]	@ (8000968 <HAL_I2S_MspInit+0x148>)
 80008f8:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 80008fa:	4b1a      	ldr	r3, [pc, #104]	@ (8000964 <HAL_I2S_MspInit+0x144>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000900:	4b18      	ldr	r3, [pc, #96]	@ (8000964 <HAL_I2S_MspInit+0x144>)
 8000902:	2240      	movs	r2, #64	@ 0x40
 8000904:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000906:	4b17      	ldr	r3, [pc, #92]	@ (8000964 <HAL_I2S_MspInit+0x144>)
 8000908:	2200      	movs	r2, #0
 800090a:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800090c:	4b15      	ldr	r3, [pc, #84]	@ (8000964 <HAL_I2S_MspInit+0x144>)
 800090e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000912:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000914:	4b13      	ldr	r3, [pc, #76]	@ (8000964 <HAL_I2S_MspInit+0x144>)
 8000916:	2200      	movs	r2, #0
 8000918:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800091a:	4b12      	ldr	r3, [pc, #72]	@ (8000964 <HAL_I2S_MspInit+0x144>)
 800091c:	2200      	movs	r2, #0
 800091e:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8000920:	4b10      	ldr	r3, [pc, #64]	@ (8000964 <HAL_I2S_MspInit+0x144>)
 8000922:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000926:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000928:	4b0e      	ldr	r3, [pc, #56]	@ (8000964 <HAL_I2S_MspInit+0x144>)
 800092a:	2200      	movs	r2, #0
 800092c:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800092e:	4b0d      	ldr	r3, [pc, #52]	@ (8000964 <HAL_I2S_MspInit+0x144>)
 8000930:	2200      	movs	r2, #0
 8000932:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000934:	480b      	ldr	r0, [pc, #44]	@ (8000964 <HAL_I2S_MspInit+0x144>)
 8000936:	f000 ffa7 	bl	8001888 <HAL_DMA_Init>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <HAL_I2S_MspInit+0x124>
    {
      Error_Handler();
 8000940:	f000 f8d4 	bl	8000aec <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmatx,hdma_spi2_tx);
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	4a07      	ldr	r2, [pc, #28]	@ (8000964 <HAL_I2S_MspInit+0x144>)
 8000948:	639a      	str	r2, [r3, #56]	@ 0x38
 800094a:	4a06      	ldr	r2, [pc, #24]	@ (8000964 <HAL_I2S_MspInit+0x144>)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000950:	bf00      	nop
 8000952:	3740      	adds	r7, #64	@ 0x40
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	40003800 	.word	0x40003800
 800095c:	40023800 	.word	0x40023800
 8000960:	40020400 	.word	0x40020400
 8000964:	20000118 	.word	0x20000118
 8000968:	40026070 	.word	0x40026070

0800096c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000970:	f000 fa0a 	bl	8000d88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000974:	f000 f81c 	bl	80009b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000978:	f7ff fec2 	bl	8000700 <MX_GPIO_Init>
  MX_DMA_Init();
 800097c:	f7ff fe8a 	bl	8000694 <MX_DMA_Init>
  MX_ADC1_Init();
 8000980:	f7ff fdc0 	bl	8000504 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000984:	f000 f964 	bl	8000c50 <MX_TIM2_Init>
  MX_I2S2_Init();
 8000988:	f7ff ff1c 	bl	80007c4 <MX_I2S2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 800098c:	4805      	ldr	r0, [pc, #20]	@ (80009a4 <main+0x38>)
 800098e:	f002 ff09 	bl	80037a4 <HAL_TIM_Base_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) IN_BUFFER, BUFFER_SIZE);
 8000992:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000996:	4904      	ldr	r1, [pc, #16]	@ (80009a8 <main+0x3c>)
 8000998:	4804      	ldr	r0, [pc, #16]	@ (80009ac <main+0x40>)
 800099a:	f000 faab 	bl	8000ef4 <HAL_ADC_Start_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800099e:	bf00      	nop
 80009a0:	e7fd      	b.n	800099e <main+0x32>
 80009a2:	bf00      	nop
 80009a4:	20000980 	.word	0x20000980
 80009a8:	20000178 	.word	0x20000178
 80009ac:	20000028 	.word	0x20000028

080009b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b094      	sub	sp, #80	@ 0x50
 80009b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009b6:	f107 0320 	add.w	r3, r7, #32
 80009ba:	2230      	movs	r2, #48	@ 0x30
 80009bc:	2100      	movs	r1, #0
 80009be:	4618      	mov	r0, r3
 80009c0:	f003 facc 	bl	8003f5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009c4:	f107 030c 	add.w	r3, r7, #12
 80009c8:	2200      	movs	r2, #0
 80009ca:	601a      	str	r2, [r3, #0]
 80009cc:	605a      	str	r2, [r3, #4]
 80009ce:	609a      	str	r2, [r3, #8]
 80009d0:	60da      	str	r2, [r3, #12]
 80009d2:	611a      	str	r2, [r3, #16]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(16);
 80009d4:	4b2b      	ldr	r3, [pc, #172]	@ (8000a84 <SystemClock_Config+0xd4>)
 80009d6:	685b      	ldr	r3, [r3, #4]
 80009d8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80009dc:	4a29      	ldr	r2, [pc, #164]	@ (8000a84 <SystemClock_Config+0xd4>)
 80009de:	f043 0310 	orr.w	r3, r3, #16
 80009e2:	6053      	str	r3, [r2, #4]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 80009e4:	4b27      	ldr	r3, [pc, #156]	@ (8000a84 <SystemClock_Config+0xd4>)
 80009e6:	685b      	ldr	r3, [r3, #4]
 80009e8:	4a26      	ldr	r2, [pc, #152]	@ (8000a84 <SystemClock_Config+0xd4>)
 80009ea:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80009ee:	6053      	str	r3, [r2, #4]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009f0:	2300      	movs	r3, #0
 80009f2:	60bb      	str	r3, [r7, #8]
 80009f4:	4b23      	ldr	r3, [pc, #140]	@ (8000a84 <SystemClock_Config+0xd4>)
 80009f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009f8:	4a22      	ldr	r2, [pc, #136]	@ (8000a84 <SystemClock_Config+0xd4>)
 80009fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a00:	4b20      	ldr	r3, [pc, #128]	@ (8000a84 <SystemClock_Config+0xd4>)
 8000a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a08:	60bb      	str	r3, [r7, #8]
 8000a0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	607b      	str	r3, [r7, #4]
 8000a10:	4b1d      	ldr	r3, [pc, #116]	@ (8000a88 <SystemClock_Config+0xd8>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a1c      	ldr	r2, [pc, #112]	@ (8000a88 <SystemClock_Config+0xd8>)
 8000a16:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000a1a:	6013      	str	r3, [r2, #0]
 8000a1c:	4b1a      	ldr	r3, [pc, #104]	@ (8000a88 <SystemClock_Config+0xd8>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a24:	607b      	str	r3, [r7, #4]
 8000a26:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a30:	2310      	movs	r3, #16
 8000a32:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a34:	2300      	movs	r3, #0
 8000a36:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a3c:	f107 0320 	add.w	r3, r7, #32
 8000a40:	4618      	mov	r0, r3
 8000a42:	f002 f8e9 	bl	8002c18 <HAL_RCC_OscConfig>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000a4c:	f000 f84e 	bl	8000aec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a50:	230f      	movs	r3, #15
 8000a52:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a54:	2300      	movs	r3, #0
 8000a56:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a60:	2300      	movs	r3, #0
 8000a62:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a64:	f107 030c 	add.w	r3, r7, #12
 8000a68:	2100      	movs	r1, #0
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f002 fb4c 	bl	8003108 <HAL_RCC_ClockConfig>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000a76:	f000 f839 	bl	8000aec <Error_Handler>
  }
}
 8000a7a:	bf00      	nop
 8000a7c:	3750      	adds	r7, #80	@ 0x50
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	40023800 	.word	0x40023800
 8000a88:	40007000 	.word	0x40007000

08000a8c <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
uint16_t count = 0;
void HAL_ADC_ConvCpltCallback (ADC_HandleTypeDef * hadc)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a0f      	ldr	r2, [pc, #60]	@ (8000ad8 <HAL_ADC_ConvCpltCallback+0x4c>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d117      	bne.n	8000ace <HAL_ADC_ConvCpltCallback+0x42>
		{
			count++;
 8000a9e:	4b0f      	ldr	r3, [pc, #60]	@ (8000adc <HAL_ADC_ConvCpltCallback+0x50>)
 8000aa0:	881b      	ldrh	r3, [r3, #0]
 8000aa2:	3301      	adds	r3, #1
 8000aa4:	b29a      	uxth	r2, r3
 8000aa6:	4b0d      	ldr	r3, [pc, #52]	@ (8000adc <HAL_ADC_ConvCpltCallback+0x50>)
 8000aa8:	801a      	strh	r2, [r3, #0]
			if (count == 47)
 8000aaa:	4b0c      	ldr	r3, [pc, #48]	@ (8000adc <HAL_ADC_ConvCpltCallback+0x50>)
 8000aac:	881b      	ldrh	r3, [r3, #0]
 8000aae:	2b2f      	cmp	r3, #47	@ 0x2f
 8000ab0:	d107      	bne.n	8000ac2 <HAL_ADC_ConvCpltCallback+0x36>
			{
				count = 0;
 8000ab2:	4b0a      	ldr	r3, [pc, #40]	@ (8000adc <HAL_ADC_ConvCpltCallback+0x50>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	801a      	strh	r2, [r3, #0]
				HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000ab8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000abc:	4808      	ldr	r0, [pc, #32]	@ (8000ae0 <HAL_ADC_ConvCpltCallback+0x54>)
 8000abe:	f001 fbf0 	bl	80022a2 <HAL_GPIO_TogglePin>
			}
			HAL_ADC_Start_DMA(&hadc1, (uint32_t*) IN_BUFFER, BUFFER_SIZE);
 8000ac2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ac6:	4907      	ldr	r1, [pc, #28]	@ (8000ae4 <HAL_ADC_ConvCpltCallback+0x58>)
 8000ac8:	4807      	ldr	r0, [pc, #28]	@ (8000ae8 <HAL_ADC_ConvCpltCallback+0x5c>)
 8000aca:	f000 fa13 	bl	8000ef4 <HAL_ADC_Start_DMA>
		}
}
 8000ace:	bf00      	nop
 8000ad0:	3708      	adds	r7, #8
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	40012000 	.word	0x40012000
 8000adc:	20000978 	.word	0x20000978
 8000ae0:	40020800 	.word	0x40020800
 8000ae4:	20000178 	.word	0x20000178
 8000ae8:	20000028 	.word	0x20000028

08000aec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000af0:	b672      	cpsid	i
}
 8000af2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000af4:	bf00      	nop
 8000af6:	e7fd      	b.n	8000af4 <Error_Handler+0x8>

08000af8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	607b      	str	r3, [r7, #4]
 8000b02:	4b10      	ldr	r3, [pc, #64]	@ (8000b44 <HAL_MspInit+0x4c>)
 8000b04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b06:	4a0f      	ldr	r2, [pc, #60]	@ (8000b44 <HAL_MspInit+0x4c>)
 8000b08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b0e:	4b0d      	ldr	r3, [pc, #52]	@ (8000b44 <HAL_MspInit+0x4c>)
 8000b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b16:	607b      	str	r3, [r7, #4]
 8000b18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	603b      	str	r3, [r7, #0]
 8000b1e:	4b09      	ldr	r3, [pc, #36]	@ (8000b44 <HAL_MspInit+0x4c>)
 8000b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b22:	4a08      	ldr	r2, [pc, #32]	@ (8000b44 <HAL_MspInit+0x4c>)
 8000b24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b28:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b2a:	4b06      	ldr	r3, [pc, #24]	@ (8000b44 <HAL_MspInit+0x4c>)
 8000b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b32:	603b      	str	r3, [r7, #0]
 8000b34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b36:	bf00      	nop
 8000b38:	370c      	adds	r7, #12
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	40023800 	.word	0x40023800

08000b48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b4c:	bf00      	nop
 8000b4e:	e7fd      	b.n	8000b4c <NMI_Handler+0x4>

08000b50 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b54:	bf00      	nop
 8000b56:	e7fd      	b.n	8000b54 <HardFault_Handler+0x4>

08000b58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b5c:	bf00      	nop
 8000b5e:	e7fd      	b.n	8000b5c <MemManage_Handler+0x4>

08000b60 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b64:	bf00      	nop
 8000b66:	e7fd      	b.n	8000b64 <BusFault_Handler+0x4>

08000b68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b6c:	bf00      	nop
 8000b6e:	e7fd      	b.n	8000b6c <UsageFault_Handler+0x4>

08000b70 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b74:	bf00      	nop
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr

08000b7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b82:	bf00      	nop
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr

08000b8c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b90:	bf00      	nop
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr

08000b9a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b9a:	b580      	push	{r7, lr}
 8000b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b9e:	f000 f945 	bl	8000e2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	bd80      	pop	{r7, pc}
	...

08000ba8 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000bac:	4802      	ldr	r0, [pc, #8]	@ (8000bb8 <DMA1_Stream4_IRQHandler+0x10>)
 8000bae:	f000 ff71 	bl	8001a94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	20000118 	.word	0x20000118

08000bbc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000bc0:	4802      	ldr	r0, [pc, #8]	@ (8000bcc <TIM2_IRQHandler+0x10>)
 8000bc2:	f002 fe49 	bl	8003858 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	20000980 	.word	0x20000980

08000bd0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000bd4:	4802      	ldr	r0, [pc, #8]	@ (8000be0 <DMA2_Stream0_IRQHandler+0x10>)
 8000bd6:	f000 ff5d 	bl	8001a94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	20000070 	.word	0x20000070

08000be4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000bf4:	d112      	bne.n	8000c1c <HAL_TIM_PeriodElapsedCallback+0x38>
	{
		count++;
 8000bf6:	4b0b      	ldr	r3, [pc, #44]	@ (8000c24 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	3301      	adds	r3, #1
 8000bfc:	4a09      	ldr	r2, [pc, #36]	@ (8000c24 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000bfe:	6013      	str	r3, [r2, #0]
		if (count == 48484)
 8000c00:	4b08      	ldr	r3, [pc, #32]	@ (8000c24 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f64b 5264 	movw	r2, #48484	@ 0xbd64
 8000c08:	4293      	cmp	r3, r2
 8000c0a:	d107      	bne.n	8000c1c <HAL_TIM_PeriodElapsedCallback+0x38>
		{
			count = 0;
 8000c0c:	4b05      	ldr	r3, [pc, #20]	@ (8000c24 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	601a      	str	r2, [r3, #0]
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000c12:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c16:	4804      	ldr	r0, [pc, #16]	@ (8000c28 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000c18:	f001 fb43 	bl	80022a2 <HAL_GPIO_TogglePin>
		}
	}
}
 8000c1c:	bf00      	nop
 8000c1e:	3708      	adds	r7, #8
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	2000097c 	.word	0x2000097c
 8000c28:	40020800 	.word	0x40020800

08000c2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c30:	4b06      	ldr	r3, [pc, #24]	@ (8000c4c <SystemInit+0x20>)
 8000c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c36:	4a05      	ldr	r2, [pc, #20]	@ (8000c4c <SystemInit+0x20>)
 8000c38:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c3c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	e000ed00 	.word	0xe000ed00

08000c50 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b086      	sub	sp, #24
 8000c54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c56:	f107 0308 	add.w	r3, r7, #8
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	601a      	str	r2, [r3, #0]
 8000c5e:	605a      	str	r2, [r3, #4]
 8000c60:	609a      	str	r2, [r3, #8]
 8000c62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c64:	463b      	mov	r3, r7
 8000c66:	2200      	movs	r2, #0
 8000c68:	601a      	str	r2, [r3, #0]
 8000c6a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c6c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ce4 <MX_TIM2_Init+0x94>)
 8000c6e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c72:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000c74:	4b1b      	ldr	r3, [pc, #108]	@ (8000ce4 <MX_TIM2_Init+0x94>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c7a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ce4 <MX_TIM2_Init+0x94>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 330;
 8000c80:	4b18      	ldr	r3, [pc, #96]	@ (8000ce4 <MX_TIM2_Init+0x94>)
 8000c82:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 8000c86:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c88:	4b16      	ldr	r3, [pc, #88]	@ (8000ce4 <MX_TIM2_Init+0x94>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c8e:	4b15      	ldr	r3, [pc, #84]	@ (8000ce4 <MX_TIM2_Init+0x94>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c94:	4813      	ldr	r0, [pc, #76]	@ (8000ce4 <MX_TIM2_Init+0x94>)
 8000c96:	f002 fd35 	bl	8003704 <HAL_TIM_Base_Init>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000ca0:	f7ff ff24 	bl	8000aec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ca4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ca8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000caa:	f107 0308 	add.w	r3, r7, #8
 8000cae:	4619      	mov	r1, r3
 8000cb0:	480c      	ldr	r0, [pc, #48]	@ (8000ce4 <MX_TIM2_Init+0x94>)
 8000cb2:	f002 fec1 	bl	8003a38 <HAL_TIM_ConfigClockSource>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000cbc:	f7ff ff16 	bl	8000aec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000cc0:	2320      	movs	r3, #32
 8000cc2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cc8:	463b      	mov	r3, r7
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4805      	ldr	r0, [pc, #20]	@ (8000ce4 <MX_TIM2_Init+0x94>)
 8000cce:	f003 f8c3 	bl	8003e58 <HAL_TIMEx_MasterConfigSynchronization>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000cd8:	f7ff ff08 	bl	8000aec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000cdc:	bf00      	nop
 8000cde:	3718      	adds	r7, #24
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	20000980 	.word	0x20000980

08000ce8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b084      	sub	sp, #16
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000cf8:	d115      	bne.n	8000d26 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	60fb      	str	r3, [r7, #12]
 8000cfe:	4b0c      	ldr	r3, [pc, #48]	@ (8000d30 <HAL_TIM_Base_MspInit+0x48>)
 8000d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d02:	4a0b      	ldr	r2, [pc, #44]	@ (8000d30 <HAL_TIM_Base_MspInit+0x48>)
 8000d04:	f043 0301 	orr.w	r3, r3, #1
 8000d08:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d0a:	4b09      	ldr	r3, [pc, #36]	@ (8000d30 <HAL_TIM_Base_MspInit+0x48>)
 8000d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d0e:	f003 0301 	and.w	r3, r3, #1
 8000d12:	60fb      	str	r3, [r7, #12]
 8000d14:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000d16:	2200      	movs	r2, #0
 8000d18:	2100      	movs	r1, #0
 8000d1a:	201c      	movs	r0, #28
 8000d1c:	f000 fd7d 	bl	800181a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d20:	201c      	movs	r0, #28
 8000d22:	f000 fd96 	bl	8001852 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000d26:	bf00      	nop
 8000d28:	3710      	adds	r7, #16
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	40023800 	.word	0x40023800

08000d34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d34:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d6c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d38:	f7ff ff78 	bl	8000c2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d3c:	480c      	ldr	r0, [pc, #48]	@ (8000d70 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d3e:	490d      	ldr	r1, [pc, #52]	@ (8000d74 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d40:	4a0d      	ldr	r2, [pc, #52]	@ (8000d78 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d44:	e002      	b.n	8000d4c <LoopCopyDataInit>

08000d46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d4a:	3304      	adds	r3, #4

08000d4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d50:	d3f9      	bcc.n	8000d46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d52:	4a0a      	ldr	r2, [pc, #40]	@ (8000d7c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d54:	4c0a      	ldr	r4, [pc, #40]	@ (8000d80 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d58:	e001      	b.n	8000d5e <LoopFillZerobss>

08000d5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d5c:	3204      	adds	r2, #4

08000d5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d60:	d3fb      	bcc.n	8000d5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d62:	f003 f903 	bl	8003f6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d66:	f7ff fe01 	bl	800096c <main>
  bx  lr    
 8000d6a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d6c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d74:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d78:	08003ff4 	.word	0x08003ff4
  ldr r2, =_sbss
 8000d7c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d80:	200009cc 	.word	0x200009cc

08000d84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d84:	e7fe      	b.n	8000d84 <ADC_IRQHandler>
	...

08000d88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d8c:	4b0e      	ldr	r3, [pc, #56]	@ (8000dc8 <HAL_Init+0x40>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a0d      	ldr	r2, [pc, #52]	@ (8000dc8 <HAL_Init+0x40>)
 8000d92:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d98:	4b0b      	ldr	r3, [pc, #44]	@ (8000dc8 <HAL_Init+0x40>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a0a      	ldr	r2, [pc, #40]	@ (8000dc8 <HAL_Init+0x40>)
 8000d9e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000da2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000da4:	4b08      	ldr	r3, [pc, #32]	@ (8000dc8 <HAL_Init+0x40>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a07      	ldr	r2, [pc, #28]	@ (8000dc8 <HAL_Init+0x40>)
 8000daa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000db0:	2003      	movs	r0, #3
 8000db2:	f000 fd27 	bl	8001804 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000db6:	200f      	movs	r0, #15
 8000db8:	f000 f808 	bl	8000dcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dbc:	f7ff fe9c 	bl	8000af8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dc0:	2300      	movs	r3, #0
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	40023c00 	.word	0x40023c00

08000dcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dd4:	4b12      	ldr	r3, [pc, #72]	@ (8000e20 <HAL_InitTick+0x54>)
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	4b12      	ldr	r3, [pc, #72]	@ (8000e24 <HAL_InitTick+0x58>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	4619      	mov	r1, r3
 8000dde:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000de2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dea:	4618      	mov	r0, r3
 8000dec:	f000 fd3f 	bl	800186e <HAL_SYSTICK_Config>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000df6:	2301      	movs	r3, #1
 8000df8:	e00e      	b.n	8000e18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	2b0f      	cmp	r3, #15
 8000dfe:	d80a      	bhi.n	8000e16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e00:	2200      	movs	r2, #0
 8000e02:	6879      	ldr	r1, [r7, #4]
 8000e04:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e08:	f000 fd07 	bl	800181a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e0c:	4a06      	ldr	r2, [pc, #24]	@ (8000e28 <HAL_InitTick+0x5c>)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e12:	2300      	movs	r3, #0
 8000e14:	e000      	b.n	8000e18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e16:	2301      	movs	r3, #1
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	3708      	adds	r7, #8
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	20000000 	.word	0x20000000
 8000e24:	20000008 	.word	0x20000008
 8000e28:	20000004 	.word	0x20000004

08000e2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e30:	4b06      	ldr	r3, [pc, #24]	@ (8000e4c <HAL_IncTick+0x20>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	461a      	mov	r2, r3
 8000e36:	4b06      	ldr	r3, [pc, #24]	@ (8000e50 <HAL_IncTick+0x24>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4413      	add	r3, r2
 8000e3c:	4a04      	ldr	r2, [pc, #16]	@ (8000e50 <HAL_IncTick+0x24>)
 8000e3e:	6013      	str	r3, [r2, #0]
}
 8000e40:	bf00      	nop
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	20000008 	.word	0x20000008
 8000e50:	200009c8 	.word	0x200009c8

08000e54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  return uwTick;
 8000e58:	4b03      	ldr	r3, [pc, #12]	@ (8000e68 <HAL_GetTick+0x14>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	200009c8 	.word	0x200009c8

08000e6c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b084      	sub	sp, #16
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e74:	2300      	movs	r3, #0
 8000e76:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d101      	bne.n	8000e82 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	e033      	b.n	8000eea <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d109      	bne.n	8000e9e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e8a:	6878      	ldr	r0, [r7, #4]
 8000e8c:	f7ff fb8c 	bl	80005a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2200      	movs	r2, #0
 8000e94:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2200      	movs	r2, #0
 8000e9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ea2:	f003 0310 	and.w	r3, r3, #16
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d118      	bne.n	8000edc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eae:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000eb2:	f023 0302 	bic.w	r3, r3, #2
 8000eb6:	f043 0202 	orr.w	r2, r3, #2
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000ebe:	6878      	ldr	r0, [r7, #4]
 8000ec0:	f000 fa52 	bl	8001368 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ece:	f023 0303 	bic.w	r3, r3, #3
 8000ed2:	f043 0201 	orr.w	r2, r3, #1
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	641a      	str	r2, [r3, #64]	@ 0x40
 8000eda:	e001      	b.n	8000ee0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000edc:	2301      	movs	r3, #1
 8000ede:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000ee8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3710      	adds	r7, #16
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
	...

08000ef4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b088      	sub	sp, #32
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	60f8      	str	r0, [r7, #12]
 8000efc:	60b9      	str	r1, [r7, #8]
 8000efe:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8000f00:	2300      	movs	r3, #0
 8000f02:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f04:	2300      	movs	r3, #0
 8000f06:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000f0e:	2b01      	cmp	r3, #1
 8000f10:	d101      	bne.n	8000f16 <HAL_ADC_Start_DMA+0x22>
 8000f12:	2302      	movs	r3, #2
 8000f14:	e0d0      	b.n	80010b8 <HAL_ADC_Start_DMA+0x1c4>
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	2201      	movs	r2, #1
 8000f1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	689b      	ldr	r3, [r3, #8]
 8000f24:	f003 0301 	and.w	r3, r3, #1
 8000f28:	2b01      	cmp	r3, #1
 8000f2a:	d018      	beq.n	8000f5e <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	689a      	ldr	r2, [r3, #8]
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f042 0201 	orr.w	r2, r2, #1
 8000f3a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000f3c:	4b60      	ldr	r3, [pc, #384]	@ (80010c0 <HAL_ADC_Start_DMA+0x1cc>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a60      	ldr	r2, [pc, #384]	@ (80010c4 <HAL_ADC_Start_DMA+0x1d0>)
 8000f42:	fba2 2303 	umull	r2, r3, r2, r3
 8000f46:	0c9a      	lsrs	r2, r3, #18
 8000f48:	4613      	mov	r3, r2
 8000f4a:	005b      	lsls	r3, r3, #1
 8000f4c:	4413      	add	r3, r2
 8000f4e:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8000f50:	e002      	b.n	8000f58 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	3b01      	subs	r3, #1
 8000f56:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d1f9      	bne.n	8000f52 <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	689b      	ldr	r3, [r3, #8]
 8000f64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f68:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000f6c:	d107      	bne.n	8000f7e <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	689a      	ldr	r2, [r3, #8]
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000f7c:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	689b      	ldr	r3, [r3, #8]
 8000f84:	f003 0301 	and.w	r3, r3, #1
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	f040 8088 	bne.w	800109e <HAL_ADC_Start_DMA+0x1aa>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f92:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000f96:	f023 0301 	bic.w	r3, r3, #1
 8000f9a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d007      	beq.n	8000fc0 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fb4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000fb8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fc4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000fc8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000fcc:	d106      	bne.n	8000fdc <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fd2:	f023 0206 	bic.w	r2, r3, #6
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	645a      	str	r2, [r3, #68]	@ 0x44
 8000fda:	e002      	b.n	8000fe2 <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	2200      	movs	r2, #0
 8000fe0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000fea:	4b37      	ldr	r3, [pc, #220]	@ (80010c8 <HAL_ADC_Start_DMA+0x1d4>)
 8000fec:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000ff2:	4a36      	ldr	r2, [pc, #216]	@ (80010cc <HAL_ADC_Start_DMA+0x1d8>)
 8000ff4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000ffa:	4a35      	ldr	r2, [pc, #212]	@ (80010d0 <HAL_ADC_Start_DMA+0x1dc>)
 8000ffc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001002:	4a34      	ldr	r2, [pc, #208]	@ (80010d4 <HAL_ADC_Start_DMA+0x1e0>)
 8001004:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800100e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	685a      	ldr	r2, [r3, #4]
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800101e:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	689a      	ldr	r2, [r3, #8]
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800102e:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	334c      	adds	r3, #76	@ 0x4c
 800103a:	4619      	mov	r1, r3
 800103c:	68ba      	ldr	r2, [r7, #8]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	f000 fcd0 	bl	80019e4 <HAL_DMA_Start_IT>
 8001044:	4603      	mov	r3, r0
 8001046:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001048:	69bb      	ldr	r3, [r7, #24]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f003 031f 	and.w	r3, r3, #31
 8001050:	2b00      	cmp	r3, #0
 8001052:	d10f      	bne.n	8001074 <HAL_ADC_Start_DMA+0x180>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	689b      	ldr	r3, [r3, #8]
 800105a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800105e:	2b00      	cmp	r3, #0
 8001060:	d129      	bne.n	80010b6 <HAL_ADC_Start_DMA+0x1c2>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	689a      	ldr	r2, [r3, #8]
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001070:	609a      	str	r2, [r3, #8]
 8001072:	e020      	b.n	80010b6 <HAL_ADC_Start_DMA+0x1c2>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a17      	ldr	r2, [pc, #92]	@ (80010d8 <HAL_ADC_Start_DMA+0x1e4>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d11b      	bne.n	80010b6 <HAL_ADC_Start_DMA+0x1c2>
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	689b      	ldr	r3, [r3, #8]
 8001084:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001088:	2b00      	cmp	r3, #0
 800108a:	d114      	bne.n	80010b6 <HAL_ADC_Start_DMA+0x1c2>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	689a      	ldr	r2, [r3, #8]
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800109a:	609a      	str	r2, [r3, #8]
 800109c:	e00b      	b.n	80010b6 <HAL_ADC_Start_DMA+0x1c2>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010a2:	f043 0210 	orr.w	r2, r3, #16
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ae:	f043 0201 	orr.w	r2, r3, #1
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 80010b6:	7ffb      	ldrb	r3, [r7, #31]
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3720      	adds	r7, #32
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	20000000 	.word	0x20000000
 80010c4:	431bde83 	.word	0x431bde83
 80010c8:	40012300 	.word	0x40012300
 80010cc:	08001561 	.word	0x08001561
 80010d0:	0800161b 	.word	0x0800161b
 80010d4:	08001637 	.word	0x08001637
 80010d8:	40012000 	.word	0x40012000

080010dc <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80010e4:	bf00      	nop
 80010e6:	370c      	adds	r7, #12
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr

080010f0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80010f8:	bf00      	nop
 80010fa:	370c      	adds	r7, #12
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr

08001104 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001104:	b480      	push	{r7}
 8001106:	b085      	sub	sp, #20
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800110e:	2300      	movs	r3, #0
 8001110:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001118:	2b01      	cmp	r3, #1
 800111a:	d101      	bne.n	8001120 <HAL_ADC_ConfigChannel+0x1c>
 800111c:	2302      	movs	r3, #2
 800111e:	e113      	b.n	8001348 <HAL_ADC_ConfigChannel+0x244>
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2201      	movs	r2, #1
 8001124:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	2b09      	cmp	r3, #9
 800112e:	d925      	bls.n	800117c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	68d9      	ldr	r1, [r3, #12]
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	b29b      	uxth	r3, r3
 800113c:	461a      	mov	r2, r3
 800113e:	4613      	mov	r3, r2
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	4413      	add	r3, r2
 8001144:	3b1e      	subs	r3, #30
 8001146:	2207      	movs	r2, #7
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	43da      	mvns	r2, r3
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	400a      	ands	r2, r1
 8001154:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	68d9      	ldr	r1, [r3, #12]
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	689a      	ldr	r2, [r3, #8]
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	b29b      	uxth	r3, r3
 8001166:	4618      	mov	r0, r3
 8001168:	4603      	mov	r3, r0
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	4403      	add	r3, r0
 800116e:	3b1e      	subs	r3, #30
 8001170:	409a      	lsls	r2, r3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	430a      	orrs	r2, r1
 8001178:	60da      	str	r2, [r3, #12]
 800117a:	e022      	b.n	80011c2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	6919      	ldr	r1, [r3, #16]
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	b29b      	uxth	r3, r3
 8001188:	461a      	mov	r2, r3
 800118a:	4613      	mov	r3, r2
 800118c:	005b      	lsls	r3, r3, #1
 800118e:	4413      	add	r3, r2
 8001190:	2207      	movs	r2, #7
 8001192:	fa02 f303 	lsl.w	r3, r2, r3
 8001196:	43da      	mvns	r2, r3
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	400a      	ands	r2, r1
 800119e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	6919      	ldr	r1, [r3, #16]
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	689a      	ldr	r2, [r3, #8]
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	b29b      	uxth	r3, r3
 80011b0:	4618      	mov	r0, r3
 80011b2:	4603      	mov	r3, r0
 80011b4:	005b      	lsls	r3, r3, #1
 80011b6:	4403      	add	r3, r0
 80011b8:	409a      	lsls	r2, r3
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	430a      	orrs	r2, r1
 80011c0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	2b06      	cmp	r3, #6
 80011c8:	d824      	bhi.n	8001214 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	685a      	ldr	r2, [r3, #4]
 80011d4:	4613      	mov	r3, r2
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	4413      	add	r3, r2
 80011da:	3b05      	subs	r3, #5
 80011dc:	221f      	movs	r2, #31
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	43da      	mvns	r2, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	400a      	ands	r2, r1
 80011ea:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	b29b      	uxth	r3, r3
 80011f8:	4618      	mov	r0, r3
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	685a      	ldr	r2, [r3, #4]
 80011fe:	4613      	mov	r3, r2
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	4413      	add	r3, r2
 8001204:	3b05      	subs	r3, #5
 8001206:	fa00 f203 	lsl.w	r2, r0, r3
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	430a      	orrs	r2, r1
 8001210:	635a      	str	r2, [r3, #52]	@ 0x34
 8001212:	e04c      	b.n	80012ae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	2b0c      	cmp	r3, #12
 800121a:	d824      	bhi.n	8001266 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	685a      	ldr	r2, [r3, #4]
 8001226:	4613      	mov	r3, r2
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	4413      	add	r3, r2
 800122c:	3b23      	subs	r3, #35	@ 0x23
 800122e:	221f      	movs	r2, #31
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	43da      	mvns	r2, r3
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	400a      	ands	r2, r1
 800123c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	b29b      	uxth	r3, r3
 800124a:	4618      	mov	r0, r3
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685a      	ldr	r2, [r3, #4]
 8001250:	4613      	mov	r3, r2
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	4413      	add	r3, r2
 8001256:	3b23      	subs	r3, #35	@ 0x23
 8001258:	fa00 f203 	lsl.w	r2, r0, r3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	430a      	orrs	r2, r1
 8001262:	631a      	str	r2, [r3, #48]	@ 0x30
 8001264:	e023      	b.n	80012ae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685a      	ldr	r2, [r3, #4]
 8001270:	4613      	mov	r3, r2
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	4413      	add	r3, r2
 8001276:	3b41      	subs	r3, #65	@ 0x41
 8001278:	221f      	movs	r2, #31
 800127a:	fa02 f303 	lsl.w	r3, r2, r3
 800127e:	43da      	mvns	r2, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	400a      	ands	r2, r1
 8001286:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	b29b      	uxth	r3, r3
 8001294:	4618      	mov	r0, r3
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	685a      	ldr	r2, [r3, #4]
 800129a:	4613      	mov	r3, r2
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	4413      	add	r3, r2
 80012a0:	3b41      	subs	r3, #65	@ 0x41
 80012a2:	fa00 f203 	lsl.w	r2, r0, r3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	430a      	orrs	r2, r1
 80012ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80012ae:	4b29      	ldr	r3, [pc, #164]	@ (8001354 <HAL_ADC_ConfigChannel+0x250>)
 80012b0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a28      	ldr	r2, [pc, #160]	@ (8001358 <HAL_ADC_ConfigChannel+0x254>)
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d10f      	bne.n	80012dc <HAL_ADC_ConfigChannel+0x1d8>
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	2b12      	cmp	r3, #18
 80012c2:	d10b      	bne.n	80012dc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a1d      	ldr	r2, [pc, #116]	@ (8001358 <HAL_ADC_ConfigChannel+0x254>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d12b      	bne.n	800133e <HAL_ADC_ConfigChannel+0x23a>
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a1c      	ldr	r2, [pc, #112]	@ (800135c <HAL_ADC_ConfigChannel+0x258>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d003      	beq.n	80012f8 <HAL_ADC_ConfigChannel+0x1f4>
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	2b11      	cmp	r3, #17
 80012f6:	d122      	bne.n	800133e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a11      	ldr	r2, [pc, #68]	@ (800135c <HAL_ADC_ConfigChannel+0x258>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d111      	bne.n	800133e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800131a:	4b11      	ldr	r3, [pc, #68]	@ (8001360 <HAL_ADC_ConfigChannel+0x25c>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a11      	ldr	r2, [pc, #68]	@ (8001364 <HAL_ADC_ConfigChannel+0x260>)
 8001320:	fba2 2303 	umull	r2, r3, r2, r3
 8001324:	0c9a      	lsrs	r2, r3, #18
 8001326:	4613      	mov	r3, r2
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	4413      	add	r3, r2
 800132c:	005b      	lsls	r3, r3, #1
 800132e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001330:	e002      	b.n	8001338 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	3b01      	subs	r3, #1
 8001336:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d1f9      	bne.n	8001332 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2200      	movs	r2, #0
 8001342:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001346:	2300      	movs	r3, #0
}
 8001348:	4618      	mov	r0, r3
 800134a:	3714      	adds	r7, #20
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr
 8001354:	40012300 	.word	0x40012300
 8001358:	40012000 	.word	0x40012000
 800135c:	10000012 	.word	0x10000012
 8001360:	20000000 	.word	0x20000000
 8001364:	431bde83 	.word	0x431bde83

08001368 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001368:	b480      	push	{r7}
 800136a:	b085      	sub	sp, #20
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001370:	4b79      	ldr	r3, [pc, #484]	@ (8001558 <ADC_Init+0x1f0>)
 8001372:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	685a      	ldr	r2, [r3, #4]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	431a      	orrs	r2, r3
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	685a      	ldr	r2, [r3, #4]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800139c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	6859      	ldr	r1, [r3, #4]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	691b      	ldr	r3, [r3, #16]
 80013a8:	021a      	lsls	r2, r3, #8
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	430a      	orrs	r2, r1
 80013b0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	685a      	ldr	r2, [r3, #4]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80013c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	6859      	ldr	r1, [r3, #4]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	689a      	ldr	r2, [r3, #8]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	430a      	orrs	r2, r1
 80013d2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	689a      	ldr	r2, [r3, #8]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80013e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	6899      	ldr	r1, [r3, #8]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	68da      	ldr	r2, [r3, #12]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	430a      	orrs	r2, r1
 80013f4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013fa:	4a58      	ldr	r2, [pc, #352]	@ (800155c <ADC_Init+0x1f4>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d022      	beq.n	8001446 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	689a      	ldr	r2, [r3, #8]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800140e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	6899      	ldr	r1, [r3, #8]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	430a      	orrs	r2, r1
 8001420:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	689a      	ldr	r2, [r3, #8]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001430:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	6899      	ldr	r1, [r3, #8]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	430a      	orrs	r2, r1
 8001442:	609a      	str	r2, [r3, #8]
 8001444:	e00f      	b.n	8001466 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	689a      	ldr	r2, [r3, #8]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001454:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	689a      	ldr	r2, [r3, #8]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001464:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	689a      	ldr	r2, [r3, #8]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f022 0202 	bic.w	r2, r2, #2
 8001474:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	6899      	ldr	r1, [r3, #8]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	7e1b      	ldrb	r3, [r3, #24]
 8001480:	005a      	lsls	r2, r3, #1
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	430a      	orrs	r2, r1
 8001488:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d01b      	beq.n	80014cc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	685a      	ldr	r2, [r3, #4]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80014a2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	685a      	ldr	r2, [r3, #4]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80014b2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	6859      	ldr	r1, [r3, #4]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014be:	3b01      	subs	r3, #1
 80014c0:	035a      	lsls	r2, r3, #13
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	430a      	orrs	r2, r1
 80014c8:	605a      	str	r2, [r3, #4]
 80014ca:	e007      	b.n	80014dc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	685a      	ldr	r2, [r3, #4]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80014da:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80014ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	69db      	ldr	r3, [r3, #28]
 80014f6:	3b01      	subs	r3, #1
 80014f8:	051a      	lsls	r2, r3, #20
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	430a      	orrs	r2, r1
 8001500:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	689a      	ldr	r2, [r3, #8]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001510:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	6899      	ldr	r1, [r3, #8]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800151e:	025a      	lsls	r2, r3, #9
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	430a      	orrs	r2, r1
 8001526:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	689a      	ldr	r2, [r3, #8]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001536:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	6899      	ldr	r1, [r3, #8]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	695b      	ldr	r3, [r3, #20]
 8001542:	029a      	lsls	r2, r3, #10
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	430a      	orrs	r2, r1
 800154a:	609a      	str	r2, [r3, #8]
}
 800154c:	bf00      	nop
 800154e:	3714      	adds	r7, #20
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr
 8001558:	40012300 	.word	0x40012300
 800155c:	0f000001 	.word	0x0f000001

08001560 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800156c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001572:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001576:	2b00      	cmp	r3, #0
 8001578:	d13c      	bne.n	80015f4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800157e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001590:	2b00      	cmp	r3, #0
 8001592:	d12b      	bne.n	80015ec <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001598:	2b00      	cmp	r3, #0
 800159a:	d127      	bne.n	80015ec <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015a2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d006      	beq.n	80015b8 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d119      	bne.n	80015ec <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	685a      	ldr	r2, [r3, #4]
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f022 0220 	bic.w	r2, r2, #32
 80015c6:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015cc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015d8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d105      	bne.n	80015ec <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015e4:	f043 0201 	orr.w	r2, r3, #1
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80015ec:	68f8      	ldr	r0, [r7, #12]
 80015ee:	f7ff fa4d 	bl	8000a8c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80015f2:	e00e      	b.n	8001612 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015f8:	f003 0310 	and.w	r3, r3, #16
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d003      	beq.n	8001608 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001600:	68f8      	ldr	r0, [r7, #12]
 8001602:	f7ff fd75 	bl	80010f0 <HAL_ADC_ErrorCallback>
}
 8001606:	e004      	b.n	8001612 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800160c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	4798      	blx	r3
}
 8001612:	bf00      	nop
 8001614:	3710      	adds	r7, #16
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}

0800161a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800161a:	b580      	push	{r7, lr}
 800161c:	b084      	sub	sp, #16
 800161e:	af00      	add	r7, sp, #0
 8001620:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001626:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001628:	68f8      	ldr	r0, [r7, #12]
 800162a:	f7ff fd57 	bl	80010dc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800162e:	bf00      	nop
 8001630:	3710      	adds	r7, #16
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}

08001636 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001636:	b580      	push	{r7, lr}
 8001638:	b084      	sub	sp, #16
 800163a:	af00      	add	r7, sp, #0
 800163c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001642:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	2240      	movs	r2, #64	@ 0x40
 8001648:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800164e:	f043 0204 	orr.w	r2, r3, #4
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001656:	68f8      	ldr	r0, [r7, #12]
 8001658:	f7ff fd4a 	bl	80010f0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800165c:	bf00      	nop
 800165e:	3710      	adds	r7, #16
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}

08001664 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001664:	b480      	push	{r7}
 8001666:	b085      	sub	sp, #20
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	f003 0307 	and.w	r3, r3, #7
 8001672:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001674:	4b0c      	ldr	r3, [pc, #48]	@ (80016a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800167a:	68ba      	ldr	r2, [r7, #8]
 800167c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001680:	4013      	ands	r3, r2
 8001682:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800168c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001690:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001694:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001696:	4a04      	ldr	r2, [pc, #16]	@ (80016a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	60d3      	str	r3, [r2, #12]
}
 800169c:	bf00      	nop
 800169e:	3714      	adds	r7, #20
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr
 80016a8:	e000ed00 	.word	0xe000ed00

080016ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016b0:	4b04      	ldr	r3, [pc, #16]	@ (80016c4 <__NVIC_GetPriorityGrouping+0x18>)
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	0a1b      	lsrs	r3, r3, #8
 80016b6:	f003 0307 	and.w	r3, r3, #7
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr
 80016c4:	e000ed00 	.word	0xe000ed00

080016c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	4603      	mov	r3, r0
 80016d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	db0b      	blt.n	80016f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016da:	79fb      	ldrb	r3, [r7, #7]
 80016dc:	f003 021f 	and.w	r2, r3, #31
 80016e0:	4907      	ldr	r1, [pc, #28]	@ (8001700 <__NVIC_EnableIRQ+0x38>)
 80016e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e6:	095b      	lsrs	r3, r3, #5
 80016e8:	2001      	movs	r0, #1
 80016ea:	fa00 f202 	lsl.w	r2, r0, r2
 80016ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016f2:	bf00      	nop
 80016f4:	370c      	adds	r7, #12
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	e000e100 	.word	0xe000e100

08001704 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	4603      	mov	r3, r0
 800170c:	6039      	str	r1, [r7, #0]
 800170e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001710:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001714:	2b00      	cmp	r3, #0
 8001716:	db0a      	blt.n	800172e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	b2da      	uxtb	r2, r3
 800171c:	490c      	ldr	r1, [pc, #48]	@ (8001750 <__NVIC_SetPriority+0x4c>)
 800171e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001722:	0112      	lsls	r2, r2, #4
 8001724:	b2d2      	uxtb	r2, r2
 8001726:	440b      	add	r3, r1
 8001728:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800172c:	e00a      	b.n	8001744 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	b2da      	uxtb	r2, r3
 8001732:	4908      	ldr	r1, [pc, #32]	@ (8001754 <__NVIC_SetPriority+0x50>)
 8001734:	79fb      	ldrb	r3, [r7, #7]
 8001736:	f003 030f 	and.w	r3, r3, #15
 800173a:	3b04      	subs	r3, #4
 800173c:	0112      	lsls	r2, r2, #4
 800173e:	b2d2      	uxtb	r2, r2
 8001740:	440b      	add	r3, r1
 8001742:	761a      	strb	r2, [r3, #24]
}
 8001744:	bf00      	nop
 8001746:	370c      	adds	r7, #12
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr
 8001750:	e000e100 	.word	0xe000e100
 8001754:	e000ed00 	.word	0xe000ed00

08001758 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001758:	b480      	push	{r7}
 800175a:	b089      	sub	sp, #36	@ 0x24
 800175c:	af00      	add	r7, sp, #0
 800175e:	60f8      	str	r0, [r7, #12]
 8001760:	60b9      	str	r1, [r7, #8]
 8001762:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	f003 0307 	and.w	r3, r3, #7
 800176a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800176c:	69fb      	ldr	r3, [r7, #28]
 800176e:	f1c3 0307 	rsb	r3, r3, #7
 8001772:	2b04      	cmp	r3, #4
 8001774:	bf28      	it	cs
 8001776:	2304      	movcs	r3, #4
 8001778:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	3304      	adds	r3, #4
 800177e:	2b06      	cmp	r3, #6
 8001780:	d902      	bls.n	8001788 <NVIC_EncodePriority+0x30>
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	3b03      	subs	r3, #3
 8001786:	e000      	b.n	800178a <NVIC_EncodePriority+0x32>
 8001788:	2300      	movs	r3, #0
 800178a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800178c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001790:	69bb      	ldr	r3, [r7, #24]
 8001792:	fa02 f303 	lsl.w	r3, r2, r3
 8001796:	43da      	mvns	r2, r3
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	401a      	ands	r2, r3
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017a0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	fa01 f303 	lsl.w	r3, r1, r3
 80017aa:	43d9      	mvns	r1, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b0:	4313      	orrs	r3, r2
         );
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3724      	adds	r7, #36	@ 0x24
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
	...

080017c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	3b01      	subs	r3, #1
 80017cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80017d0:	d301      	bcc.n	80017d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017d2:	2301      	movs	r3, #1
 80017d4:	e00f      	b.n	80017f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001800 <SysTick_Config+0x40>)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	3b01      	subs	r3, #1
 80017dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017de:	210f      	movs	r1, #15
 80017e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80017e4:	f7ff ff8e 	bl	8001704 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017e8:	4b05      	ldr	r3, [pc, #20]	@ (8001800 <SysTick_Config+0x40>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017ee:	4b04      	ldr	r3, [pc, #16]	@ (8001800 <SysTick_Config+0x40>)
 80017f0:	2207      	movs	r2, #7
 80017f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017f4:	2300      	movs	r3, #0
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	e000e010 	.word	0xe000e010

08001804 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	f7ff ff29 	bl	8001664 <__NVIC_SetPriorityGrouping>
}
 8001812:	bf00      	nop
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800181a:	b580      	push	{r7, lr}
 800181c:	b086      	sub	sp, #24
 800181e:	af00      	add	r7, sp, #0
 8001820:	4603      	mov	r3, r0
 8001822:	60b9      	str	r1, [r7, #8]
 8001824:	607a      	str	r2, [r7, #4]
 8001826:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001828:	2300      	movs	r3, #0
 800182a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800182c:	f7ff ff3e 	bl	80016ac <__NVIC_GetPriorityGrouping>
 8001830:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	68b9      	ldr	r1, [r7, #8]
 8001836:	6978      	ldr	r0, [r7, #20]
 8001838:	f7ff ff8e 	bl	8001758 <NVIC_EncodePriority>
 800183c:	4602      	mov	r2, r0
 800183e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001842:	4611      	mov	r1, r2
 8001844:	4618      	mov	r0, r3
 8001846:	f7ff ff5d 	bl	8001704 <__NVIC_SetPriority>
}
 800184a:	bf00      	nop
 800184c:	3718      	adds	r7, #24
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}

08001852 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001852:	b580      	push	{r7, lr}
 8001854:	b082      	sub	sp, #8
 8001856:	af00      	add	r7, sp, #0
 8001858:	4603      	mov	r3, r0
 800185a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800185c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff ff31 	bl	80016c8 <__NVIC_EnableIRQ>
}
 8001866:	bf00      	nop
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}

0800186e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800186e:	b580      	push	{r7, lr}
 8001870:	b082      	sub	sp, #8
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f7ff ffa2 	bl	80017c0 <SysTick_Config>
 800187c:	4603      	mov	r3, r0
}
 800187e:	4618      	mov	r0, r3
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
	...

08001888 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b086      	sub	sp, #24
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001890:	2300      	movs	r3, #0
 8001892:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001894:	f7ff fade 	bl	8000e54 <HAL_GetTick>
 8001898:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d101      	bne.n	80018a4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e099      	b.n	80019d8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2202      	movs	r2, #2
 80018a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2200      	movs	r2, #0
 80018b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f022 0201 	bic.w	r2, r2, #1
 80018c2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018c4:	e00f      	b.n	80018e6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80018c6:	f7ff fac5 	bl	8000e54 <HAL_GetTick>
 80018ca:	4602      	mov	r2, r0
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	2b05      	cmp	r3, #5
 80018d2:	d908      	bls.n	80018e6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2220      	movs	r2, #32
 80018d8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2203      	movs	r2, #3
 80018de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e078      	b.n	80019d8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 0301 	and.w	r3, r3, #1
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d1e8      	bne.n	80018c6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80018fc:	697a      	ldr	r2, [r7, #20]
 80018fe:	4b38      	ldr	r3, [pc, #224]	@ (80019e0 <HAL_DMA_Init+0x158>)
 8001900:	4013      	ands	r3, r2
 8001902:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	685a      	ldr	r2, [r3, #4]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001912:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	691b      	ldr	r3, [r3, #16]
 8001918:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800191e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	699b      	ldr	r3, [r3, #24]
 8001924:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800192a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6a1b      	ldr	r3, [r3, #32]
 8001930:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001932:	697a      	ldr	r2, [r7, #20]
 8001934:	4313      	orrs	r3, r2
 8001936:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800193c:	2b04      	cmp	r3, #4
 800193e:	d107      	bne.n	8001950 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001948:	4313      	orrs	r3, r2
 800194a:	697a      	ldr	r2, [r7, #20]
 800194c:	4313      	orrs	r3, r2
 800194e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	697a      	ldr	r2, [r7, #20]
 8001956:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	695b      	ldr	r3, [r3, #20]
 800195e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	f023 0307 	bic.w	r3, r3, #7
 8001966:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800196c:	697a      	ldr	r2, [r7, #20]
 800196e:	4313      	orrs	r3, r2
 8001970:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001976:	2b04      	cmp	r3, #4
 8001978:	d117      	bne.n	80019aa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800197e:	697a      	ldr	r2, [r7, #20]
 8001980:	4313      	orrs	r3, r2
 8001982:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001988:	2b00      	cmp	r3, #0
 800198a:	d00e      	beq.n	80019aa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	f000 fa6f 	bl	8001e70 <DMA_CheckFifoParam>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d008      	beq.n	80019aa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2240      	movs	r2, #64	@ 0x40
 800199c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2201      	movs	r2, #1
 80019a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80019a6:	2301      	movs	r3, #1
 80019a8:	e016      	b.n	80019d8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	697a      	ldr	r2, [r7, #20]
 80019b0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f000 fa26 	bl	8001e04 <DMA_CalcBaseAndBitshift>
 80019b8:	4603      	mov	r3, r0
 80019ba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019c0:	223f      	movs	r2, #63	@ 0x3f
 80019c2:	409a      	lsls	r2, r3
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2200      	movs	r2, #0
 80019cc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2201      	movs	r2, #1
 80019d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80019d6:	2300      	movs	r3, #0
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3718      	adds	r7, #24
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	f010803f 	.word	0xf010803f

080019e4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b086      	sub	sp, #24
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	60f8      	str	r0, [r7, #12]
 80019ec:	60b9      	str	r1, [r7, #8]
 80019ee:	607a      	str	r2, [r7, #4]
 80019f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80019f2:	2300      	movs	r3, #0
 80019f4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019fa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d101      	bne.n	8001a0a <HAL_DMA_Start_IT+0x26>
 8001a06:	2302      	movs	r3, #2
 8001a08:	e040      	b.n	8001a8c <HAL_DMA_Start_IT+0xa8>
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d12f      	bne.n	8001a7e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	2202      	movs	r2, #2
 8001a22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	68b9      	ldr	r1, [r7, #8]
 8001a32:	68f8      	ldr	r0, [r7, #12]
 8001a34:	f000 f9b8 	bl	8001da8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a3c:	223f      	movs	r2, #63	@ 0x3f
 8001a3e:	409a      	lsls	r2, r3
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f042 0216 	orr.w	r2, r2, #22
 8001a52:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d007      	beq.n	8001a6c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f042 0208 	orr.w	r2, r2, #8
 8001a6a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f042 0201 	orr.w	r2, r2, #1
 8001a7a:	601a      	str	r2, [r3, #0]
 8001a7c:	e005      	b.n	8001a8a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	2200      	movs	r2, #0
 8001a82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001a86:	2302      	movs	r3, #2
 8001a88:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001a8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3718      	adds	r7, #24
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b086      	sub	sp, #24
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001aa0:	4b8e      	ldr	r3, [pc, #568]	@ (8001cdc <HAL_DMA_IRQHandler+0x248>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a8e      	ldr	r2, [pc, #568]	@ (8001ce0 <HAL_DMA_IRQHandler+0x24c>)
 8001aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8001aaa:	0a9b      	lsrs	r3, r3, #10
 8001aac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ab2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001abe:	2208      	movs	r2, #8
 8001ac0:	409a      	lsls	r2, r3
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d01a      	beq.n	8001b00 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 0304 	and.w	r3, r3, #4
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d013      	beq.n	8001b00 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f022 0204 	bic.w	r2, r2, #4
 8001ae6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001aec:	2208      	movs	r2, #8
 8001aee:	409a      	lsls	r2, r3
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001af8:	f043 0201 	orr.w	r2, r3, #1
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b04:	2201      	movs	r2, #1
 8001b06:	409a      	lsls	r2, r3
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d012      	beq.n	8001b36 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	695b      	ldr	r3, [r3, #20]
 8001b16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d00b      	beq.n	8001b36 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b22:	2201      	movs	r2, #1
 8001b24:	409a      	lsls	r2, r3
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b2e:	f043 0202 	orr.w	r2, r3, #2
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b3a:	2204      	movs	r2, #4
 8001b3c:	409a      	lsls	r2, r3
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	4013      	ands	r3, r2
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d012      	beq.n	8001b6c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 0302 	and.w	r3, r3, #2
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d00b      	beq.n	8001b6c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b58:	2204      	movs	r2, #4
 8001b5a:	409a      	lsls	r2, r3
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b64:	f043 0204 	orr.w	r2, r3, #4
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b70:	2210      	movs	r2, #16
 8001b72:	409a      	lsls	r2, r3
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	4013      	ands	r3, r2
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d043      	beq.n	8001c04 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0308 	and.w	r3, r3, #8
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d03c      	beq.n	8001c04 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b8e:	2210      	movs	r2, #16
 8001b90:	409a      	lsls	r2, r3
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d018      	beq.n	8001bd6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d108      	bne.n	8001bc4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d024      	beq.n	8001c04 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	4798      	blx	r3
 8001bc2:	e01f      	b.n	8001c04 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d01b      	beq.n	8001c04 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	4798      	blx	r3
 8001bd4:	e016      	b.n	8001c04 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d107      	bne.n	8001bf4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f022 0208 	bic.w	r2, r2, #8
 8001bf2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d003      	beq.n	8001c04 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c08:	2220      	movs	r2, #32
 8001c0a:	409a      	lsls	r2, r3
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	4013      	ands	r3, r2
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	f000 808f 	beq.w	8001d34 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 0310 	and.w	r3, r3, #16
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	f000 8087 	beq.w	8001d34 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c2a:	2220      	movs	r2, #32
 8001c2c:	409a      	lsls	r2, r3
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	2b05      	cmp	r3, #5
 8001c3c:	d136      	bne.n	8001cac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f022 0216 	bic.w	r2, r2, #22
 8001c4c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	695a      	ldr	r2, [r3, #20]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001c5c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d103      	bne.n	8001c6e <HAL_DMA_IRQHandler+0x1da>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d007      	beq.n	8001c7e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f022 0208 	bic.w	r2, r2, #8
 8001c7c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c82:	223f      	movs	r2, #63	@ 0x3f
 8001c84:	409a      	lsls	r2, r3
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2200      	movs	r2, #0
 8001c96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d07e      	beq.n	8001da0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	4798      	blx	r3
        }
        return;
 8001caa:	e079      	b.n	8001da0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d01d      	beq.n	8001cf6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d10d      	bne.n	8001ce4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d031      	beq.n	8001d34 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	4798      	blx	r3
 8001cd8:	e02c      	b.n	8001d34 <HAL_DMA_IRQHandler+0x2a0>
 8001cda:	bf00      	nop
 8001cdc:	20000000 	.word	0x20000000
 8001ce0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d023      	beq.n	8001d34 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	4798      	blx	r3
 8001cf4:	e01e      	b.n	8001d34 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d10f      	bne.n	8001d24 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f022 0210 	bic.w	r2, r2, #16
 8001d12:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2201      	movs	r2, #1
 8001d18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d003      	beq.n	8001d34 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d032      	beq.n	8001da2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d40:	f003 0301 	and.w	r3, r3, #1
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d022      	beq.n	8001d8e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2205      	movs	r2, #5
 8001d4c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f022 0201 	bic.w	r2, r2, #1
 8001d5e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	3301      	adds	r3, #1
 8001d64:	60bb      	str	r3, [r7, #8]
 8001d66:	697a      	ldr	r2, [r7, #20]
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d307      	bcc.n	8001d7c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0301 	and.w	r3, r3, #1
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d1f2      	bne.n	8001d60 <HAL_DMA_IRQHandler+0x2cc>
 8001d7a:	e000      	b.n	8001d7e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001d7c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2201      	movs	r2, #1
 8001d82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d005      	beq.n	8001da2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	4798      	blx	r3
 8001d9e:	e000      	b.n	8001da2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001da0:	bf00      	nop
    }
  }
}
 8001da2:	3718      	adds	r7, #24
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b085      	sub	sp, #20
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	60f8      	str	r0, [r7, #12]
 8001db0:	60b9      	str	r1, [r7, #8]
 8001db2:	607a      	str	r2, [r7, #4]
 8001db4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001dc4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	683a      	ldr	r2, [r7, #0]
 8001dcc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	2b40      	cmp	r3, #64	@ 0x40
 8001dd4:	d108      	bne.n	8001de8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	68ba      	ldr	r2, [r7, #8]
 8001de4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001de6:	e007      	b.n	8001df8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	68ba      	ldr	r2, [r7, #8]
 8001dee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	687a      	ldr	r2, [r7, #4]
 8001df6:	60da      	str	r2, [r3, #12]
}
 8001df8:	bf00      	nop
 8001dfa:	3714      	adds	r7, #20
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr

08001e04 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b085      	sub	sp, #20
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	3b10      	subs	r3, #16
 8001e14:	4a14      	ldr	r2, [pc, #80]	@ (8001e68 <DMA_CalcBaseAndBitshift+0x64>)
 8001e16:	fba2 2303 	umull	r2, r3, r2, r3
 8001e1a:	091b      	lsrs	r3, r3, #4
 8001e1c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001e1e:	4a13      	ldr	r2, [pc, #76]	@ (8001e6c <DMA_CalcBaseAndBitshift+0x68>)
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	4413      	add	r3, r2
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	461a      	mov	r2, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2b03      	cmp	r3, #3
 8001e30:	d909      	bls.n	8001e46 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001e3a:	f023 0303 	bic.w	r3, r3, #3
 8001e3e:	1d1a      	adds	r2, r3, #4
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	659a      	str	r2, [r3, #88]	@ 0x58
 8001e44:	e007      	b.n	8001e56 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001e4e:	f023 0303 	bic.w	r3, r3, #3
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3714      	adds	r7, #20
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	aaaaaaab 	.word	0xaaaaaaab
 8001e6c:	08003fdc 	.word	0x08003fdc

08001e70 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b085      	sub	sp, #20
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e80:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	699b      	ldr	r3, [r3, #24]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d11f      	bne.n	8001eca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	2b03      	cmp	r3, #3
 8001e8e:	d856      	bhi.n	8001f3e <DMA_CheckFifoParam+0xce>
 8001e90:	a201      	add	r2, pc, #4	@ (adr r2, 8001e98 <DMA_CheckFifoParam+0x28>)
 8001e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e96:	bf00      	nop
 8001e98:	08001ea9 	.word	0x08001ea9
 8001e9c:	08001ebb 	.word	0x08001ebb
 8001ea0:	08001ea9 	.word	0x08001ea9
 8001ea4:	08001f3f 	.word	0x08001f3f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d046      	beq.n	8001f42 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001eb8:	e043      	b.n	8001f42 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ebe:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001ec2:	d140      	bne.n	8001f46 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ec8:	e03d      	b.n	8001f46 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	699b      	ldr	r3, [r3, #24]
 8001ece:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001ed2:	d121      	bne.n	8001f18 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	2b03      	cmp	r3, #3
 8001ed8:	d837      	bhi.n	8001f4a <DMA_CheckFifoParam+0xda>
 8001eda:	a201      	add	r2, pc, #4	@ (adr r2, 8001ee0 <DMA_CheckFifoParam+0x70>)
 8001edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ee0:	08001ef1 	.word	0x08001ef1
 8001ee4:	08001ef7 	.word	0x08001ef7
 8001ee8:	08001ef1 	.word	0x08001ef1
 8001eec:	08001f09 	.word	0x08001f09
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	73fb      	strb	r3, [r7, #15]
      break;
 8001ef4:	e030      	b.n	8001f58 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001efa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d025      	beq.n	8001f4e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f06:	e022      	b.n	8001f4e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f0c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001f10:	d11f      	bne.n	8001f52 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001f16:	e01c      	b.n	8001f52 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d903      	bls.n	8001f26 <DMA_CheckFifoParam+0xb6>
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	2b03      	cmp	r3, #3
 8001f22:	d003      	beq.n	8001f2c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001f24:	e018      	b.n	8001f58 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	73fb      	strb	r3, [r7, #15]
      break;
 8001f2a:	e015      	b.n	8001f58 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f30:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d00e      	beq.n	8001f56 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	73fb      	strb	r3, [r7, #15]
      break;
 8001f3c:	e00b      	b.n	8001f56 <DMA_CheckFifoParam+0xe6>
      break;
 8001f3e:	bf00      	nop
 8001f40:	e00a      	b.n	8001f58 <DMA_CheckFifoParam+0xe8>
      break;
 8001f42:	bf00      	nop
 8001f44:	e008      	b.n	8001f58 <DMA_CheckFifoParam+0xe8>
      break;
 8001f46:	bf00      	nop
 8001f48:	e006      	b.n	8001f58 <DMA_CheckFifoParam+0xe8>
      break;
 8001f4a:	bf00      	nop
 8001f4c:	e004      	b.n	8001f58 <DMA_CheckFifoParam+0xe8>
      break;
 8001f4e:	bf00      	nop
 8001f50:	e002      	b.n	8001f58 <DMA_CheckFifoParam+0xe8>
      break;   
 8001f52:	bf00      	nop
 8001f54:	e000      	b.n	8001f58 <DMA_CheckFifoParam+0xe8>
      break;
 8001f56:	bf00      	nop
    }
  } 
  
  return status; 
 8001f58:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3714      	adds	r7, #20
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop

08001f68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b089      	sub	sp, #36	@ 0x24
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f72:	2300      	movs	r3, #0
 8001f74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f76:	2300      	movs	r3, #0
 8001f78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f7e:	2300      	movs	r3, #0
 8001f80:	61fb      	str	r3, [r7, #28]
 8001f82:	e159      	b.n	8002238 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f84:	2201      	movs	r2, #1
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	697a      	ldr	r2, [r7, #20]
 8001f94:	4013      	ands	r3, r2
 8001f96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f98:	693a      	ldr	r2, [r7, #16]
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	f040 8148 	bne.w	8002232 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f003 0303 	and.w	r3, r3, #3
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d005      	beq.n	8001fba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	d130      	bne.n	800201c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	005b      	lsls	r3, r3, #1
 8001fc4:	2203      	movs	r2, #3
 8001fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fca:	43db      	mvns	r3, r3
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	4013      	ands	r3, r2
 8001fd0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	68da      	ldr	r2, [r3, #12]
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	fa02 f303 	lsl.w	r3, r2, r3
 8001fde:	69ba      	ldr	r2, [r7, #24]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	69ba      	ldr	r2, [r7, #24]
 8001fe8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff8:	43db      	mvns	r3, r3
 8001ffa:	69ba      	ldr	r2, [r7, #24]
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	091b      	lsrs	r3, r3, #4
 8002006:	f003 0201 	and.w	r2, r3, #1
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	fa02 f303 	lsl.w	r3, r2, r3
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	4313      	orrs	r3, r2
 8002014:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	69ba      	ldr	r2, [r7, #24]
 800201a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f003 0303 	and.w	r3, r3, #3
 8002024:	2b03      	cmp	r3, #3
 8002026:	d017      	beq.n	8002058 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	2203      	movs	r2, #3
 8002034:	fa02 f303 	lsl.w	r3, r2, r3
 8002038:	43db      	mvns	r3, r3
 800203a:	69ba      	ldr	r2, [r7, #24]
 800203c:	4013      	ands	r3, r2
 800203e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	689a      	ldr	r2, [r3, #8]
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	005b      	lsls	r3, r3, #1
 8002048:	fa02 f303 	lsl.w	r3, r2, r3
 800204c:	69ba      	ldr	r2, [r7, #24]
 800204e:	4313      	orrs	r3, r2
 8002050:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	69ba      	ldr	r2, [r7, #24]
 8002056:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f003 0303 	and.w	r3, r3, #3
 8002060:	2b02      	cmp	r3, #2
 8002062:	d123      	bne.n	80020ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	08da      	lsrs	r2, r3, #3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	3208      	adds	r2, #8
 800206c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002070:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	f003 0307 	and.w	r3, r3, #7
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	220f      	movs	r2, #15
 800207c:	fa02 f303 	lsl.w	r3, r2, r3
 8002080:	43db      	mvns	r3, r3
 8002082:	69ba      	ldr	r2, [r7, #24]
 8002084:	4013      	ands	r3, r2
 8002086:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	691a      	ldr	r2, [r3, #16]
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	f003 0307 	and.w	r3, r3, #7
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	fa02 f303 	lsl.w	r3, r2, r3
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	4313      	orrs	r3, r2
 800209c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	08da      	lsrs	r2, r3, #3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	3208      	adds	r2, #8
 80020a6:	69b9      	ldr	r1, [r7, #24]
 80020a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	005b      	lsls	r3, r3, #1
 80020b6:	2203      	movs	r2, #3
 80020b8:	fa02 f303 	lsl.w	r3, r2, r3
 80020bc:	43db      	mvns	r3, r3
 80020be:	69ba      	ldr	r2, [r7, #24]
 80020c0:	4013      	ands	r3, r2
 80020c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f003 0203 	and.w	r2, r3, #3
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	005b      	lsls	r3, r3, #1
 80020d0:	fa02 f303 	lsl.w	r3, r2, r3
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	f000 80a2 	beq.w	8002232 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020ee:	2300      	movs	r3, #0
 80020f0:	60fb      	str	r3, [r7, #12]
 80020f2:	4b57      	ldr	r3, [pc, #348]	@ (8002250 <HAL_GPIO_Init+0x2e8>)
 80020f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020f6:	4a56      	ldr	r2, [pc, #344]	@ (8002250 <HAL_GPIO_Init+0x2e8>)
 80020f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80020fe:	4b54      	ldr	r3, [pc, #336]	@ (8002250 <HAL_GPIO_Init+0x2e8>)
 8002100:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002102:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002106:	60fb      	str	r3, [r7, #12]
 8002108:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800210a:	4a52      	ldr	r2, [pc, #328]	@ (8002254 <HAL_GPIO_Init+0x2ec>)
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	089b      	lsrs	r3, r3, #2
 8002110:	3302      	adds	r3, #2
 8002112:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002116:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	f003 0303 	and.w	r3, r3, #3
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	220f      	movs	r2, #15
 8002122:	fa02 f303 	lsl.w	r3, r2, r3
 8002126:	43db      	mvns	r3, r3
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	4013      	ands	r3, r2
 800212c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a49      	ldr	r2, [pc, #292]	@ (8002258 <HAL_GPIO_Init+0x2f0>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d019      	beq.n	800216a <HAL_GPIO_Init+0x202>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4a48      	ldr	r2, [pc, #288]	@ (800225c <HAL_GPIO_Init+0x2f4>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d013      	beq.n	8002166 <HAL_GPIO_Init+0x1fe>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a47      	ldr	r2, [pc, #284]	@ (8002260 <HAL_GPIO_Init+0x2f8>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d00d      	beq.n	8002162 <HAL_GPIO_Init+0x1fa>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a46      	ldr	r2, [pc, #280]	@ (8002264 <HAL_GPIO_Init+0x2fc>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d007      	beq.n	800215e <HAL_GPIO_Init+0x1f6>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a45      	ldr	r2, [pc, #276]	@ (8002268 <HAL_GPIO_Init+0x300>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d101      	bne.n	800215a <HAL_GPIO_Init+0x1f2>
 8002156:	2304      	movs	r3, #4
 8002158:	e008      	b.n	800216c <HAL_GPIO_Init+0x204>
 800215a:	2307      	movs	r3, #7
 800215c:	e006      	b.n	800216c <HAL_GPIO_Init+0x204>
 800215e:	2303      	movs	r3, #3
 8002160:	e004      	b.n	800216c <HAL_GPIO_Init+0x204>
 8002162:	2302      	movs	r3, #2
 8002164:	e002      	b.n	800216c <HAL_GPIO_Init+0x204>
 8002166:	2301      	movs	r3, #1
 8002168:	e000      	b.n	800216c <HAL_GPIO_Init+0x204>
 800216a:	2300      	movs	r3, #0
 800216c:	69fa      	ldr	r2, [r7, #28]
 800216e:	f002 0203 	and.w	r2, r2, #3
 8002172:	0092      	lsls	r2, r2, #2
 8002174:	4093      	lsls	r3, r2
 8002176:	69ba      	ldr	r2, [r7, #24]
 8002178:	4313      	orrs	r3, r2
 800217a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800217c:	4935      	ldr	r1, [pc, #212]	@ (8002254 <HAL_GPIO_Init+0x2ec>)
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	089b      	lsrs	r3, r3, #2
 8002182:	3302      	adds	r3, #2
 8002184:	69ba      	ldr	r2, [r7, #24]
 8002186:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800218a:	4b38      	ldr	r3, [pc, #224]	@ (800226c <HAL_GPIO_Init+0x304>)
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	43db      	mvns	r3, r3
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	4013      	ands	r3, r2
 8002198:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d003      	beq.n	80021ae <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80021a6:	69ba      	ldr	r2, [r7, #24]
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021ae:	4a2f      	ldr	r2, [pc, #188]	@ (800226c <HAL_GPIO_Init+0x304>)
 80021b0:	69bb      	ldr	r3, [r7, #24]
 80021b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021b4:	4b2d      	ldr	r3, [pc, #180]	@ (800226c <HAL_GPIO_Init+0x304>)
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	43db      	mvns	r3, r3
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	4013      	ands	r3, r2
 80021c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d003      	beq.n	80021d8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021d8:	4a24      	ldr	r2, [pc, #144]	@ (800226c <HAL_GPIO_Init+0x304>)
 80021da:	69bb      	ldr	r3, [r7, #24]
 80021dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80021de:	4b23      	ldr	r3, [pc, #140]	@ (800226c <HAL_GPIO_Init+0x304>)
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	43db      	mvns	r3, r3
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	4013      	ands	r3, r2
 80021ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d003      	beq.n	8002202 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80021fa:	69ba      	ldr	r2, [r7, #24]
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	4313      	orrs	r3, r2
 8002200:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002202:	4a1a      	ldr	r2, [pc, #104]	@ (800226c <HAL_GPIO_Init+0x304>)
 8002204:	69bb      	ldr	r3, [r7, #24]
 8002206:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002208:	4b18      	ldr	r3, [pc, #96]	@ (800226c <HAL_GPIO_Init+0x304>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	43db      	mvns	r3, r3
 8002212:	69ba      	ldr	r2, [r7, #24]
 8002214:	4013      	ands	r3, r2
 8002216:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d003      	beq.n	800222c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	4313      	orrs	r3, r2
 800222a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800222c:	4a0f      	ldr	r2, [pc, #60]	@ (800226c <HAL_GPIO_Init+0x304>)
 800222e:	69bb      	ldr	r3, [r7, #24]
 8002230:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	3301      	adds	r3, #1
 8002236:	61fb      	str	r3, [r7, #28]
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	2b0f      	cmp	r3, #15
 800223c:	f67f aea2 	bls.w	8001f84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002240:	bf00      	nop
 8002242:	bf00      	nop
 8002244:	3724      	adds	r7, #36	@ 0x24
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	40023800 	.word	0x40023800
 8002254:	40013800 	.word	0x40013800
 8002258:	40020000 	.word	0x40020000
 800225c:	40020400 	.word	0x40020400
 8002260:	40020800 	.word	0x40020800
 8002264:	40020c00 	.word	0x40020c00
 8002268:	40021000 	.word	0x40021000
 800226c:	40013c00 	.word	0x40013c00

08002270 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	460b      	mov	r3, r1
 800227a:	807b      	strh	r3, [r7, #2]
 800227c:	4613      	mov	r3, r2
 800227e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002280:	787b      	ldrb	r3, [r7, #1]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d003      	beq.n	800228e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002286:	887a      	ldrh	r2, [r7, #2]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800228c:	e003      	b.n	8002296 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800228e:	887b      	ldrh	r3, [r7, #2]
 8002290:	041a      	lsls	r2, r3, #16
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	619a      	str	r2, [r3, #24]
}
 8002296:	bf00      	nop
 8002298:	370c      	adds	r7, #12
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr

080022a2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022a2:	b480      	push	{r7}
 80022a4:	b085      	sub	sp, #20
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	6078      	str	r0, [r7, #4]
 80022aa:	460b      	mov	r3, r1
 80022ac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	695b      	ldr	r3, [r3, #20]
 80022b2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80022b4:	887a      	ldrh	r2, [r7, #2]
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	4013      	ands	r3, r2
 80022ba:	041a      	lsls	r2, r3, #16
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	43d9      	mvns	r1, r3
 80022c0:	887b      	ldrh	r3, [r7, #2]
 80022c2:	400b      	ands	r3, r1
 80022c4:	431a      	orrs	r2, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	619a      	str	r2, [r3, #24]
}
 80022ca:	bf00      	nop
 80022cc:	3714      	adds	r7, #20
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
	...

080022d8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b088      	sub	sp, #32
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d101      	bne.n	80022ea <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e128      	b.n	800253c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d109      	bne.n	800230a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a90      	ldr	r2, [pc, #576]	@ (8002544 <HAL_I2S_Init+0x26c>)
 8002302:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f7fe fa8b 	bl	8000820 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2202      	movs	r2, #2
 800230e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	69db      	ldr	r3, [r3, #28]
 8002318:	687a      	ldr	r2, [r7, #4]
 800231a:	6812      	ldr	r2, [r2, #0]
 800231c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002320:	f023 030f 	bic.w	r3, r3, #15
 8002324:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	2202      	movs	r2, #2
 800232c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	695b      	ldr	r3, [r3, #20]
 8002332:	2b02      	cmp	r3, #2
 8002334:	d060      	beq.n	80023f8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d102      	bne.n	8002344 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800233e:	2310      	movs	r3, #16
 8002340:	617b      	str	r3, [r7, #20]
 8002342:	e001      	b.n	8002348 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002344:	2320      	movs	r3, #32
 8002346:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	2b20      	cmp	r3, #32
 800234e:	d802      	bhi.n	8002356 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002356:	2001      	movs	r0, #1
 8002358:	f001 f972 	bl	8003640 <HAL_RCCEx_GetPeriphCLKFreq>
 800235c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	691b      	ldr	r3, [r3, #16]
 8002362:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002366:	d125      	bne.n	80023b4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d010      	beq.n	8002392 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	68fa      	ldr	r2, [r7, #12]
 8002376:	fbb2 f2f3 	udiv	r2, r2, r3
 800237a:	4613      	mov	r3, r2
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	4413      	add	r3, r2
 8002380:	005b      	lsls	r3, r3, #1
 8002382:	461a      	mov	r2, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	695b      	ldr	r3, [r3, #20]
 8002388:	fbb2 f3f3 	udiv	r3, r2, r3
 800238c:	3305      	adds	r3, #5
 800238e:	613b      	str	r3, [r7, #16]
 8002390:	e01f      	b.n	80023d2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	00db      	lsls	r3, r3, #3
 8002396:	68fa      	ldr	r2, [r7, #12]
 8002398:	fbb2 f2f3 	udiv	r2, r2, r3
 800239c:	4613      	mov	r3, r2
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	4413      	add	r3, r2
 80023a2:	005b      	lsls	r3, r3, #1
 80023a4:	461a      	mov	r2, r3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	695b      	ldr	r3, [r3, #20]
 80023aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ae:	3305      	adds	r3, #5
 80023b0:	613b      	str	r3, [r7, #16]
 80023b2:	e00e      	b.n	80023d2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80023b4:	68fa      	ldr	r2, [r7, #12]
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80023bc:	4613      	mov	r3, r2
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	4413      	add	r3, r2
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	461a      	mov	r2, r3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	695b      	ldr	r3, [r3, #20]
 80023ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ce:	3305      	adds	r3, #5
 80023d0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	4a5c      	ldr	r2, [pc, #368]	@ (8002548 <HAL_I2S_Init+0x270>)
 80023d6:	fba2 2303 	umull	r2, r3, r2, r3
 80023da:	08db      	lsrs	r3, r3, #3
 80023dc:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	f003 0301 	and.w	r3, r3, #1
 80023e4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80023e6:	693a      	ldr	r2, [r7, #16]
 80023e8:	69bb      	ldr	r3, [r7, #24]
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	085b      	lsrs	r3, r3, #1
 80023ee:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80023f0:	69bb      	ldr	r3, [r7, #24]
 80023f2:	021b      	lsls	r3, r3, #8
 80023f4:	61bb      	str	r3, [r7, #24]
 80023f6:	e003      	b.n	8002400 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80023f8:	2302      	movs	r3, #2
 80023fa:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80023fc:	2300      	movs	r3, #0
 80023fe:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	2b01      	cmp	r3, #1
 8002404:	d902      	bls.n	800240c <HAL_I2S_Init+0x134>
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	2bff      	cmp	r3, #255	@ 0xff
 800240a:	d907      	bls.n	800241c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002410:	f043 0210 	orr.w	r2, r3, #16
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e08f      	b.n	800253c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	691a      	ldr	r2, [r3, #16]
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	ea42 0103 	orr.w	r1, r2, r3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	69fa      	ldr	r2, [r7, #28]
 800242c:	430a      	orrs	r2, r1
 800242e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	69db      	ldr	r3, [r3, #28]
 8002436:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800243a:	f023 030f 	bic.w	r3, r3, #15
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	6851      	ldr	r1, [r2, #4]
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	6892      	ldr	r2, [r2, #8]
 8002446:	4311      	orrs	r1, r2
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	68d2      	ldr	r2, [r2, #12]
 800244c:	4311      	orrs	r1, r2
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	6992      	ldr	r2, [r2, #24]
 8002452:	430a      	orrs	r2, r1
 8002454:	431a      	orrs	r2, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800245e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6a1b      	ldr	r3, [r3, #32]
 8002464:	2b01      	cmp	r3, #1
 8002466:	d161      	bne.n	800252c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	4a38      	ldr	r2, [pc, #224]	@ (800254c <HAL_I2S_Init+0x274>)
 800246c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a37      	ldr	r2, [pc, #220]	@ (8002550 <HAL_I2S_Init+0x278>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d101      	bne.n	800247c <HAL_I2S_Init+0x1a4>
 8002478:	4b36      	ldr	r3, [pc, #216]	@ (8002554 <HAL_I2S_Init+0x27c>)
 800247a:	e001      	b.n	8002480 <HAL_I2S_Init+0x1a8>
 800247c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002480:	69db      	ldr	r3, [r3, #28]
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	6812      	ldr	r2, [r2, #0]
 8002486:	4932      	ldr	r1, [pc, #200]	@ (8002550 <HAL_I2S_Init+0x278>)
 8002488:	428a      	cmp	r2, r1
 800248a:	d101      	bne.n	8002490 <HAL_I2S_Init+0x1b8>
 800248c:	4a31      	ldr	r2, [pc, #196]	@ (8002554 <HAL_I2S_Init+0x27c>)
 800248e:	e001      	b.n	8002494 <HAL_I2S_Init+0x1bc>
 8002490:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8002494:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002498:	f023 030f 	bic.w	r3, r3, #15
 800249c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a2b      	ldr	r2, [pc, #172]	@ (8002550 <HAL_I2S_Init+0x278>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d101      	bne.n	80024ac <HAL_I2S_Init+0x1d4>
 80024a8:	4b2a      	ldr	r3, [pc, #168]	@ (8002554 <HAL_I2S_Init+0x27c>)
 80024aa:	e001      	b.n	80024b0 <HAL_I2S_Init+0x1d8>
 80024ac:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80024b0:	2202      	movs	r2, #2
 80024b2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a25      	ldr	r2, [pc, #148]	@ (8002550 <HAL_I2S_Init+0x278>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d101      	bne.n	80024c2 <HAL_I2S_Init+0x1ea>
 80024be:	4b25      	ldr	r3, [pc, #148]	@ (8002554 <HAL_I2S_Init+0x27c>)
 80024c0:	e001      	b.n	80024c6 <HAL_I2S_Init+0x1ee>
 80024c2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80024c6:	69db      	ldr	r3, [r3, #28]
 80024c8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80024d2:	d003      	beq.n	80024dc <HAL_I2S_Init+0x204>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d103      	bne.n	80024e4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80024dc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80024e0:	613b      	str	r3, [r7, #16]
 80024e2:	e001      	b.n	80024e8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80024e4:	2300      	movs	r3, #0
 80024e6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80024f2:	4313      	orrs	r3, r2
 80024f4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80024fc:	4313      	orrs	r3, r2
 80024fe:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	699b      	ldr	r3, [r3, #24]
 8002504:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002506:	4313      	orrs	r3, r2
 8002508:	b29a      	uxth	r2, r3
 800250a:	897b      	ldrh	r3, [r7, #10]
 800250c:	4313      	orrs	r3, r2
 800250e:	b29b      	uxth	r3, r3
 8002510:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002514:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a0d      	ldr	r2, [pc, #52]	@ (8002550 <HAL_I2S_Init+0x278>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d101      	bne.n	8002524 <HAL_I2S_Init+0x24c>
 8002520:	4b0c      	ldr	r3, [pc, #48]	@ (8002554 <HAL_I2S_Init+0x27c>)
 8002522:	e001      	b.n	8002528 <HAL_I2S_Init+0x250>
 8002524:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002528:	897a      	ldrh	r2, [r7, #10]
 800252a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2200      	movs	r2, #0
 8002530:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2201      	movs	r2, #1
 8002536:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 800253a:	2300      	movs	r3, #0
}
 800253c:	4618      	mov	r0, r3
 800253e:	3720      	adds	r7, #32
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}
 8002544:	0800264f 	.word	0x0800264f
 8002548:	cccccccd 	.word	0xcccccccd
 800254c:	08002765 	.word	0x08002765
 8002550:	40003800 	.word	0x40003800
 8002554:	40003400 	.word	0x40003400

08002558 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002558:	b480      	push	{r7}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002560:	bf00      	nop
 8002562:	370c      	adds	r7, #12
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr

0800256c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002574:	bf00      	nop
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr

08002580 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002588:	bf00      	nop
 800258a:	370c      	adds	r7, #12
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025a0:	881a      	ldrh	r2, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ac:	1c9a      	adds	r2, r3, #2
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	3b01      	subs	r3, #1
 80025ba:	b29a      	uxth	r2, r3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d10e      	bne.n	80025e8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	685a      	ldr	r2, [r3, #4]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80025d8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2201      	movs	r2, #1
 80025de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f7ff ffb8 	bl	8002558 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80025e8:	bf00      	nop
 80025ea:	3708      	adds	r7, #8
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}

080025f0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	68da      	ldr	r2, [r3, #12]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002602:	b292      	uxth	r2, r2
 8002604:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800260a:	1c9a      	adds	r2, r3, #2
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002614:	b29b      	uxth	r3, r3
 8002616:	3b01      	subs	r3, #1
 8002618:	b29a      	uxth	r2, r3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002622:	b29b      	uxth	r3, r3
 8002624:	2b00      	cmp	r3, #0
 8002626:	d10e      	bne.n	8002646 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	685a      	ldr	r2, [r3, #4]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002636:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2201      	movs	r2, #1
 800263c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f7ff ff93 	bl	800256c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002646:	bf00      	nop
 8002648:	3708      	adds	r7, #8
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}

0800264e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800264e:	b580      	push	{r7, lr}
 8002650:	b086      	sub	sp, #24
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002664:	b2db      	uxtb	r3, r3
 8002666:	2b04      	cmp	r3, #4
 8002668:	d13a      	bne.n	80026e0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	f003 0301 	and.w	r3, r3, #1
 8002670:	2b01      	cmp	r3, #1
 8002672:	d109      	bne.n	8002688 <I2S_IRQHandler+0x3a>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800267e:	2b40      	cmp	r3, #64	@ 0x40
 8002680:	d102      	bne.n	8002688 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f7ff ffb4 	bl	80025f0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800268e:	2b40      	cmp	r3, #64	@ 0x40
 8002690:	d126      	bne.n	80026e0 <I2S_IRQHandler+0x92>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f003 0320 	and.w	r3, r3, #32
 800269c:	2b20      	cmp	r3, #32
 800269e:	d11f      	bne.n	80026e0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	685a      	ldr	r2, [r3, #4]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80026ae:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80026b0:	2300      	movs	r3, #0
 80026b2:	613b      	str	r3, [r7, #16]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	613b      	str	r3, [r7, #16]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	613b      	str	r3, [r7, #16]
 80026c4:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2201      	movs	r2, #1
 80026ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026d2:	f043 0202 	orr.w	r2, r3, #2
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f7ff ff50 	bl	8002580 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	2b03      	cmp	r3, #3
 80026ea:	d136      	bne.n	800275a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	f003 0302 	and.w	r3, r3, #2
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d109      	bne.n	800270a <I2S_IRQHandler+0xbc>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002700:	2b80      	cmp	r3, #128	@ 0x80
 8002702:	d102      	bne.n	800270a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f7ff ff45 	bl	8002594 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	f003 0308 	and.w	r3, r3, #8
 8002710:	2b08      	cmp	r3, #8
 8002712:	d122      	bne.n	800275a <I2S_IRQHandler+0x10c>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	f003 0320 	and.w	r3, r3, #32
 800271e:	2b20      	cmp	r3, #32
 8002720:	d11b      	bne.n	800275a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	685a      	ldr	r2, [r3, #4]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002730:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002732:	2300      	movs	r3, #0
 8002734:	60fb      	str	r3, [r7, #12]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	60fb      	str	r3, [r7, #12]
 800273e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2201      	movs	r2, #1
 8002744:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800274c:	f043 0204 	orr.w	r2, r3, #4
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f7ff ff13 	bl	8002580 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800275a:	bf00      	nop
 800275c:	3718      	adds	r7, #24
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
	...

08002764 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b088      	sub	sp, #32
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a92      	ldr	r2, [pc, #584]	@ (80029c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d101      	bne.n	8002782 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800277e:	4b92      	ldr	r3, [pc, #584]	@ (80029c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002780:	e001      	b.n	8002786 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002782:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a8b      	ldr	r2, [pc, #556]	@ (80029c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d101      	bne.n	80027a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800279c:	4b8a      	ldr	r3, [pc, #552]	@ (80029c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800279e:	e001      	b.n	80027a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80027a0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80027b0:	d004      	beq.n	80027bc <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	f040 8099 	bne.w	80028ee <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	f003 0302 	and.w	r3, r3, #2
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d107      	bne.n	80027d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d002      	beq.n	80027d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f000 f925 	bl	8002a20 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	f003 0301 	and.w	r3, r3, #1
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d107      	bne.n	80027f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d002      	beq.n	80027f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f000 f9c8 	bl	8002b80 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80027f0:	69bb      	ldr	r3, [r7, #24]
 80027f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027f6:	2b40      	cmp	r3, #64	@ 0x40
 80027f8:	d13a      	bne.n	8002870 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	f003 0320 	and.w	r3, r3, #32
 8002800:	2b00      	cmp	r3, #0
 8002802:	d035      	beq.n	8002870 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a6e      	ldr	r2, [pc, #440]	@ (80029c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d101      	bne.n	8002812 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800280e:	4b6e      	ldr	r3, [pc, #440]	@ (80029c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002810:	e001      	b.n	8002816 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002812:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002816:	685a      	ldr	r2, [r3, #4]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4969      	ldr	r1, [pc, #420]	@ (80029c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800281e:	428b      	cmp	r3, r1
 8002820:	d101      	bne.n	8002826 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002822:	4b69      	ldr	r3, [pc, #420]	@ (80029c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002824:	e001      	b.n	800282a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002826:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800282a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800282e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	685a      	ldr	r2, [r3, #4]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800283e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002840:	2300      	movs	r3, #0
 8002842:	60fb      	str	r3, [r7, #12]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	60fb      	str	r3, [r7, #12]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	60fb      	str	r3, [r7, #12]
 8002854:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2201      	movs	r2, #1
 800285a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002862:	f043 0202 	orr.w	r2, r3, #2
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f7ff fe88 	bl	8002580 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	f003 0308 	and.w	r3, r3, #8
 8002876:	2b08      	cmp	r3, #8
 8002878:	f040 80c3 	bne.w	8002a02 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	f003 0320 	and.w	r3, r3, #32
 8002882:	2b00      	cmp	r3, #0
 8002884:	f000 80bd 	beq.w	8002a02 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	685a      	ldr	r2, [r3, #4]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002896:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a49      	ldr	r2, [pc, #292]	@ (80029c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d101      	bne.n	80028a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80028a2:	4b49      	ldr	r3, [pc, #292]	@ (80029c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80028a4:	e001      	b.n	80028aa <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80028a6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80028aa:	685a      	ldr	r2, [r3, #4]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4944      	ldr	r1, [pc, #272]	@ (80029c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80028b2:	428b      	cmp	r3, r1
 80028b4:	d101      	bne.n	80028ba <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80028b6:	4b44      	ldr	r3, [pc, #272]	@ (80029c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80028b8:	e001      	b.n	80028be <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80028ba:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80028be:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80028c2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80028c4:	2300      	movs	r3, #0
 80028c6:	60bb      	str	r3, [r7, #8]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	60bb      	str	r3, [r7, #8]
 80028d0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2201      	movs	r2, #1
 80028d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028de:	f043 0204 	orr.w	r2, r3, #4
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f7ff fe4a 	bl	8002580 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80028ec:	e089      	b.n	8002a02 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80028ee:	69bb      	ldr	r3, [r7, #24]
 80028f0:	f003 0302 	and.w	r3, r3, #2
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d107      	bne.n	8002908 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d002      	beq.n	8002908 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f000 f8be 	bl	8002a84 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	f003 0301 	and.w	r3, r3, #1
 800290e:	2b01      	cmp	r3, #1
 8002910:	d107      	bne.n	8002922 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002918:	2b00      	cmp	r3, #0
 800291a:	d002      	beq.n	8002922 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f000 f8fd 	bl	8002b1c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002928:	2b40      	cmp	r3, #64	@ 0x40
 800292a:	d12f      	bne.n	800298c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	f003 0320 	and.w	r3, r3, #32
 8002932:	2b00      	cmp	r3, #0
 8002934:	d02a      	beq.n	800298c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	685a      	ldr	r2, [r3, #4]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002944:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a1e      	ldr	r2, [pc, #120]	@ (80029c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d101      	bne.n	8002954 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002950:	4b1d      	ldr	r3, [pc, #116]	@ (80029c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002952:	e001      	b.n	8002958 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002954:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002958:	685a      	ldr	r2, [r3, #4]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4919      	ldr	r1, [pc, #100]	@ (80029c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002960:	428b      	cmp	r3, r1
 8002962:	d101      	bne.n	8002968 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002964:	4b18      	ldr	r3, [pc, #96]	@ (80029c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002966:	e001      	b.n	800296c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002968:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800296c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002970:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2201      	movs	r2, #1
 8002976:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800297e:	f043 0202 	orr.w	r2, r3, #2
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f7ff fdfa 	bl	8002580 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800298c:	69bb      	ldr	r3, [r7, #24]
 800298e:	f003 0308 	and.w	r3, r3, #8
 8002992:	2b08      	cmp	r3, #8
 8002994:	d136      	bne.n	8002a04 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	f003 0320 	and.w	r3, r3, #32
 800299c:	2b00      	cmp	r3, #0
 800299e:	d031      	beq.n	8002a04 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a07      	ldr	r2, [pc, #28]	@ (80029c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d101      	bne.n	80029ae <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80029aa:	4b07      	ldr	r3, [pc, #28]	@ (80029c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80029ac:	e001      	b.n	80029b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80029ae:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80029b2:	685a      	ldr	r2, [r3, #4]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4902      	ldr	r1, [pc, #8]	@ (80029c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80029ba:	428b      	cmp	r3, r1
 80029bc:	d106      	bne.n	80029cc <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80029be:	4b02      	ldr	r3, [pc, #8]	@ (80029c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80029c0:	e006      	b.n	80029d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80029c2:	bf00      	nop
 80029c4:	40003800 	.word	0x40003800
 80029c8:	40003400 	.word	0x40003400
 80029cc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80029d0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80029d4:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	685a      	ldr	r2, [r3, #4]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80029e4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2201      	movs	r2, #1
 80029ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029f2:	f043 0204 	orr.w	r2, r3, #4
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f7ff fdc0 	bl	8002580 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002a00:	e000      	b.n	8002a04 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002a02:	bf00      	nop
}
 8002a04:	bf00      	nop
 8002a06:	3720      	adds	r7, #32
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}

08002a0c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002a14:	bf00      	nop
 8002a16:	370c      	adds	r7, #12
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr

08002a20 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a2c:	1c99      	adds	r1, r3, #2
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	6251      	str	r1, [r2, #36]	@ 0x24
 8002a32:	881a      	ldrh	r2, [r3, #0]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	3b01      	subs	r3, #1
 8002a42:	b29a      	uxth	r2, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a4c:	b29b      	uxth	r3, r3
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d113      	bne.n	8002a7a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	685a      	ldr	r2, [r3, #4]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002a60:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d106      	bne.n	8002a7a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f7ff ffc9 	bl	8002a0c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002a7a:	bf00      	nop
 8002a7c:	3708      	adds	r7, #8
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
	...

08002a84 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a90:	1c99      	adds	r1, r3, #2
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	6251      	str	r1, [r2, #36]	@ 0x24
 8002a96:	8819      	ldrh	r1, [r3, #0]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a1d      	ldr	r2, [pc, #116]	@ (8002b14 <I2SEx_TxISR_I2SExt+0x90>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d101      	bne.n	8002aa6 <I2SEx_TxISR_I2SExt+0x22>
 8002aa2:	4b1d      	ldr	r3, [pc, #116]	@ (8002b18 <I2SEx_TxISR_I2SExt+0x94>)
 8002aa4:	e001      	b.n	8002aaa <I2SEx_TxISR_I2SExt+0x26>
 8002aa6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002aaa:	460a      	mov	r2, r1
 8002aac:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	3b01      	subs	r3, #1
 8002ab6:	b29a      	uxth	r2, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d121      	bne.n	8002b0a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a12      	ldr	r2, [pc, #72]	@ (8002b14 <I2SEx_TxISR_I2SExt+0x90>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d101      	bne.n	8002ad4 <I2SEx_TxISR_I2SExt+0x50>
 8002ad0:	4b11      	ldr	r3, [pc, #68]	@ (8002b18 <I2SEx_TxISR_I2SExt+0x94>)
 8002ad2:	e001      	b.n	8002ad8 <I2SEx_TxISR_I2SExt+0x54>
 8002ad4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002ad8:	685a      	ldr	r2, [r3, #4]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	490d      	ldr	r1, [pc, #52]	@ (8002b14 <I2SEx_TxISR_I2SExt+0x90>)
 8002ae0:	428b      	cmp	r3, r1
 8002ae2:	d101      	bne.n	8002ae8 <I2SEx_TxISR_I2SExt+0x64>
 8002ae4:	4b0c      	ldr	r3, [pc, #48]	@ (8002b18 <I2SEx_TxISR_I2SExt+0x94>)
 8002ae6:	e001      	b.n	8002aec <I2SEx_TxISR_I2SExt+0x68>
 8002ae8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002aec:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002af0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d106      	bne.n	8002b0a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f7ff ff81 	bl	8002a0c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002b0a:	bf00      	nop
 8002b0c:	3708      	adds	r7, #8
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	40003800 	.word	0x40003800
 8002b18:	40003400 	.word	0x40003400

08002b1c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	68d8      	ldr	r0, [r3, #12]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b2e:	1c99      	adds	r1, r3, #2
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8002b34:	b282      	uxth	r2, r0
 8002b36:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	3b01      	subs	r3, #1
 8002b40:	b29a      	uxth	r2, r3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d113      	bne.n	8002b78 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	685a      	ldr	r2, [r3, #4]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002b5e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d106      	bne.n	8002b78 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f7ff ff4a 	bl	8002a0c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002b78:	bf00      	nop
 8002b7a:	3708      	adds	r7, #8
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}

08002b80 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a20      	ldr	r2, [pc, #128]	@ (8002c10 <I2SEx_RxISR_I2SExt+0x90>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d101      	bne.n	8002b96 <I2SEx_RxISR_I2SExt+0x16>
 8002b92:	4b20      	ldr	r3, [pc, #128]	@ (8002c14 <I2SEx_RxISR_I2SExt+0x94>)
 8002b94:	e001      	b.n	8002b9a <I2SEx_RxISR_I2SExt+0x1a>
 8002b96:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002b9a:	68d8      	ldr	r0, [r3, #12]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ba0:	1c99      	adds	r1, r3, #2
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8002ba6:	b282      	uxth	r2, r0
 8002ba8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	3b01      	subs	r3, #1
 8002bb2:	b29a      	uxth	r2, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d121      	bne.n	8002c06 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a12      	ldr	r2, [pc, #72]	@ (8002c10 <I2SEx_RxISR_I2SExt+0x90>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d101      	bne.n	8002bd0 <I2SEx_RxISR_I2SExt+0x50>
 8002bcc:	4b11      	ldr	r3, [pc, #68]	@ (8002c14 <I2SEx_RxISR_I2SExt+0x94>)
 8002bce:	e001      	b.n	8002bd4 <I2SEx_RxISR_I2SExt+0x54>
 8002bd0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002bd4:	685a      	ldr	r2, [r3, #4]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	490d      	ldr	r1, [pc, #52]	@ (8002c10 <I2SEx_RxISR_I2SExt+0x90>)
 8002bdc:	428b      	cmp	r3, r1
 8002bde:	d101      	bne.n	8002be4 <I2SEx_RxISR_I2SExt+0x64>
 8002be0:	4b0c      	ldr	r3, [pc, #48]	@ (8002c14 <I2SEx_RxISR_I2SExt+0x94>)
 8002be2:	e001      	b.n	8002be8 <I2SEx_RxISR_I2SExt+0x68>
 8002be4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002be8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002bec:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d106      	bne.n	8002c06 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f7ff ff03 	bl	8002a0c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002c06:	bf00      	nop
 8002c08:	3708      	adds	r7, #8
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	40003800 	.word	0x40003800
 8002c14:	40003400 	.word	0x40003400

08002c18 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b086      	sub	sp, #24
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d101      	bne.n	8002c2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e267      	b.n	80030fa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0301 	and.w	r3, r3, #1
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d075      	beq.n	8002d22 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002c36:	4b88      	ldr	r3, [pc, #544]	@ (8002e58 <HAL_RCC_OscConfig+0x240>)
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f003 030c 	and.w	r3, r3, #12
 8002c3e:	2b04      	cmp	r3, #4
 8002c40:	d00c      	beq.n	8002c5c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c42:	4b85      	ldr	r3, [pc, #532]	@ (8002e58 <HAL_RCC_OscConfig+0x240>)
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002c4a:	2b08      	cmp	r3, #8
 8002c4c:	d112      	bne.n	8002c74 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c4e:	4b82      	ldr	r3, [pc, #520]	@ (8002e58 <HAL_RCC_OscConfig+0x240>)
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c56:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c5a:	d10b      	bne.n	8002c74 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c5c:	4b7e      	ldr	r3, [pc, #504]	@ (8002e58 <HAL_RCC_OscConfig+0x240>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d05b      	beq.n	8002d20 <HAL_RCC_OscConfig+0x108>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d157      	bne.n	8002d20 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e242      	b.n	80030fa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c7c:	d106      	bne.n	8002c8c <HAL_RCC_OscConfig+0x74>
 8002c7e:	4b76      	ldr	r3, [pc, #472]	@ (8002e58 <HAL_RCC_OscConfig+0x240>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a75      	ldr	r2, [pc, #468]	@ (8002e58 <HAL_RCC_OscConfig+0x240>)
 8002c84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c88:	6013      	str	r3, [r2, #0]
 8002c8a:	e01d      	b.n	8002cc8 <HAL_RCC_OscConfig+0xb0>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c94:	d10c      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x98>
 8002c96:	4b70      	ldr	r3, [pc, #448]	@ (8002e58 <HAL_RCC_OscConfig+0x240>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a6f      	ldr	r2, [pc, #444]	@ (8002e58 <HAL_RCC_OscConfig+0x240>)
 8002c9c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ca0:	6013      	str	r3, [r2, #0]
 8002ca2:	4b6d      	ldr	r3, [pc, #436]	@ (8002e58 <HAL_RCC_OscConfig+0x240>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a6c      	ldr	r2, [pc, #432]	@ (8002e58 <HAL_RCC_OscConfig+0x240>)
 8002ca8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cac:	6013      	str	r3, [r2, #0]
 8002cae:	e00b      	b.n	8002cc8 <HAL_RCC_OscConfig+0xb0>
 8002cb0:	4b69      	ldr	r3, [pc, #420]	@ (8002e58 <HAL_RCC_OscConfig+0x240>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a68      	ldr	r2, [pc, #416]	@ (8002e58 <HAL_RCC_OscConfig+0x240>)
 8002cb6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cba:	6013      	str	r3, [r2, #0]
 8002cbc:	4b66      	ldr	r3, [pc, #408]	@ (8002e58 <HAL_RCC_OscConfig+0x240>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a65      	ldr	r2, [pc, #404]	@ (8002e58 <HAL_RCC_OscConfig+0x240>)
 8002cc2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002cc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d013      	beq.n	8002cf8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cd0:	f7fe f8c0 	bl	8000e54 <HAL_GetTick>
 8002cd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cd6:	e008      	b.n	8002cea <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cd8:	f7fe f8bc 	bl	8000e54 <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	2b64      	cmp	r3, #100	@ 0x64
 8002ce4:	d901      	bls.n	8002cea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e207      	b.n	80030fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cea:	4b5b      	ldr	r3, [pc, #364]	@ (8002e58 <HAL_RCC_OscConfig+0x240>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d0f0      	beq.n	8002cd8 <HAL_RCC_OscConfig+0xc0>
 8002cf6:	e014      	b.n	8002d22 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cf8:	f7fe f8ac 	bl	8000e54 <HAL_GetTick>
 8002cfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cfe:	e008      	b.n	8002d12 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d00:	f7fe f8a8 	bl	8000e54 <HAL_GetTick>
 8002d04:	4602      	mov	r2, r0
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	2b64      	cmp	r3, #100	@ 0x64
 8002d0c:	d901      	bls.n	8002d12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e1f3      	b.n	80030fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d12:	4b51      	ldr	r3, [pc, #324]	@ (8002e58 <HAL_RCC_OscConfig+0x240>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d1f0      	bne.n	8002d00 <HAL_RCC_OscConfig+0xe8>
 8002d1e:	e000      	b.n	8002d22 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0302 	and.w	r3, r3, #2
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d063      	beq.n	8002df6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002d2e:	4b4a      	ldr	r3, [pc, #296]	@ (8002e58 <HAL_RCC_OscConfig+0x240>)
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f003 030c 	and.w	r3, r3, #12
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d00b      	beq.n	8002d52 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d3a:	4b47      	ldr	r3, [pc, #284]	@ (8002e58 <HAL_RCC_OscConfig+0x240>)
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002d42:	2b08      	cmp	r3, #8
 8002d44:	d11c      	bne.n	8002d80 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d46:	4b44      	ldr	r3, [pc, #272]	@ (8002e58 <HAL_RCC_OscConfig+0x240>)
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d116      	bne.n	8002d80 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d52:	4b41      	ldr	r3, [pc, #260]	@ (8002e58 <HAL_RCC_OscConfig+0x240>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0302 	and.w	r3, r3, #2
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d005      	beq.n	8002d6a <HAL_RCC_OscConfig+0x152>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d001      	beq.n	8002d6a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e1c7      	b.n	80030fa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d6a:	4b3b      	ldr	r3, [pc, #236]	@ (8002e58 <HAL_RCC_OscConfig+0x240>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	691b      	ldr	r3, [r3, #16]
 8002d76:	00db      	lsls	r3, r3, #3
 8002d78:	4937      	ldr	r1, [pc, #220]	@ (8002e58 <HAL_RCC_OscConfig+0x240>)
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d7e:	e03a      	b.n	8002df6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d020      	beq.n	8002dca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d88:	4b34      	ldr	r3, [pc, #208]	@ (8002e5c <HAL_RCC_OscConfig+0x244>)
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d8e:	f7fe f861 	bl	8000e54 <HAL_GetTick>
 8002d92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d94:	e008      	b.n	8002da8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d96:	f7fe f85d 	bl	8000e54 <HAL_GetTick>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d901      	bls.n	8002da8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002da4:	2303      	movs	r3, #3
 8002da6:	e1a8      	b.n	80030fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002da8:	4b2b      	ldr	r3, [pc, #172]	@ (8002e58 <HAL_RCC_OscConfig+0x240>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0302 	and.w	r3, r3, #2
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d0f0      	beq.n	8002d96 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002db4:	4b28      	ldr	r3, [pc, #160]	@ (8002e58 <HAL_RCC_OscConfig+0x240>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	691b      	ldr	r3, [r3, #16]
 8002dc0:	00db      	lsls	r3, r3, #3
 8002dc2:	4925      	ldr	r1, [pc, #148]	@ (8002e58 <HAL_RCC_OscConfig+0x240>)
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	600b      	str	r3, [r1, #0]
 8002dc8:	e015      	b.n	8002df6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dca:	4b24      	ldr	r3, [pc, #144]	@ (8002e5c <HAL_RCC_OscConfig+0x244>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dd0:	f7fe f840 	bl	8000e54 <HAL_GetTick>
 8002dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dd6:	e008      	b.n	8002dea <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dd8:	f7fe f83c 	bl	8000e54 <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d901      	bls.n	8002dea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e187      	b.n	80030fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dea:	4b1b      	ldr	r3, [pc, #108]	@ (8002e58 <HAL_RCC_OscConfig+0x240>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0302 	and.w	r3, r3, #2
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d1f0      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0308 	and.w	r3, r3, #8
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d036      	beq.n	8002e70 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	695b      	ldr	r3, [r3, #20]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d016      	beq.n	8002e38 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e0a:	4b15      	ldr	r3, [pc, #84]	@ (8002e60 <HAL_RCC_OscConfig+0x248>)
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e10:	f7fe f820 	bl	8000e54 <HAL_GetTick>
 8002e14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e16:	e008      	b.n	8002e2a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e18:	f7fe f81c 	bl	8000e54 <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d901      	bls.n	8002e2a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e167      	b.n	80030fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e2a:	4b0b      	ldr	r3, [pc, #44]	@ (8002e58 <HAL_RCC_OscConfig+0x240>)
 8002e2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e2e:	f003 0302 	and.w	r3, r3, #2
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d0f0      	beq.n	8002e18 <HAL_RCC_OscConfig+0x200>
 8002e36:	e01b      	b.n	8002e70 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e38:	4b09      	ldr	r3, [pc, #36]	@ (8002e60 <HAL_RCC_OscConfig+0x248>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e3e:	f7fe f809 	bl	8000e54 <HAL_GetTick>
 8002e42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e44:	e00e      	b.n	8002e64 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e46:	f7fe f805 	bl	8000e54 <HAL_GetTick>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	d907      	bls.n	8002e64 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e54:	2303      	movs	r3, #3
 8002e56:	e150      	b.n	80030fa <HAL_RCC_OscConfig+0x4e2>
 8002e58:	40023800 	.word	0x40023800
 8002e5c:	42470000 	.word	0x42470000
 8002e60:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e64:	4b88      	ldr	r3, [pc, #544]	@ (8003088 <HAL_RCC_OscConfig+0x470>)
 8002e66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e68:	f003 0302 	and.w	r3, r3, #2
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d1ea      	bne.n	8002e46 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0304 	and.w	r3, r3, #4
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	f000 8097 	beq.w	8002fac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e82:	4b81      	ldr	r3, [pc, #516]	@ (8003088 <HAL_RCC_OscConfig+0x470>)
 8002e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d10f      	bne.n	8002eae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e8e:	2300      	movs	r3, #0
 8002e90:	60bb      	str	r3, [r7, #8]
 8002e92:	4b7d      	ldr	r3, [pc, #500]	@ (8003088 <HAL_RCC_OscConfig+0x470>)
 8002e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e96:	4a7c      	ldr	r2, [pc, #496]	@ (8003088 <HAL_RCC_OscConfig+0x470>)
 8002e98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e9e:	4b7a      	ldr	r3, [pc, #488]	@ (8003088 <HAL_RCC_OscConfig+0x470>)
 8002ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ea2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ea6:	60bb      	str	r3, [r7, #8]
 8002ea8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eae:	4b77      	ldr	r3, [pc, #476]	@ (800308c <HAL_RCC_OscConfig+0x474>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d118      	bne.n	8002eec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002eba:	4b74      	ldr	r3, [pc, #464]	@ (800308c <HAL_RCC_OscConfig+0x474>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a73      	ldr	r2, [pc, #460]	@ (800308c <HAL_RCC_OscConfig+0x474>)
 8002ec0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ec4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ec6:	f7fd ffc5 	bl	8000e54 <HAL_GetTick>
 8002eca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ecc:	e008      	b.n	8002ee0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ece:	f7fd ffc1 	bl	8000e54 <HAL_GetTick>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d901      	bls.n	8002ee0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002edc:	2303      	movs	r3, #3
 8002ede:	e10c      	b.n	80030fa <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ee0:	4b6a      	ldr	r3, [pc, #424]	@ (800308c <HAL_RCC_OscConfig+0x474>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d0f0      	beq.n	8002ece <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d106      	bne.n	8002f02 <HAL_RCC_OscConfig+0x2ea>
 8002ef4:	4b64      	ldr	r3, [pc, #400]	@ (8003088 <HAL_RCC_OscConfig+0x470>)
 8002ef6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ef8:	4a63      	ldr	r2, [pc, #396]	@ (8003088 <HAL_RCC_OscConfig+0x470>)
 8002efa:	f043 0301 	orr.w	r3, r3, #1
 8002efe:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f00:	e01c      	b.n	8002f3c <HAL_RCC_OscConfig+0x324>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	2b05      	cmp	r3, #5
 8002f08:	d10c      	bne.n	8002f24 <HAL_RCC_OscConfig+0x30c>
 8002f0a:	4b5f      	ldr	r3, [pc, #380]	@ (8003088 <HAL_RCC_OscConfig+0x470>)
 8002f0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f0e:	4a5e      	ldr	r2, [pc, #376]	@ (8003088 <HAL_RCC_OscConfig+0x470>)
 8002f10:	f043 0304 	orr.w	r3, r3, #4
 8002f14:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f16:	4b5c      	ldr	r3, [pc, #368]	@ (8003088 <HAL_RCC_OscConfig+0x470>)
 8002f18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f1a:	4a5b      	ldr	r2, [pc, #364]	@ (8003088 <HAL_RCC_OscConfig+0x470>)
 8002f1c:	f043 0301 	orr.w	r3, r3, #1
 8002f20:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f22:	e00b      	b.n	8002f3c <HAL_RCC_OscConfig+0x324>
 8002f24:	4b58      	ldr	r3, [pc, #352]	@ (8003088 <HAL_RCC_OscConfig+0x470>)
 8002f26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f28:	4a57      	ldr	r2, [pc, #348]	@ (8003088 <HAL_RCC_OscConfig+0x470>)
 8002f2a:	f023 0301 	bic.w	r3, r3, #1
 8002f2e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f30:	4b55      	ldr	r3, [pc, #340]	@ (8003088 <HAL_RCC_OscConfig+0x470>)
 8002f32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f34:	4a54      	ldr	r2, [pc, #336]	@ (8003088 <HAL_RCC_OscConfig+0x470>)
 8002f36:	f023 0304 	bic.w	r3, r3, #4
 8002f3a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d015      	beq.n	8002f70 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f44:	f7fd ff86 	bl	8000e54 <HAL_GetTick>
 8002f48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f4a:	e00a      	b.n	8002f62 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f4c:	f7fd ff82 	bl	8000e54 <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d901      	bls.n	8002f62 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e0cb      	b.n	80030fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f62:	4b49      	ldr	r3, [pc, #292]	@ (8003088 <HAL_RCC_OscConfig+0x470>)
 8002f64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f66:	f003 0302 	and.w	r3, r3, #2
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d0ee      	beq.n	8002f4c <HAL_RCC_OscConfig+0x334>
 8002f6e:	e014      	b.n	8002f9a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f70:	f7fd ff70 	bl	8000e54 <HAL_GetTick>
 8002f74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f76:	e00a      	b.n	8002f8e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f78:	f7fd ff6c 	bl	8000e54 <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d901      	bls.n	8002f8e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e0b5      	b.n	80030fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f8e:	4b3e      	ldr	r3, [pc, #248]	@ (8003088 <HAL_RCC_OscConfig+0x470>)
 8002f90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f92:	f003 0302 	and.w	r3, r3, #2
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d1ee      	bne.n	8002f78 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f9a:	7dfb      	ldrb	r3, [r7, #23]
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d105      	bne.n	8002fac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fa0:	4b39      	ldr	r3, [pc, #228]	@ (8003088 <HAL_RCC_OscConfig+0x470>)
 8002fa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fa4:	4a38      	ldr	r2, [pc, #224]	@ (8003088 <HAL_RCC_OscConfig+0x470>)
 8002fa6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002faa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	699b      	ldr	r3, [r3, #24]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	f000 80a1 	beq.w	80030f8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002fb6:	4b34      	ldr	r3, [pc, #208]	@ (8003088 <HAL_RCC_OscConfig+0x470>)
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	f003 030c 	and.w	r3, r3, #12
 8002fbe:	2b08      	cmp	r3, #8
 8002fc0:	d05c      	beq.n	800307c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	699b      	ldr	r3, [r3, #24]
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d141      	bne.n	800304e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fca:	4b31      	ldr	r3, [pc, #196]	@ (8003090 <HAL_RCC_OscConfig+0x478>)
 8002fcc:	2200      	movs	r2, #0
 8002fce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fd0:	f7fd ff40 	bl	8000e54 <HAL_GetTick>
 8002fd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fd6:	e008      	b.n	8002fea <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fd8:	f7fd ff3c 	bl	8000e54 <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d901      	bls.n	8002fea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e087      	b.n	80030fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fea:	4b27      	ldr	r3, [pc, #156]	@ (8003088 <HAL_RCC_OscConfig+0x470>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d1f0      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	69da      	ldr	r2, [r3, #28]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6a1b      	ldr	r3, [r3, #32]
 8002ffe:	431a      	orrs	r2, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003004:	019b      	lsls	r3, r3, #6
 8003006:	431a      	orrs	r2, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800300c:	085b      	lsrs	r3, r3, #1
 800300e:	3b01      	subs	r3, #1
 8003010:	041b      	lsls	r3, r3, #16
 8003012:	431a      	orrs	r2, r3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003018:	061b      	lsls	r3, r3, #24
 800301a:	491b      	ldr	r1, [pc, #108]	@ (8003088 <HAL_RCC_OscConfig+0x470>)
 800301c:	4313      	orrs	r3, r2
 800301e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003020:	4b1b      	ldr	r3, [pc, #108]	@ (8003090 <HAL_RCC_OscConfig+0x478>)
 8003022:	2201      	movs	r2, #1
 8003024:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003026:	f7fd ff15 	bl	8000e54 <HAL_GetTick>
 800302a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800302c:	e008      	b.n	8003040 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800302e:	f7fd ff11 	bl	8000e54 <HAL_GetTick>
 8003032:	4602      	mov	r2, r0
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	2b02      	cmp	r3, #2
 800303a:	d901      	bls.n	8003040 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800303c:	2303      	movs	r3, #3
 800303e:	e05c      	b.n	80030fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003040:	4b11      	ldr	r3, [pc, #68]	@ (8003088 <HAL_RCC_OscConfig+0x470>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003048:	2b00      	cmp	r3, #0
 800304a:	d0f0      	beq.n	800302e <HAL_RCC_OscConfig+0x416>
 800304c:	e054      	b.n	80030f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800304e:	4b10      	ldr	r3, [pc, #64]	@ (8003090 <HAL_RCC_OscConfig+0x478>)
 8003050:	2200      	movs	r2, #0
 8003052:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003054:	f7fd fefe 	bl	8000e54 <HAL_GetTick>
 8003058:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800305a:	e008      	b.n	800306e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800305c:	f7fd fefa 	bl	8000e54 <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	2b02      	cmp	r3, #2
 8003068:	d901      	bls.n	800306e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e045      	b.n	80030fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800306e:	4b06      	ldr	r3, [pc, #24]	@ (8003088 <HAL_RCC_OscConfig+0x470>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d1f0      	bne.n	800305c <HAL_RCC_OscConfig+0x444>
 800307a:	e03d      	b.n	80030f8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	699b      	ldr	r3, [r3, #24]
 8003080:	2b01      	cmp	r3, #1
 8003082:	d107      	bne.n	8003094 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e038      	b.n	80030fa <HAL_RCC_OscConfig+0x4e2>
 8003088:	40023800 	.word	0x40023800
 800308c:	40007000 	.word	0x40007000
 8003090:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003094:	4b1b      	ldr	r3, [pc, #108]	@ (8003104 <HAL_RCC_OscConfig+0x4ec>)
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	699b      	ldr	r3, [r3, #24]
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d028      	beq.n	80030f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d121      	bne.n	80030f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d11a      	bne.n	80030f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030be:	68fa      	ldr	r2, [r7, #12]
 80030c0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80030c4:	4013      	ands	r3, r2
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80030ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d111      	bne.n	80030f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030da:	085b      	lsrs	r3, r3, #1
 80030dc:	3b01      	subs	r3, #1
 80030de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d107      	bne.n	80030f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d001      	beq.n	80030f8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e000      	b.n	80030fa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80030f8:	2300      	movs	r3, #0
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3718      	adds	r7, #24
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	40023800 	.word	0x40023800

08003108 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d101      	bne.n	800311c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e0cc      	b.n	80032b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800311c:	4b68      	ldr	r3, [pc, #416]	@ (80032c0 <HAL_RCC_ClockConfig+0x1b8>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0307 	and.w	r3, r3, #7
 8003124:	683a      	ldr	r2, [r7, #0]
 8003126:	429a      	cmp	r2, r3
 8003128:	d90c      	bls.n	8003144 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800312a:	4b65      	ldr	r3, [pc, #404]	@ (80032c0 <HAL_RCC_ClockConfig+0x1b8>)
 800312c:	683a      	ldr	r2, [r7, #0]
 800312e:	b2d2      	uxtb	r2, r2
 8003130:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003132:	4b63      	ldr	r3, [pc, #396]	@ (80032c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0307 	and.w	r3, r3, #7
 800313a:	683a      	ldr	r2, [r7, #0]
 800313c:	429a      	cmp	r2, r3
 800313e:	d001      	beq.n	8003144 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e0b8      	b.n	80032b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 0302 	and.w	r3, r3, #2
 800314c:	2b00      	cmp	r3, #0
 800314e:	d020      	beq.n	8003192 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0304 	and.w	r3, r3, #4
 8003158:	2b00      	cmp	r3, #0
 800315a:	d005      	beq.n	8003168 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800315c:	4b59      	ldr	r3, [pc, #356]	@ (80032c4 <HAL_RCC_ClockConfig+0x1bc>)
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	4a58      	ldr	r2, [pc, #352]	@ (80032c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003162:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003166:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0308 	and.w	r3, r3, #8
 8003170:	2b00      	cmp	r3, #0
 8003172:	d005      	beq.n	8003180 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003174:	4b53      	ldr	r3, [pc, #332]	@ (80032c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	4a52      	ldr	r2, [pc, #328]	@ (80032c4 <HAL_RCC_ClockConfig+0x1bc>)
 800317a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800317e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003180:	4b50      	ldr	r3, [pc, #320]	@ (80032c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	494d      	ldr	r1, [pc, #308]	@ (80032c4 <HAL_RCC_ClockConfig+0x1bc>)
 800318e:	4313      	orrs	r3, r2
 8003190:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0301 	and.w	r3, r3, #1
 800319a:	2b00      	cmp	r3, #0
 800319c:	d044      	beq.n	8003228 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d107      	bne.n	80031b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031a6:	4b47      	ldr	r3, [pc, #284]	@ (80032c4 <HAL_RCC_ClockConfig+0x1bc>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d119      	bne.n	80031e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e07f      	b.n	80032b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d003      	beq.n	80031c6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031c2:	2b03      	cmp	r3, #3
 80031c4:	d107      	bne.n	80031d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031c6:	4b3f      	ldr	r3, [pc, #252]	@ (80032c4 <HAL_RCC_ClockConfig+0x1bc>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d109      	bne.n	80031e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e06f      	b.n	80032b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031d6:	4b3b      	ldr	r3, [pc, #236]	@ (80032c4 <HAL_RCC_ClockConfig+0x1bc>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0302 	and.w	r3, r3, #2
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d101      	bne.n	80031e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e067      	b.n	80032b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031e6:	4b37      	ldr	r3, [pc, #220]	@ (80032c4 <HAL_RCC_ClockConfig+0x1bc>)
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	f023 0203 	bic.w	r2, r3, #3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	4934      	ldr	r1, [pc, #208]	@ (80032c4 <HAL_RCC_ClockConfig+0x1bc>)
 80031f4:	4313      	orrs	r3, r2
 80031f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031f8:	f7fd fe2c 	bl	8000e54 <HAL_GetTick>
 80031fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031fe:	e00a      	b.n	8003216 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003200:	f7fd fe28 	bl	8000e54 <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800320e:	4293      	cmp	r3, r2
 8003210:	d901      	bls.n	8003216 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e04f      	b.n	80032b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003216:	4b2b      	ldr	r3, [pc, #172]	@ (80032c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	f003 020c 	and.w	r2, r3, #12
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	429a      	cmp	r2, r3
 8003226:	d1eb      	bne.n	8003200 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003228:	4b25      	ldr	r3, [pc, #148]	@ (80032c0 <HAL_RCC_ClockConfig+0x1b8>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0307 	and.w	r3, r3, #7
 8003230:	683a      	ldr	r2, [r7, #0]
 8003232:	429a      	cmp	r2, r3
 8003234:	d20c      	bcs.n	8003250 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003236:	4b22      	ldr	r3, [pc, #136]	@ (80032c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003238:	683a      	ldr	r2, [r7, #0]
 800323a:	b2d2      	uxtb	r2, r2
 800323c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800323e:	4b20      	ldr	r3, [pc, #128]	@ (80032c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0307 	and.w	r3, r3, #7
 8003246:	683a      	ldr	r2, [r7, #0]
 8003248:	429a      	cmp	r2, r3
 800324a:	d001      	beq.n	8003250 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e032      	b.n	80032b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 0304 	and.w	r3, r3, #4
 8003258:	2b00      	cmp	r3, #0
 800325a:	d008      	beq.n	800326e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800325c:	4b19      	ldr	r3, [pc, #100]	@ (80032c4 <HAL_RCC_ClockConfig+0x1bc>)
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	4916      	ldr	r1, [pc, #88]	@ (80032c4 <HAL_RCC_ClockConfig+0x1bc>)
 800326a:	4313      	orrs	r3, r2
 800326c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0308 	and.w	r3, r3, #8
 8003276:	2b00      	cmp	r3, #0
 8003278:	d009      	beq.n	800328e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800327a:	4b12      	ldr	r3, [pc, #72]	@ (80032c4 <HAL_RCC_ClockConfig+0x1bc>)
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	691b      	ldr	r3, [r3, #16]
 8003286:	00db      	lsls	r3, r3, #3
 8003288:	490e      	ldr	r1, [pc, #56]	@ (80032c4 <HAL_RCC_ClockConfig+0x1bc>)
 800328a:	4313      	orrs	r3, r2
 800328c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800328e:	f000 f821 	bl	80032d4 <HAL_RCC_GetSysClockFreq>
 8003292:	4602      	mov	r2, r0
 8003294:	4b0b      	ldr	r3, [pc, #44]	@ (80032c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	091b      	lsrs	r3, r3, #4
 800329a:	f003 030f 	and.w	r3, r3, #15
 800329e:	490a      	ldr	r1, [pc, #40]	@ (80032c8 <HAL_RCC_ClockConfig+0x1c0>)
 80032a0:	5ccb      	ldrb	r3, [r1, r3]
 80032a2:	fa22 f303 	lsr.w	r3, r2, r3
 80032a6:	4a09      	ldr	r2, [pc, #36]	@ (80032cc <HAL_RCC_ClockConfig+0x1c4>)
 80032a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80032aa:	4b09      	ldr	r3, [pc, #36]	@ (80032d0 <HAL_RCC_ClockConfig+0x1c8>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4618      	mov	r0, r3
 80032b0:	f7fd fd8c 	bl	8000dcc <HAL_InitTick>

  return HAL_OK;
 80032b4:	2300      	movs	r3, #0
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3710      	adds	r7, #16
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	40023c00 	.word	0x40023c00
 80032c4:	40023800 	.word	0x40023800
 80032c8:	08003fcc 	.word	0x08003fcc
 80032cc:	20000000 	.word	0x20000000
 80032d0:	20000004 	.word	0x20000004

080032d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032d8:	b090      	sub	sp, #64	@ 0x40
 80032da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80032dc:	2300      	movs	r3, #0
 80032de:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80032e0:	2300      	movs	r3, #0
 80032e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80032e4:	2300      	movs	r3, #0
 80032e6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80032e8:	2300      	movs	r3, #0
 80032ea:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032ec:	4b59      	ldr	r3, [pc, #356]	@ (8003454 <HAL_RCC_GetSysClockFreq+0x180>)
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	f003 030c 	and.w	r3, r3, #12
 80032f4:	2b08      	cmp	r3, #8
 80032f6:	d00d      	beq.n	8003314 <HAL_RCC_GetSysClockFreq+0x40>
 80032f8:	2b08      	cmp	r3, #8
 80032fa:	f200 80a1 	bhi.w	8003440 <HAL_RCC_GetSysClockFreq+0x16c>
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d002      	beq.n	8003308 <HAL_RCC_GetSysClockFreq+0x34>
 8003302:	2b04      	cmp	r3, #4
 8003304:	d003      	beq.n	800330e <HAL_RCC_GetSysClockFreq+0x3a>
 8003306:	e09b      	b.n	8003440 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003308:	4b53      	ldr	r3, [pc, #332]	@ (8003458 <HAL_RCC_GetSysClockFreq+0x184>)
 800330a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800330c:	e09b      	b.n	8003446 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800330e:	4b53      	ldr	r3, [pc, #332]	@ (800345c <HAL_RCC_GetSysClockFreq+0x188>)
 8003310:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003312:	e098      	b.n	8003446 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003314:	4b4f      	ldr	r3, [pc, #316]	@ (8003454 <HAL_RCC_GetSysClockFreq+0x180>)
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800331c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800331e:	4b4d      	ldr	r3, [pc, #308]	@ (8003454 <HAL_RCC_GetSysClockFreq+0x180>)
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d028      	beq.n	800337c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800332a:	4b4a      	ldr	r3, [pc, #296]	@ (8003454 <HAL_RCC_GetSysClockFreq+0x180>)
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	099b      	lsrs	r3, r3, #6
 8003330:	2200      	movs	r2, #0
 8003332:	623b      	str	r3, [r7, #32]
 8003334:	627a      	str	r2, [r7, #36]	@ 0x24
 8003336:	6a3b      	ldr	r3, [r7, #32]
 8003338:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800333c:	2100      	movs	r1, #0
 800333e:	4b47      	ldr	r3, [pc, #284]	@ (800345c <HAL_RCC_GetSysClockFreq+0x188>)
 8003340:	fb03 f201 	mul.w	r2, r3, r1
 8003344:	2300      	movs	r3, #0
 8003346:	fb00 f303 	mul.w	r3, r0, r3
 800334a:	4413      	add	r3, r2
 800334c:	4a43      	ldr	r2, [pc, #268]	@ (800345c <HAL_RCC_GetSysClockFreq+0x188>)
 800334e:	fba0 1202 	umull	r1, r2, r0, r2
 8003352:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003354:	460a      	mov	r2, r1
 8003356:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003358:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800335a:	4413      	add	r3, r2
 800335c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800335e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003360:	2200      	movs	r2, #0
 8003362:	61bb      	str	r3, [r7, #24]
 8003364:	61fa      	str	r2, [r7, #28]
 8003366:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800336a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800336e:	f7fc ff33 	bl	80001d8 <__aeabi_uldivmod>
 8003372:	4602      	mov	r2, r0
 8003374:	460b      	mov	r3, r1
 8003376:	4613      	mov	r3, r2
 8003378:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800337a:	e053      	b.n	8003424 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800337c:	4b35      	ldr	r3, [pc, #212]	@ (8003454 <HAL_RCC_GetSysClockFreq+0x180>)
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	099b      	lsrs	r3, r3, #6
 8003382:	2200      	movs	r2, #0
 8003384:	613b      	str	r3, [r7, #16]
 8003386:	617a      	str	r2, [r7, #20]
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800338e:	f04f 0b00 	mov.w	fp, #0
 8003392:	4652      	mov	r2, sl
 8003394:	465b      	mov	r3, fp
 8003396:	f04f 0000 	mov.w	r0, #0
 800339a:	f04f 0100 	mov.w	r1, #0
 800339e:	0159      	lsls	r1, r3, #5
 80033a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033a4:	0150      	lsls	r0, r2, #5
 80033a6:	4602      	mov	r2, r0
 80033a8:	460b      	mov	r3, r1
 80033aa:	ebb2 080a 	subs.w	r8, r2, sl
 80033ae:	eb63 090b 	sbc.w	r9, r3, fp
 80033b2:	f04f 0200 	mov.w	r2, #0
 80033b6:	f04f 0300 	mov.w	r3, #0
 80033ba:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80033be:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80033c2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80033c6:	ebb2 0408 	subs.w	r4, r2, r8
 80033ca:	eb63 0509 	sbc.w	r5, r3, r9
 80033ce:	f04f 0200 	mov.w	r2, #0
 80033d2:	f04f 0300 	mov.w	r3, #0
 80033d6:	00eb      	lsls	r3, r5, #3
 80033d8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033dc:	00e2      	lsls	r2, r4, #3
 80033de:	4614      	mov	r4, r2
 80033e0:	461d      	mov	r5, r3
 80033e2:	eb14 030a 	adds.w	r3, r4, sl
 80033e6:	603b      	str	r3, [r7, #0]
 80033e8:	eb45 030b 	adc.w	r3, r5, fp
 80033ec:	607b      	str	r3, [r7, #4]
 80033ee:	f04f 0200 	mov.w	r2, #0
 80033f2:	f04f 0300 	mov.w	r3, #0
 80033f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80033fa:	4629      	mov	r1, r5
 80033fc:	028b      	lsls	r3, r1, #10
 80033fe:	4621      	mov	r1, r4
 8003400:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003404:	4621      	mov	r1, r4
 8003406:	028a      	lsls	r2, r1, #10
 8003408:	4610      	mov	r0, r2
 800340a:	4619      	mov	r1, r3
 800340c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800340e:	2200      	movs	r2, #0
 8003410:	60bb      	str	r3, [r7, #8]
 8003412:	60fa      	str	r2, [r7, #12]
 8003414:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003418:	f7fc fede 	bl	80001d8 <__aeabi_uldivmod>
 800341c:	4602      	mov	r2, r0
 800341e:	460b      	mov	r3, r1
 8003420:	4613      	mov	r3, r2
 8003422:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003424:	4b0b      	ldr	r3, [pc, #44]	@ (8003454 <HAL_RCC_GetSysClockFreq+0x180>)
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	0c1b      	lsrs	r3, r3, #16
 800342a:	f003 0303 	and.w	r3, r3, #3
 800342e:	3301      	adds	r3, #1
 8003430:	005b      	lsls	r3, r3, #1
 8003432:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003434:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003438:	fbb2 f3f3 	udiv	r3, r2, r3
 800343c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800343e:	e002      	b.n	8003446 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003440:	4b05      	ldr	r3, [pc, #20]	@ (8003458 <HAL_RCC_GetSysClockFreq+0x184>)
 8003442:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003444:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003446:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003448:	4618      	mov	r0, r3
 800344a:	3740      	adds	r7, #64	@ 0x40
 800344c:	46bd      	mov	sp, r7
 800344e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003452:	bf00      	nop
 8003454:	40023800 	.word	0x40023800
 8003458:	00f42400 	.word	0x00f42400
 800345c:	017d7840 	.word	0x017d7840

08003460 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b086      	sub	sp, #24
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003468:	2300      	movs	r3, #0
 800346a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800346c:	2300      	movs	r3, #0
 800346e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0301 	and.w	r3, r3, #1
 8003478:	2b00      	cmp	r3, #0
 800347a:	d105      	bne.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003484:	2b00      	cmp	r3, #0
 8003486:	d038      	beq.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003488:	4b68      	ldr	r3, [pc, #416]	@ (800362c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800348a:	2200      	movs	r2, #0
 800348c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800348e:	f7fd fce1 	bl	8000e54 <HAL_GetTick>
 8003492:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003494:	e008      	b.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003496:	f7fd fcdd 	bl	8000e54 <HAL_GetTick>
 800349a:	4602      	mov	r2, r0
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	d901      	bls.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	e0bd      	b.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80034a8:	4b61      	ldr	r3, [pc, #388]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d1f0      	bne.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	685a      	ldr	r2, [r3, #4]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	019b      	lsls	r3, r3, #6
 80034be:	431a      	orrs	r2, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	071b      	lsls	r3, r3, #28
 80034c6:	495a      	ldr	r1, [pc, #360]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034c8:	4313      	orrs	r3, r2
 80034ca:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80034ce:	4b57      	ldr	r3, [pc, #348]	@ (800362c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80034d0:	2201      	movs	r2, #1
 80034d2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80034d4:	f7fd fcbe 	bl	8000e54 <HAL_GetTick>
 80034d8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80034da:	e008      	b.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80034dc:	f7fd fcba 	bl	8000e54 <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d901      	bls.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e09a      	b.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80034ee:	4b50      	ldr	r3, [pc, #320]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d0f0      	beq.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 0302 	and.w	r3, r3, #2
 8003502:	2b00      	cmp	r3, #0
 8003504:	f000 8083 	beq.w	800360e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003508:	2300      	movs	r3, #0
 800350a:	60fb      	str	r3, [r7, #12]
 800350c:	4b48      	ldr	r3, [pc, #288]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800350e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003510:	4a47      	ldr	r2, [pc, #284]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003512:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003516:	6413      	str	r3, [r2, #64]	@ 0x40
 8003518:	4b45      	ldr	r3, [pc, #276]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800351a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800351c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003520:	60fb      	str	r3, [r7, #12]
 8003522:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003524:	4b43      	ldr	r3, [pc, #268]	@ (8003634 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a42      	ldr	r2, [pc, #264]	@ (8003634 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800352a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800352e:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003530:	f7fd fc90 	bl	8000e54 <HAL_GetTick>
 8003534:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003536:	e008      	b.n	800354a <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003538:	f7fd fc8c 	bl	8000e54 <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	2b02      	cmp	r3, #2
 8003544:	d901      	bls.n	800354a <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8003546:	2303      	movs	r3, #3
 8003548:	e06c      	b.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800354a:	4b3a      	ldr	r3, [pc, #232]	@ (8003634 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003552:	2b00      	cmp	r3, #0
 8003554:	d0f0      	beq.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003556:	4b36      	ldr	r3, [pc, #216]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003558:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800355a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800355e:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d02f      	beq.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	691b      	ldr	r3, [r3, #16]
 800356a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800356e:	693a      	ldr	r2, [r7, #16]
 8003570:	429a      	cmp	r2, r3
 8003572:	d028      	beq.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003574:	4b2e      	ldr	r3, [pc, #184]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003576:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003578:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800357c:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800357e:	4b2e      	ldr	r3, [pc, #184]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003580:	2201      	movs	r2, #1
 8003582:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003584:	4b2c      	ldr	r3, [pc, #176]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003586:	2200      	movs	r2, #0
 8003588:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800358a:	4a29      	ldr	r2, [pc, #164]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003590:	4b27      	ldr	r3, [pc, #156]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003592:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003594:	f003 0301 	and.w	r3, r3, #1
 8003598:	2b01      	cmp	r3, #1
 800359a:	d114      	bne.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800359c:	f7fd fc5a 	bl	8000e54 <HAL_GetTick>
 80035a0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035a2:	e00a      	b.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035a4:	f7fd fc56 	bl	8000e54 <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d901      	bls.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e034      	b.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035ba:	4b1d      	ldr	r3, [pc, #116]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035be:	f003 0302 	and.w	r3, r3, #2
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d0ee      	beq.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	691b      	ldr	r3, [r3, #16]
 80035ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80035ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80035d2:	d10d      	bne.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x190>
 80035d4:	4b16      	ldr	r3, [pc, #88]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	691b      	ldr	r3, [r3, #16]
 80035e0:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80035e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035e8:	4911      	ldr	r1, [pc, #68]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035ea:	4313      	orrs	r3, r2
 80035ec:	608b      	str	r3, [r1, #8]
 80035ee:	e005      	b.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80035f0:	4b0f      	ldr	r3, [pc, #60]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	4a0e      	ldr	r2, [pc, #56]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035f6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80035fa:	6093      	str	r3, [r2, #8]
 80035fc:	4b0c      	ldr	r3, [pc, #48]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035fe:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	691b      	ldr	r3, [r3, #16]
 8003604:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003608:	4909      	ldr	r1, [pc, #36]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800360a:	4313      	orrs	r3, r2
 800360c:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0308 	and.w	r3, r3, #8
 8003616:	2b00      	cmp	r3, #0
 8003618:	d003      	beq.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	7d1a      	ldrb	r2, [r3, #20]
 800361e:	4b07      	ldr	r3, [pc, #28]	@ (800363c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8003620:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003622:	2300      	movs	r3, #0
}
 8003624:	4618      	mov	r0, r3
 8003626:	3718      	adds	r7, #24
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}
 800362c:	42470068 	.word	0x42470068
 8003630:	40023800 	.word	0x40023800
 8003634:	40007000 	.word	0x40007000
 8003638:	42470e40 	.word	0x42470e40
 800363c:	424711e0 	.word	0x424711e0

08003640 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003640:	b480      	push	{r7}
 8003642:	b087      	sub	sp, #28
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003648:	2300      	movs	r3, #0
 800364a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800364c:	2300      	movs	r3, #0
 800364e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003650:	2300      	movs	r3, #0
 8003652:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003654:	2300      	movs	r3, #0
 8003656:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2b01      	cmp	r3, #1
 800365c:	d141      	bne.n	80036e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800365e:	4b25      	ldr	r3, [pc, #148]	@ (80036f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003666:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d006      	beq.n	800367c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003674:	d131      	bne.n	80036da <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003676:	4b20      	ldr	r3, [pc, #128]	@ (80036f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8003678:	617b      	str	r3, [r7, #20]
          break;
 800367a:	e031      	b.n	80036e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800367c:	4b1d      	ldr	r3, [pc, #116]	@ (80036f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003684:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003688:	d109      	bne.n	800369e <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800368a:	4b1a      	ldr	r3, [pc, #104]	@ (80036f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800368c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003690:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003694:	4a19      	ldr	r2, [pc, #100]	@ (80036fc <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8003696:	fbb2 f3f3 	udiv	r3, r2, r3
 800369a:	613b      	str	r3, [r7, #16]
 800369c:	e008      	b.n	80036b0 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800369e:	4b15      	ldr	r3, [pc, #84]	@ (80036f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80036a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80036a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80036a8:	4a15      	ldr	r2, [pc, #84]	@ (8003700 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 80036aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80036ae:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80036b0:	4b10      	ldr	r3, [pc, #64]	@ (80036f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80036b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80036b6:	099b      	lsrs	r3, r3, #6
 80036b8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	fb02 f303 	mul.w	r3, r2, r3
 80036c2:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80036c4:	4b0b      	ldr	r3, [pc, #44]	@ (80036f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80036c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80036ca:	0f1b      	lsrs	r3, r3, #28
 80036cc:	f003 0307 	and.w	r3, r3, #7
 80036d0:	68ba      	ldr	r2, [r7, #8]
 80036d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80036d6:	617b      	str	r3, [r7, #20]
          break;
 80036d8:	e002      	b.n	80036e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 80036da:	2300      	movs	r3, #0
 80036dc:	617b      	str	r3, [r7, #20]
          break;
 80036de:	bf00      	nop
        }
      }
      break;
 80036e0:	e000      	b.n	80036e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
    }
    default:
    {
      break;
 80036e2:	bf00      	nop
    }
  }
  return frequency;
 80036e4:	697b      	ldr	r3, [r7, #20]
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	371c      	adds	r7, #28
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr
 80036f2:	bf00      	nop
 80036f4:	40023800 	.word	0x40023800
 80036f8:	00bb8000 	.word	0x00bb8000
 80036fc:	017d7840 	.word	0x017d7840
 8003700:	00f42400 	.word	0x00f42400

08003704 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b082      	sub	sp, #8
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d101      	bne.n	8003716 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e041      	b.n	800379a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800371c:	b2db      	uxtb	r3, r3
 800371e:	2b00      	cmp	r3, #0
 8003720:	d106      	bne.n	8003730 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f7fd fadc 	bl	8000ce8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2202      	movs	r2, #2
 8003734:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	3304      	adds	r3, #4
 8003740:	4619      	mov	r1, r3
 8003742:	4610      	mov	r0, r2
 8003744:	f000 fa68 	bl	8003c18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2201      	movs	r2, #1
 8003764:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2201      	movs	r2, #1
 8003774:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2201      	movs	r2, #1
 800377c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2201      	movs	r2, #1
 8003784:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2201      	movs	r2, #1
 8003794:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003798:	2300      	movs	r3, #0
}
 800379a:	4618      	mov	r0, r3
 800379c:	3708      	adds	r7, #8
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
	...

080037a4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b085      	sub	sp, #20
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d001      	beq.n	80037bc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	e03c      	b.n	8003836 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2202      	movs	r2, #2
 80037c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a1e      	ldr	r2, [pc, #120]	@ (8003844 <HAL_TIM_Base_Start+0xa0>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d018      	beq.n	8003800 <HAL_TIM_Base_Start+0x5c>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037d6:	d013      	beq.n	8003800 <HAL_TIM_Base_Start+0x5c>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a1a      	ldr	r2, [pc, #104]	@ (8003848 <HAL_TIM_Base_Start+0xa4>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d00e      	beq.n	8003800 <HAL_TIM_Base_Start+0x5c>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a19      	ldr	r2, [pc, #100]	@ (800384c <HAL_TIM_Base_Start+0xa8>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d009      	beq.n	8003800 <HAL_TIM_Base_Start+0x5c>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a17      	ldr	r2, [pc, #92]	@ (8003850 <HAL_TIM_Base_Start+0xac>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d004      	beq.n	8003800 <HAL_TIM_Base_Start+0x5c>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a16      	ldr	r2, [pc, #88]	@ (8003854 <HAL_TIM_Base_Start+0xb0>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d111      	bne.n	8003824 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	f003 0307 	and.w	r3, r3, #7
 800380a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2b06      	cmp	r3, #6
 8003810:	d010      	beq.n	8003834 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f042 0201 	orr.w	r2, r2, #1
 8003820:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003822:	e007      	b.n	8003834 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f042 0201 	orr.w	r2, r2, #1
 8003832:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003834:	2300      	movs	r3, #0
}
 8003836:	4618      	mov	r0, r3
 8003838:	3714      	adds	r7, #20
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	40010000 	.word	0x40010000
 8003848:	40000400 	.word	0x40000400
 800384c:	40000800 	.word	0x40000800
 8003850:	40000c00 	.word	0x40000c00
 8003854:	40014000 	.word	0x40014000

08003858 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b084      	sub	sp, #16
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	691b      	ldr	r3, [r3, #16]
 800386e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	f003 0302 	and.w	r3, r3, #2
 8003876:	2b00      	cmp	r3, #0
 8003878:	d020      	beq.n	80038bc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	f003 0302 	and.w	r3, r3, #2
 8003880:	2b00      	cmp	r3, #0
 8003882:	d01b      	beq.n	80038bc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f06f 0202 	mvn.w	r2, #2
 800388c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2201      	movs	r2, #1
 8003892:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	699b      	ldr	r3, [r3, #24]
 800389a:	f003 0303 	and.w	r3, r3, #3
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d003      	beq.n	80038aa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f000 f999 	bl	8003bda <HAL_TIM_IC_CaptureCallback>
 80038a8:	e005      	b.n	80038b6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f000 f98b 	bl	8003bc6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f000 f99c 	bl	8003bee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	f003 0304 	and.w	r3, r3, #4
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d020      	beq.n	8003908 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	f003 0304 	and.w	r3, r3, #4
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d01b      	beq.n	8003908 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f06f 0204 	mvn.w	r2, #4
 80038d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2202      	movs	r2, #2
 80038de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	699b      	ldr	r3, [r3, #24]
 80038e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d003      	beq.n	80038f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f000 f973 	bl	8003bda <HAL_TIM_IC_CaptureCallback>
 80038f4:	e005      	b.n	8003902 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 f965 	bl	8003bc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f000 f976 	bl	8003bee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	f003 0308 	and.w	r3, r3, #8
 800390e:	2b00      	cmp	r3, #0
 8003910:	d020      	beq.n	8003954 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	f003 0308 	and.w	r3, r3, #8
 8003918:	2b00      	cmp	r3, #0
 800391a:	d01b      	beq.n	8003954 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f06f 0208 	mvn.w	r2, #8
 8003924:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2204      	movs	r2, #4
 800392a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	69db      	ldr	r3, [r3, #28]
 8003932:	f003 0303 	and.w	r3, r3, #3
 8003936:	2b00      	cmp	r3, #0
 8003938:	d003      	beq.n	8003942 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f000 f94d 	bl	8003bda <HAL_TIM_IC_CaptureCallback>
 8003940:	e005      	b.n	800394e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f000 f93f 	bl	8003bc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f000 f950 	bl	8003bee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	f003 0310 	and.w	r3, r3, #16
 800395a:	2b00      	cmp	r3, #0
 800395c:	d020      	beq.n	80039a0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	f003 0310 	and.w	r3, r3, #16
 8003964:	2b00      	cmp	r3, #0
 8003966:	d01b      	beq.n	80039a0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f06f 0210 	mvn.w	r2, #16
 8003970:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2208      	movs	r2, #8
 8003976:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	69db      	ldr	r3, [r3, #28]
 800397e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003982:	2b00      	cmp	r3, #0
 8003984:	d003      	beq.n	800398e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f000 f927 	bl	8003bda <HAL_TIM_IC_CaptureCallback>
 800398c:	e005      	b.n	800399a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f000 f919 	bl	8003bc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	f000 f92a 	bl	8003bee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	f003 0301 	and.w	r3, r3, #1
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d00c      	beq.n	80039c4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	f003 0301 	and.w	r3, r3, #1
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d007      	beq.n	80039c4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f06f 0201 	mvn.w	r2, #1
 80039bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f7fd f910 	bl	8000be4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d00c      	beq.n	80039e8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d007      	beq.n	80039e8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80039e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f000 fab0 	bl	8003f48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d00c      	beq.n	8003a0c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d007      	beq.n	8003a0c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003a04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f000 f8fb 	bl	8003c02 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	f003 0320 	and.w	r3, r3, #32
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d00c      	beq.n	8003a30 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	f003 0320 	and.w	r3, r3, #32
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d007      	beq.n	8003a30 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f06f 0220 	mvn.w	r2, #32
 8003a28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f000 fa82 	bl	8003f34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a30:	bf00      	nop
 8003a32:	3710      	adds	r7, #16
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}

08003a38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b084      	sub	sp, #16
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a42:	2300      	movs	r3, #0
 8003a44:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d101      	bne.n	8003a54 <HAL_TIM_ConfigClockSource+0x1c>
 8003a50:	2302      	movs	r3, #2
 8003a52:	e0b4      	b.n	8003bbe <HAL_TIM_ConfigClockSource+0x186>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2202      	movs	r2, #2
 8003a60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003a72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003a7a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	68ba      	ldr	r2, [r7, #8]
 8003a82:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a8c:	d03e      	beq.n	8003b0c <HAL_TIM_ConfigClockSource+0xd4>
 8003a8e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a92:	f200 8087 	bhi.w	8003ba4 <HAL_TIM_ConfigClockSource+0x16c>
 8003a96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a9a:	f000 8086 	beq.w	8003baa <HAL_TIM_ConfigClockSource+0x172>
 8003a9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003aa2:	d87f      	bhi.n	8003ba4 <HAL_TIM_ConfigClockSource+0x16c>
 8003aa4:	2b70      	cmp	r3, #112	@ 0x70
 8003aa6:	d01a      	beq.n	8003ade <HAL_TIM_ConfigClockSource+0xa6>
 8003aa8:	2b70      	cmp	r3, #112	@ 0x70
 8003aaa:	d87b      	bhi.n	8003ba4 <HAL_TIM_ConfigClockSource+0x16c>
 8003aac:	2b60      	cmp	r3, #96	@ 0x60
 8003aae:	d050      	beq.n	8003b52 <HAL_TIM_ConfigClockSource+0x11a>
 8003ab0:	2b60      	cmp	r3, #96	@ 0x60
 8003ab2:	d877      	bhi.n	8003ba4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ab4:	2b50      	cmp	r3, #80	@ 0x50
 8003ab6:	d03c      	beq.n	8003b32 <HAL_TIM_ConfigClockSource+0xfa>
 8003ab8:	2b50      	cmp	r3, #80	@ 0x50
 8003aba:	d873      	bhi.n	8003ba4 <HAL_TIM_ConfigClockSource+0x16c>
 8003abc:	2b40      	cmp	r3, #64	@ 0x40
 8003abe:	d058      	beq.n	8003b72 <HAL_TIM_ConfigClockSource+0x13a>
 8003ac0:	2b40      	cmp	r3, #64	@ 0x40
 8003ac2:	d86f      	bhi.n	8003ba4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ac4:	2b30      	cmp	r3, #48	@ 0x30
 8003ac6:	d064      	beq.n	8003b92 <HAL_TIM_ConfigClockSource+0x15a>
 8003ac8:	2b30      	cmp	r3, #48	@ 0x30
 8003aca:	d86b      	bhi.n	8003ba4 <HAL_TIM_ConfigClockSource+0x16c>
 8003acc:	2b20      	cmp	r3, #32
 8003ace:	d060      	beq.n	8003b92 <HAL_TIM_ConfigClockSource+0x15a>
 8003ad0:	2b20      	cmp	r3, #32
 8003ad2:	d867      	bhi.n	8003ba4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d05c      	beq.n	8003b92 <HAL_TIM_ConfigClockSource+0x15a>
 8003ad8:	2b10      	cmp	r3, #16
 8003ada:	d05a      	beq.n	8003b92 <HAL_TIM_ConfigClockSource+0x15a>
 8003adc:	e062      	b.n	8003ba4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003aee:	f000 f993 	bl	8003e18 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003b00:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	68ba      	ldr	r2, [r7, #8]
 8003b08:	609a      	str	r2, [r3, #8]
      break;
 8003b0a:	e04f      	b.n	8003bac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b1c:	f000 f97c 	bl	8003e18 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	689a      	ldr	r2, [r3, #8]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003b2e:	609a      	str	r2, [r3, #8]
      break;
 8003b30:	e03c      	b.n	8003bac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b3e:	461a      	mov	r2, r3
 8003b40:	f000 f8f0 	bl	8003d24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	2150      	movs	r1, #80	@ 0x50
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f000 f949 	bl	8003de2 <TIM_ITRx_SetConfig>
      break;
 8003b50:	e02c      	b.n	8003bac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b5e:	461a      	mov	r2, r3
 8003b60:	f000 f90f 	bl	8003d82 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	2160      	movs	r1, #96	@ 0x60
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f000 f939 	bl	8003de2 <TIM_ITRx_SetConfig>
      break;
 8003b70:	e01c      	b.n	8003bac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b7e:	461a      	mov	r2, r3
 8003b80:	f000 f8d0 	bl	8003d24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	2140      	movs	r1, #64	@ 0x40
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f000 f929 	bl	8003de2 <TIM_ITRx_SetConfig>
      break;
 8003b90:	e00c      	b.n	8003bac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4619      	mov	r1, r3
 8003b9c:	4610      	mov	r0, r2
 8003b9e:	f000 f920 	bl	8003de2 <TIM_ITRx_SetConfig>
      break;
 8003ba2:	e003      	b.n	8003bac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	73fb      	strb	r3, [r7, #15]
      break;
 8003ba8:	e000      	b.n	8003bac <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003baa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3710      	adds	r7, #16
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}

08003bc6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003bc6:	b480      	push	{r7}
 8003bc8:	b083      	sub	sp, #12
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003bce:	bf00      	nop
 8003bd0:	370c      	adds	r7, #12
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr

08003bda <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003bda:	b480      	push	{r7}
 8003bdc:	b083      	sub	sp, #12
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003be2:	bf00      	nop
 8003be4:	370c      	adds	r7, #12
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr

08003bee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003bee:	b480      	push	{r7}
 8003bf0:	b083      	sub	sp, #12
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003bf6:	bf00      	nop
 8003bf8:	370c      	adds	r7, #12
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr

08003c02 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c02:	b480      	push	{r7}
 8003c04:	b083      	sub	sp, #12
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c0a:	bf00      	nop
 8003c0c:	370c      	adds	r7, #12
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr
	...

08003c18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b085      	sub	sp, #20
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
 8003c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	4a37      	ldr	r2, [pc, #220]	@ (8003d08 <TIM_Base_SetConfig+0xf0>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d00f      	beq.n	8003c50 <TIM_Base_SetConfig+0x38>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c36:	d00b      	beq.n	8003c50 <TIM_Base_SetConfig+0x38>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	4a34      	ldr	r2, [pc, #208]	@ (8003d0c <TIM_Base_SetConfig+0xf4>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d007      	beq.n	8003c50 <TIM_Base_SetConfig+0x38>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	4a33      	ldr	r2, [pc, #204]	@ (8003d10 <TIM_Base_SetConfig+0xf8>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d003      	beq.n	8003c50 <TIM_Base_SetConfig+0x38>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	4a32      	ldr	r2, [pc, #200]	@ (8003d14 <TIM_Base_SetConfig+0xfc>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d108      	bne.n	8003c62 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	68fa      	ldr	r2, [r7, #12]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4a28      	ldr	r2, [pc, #160]	@ (8003d08 <TIM_Base_SetConfig+0xf0>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d01b      	beq.n	8003ca2 <TIM_Base_SetConfig+0x8a>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c70:	d017      	beq.n	8003ca2 <TIM_Base_SetConfig+0x8a>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	4a25      	ldr	r2, [pc, #148]	@ (8003d0c <TIM_Base_SetConfig+0xf4>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d013      	beq.n	8003ca2 <TIM_Base_SetConfig+0x8a>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	4a24      	ldr	r2, [pc, #144]	@ (8003d10 <TIM_Base_SetConfig+0xf8>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d00f      	beq.n	8003ca2 <TIM_Base_SetConfig+0x8a>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	4a23      	ldr	r2, [pc, #140]	@ (8003d14 <TIM_Base_SetConfig+0xfc>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d00b      	beq.n	8003ca2 <TIM_Base_SetConfig+0x8a>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4a22      	ldr	r2, [pc, #136]	@ (8003d18 <TIM_Base_SetConfig+0x100>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d007      	beq.n	8003ca2 <TIM_Base_SetConfig+0x8a>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4a21      	ldr	r2, [pc, #132]	@ (8003d1c <TIM_Base_SetConfig+0x104>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d003      	beq.n	8003ca2 <TIM_Base_SetConfig+0x8a>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4a20      	ldr	r2, [pc, #128]	@ (8003d20 <TIM_Base_SetConfig+0x108>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d108      	bne.n	8003cb4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ca8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	68db      	ldr	r3, [r3, #12]
 8003cae:	68fa      	ldr	r2, [r7, #12]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	695b      	ldr	r3, [r3, #20]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	689a      	ldr	r2, [r3, #8]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4a0c      	ldr	r2, [pc, #48]	@ (8003d08 <TIM_Base_SetConfig+0xf0>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d103      	bne.n	8003ce2 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	691a      	ldr	r2, [r3, #16]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f043 0204 	orr.w	r2, r3, #4
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	68fa      	ldr	r2, [r7, #12]
 8003cf8:	601a      	str	r2, [r3, #0]
}
 8003cfa:	bf00      	nop
 8003cfc:	3714      	adds	r7, #20
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr
 8003d06:	bf00      	nop
 8003d08:	40010000 	.word	0x40010000
 8003d0c:	40000400 	.word	0x40000400
 8003d10:	40000800 	.word	0x40000800
 8003d14:	40000c00 	.word	0x40000c00
 8003d18:	40014000 	.word	0x40014000
 8003d1c:	40014400 	.word	0x40014400
 8003d20:	40014800 	.word	0x40014800

08003d24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b087      	sub	sp, #28
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	60f8      	str	r0, [r7, #12]
 8003d2c:	60b9      	str	r1, [r7, #8]
 8003d2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6a1b      	ldr	r3, [r3, #32]
 8003d34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	6a1b      	ldr	r3, [r3, #32]
 8003d3a:	f023 0201 	bic.w	r2, r3, #1
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	699b      	ldr	r3, [r3, #24]
 8003d46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003d4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	011b      	lsls	r3, r3, #4
 8003d54:	693a      	ldr	r2, [r7, #16]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	f023 030a 	bic.w	r3, r3, #10
 8003d60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d62:	697a      	ldr	r2, [r7, #20]
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	693a      	ldr	r2, [r7, #16]
 8003d6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	697a      	ldr	r2, [r7, #20]
 8003d74:	621a      	str	r2, [r3, #32]
}
 8003d76:	bf00      	nop
 8003d78:	371c      	adds	r7, #28
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr

08003d82 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d82:	b480      	push	{r7}
 8003d84:	b087      	sub	sp, #28
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	60f8      	str	r0, [r7, #12]
 8003d8a:	60b9      	str	r1, [r7, #8]
 8003d8c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	6a1b      	ldr	r3, [r3, #32]
 8003d92:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6a1b      	ldr	r3, [r3, #32]
 8003d98:	f023 0210 	bic.w	r2, r3, #16
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	699b      	ldr	r3, [r3, #24]
 8003da4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003dac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	031b      	lsls	r3, r3, #12
 8003db2:	693a      	ldr	r2, [r7, #16]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003dbe:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	011b      	lsls	r3, r3, #4
 8003dc4:	697a      	ldr	r2, [r7, #20]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	693a      	ldr	r2, [r7, #16]
 8003dce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	697a      	ldr	r2, [r7, #20]
 8003dd4:	621a      	str	r2, [r3, #32]
}
 8003dd6:	bf00      	nop
 8003dd8:	371c      	adds	r7, #28
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr

08003de2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003de2:	b480      	push	{r7}
 8003de4:	b085      	sub	sp, #20
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	6078      	str	r0, [r7, #4]
 8003dea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003df8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003dfa:	683a      	ldr	r2, [r7, #0]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	f043 0307 	orr.w	r3, r3, #7
 8003e04:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	68fa      	ldr	r2, [r7, #12]
 8003e0a:	609a      	str	r2, [r3, #8]
}
 8003e0c:	bf00      	nop
 8003e0e:	3714      	adds	r7, #20
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr

08003e18 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b087      	sub	sp, #28
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	60f8      	str	r0, [r7, #12]
 8003e20:	60b9      	str	r1, [r7, #8]
 8003e22:	607a      	str	r2, [r7, #4]
 8003e24:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003e32:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	021a      	lsls	r2, r3, #8
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	431a      	orrs	r2, r3
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	697a      	ldr	r2, [r7, #20]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	697a      	ldr	r2, [r7, #20]
 8003e4a:	609a      	str	r2, [r3, #8]
}
 8003e4c:	bf00      	nop
 8003e4e:	371c      	adds	r7, #28
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr

08003e58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b085      	sub	sp, #20
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d101      	bne.n	8003e70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e6c:	2302      	movs	r3, #2
 8003e6e:	e050      	b.n	8003f12 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2201      	movs	r2, #1
 8003e74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2202      	movs	r2, #2
 8003e7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e96:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	68fa      	ldr	r2, [r7, #12]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	68fa      	ldr	r2, [r7, #12]
 8003ea8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a1c      	ldr	r2, [pc, #112]	@ (8003f20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d018      	beq.n	8003ee6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ebc:	d013      	beq.n	8003ee6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a18      	ldr	r2, [pc, #96]	@ (8003f24 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d00e      	beq.n	8003ee6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a16      	ldr	r2, [pc, #88]	@ (8003f28 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d009      	beq.n	8003ee6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a15      	ldr	r2, [pc, #84]	@ (8003f2c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d004      	beq.n	8003ee6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a13      	ldr	r2, [pc, #76]	@ (8003f30 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d10c      	bne.n	8003f00 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003eec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	68ba      	ldr	r2, [r7, #8]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	68ba      	ldr	r2, [r7, #8]
 8003efe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003f10:	2300      	movs	r3, #0
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3714      	adds	r7, #20
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr
 8003f1e:	bf00      	nop
 8003f20:	40010000 	.word	0x40010000
 8003f24:	40000400 	.word	0x40000400
 8003f28:	40000800 	.word	0x40000800
 8003f2c:	40000c00 	.word	0x40000c00
 8003f30:	40014000 	.word	0x40014000

08003f34 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f3c:	bf00      	nop
 8003f3e:	370c      	adds	r7, #12
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr

08003f48 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b083      	sub	sp, #12
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f50:	bf00      	nop
 8003f52:	370c      	adds	r7, #12
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr

08003f5c <memset>:
 8003f5c:	4402      	add	r2, r0
 8003f5e:	4603      	mov	r3, r0
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d100      	bne.n	8003f66 <memset+0xa>
 8003f64:	4770      	bx	lr
 8003f66:	f803 1b01 	strb.w	r1, [r3], #1
 8003f6a:	e7f9      	b.n	8003f60 <memset+0x4>

08003f6c <__libc_init_array>:
 8003f6c:	b570      	push	{r4, r5, r6, lr}
 8003f6e:	4d0d      	ldr	r5, [pc, #52]	@ (8003fa4 <__libc_init_array+0x38>)
 8003f70:	4c0d      	ldr	r4, [pc, #52]	@ (8003fa8 <__libc_init_array+0x3c>)
 8003f72:	1b64      	subs	r4, r4, r5
 8003f74:	10a4      	asrs	r4, r4, #2
 8003f76:	2600      	movs	r6, #0
 8003f78:	42a6      	cmp	r6, r4
 8003f7a:	d109      	bne.n	8003f90 <__libc_init_array+0x24>
 8003f7c:	4d0b      	ldr	r5, [pc, #44]	@ (8003fac <__libc_init_array+0x40>)
 8003f7e:	4c0c      	ldr	r4, [pc, #48]	@ (8003fb0 <__libc_init_array+0x44>)
 8003f80:	f000 f818 	bl	8003fb4 <_init>
 8003f84:	1b64      	subs	r4, r4, r5
 8003f86:	10a4      	asrs	r4, r4, #2
 8003f88:	2600      	movs	r6, #0
 8003f8a:	42a6      	cmp	r6, r4
 8003f8c:	d105      	bne.n	8003f9a <__libc_init_array+0x2e>
 8003f8e:	bd70      	pop	{r4, r5, r6, pc}
 8003f90:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f94:	4798      	blx	r3
 8003f96:	3601      	adds	r6, #1
 8003f98:	e7ee      	b.n	8003f78 <__libc_init_array+0xc>
 8003f9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f9e:	4798      	blx	r3
 8003fa0:	3601      	adds	r6, #1
 8003fa2:	e7f2      	b.n	8003f8a <__libc_init_array+0x1e>
 8003fa4:	08003fec 	.word	0x08003fec
 8003fa8:	08003fec 	.word	0x08003fec
 8003fac:	08003fec 	.word	0x08003fec
 8003fb0:	08003ff0 	.word	0x08003ff0

08003fb4 <_init>:
 8003fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fb6:	bf00      	nop
 8003fb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fba:	bc08      	pop	{r3}
 8003fbc:	469e      	mov	lr, r3
 8003fbe:	4770      	bx	lr

08003fc0 <_fini>:
 8003fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fc2:	bf00      	nop
 8003fc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fc6:	bc08      	pop	{r3}
 8003fc8:	469e      	mov	lr, r3
 8003fca:	4770      	bx	lr
