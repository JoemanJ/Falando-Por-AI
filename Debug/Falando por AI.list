
Falando por AI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ae4  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004c7c  08004c7c  00005c7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c94  08004c94  00006018  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004c94  08004c94  00005c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c9c  08004c9c  00006018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c9c  08004c9c  00005c9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004ca0  08004ca0  00005ca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  08004ca4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004740  20000018  08004cbc  00006018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004758  08004cbc  00006758  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f8cf  00000000  00000000  00006048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dbd  00000000  00000000  00015917  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e80  00000000  00000000  000186d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b14  00000000  00000000  00019558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019066  00000000  00000000  0001a06c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000134c3  00000000  00000000  000330d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ab90  00000000  00000000  00046595  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e1125  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a98  00000000  00000000  000e1168  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000040  00000000  00000000  000e4c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000018 	.word	0x20000018
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004c64 	.word	0x08004c64

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000001c 	.word	0x2000001c
 80001d4:	08004c64 	.word	0x08004c64

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b988 	b.w	8000500 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	468e      	mov	lr, r1
 8000210:	4604      	mov	r4, r0
 8000212:	4688      	mov	r8, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d962      	bls.n	80002e4 <__udivmoddi4+0xdc>
 800021e:	fab2 f682 	clz	r6, r2
 8000222:	b14e      	cbz	r6, 8000238 <__udivmoddi4+0x30>
 8000224:	f1c6 0320 	rsb	r3, r6, #32
 8000228:	fa01 f806 	lsl.w	r8, r1, r6
 800022c:	fa20 f303 	lsr.w	r3, r0, r3
 8000230:	40b7      	lsls	r7, r6
 8000232:	ea43 0808 	orr.w	r8, r3, r8
 8000236:	40b4      	lsls	r4, r6
 8000238:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800023c:	fa1f fc87 	uxth.w	ip, r7
 8000240:	fbb8 f1fe 	udiv	r1, r8, lr
 8000244:	0c23      	lsrs	r3, r4, #16
 8000246:	fb0e 8811 	mls	r8, lr, r1, r8
 800024a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024e:	fb01 f20c 	mul.w	r2, r1, ip
 8000252:	429a      	cmp	r2, r3
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0x62>
 8000256:	18fb      	adds	r3, r7, r3
 8000258:	f101 30ff 	add.w	r0, r1, #4294967295
 800025c:	f080 80ea 	bcs.w	8000434 <__udivmoddi4+0x22c>
 8000260:	429a      	cmp	r2, r3
 8000262:	f240 80e7 	bls.w	8000434 <__udivmoddi4+0x22c>
 8000266:	3902      	subs	r1, #2
 8000268:	443b      	add	r3, r7
 800026a:	1a9a      	subs	r2, r3, r2
 800026c:	b2a3      	uxth	r3, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800027a:	fb00 fc0c 	mul.w	ip, r0, ip
 800027e:	459c      	cmp	ip, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x8e>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f100 32ff 	add.w	r2, r0, #4294967295
 8000288:	f080 80d6 	bcs.w	8000438 <__udivmoddi4+0x230>
 800028c:	459c      	cmp	ip, r3
 800028e:	f240 80d3 	bls.w	8000438 <__udivmoddi4+0x230>
 8000292:	443b      	add	r3, r7
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029a:	eba3 030c 	sub.w	r3, r3, ip
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40f3      	lsrs	r3, r6
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xb6>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb0>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa2>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x14c>
 80002c6:	4573      	cmp	r3, lr
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xc8>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 8105 	bhi.w	80004da <__udivmoddi4+0x2d2>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4690      	mov	r8, r2
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e5      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002de:	e9c5 4800 	strd	r4, r8, [r5]
 80002e2:	e7e2      	b.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f000 8090 	beq.w	800040a <__udivmoddi4+0x202>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f040 80a4 	bne.w	800043c <__udivmoddi4+0x234>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	0c03      	lsrs	r3, r0, #16
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	b280      	uxth	r0, r0
 80002fe:	b2bc      	uxth	r4, r7
 8000300:	2101      	movs	r1, #1
 8000302:	fbb2 fcfe 	udiv	ip, r2, lr
 8000306:	fb0e 221c 	mls	r2, lr, ip, r2
 800030a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030e:	fb04 f20c 	mul.w	r2, r4, ip
 8000312:	429a      	cmp	r2, r3
 8000314:	d907      	bls.n	8000326 <__udivmoddi4+0x11e>
 8000316:	18fb      	adds	r3, r7, r3
 8000318:	f10c 38ff 	add.w	r8, ip, #4294967295
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x11c>
 800031e:	429a      	cmp	r2, r3
 8000320:	f200 80e0 	bhi.w	80004e4 <__udivmoddi4+0x2dc>
 8000324:	46c4      	mov	ip, r8
 8000326:	1a9b      	subs	r3, r3, r2
 8000328:	fbb3 f2fe 	udiv	r2, r3, lr
 800032c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000330:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000334:	fb02 f404 	mul.w	r4, r2, r4
 8000338:	429c      	cmp	r4, r3
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x144>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x142>
 8000344:	429c      	cmp	r4, r3
 8000346:	f200 80ca 	bhi.w	80004de <__udivmoddi4+0x2d6>
 800034a:	4602      	mov	r2, r0
 800034c:	1b1b      	subs	r3, r3, r4
 800034e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x98>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa0e f401 	lsl.w	r4, lr, r1
 8000364:	fa20 f306 	lsr.w	r3, r0, r6
 8000368:	fa2e fe06 	lsr.w	lr, lr, r6
 800036c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	fa1f fc87 	uxth.w	ip, r7
 800037a:	fbbe f0f9 	udiv	r0, lr, r9
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	fb09 ee10 	mls	lr, r9, r0, lr
 8000384:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000388:	fb00 fe0c 	mul.w	lr, r0, ip
 800038c:	45a6      	cmp	lr, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x1a0>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 3aff 	add.w	sl, r0, #4294967295
 800039a:	f080 809c 	bcs.w	80004d6 <__udivmoddi4+0x2ce>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8099 	bls.w	80004d6 <__udivmoddi4+0x2ce>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 040e 	sub.w	r4, r4, lr
 80003ac:	fa1f fe83 	uxth.w	lr, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c0:	45a4      	cmp	ip, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1ce>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ca:	f080 8082 	bcs.w	80004d2 <__udivmoddi4+0x2ca>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d97f      	bls.n	80004d2 <__udivmoddi4+0x2ca>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	fba0 ec02 	umull	lr, ip, r0, r2
 80003e2:	4564      	cmp	r4, ip
 80003e4:	4673      	mov	r3, lr
 80003e6:	46e1      	mov	r9, ip
 80003e8:	d362      	bcc.n	80004b0 <__udivmoddi4+0x2a8>
 80003ea:	d05f      	beq.n	80004ac <__udivmoddi4+0x2a4>
 80003ec:	b15d      	cbz	r5, 8000406 <__udivmoddi4+0x1fe>
 80003ee:	ebb8 0203 	subs.w	r2, r8, r3
 80003f2:	eb64 0409 	sbc.w	r4, r4, r9
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	fa22 f301 	lsr.w	r3, r2, r1
 80003fe:	431e      	orrs	r6, r3
 8000400:	40cc      	lsrs	r4, r1
 8000402:	e9c5 6400 	strd	r6, r4, [r5]
 8000406:	2100      	movs	r1, #0
 8000408:	e74f      	b.n	80002aa <__udivmoddi4+0xa2>
 800040a:	fbb1 fcf2 	udiv	ip, r1, r2
 800040e:	0c01      	lsrs	r1, r0, #16
 8000410:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000414:	b280      	uxth	r0, r0
 8000416:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800041a:	463b      	mov	r3, r7
 800041c:	4638      	mov	r0, r7
 800041e:	463c      	mov	r4, r7
 8000420:	46b8      	mov	r8, r7
 8000422:	46be      	mov	lr, r7
 8000424:	2620      	movs	r6, #32
 8000426:	fbb1 f1f7 	udiv	r1, r1, r7
 800042a:	eba2 0208 	sub.w	r2, r2, r8
 800042e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000432:	e766      	b.n	8000302 <__udivmoddi4+0xfa>
 8000434:	4601      	mov	r1, r0
 8000436:	e718      	b.n	800026a <__udivmoddi4+0x62>
 8000438:	4610      	mov	r0, r2
 800043a:	e72c      	b.n	8000296 <__udivmoddi4+0x8e>
 800043c:	f1c6 0220 	rsb	r2, r6, #32
 8000440:	fa2e f302 	lsr.w	r3, lr, r2
 8000444:	40b7      	lsls	r7, r6
 8000446:	40b1      	lsls	r1, r6
 8000448:	fa20 f202 	lsr.w	r2, r0, r2
 800044c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000450:	430a      	orrs	r2, r1
 8000452:	fbb3 f8fe 	udiv	r8, r3, lr
 8000456:	b2bc      	uxth	r4, r7
 8000458:	fb0e 3318 	mls	r3, lr, r8, r3
 800045c:	0c11      	lsrs	r1, r2, #16
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb08 f904 	mul.w	r9, r8, r4
 8000466:	40b0      	lsls	r0, r6
 8000468:	4589      	cmp	r9, r1
 800046a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046e:	b280      	uxth	r0, r0
 8000470:	d93e      	bls.n	80004f0 <__udivmoddi4+0x2e8>
 8000472:	1879      	adds	r1, r7, r1
 8000474:	f108 3cff 	add.w	ip, r8, #4294967295
 8000478:	d201      	bcs.n	800047e <__udivmoddi4+0x276>
 800047a:	4589      	cmp	r9, r1
 800047c:	d81f      	bhi.n	80004be <__udivmoddi4+0x2b6>
 800047e:	eba1 0109 	sub.w	r1, r1, r9
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fb09 f804 	mul.w	r8, r9, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	b292      	uxth	r2, r2
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	4542      	cmp	r2, r8
 8000496:	d229      	bcs.n	80004ec <__udivmoddi4+0x2e4>
 8000498:	18ba      	adds	r2, r7, r2
 800049a:	f109 31ff 	add.w	r1, r9, #4294967295
 800049e:	d2c4      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a0:	4542      	cmp	r2, r8
 80004a2:	d2c2      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a4:	f1a9 0102 	sub.w	r1, r9, #2
 80004a8:	443a      	add	r2, r7
 80004aa:	e7be      	b.n	800042a <__udivmoddi4+0x222>
 80004ac:	45f0      	cmp	r8, lr
 80004ae:	d29d      	bcs.n	80003ec <__udivmoddi4+0x1e4>
 80004b0:	ebbe 0302 	subs.w	r3, lr, r2
 80004b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b8:	3801      	subs	r0, #1
 80004ba:	46e1      	mov	r9, ip
 80004bc:	e796      	b.n	80003ec <__udivmoddi4+0x1e4>
 80004be:	eba7 0909 	sub.w	r9, r7, r9
 80004c2:	4449      	add	r1, r9
 80004c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004cc:	fb09 f804 	mul.w	r8, r9, r4
 80004d0:	e7db      	b.n	800048a <__udivmoddi4+0x282>
 80004d2:	4673      	mov	r3, lr
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1ce>
 80004d6:	4650      	mov	r0, sl
 80004d8:	e766      	b.n	80003a8 <__udivmoddi4+0x1a0>
 80004da:	4608      	mov	r0, r1
 80004dc:	e6fd      	b.n	80002da <__udivmoddi4+0xd2>
 80004de:	443b      	add	r3, r7
 80004e0:	3a02      	subs	r2, #2
 80004e2:	e733      	b.n	800034c <__udivmoddi4+0x144>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	443b      	add	r3, r7
 80004ea:	e71c      	b.n	8000326 <__udivmoddi4+0x11e>
 80004ec:	4649      	mov	r1, r9
 80004ee:	e79c      	b.n	800042a <__udivmoddi4+0x222>
 80004f0:	eba1 0109 	sub.w	r1, r1, r9
 80004f4:	46c4      	mov	ip, r8
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fb09 f804 	mul.w	r8, r9, r4
 80004fe:	e7c4      	b.n	800048a <__udivmoddi4+0x282>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b084      	sub	sp, #16
 8000508:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800050a:	463b      	mov	r3, r7
 800050c:	2200      	movs	r2, #0
 800050e:	601a      	str	r2, [r3, #0]
 8000510:	605a      	str	r2, [r3, #4]
 8000512:	609a      	str	r2, [r3, #8]
 8000514:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000516:	4b22      	ldr	r3, [pc, #136]	@ (80005a0 <MX_ADC1_Init+0x9c>)
 8000518:	4a22      	ldr	r2, [pc, #136]	@ (80005a4 <MX_ADC1_Init+0xa0>)
 800051a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800051c:	4b20      	ldr	r3, [pc, #128]	@ (80005a0 <MX_ADC1_Init+0x9c>)
 800051e:	2200      	movs	r2, #0
 8000520:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000522:	4b1f      	ldr	r3, [pc, #124]	@ (80005a0 <MX_ADC1_Init+0x9c>)
 8000524:	2200      	movs	r2, #0
 8000526:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000528:	4b1d      	ldr	r3, [pc, #116]	@ (80005a0 <MX_ADC1_Init+0x9c>)
 800052a:	2200      	movs	r2, #0
 800052c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800052e:	4b1c      	ldr	r3, [pc, #112]	@ (80005a0 <MX_ADC1_Init+0x9c>)
 8000530:	2200      	movs	r2, #0
 8000532:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000534:	4b1a      	ldr	r3, [pc, #104]	@ (80005a0 <MX_ADC1_Init+0x9c>)
 8000536:	2200      	movs	r2, #0
 8000538:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800053c:	4b18      	ldr	r3, [pc, #96]	@ (80005a0 <MX_ADC1_Init+0x9c>)
 800053e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000542:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8000544:	4b16      	ldr	r3, [pc, #88]	@ (80005a0 <MX_ADC1_Init+0x9c>)
 8000546:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 800054a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800054c:	4b14      	ldr	r3, [pc, #80]	@ (80005a0 <MX_ADC1_Init+0x9c>)
 800054e:	2200      	movs	r2, #0
 8000550:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000552:	4b13      	ldr	r3, [pc, #76]	@ (80005a0 <MX_ADC1_Init+0x9c>)
 8000554:	2201      	movs	r2, #1
 8000556:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000558:	4b11      	ldr	r3, [pc, #68]	@ (80005a0 <MX_ADC1_Init+0x9c>)
 800055a:	2201      	movs	r2, #1
 800055c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000560:	4b0f      	ldr	r3, [pc, #60]	@ (80005a0 <MX_ADC1_Init+0x9c>)
 8000562:	2201      	movs	r2, #1
 8000564:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000566:	480e      	ldr	r0, [pc, #56]	@ (80005a0 <MX_ADC1_Init+0x9c>)
 8000568:	f001 f9be 	bl	80018e8 <HAL_ADC_Init>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8000572:	f000 ffa9 	bl	80014c8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000576:	2301      	movs	r3, #1
 8000578:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800057a:	2301      	movs	r3, #1
 800057c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800057e:	2300      	movs	r3, #0
 8000580:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000582:	463b      	mov	r3, r7
 8000584:	4619      	mov	r1, r3
 8000586:	4806      	ldr	r0, [pc, #24]	@ (80005a0 <MX_ADC1_Init+0x9c>)
 8000588:	f001 fb04 	bl	8001b94 <HAL_ADC_ConfigChannel>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000592:	f000 ff99 	bl	80014c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000596:	bf00      	nop
 8000598:	3710      	adds	r7, #16
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	20000034 	.word	0x20000034
 80005a4:	40012000 	.word	0x40012000

080005a8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b08a      	sub	sp, #40	@ 0x28
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b0:	f107 0314 	add.w	r3, r7, #20
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
 80005b8:	605a      	str	r2, [r3, #4]
 80005ba:	609a      	str	r2, [r3, #8]
 80005bc:	60da      	str	r2, [r3, #12]
 80005be:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a2e      	ldr	r2, [pc, #184]	@ (8000680 <HAL_ADC_MspInit+0xd8>)
 80005c6:	4293      	cmp	r3, r2
 80005c8:	d156      	bne.n	8000678 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005ca:	2300      	movs	r3, #0
 80005cc:	613b      	str	r3, [r7, #16]
 80005ce:	4b2d      	ldr	r3, [pc, #180]	@ (8000684 <HAL_ADC_MspInit+0xdc>)
 80005d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005d2:	4a2c      	ldr	r2, [pc, #176]	@ (8000684 <HAL_ADC_MspInit+0xdc>)
 80005d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80005d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80005da:	4b2a      	ldr	r3, [pc, #168]	@ (8000684 <HAL_ADC_MspInit+0xdc>)
 80005dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80005e2:	613b      	str	r3, [r7, #16]
 80005e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e6:	2300      	movs	r3, #0
 80005e8:	60fb      	str	r3, [r7, #12]
 80005ea:	4b26      	ldr	r3, [pc, #152]	@ (8000684 <HAL_ADC_MspInit+0xdc>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ee:	4a25      	ldr	r2, [pc, #148]	@ (8000684 <HAL_ADC_MspInit+0xdc>)
 80005f0:	f043 0301 	orr.w	r3, r3, #1
 80005f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005f6:	4b23      	ldr	r3, [pc, #140]	@ (8000684 <HAL_ADC_MspInit+0xdc>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005fa:	f003 0301 	and.w	r3, r3, #1
 80005fe:	60fb      	str	r3, [r7, #12]
 8000600:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000602:	2302      	movs	r3, #2
 8000604:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000606:	2303      	movs	r3, #3
 8000608:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060a:	2300      	movs	r3, #0
 800060c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800060e:	f107 0314 	add.w	r3, r7, #20
 8000612:	4619      	mov	r1, r3
 8000614:	481c      	ldr	r0, [pc, #112]	@ (8000688 <HAL_ADC_MspInit+0xe0>)
 8000616:	f002 f9ef 	bl	80029f8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800061a:	4b1c      	ldr	r3, [pc, #112]	@ (800068c <HAL_ADC_MspInit+0xe4>)
 800061c:	4a1c      	ldr	r2, [pc, #112]	@ (8000690 <HAL_ADC_MspInit+0xe8>)
 800061e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000620:	4b1a      	ldr	r3, [pc, #104]	@ (800068c <HAL_ADC_MspInit+0xe4>)
 8000622:	2200      	movs	r2, #0
 8000624:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000626:	4b19      	ldr	r3, [pc, #100]	@ (800068c <HAL_ADC_MspInit+0xe4>)
 8000628:	2200      	movs	r2, #0
 800062a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800062c:	4b17      	ldr	r3, [pc, #92]	@ (800068c <HAL_ADC_MspInit+0xe4>)
 800062e:	2200      	movs	r2, #0
 8000630:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000632:	4b16      	ldr	r3, [pc, #88]	@ (800068c <HAL_ADC_MspInit+0xe4>)
 8000634:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000638:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800063a:	4b14      	ldr	r3, [pc, #80]	@ (800068c <HAL_ADC_MspInit+0xe4>)
 800063c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000640:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000642:	4b12      	ldr	r3, [pc, #72]	@ (800068c <HAL_ADC_MspInit+0xe4>)
 8000644:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000648:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800064a:	4b10      	ldr	r3, [pc, #64]	@ (800068c <HAL_ADC_MspInit+0xe4>)
 800064c:	2200      	movs	r2, #0
 800064e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000650:	4b0e      	ldr	r3, [pc, #56]	@ (800068c <HAL_ADC_MspInit+0xe4>)
 8000652:	2200      	movs	r2, #0
 8000654:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000656:	4b0d      	ldr	r3, [pc, #52]	@ (800068c <HAL_ADC_MspInit+0xe4>)
 8000658:	2200      	movs	r2, #0
 800065a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800065c:	480b      	ldr	r0, [pc, #44]	@ (800068c <HAL_ADC_MspInit+0xe4>)
 800065e:	f001 fe5b 	bl	8002318 <HAL_DMA_Init>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8000668:	f000 ff2e 	bl	80014c8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	4a07      	ldr	r2, [pc, #28]	@ (800068c <HAL_ADC_MspInit+0xe4>)
 8000670:	639a      	str	r2, [r3, #56]	@ 0x38
 8000672:	4a06      	ldr	r2, [pc, #24]	@ (800068c <HAL_ADC_MspInit+0xe4>)
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000678:	bf00      	nop
 800067a:	3728      	adds	r7, #40	@ 0x28
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	40012000 	.word	0x40012000
 8000684:	40023800 	.word	0x40023800
 8000688:	40020000 	.word	0x40020000
 800068c:	2000007c 	.word	0x2000007c
 8000690:	40026410 	.word	0x40026410

08000694 <filters_init>:
LPF lpf;
HPF hpf;
Reverb optimus_prime;
DarthVader dv;
inline void filters_init()
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b086      	sub	sp, #24
 8000698:	af00      	add	r7, sp, #0
	//DarthVader
	darthvader_init(&dv,
 800069a:	4b27      	ldr	r3, [pc, #156]	@ (8000738 <filters_init+0xa4>)
 800069c:	edd3 7a00 	vldr	s15, [r3]
 80006a0:	eef0 5a67 	vmov.f32	s11, s15
 80006a4:	eeb7 5a08 	vmov.f32	s10, #120	@ 0x3fc00000  1.5
 80006a8:	eddf 4a24 	vldr	s9, [pc, #144]	@ 800073c <filters_init+0xa8>
 80006ac:	ed9f 4a24 	vldr	s8, [pc, #144]	@ 8000740 <filters_init+0xac>
 80006b0:	eddf 3a24 	vldr	s7, [pc, #144]	@ 8000744 <filters_init+0xb0>
 80006b4:	eeb3 3a04 	vmov.f32	s6, #52	@ 0x41a00000  20.0
 80006b8:	eddf 2a23 	vldr	s5, [pc, #140]	@ 8000748 <filters_init+0xb4>
 80006bc:	ed9f 2a23 	vldr	s4, [pc, #140]	@ 800074c <filters_init+0xb8>
 80006c0:	eddf 1a23 	vldr	s3, [pc, #140]	@ 8000750 <filters_init+0xbc>
 80006c4:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 80006c8:	eef6 0a00 	vmov.f32	s1, #96	@ 0x3f000000  0.5
 80006cc:	eeb7 0a08 	vmov.f32	s0, #120	@ 0x3fc00000  1.5
 80006d0:	4820      	ldr	r0, [pc, #128]	@ (8000754 <filters_init+0xc0>)
 80006d2:	f000 fc19 	bl	8000f08 <darthvader_init>
	                        0.3f,   // distortion_threshold
	                        1.5f,   // volume_gain
							samplerate);

	// Filtro OPTIMUS PRIME (soh esse reverb msm)
	float r_delayms = 100;
 80006d6:	4b20      	ldr	r3, [pc, #128]	@ (8000758 <filters_init+0xc4>)
 80006d8:	617b      	str	r3, [r7, #20]
	float r_feedback = 0.8;
 80006da:	4b20      	ldr	r3, [pc, #128]	@ (800075c <filters_init+0xc8>)
 80006dc:	613b      	str	r3, [r7, #16]
	float r_mix = 0.5;
 80006de:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 80006e2:	60fb      	str	r3, [r7, #12]
	reverb_init(&optimus_prime, r_delayms, r_feedback, r_mix, samplerate);
 80006e4:	4b14      	ldr	r3, [pc, #80]	@ (8000738 <filters_init+0xa4>)
 80006e6:	edd3 7a00 	vldr	s15, [r3]
 80006ea:	eef0 1a67 	vmov.f32	s3, s15
 80006ee:	ed97 1a03 	vldr	s2, [r7, #12]
 80006f2:	edd7 0a04 	vldr	s1, [r7, #16]
 80006f6:	ed97 0a05 	vldr	s0, [r7, #20]
 80006fa:	4819      	ldr	r0, [pc, #100]	@ (8000760 <filters_init+0xcc>)
 80006fc:	f000 f9d2 	bl	8000aa4 <reverb_init>

	//
	float lpf_cutoff = 2000;
 8000700:	4b18      	ldr	r3, [pc, #96]	@ (8000764 <filters_init+0xd0>)
 8000702:	60bb      	str	r3, [r7, #8]
	lpf_init(&lpf, lpf_cutoff, samplerate);
 8000704:	4b0c      	ldr	r3, [pc, #48]	@ (8000738 <filters_init+0xa4>)
 8000706:	edd3 7a00 	vldr	s15, [r3]
 800070a:	eef0 0a67 	vmov.f32	s1, s15
 800070e:	ed97 0a02 	vldr	s0, [r7, #8]
 8000712:	4815      	ldr	r0, [pc, #84]	@ (8000768 <filters_init+0xd4>)
 8000714:	f000 f956 	bl	80009c4 <lpf_init>

	float hpf_cutoff = 500;
 8000718:	4b14      	ldr	r3, [pc, #80]	@ (800076c <filters_init+0xd8>)
 800071a:	607b      	str	r3, [r7, #4]
	hpf_init(&hpf, hpf_cutoff, samplerate);
 800071c:	4b06      	ldr	r3, [pc, #24]	@ (8000738 <filters_init+0xa4>)
 800071e:	edd3 7a00 	vldr	s15, [r3]
 8000722:	eef0 0a67 	vmov.f32	s1, s15
 8000726:	ed97 0a01 	vldr	s0, [r7, #4]
 800072a:	4811      	ldr	r0, [pc, #68]	@ (8000770 <filters_init+0xdc>)
 800072c:	f000 f980 	bl	8000a30 <hpf_init>
}
 8000730:	bf00      	nop
 8000732:	3718      	adds	r7, #24
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	20000008 	.word	0x20000008
 800073c:	3e99999a 	.word	0x3e99999a
 8000740:	3eb33333 	.word	0x3eb33333
 8000744:	3e19999a 	.word	0x3e19999a
 8000748:	3f4ccccd 	.word	0x3f4ccccd
 800074c:	459c4000 	.word	0x459c4000
 8000750:	43480000 	.word	0x43480000
 8000754:	20002800 	.word	0x20002800
 8000758:	42c80000 	.word	0x42c80000
 800075c:	3f4ccccd 	.word	0x3f4ccccd
 8000760:	200018f0 	.word	0x200018f0
 8000764:	44fa0000 	.word	0x44fa0000
 8000768:	200018dc 	.word	0x200018dc
 800076c:	43fa0000 	.word	0x43fa0000
 8000770:	200018e4 	.word	0x200018e4

08000774 <clamp>:

inline uint16_t clamp(uint16_t min, uint16_t x, uint16_t max)
{
 8000774:	b480      	push	{r7}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0
 800077a:	4603      	mov	r3, r0
 800077c:	80fb      	strh	r3, [r7, #6]
 800077e:	460b      	mov	r3, r1
 8000780:	80bb      	strh	r3, [r7, #4]
 8000782:	4613      	mov	r3, r2
 8000784:	807b      	strh	r3, [r7, #2]
	x = x<min? min: x;
 8000786:	88ba      	ldrh	r2, [r7, #4]
 8000788:	88fb      	ldrh	r3, [r7, #6]
 800078a:	4293      	cmp	r3, r2
 800078c:	bf38      	it	cc
 800078e:	4613      	movcc	r3, r2
 8000790:	80bb      	strh	r3, [r7, #4]
	x = x>max? max: x;
 8000792:	88ba      	ldrh	r2, [r7, #4]
 8000794:	887b      	ldrh	r3, [r7, #2]
 8000796:	4293      	cmp	r3, r2
 8000798:	bf28      	it	cs
 800079a:	4613      	movcs	r3, r2
 800079c:	80bb      	strh	r3, [r7, #4]
	return x;
 800079e:	88bb      	ldrh	r3, [r7, #4]
}
 80007a0:	4618      	mov	r0, r3
 80007a2:	370c      	adds	r7, #12
 80007a4:	46bd      	mov	sp, r7
 80007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007aa:	4770      	bx	lr

080007ac <normalizeAudio>:
/*
	Receives a 12 bits unsigned audio input between 310 and 2792 and maps it
	into a float value between -1.0 and 1.0
*/
inline float normalizeAudio(uint16_t input)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	4603      	mov	r3, r0
 80007b4:	80fb      	strh	r3, [r7, #6]
//	clamp values to the working range
	input = clamp(310, input, 2792);
 80007b6:	88fb      	ldrh	r3, [r7, #6]
 80007b8:	f640 22e8 	movw	r2, #2792	@ 0xae8
 80007bc:	4619      	mov	r1, r3
 80007be:	f44f 709b 	mov.w	r0, #310	@ 0x136
 80007c2:	f7ff ffd7 	bl	8000774 <clamp>
 80007c6:	4603      	mov	r3, r0
 80007c8:	80fb      	strh	r3, [r7, #6]
	return (input-1551)/(1241.0f);
 80007ca:	88fb      	ldrh	r3, [r7, #6]
 80007cc:	f2a3 630f 	subw	r3, r3, #1551	@ 0x60f
 80007d0:	ee07 3a90 	vmov	s15, r3
 80007d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80007d8:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 80007f0 <normalizeAudio+0x44>
 80007dc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80007e0:	eef0 7a66 	vmov.f32	s15, s13

//	return (input-2048)/4096.0;
}
 80007e4:	eeb0 0a67 	vmov.f32	s0, s15
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	449b2000 	.word	0x449b2000

080007f4 <deNormalizeAudio>:
/*
 * Receives a normalized audio input between -1.0 and 1.0 and converts it into
 * a signed 32bits uint32_t value, left-justified.
 */
inline int16_t deNormalizeAudio(float input)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	ed87 0a01 	vstr	s0, [r7, #4]
	    input *= ((double) 32767.0f); //Maximum positive 16-bit value
 80007fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8000802:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8000828 <deNormalizeAudio+0x34>
 8000806:	ee67 7a87 	vmul.f32	s15, s15, s14
 800080a:	edc7 7a01 	vstr	s15, [r7, #4]
	    return (int16_t) input;
 800080e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000812:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000816:	ee17 3a90 	vmov	r3, s15
 800081a:	b21b      	sxth	r3, r3
}
 800081c:	4618      	mov	r0, r3
 800081e:	370c      	adds	r7, #12
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr
 8000828:	46fffe00 	.word	0x46fffe00

0800082c <processHalfBuffer>:

/*
 * TODO
 */
void processHalfBuffer()
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b084      	sub	sp, #16
 8000830:	af00      	add	r7, sp, #0
	uint16_t int_input = 0;
 8000832:	2300      	movs	r3, #0
 8000834:	81bb      	strh	r3, [r7, #12]
	float normalized_input = 0.0;
 8000836:	f04f 0300 	mov.w	r3, #0
 800083a:	60bb      	str	r3, [r7, #8]
	float normalized_output = 0.0;
 800083c:	f04f 0300 	mov.w	r3, #0
 8000840:	607b      	str	r3, [r7, #4]
	int16_t int_output = 0;
 8000842:	2300      	movs	r3, #0
 8000844:	807b      	strh	r3, [r7, #2]

	uint16_t i = 0;
 8000846:	2300      	movs	r3, #0
 8000848:	81fb      	strh	r3, [r7, #14]
	for (i=0; i<BUFFER_SIZE/2; i++)
 800084a:	2300      	movs	r3, #0
 800084c:	81fb      	strh	r3, [r7, #14]
 800084e:	e02a      	b.n	80008a6 <processHalfBuffer+0x7a>
	{
		int_input = process_in_buffer[i];
 8000850:	4b19      	ldr	r3, [pc, #100]	@ (80008b8 <processHalfBuffer+0x8c>)
 8000852:	681a      	ldr	r2, [r3, #0]
 8000854:	89fb      	ldrh	r3, [r7, #14]
 8000856:	005b      	lsls	r3, r3, #1
 8000858:	4413      	add	r3, r2
 800085a:	881b      	ldrh	r3, [r3, #0]
 800085c:	81bb      	strh	r3, [r7, #12]
		normalized_input = normalizeAudio(int_input);
 800085e:	89bb      	ldrh	r3, [r7, #12]
 8000860:	4618      	mov	r0, r3
 8000862:	f7ff ffa3 	bl	80007ac <normalizeAudio>
 8000866:	ed87 0a02 	vstr	s0, [r7, #8]
		normalized_output = processAudio(normalized_input) * OUTPUT_VOLUME; // COLOCAR EFEITO AQUI
 800086a:	ed97 0a02 	vldr	s0, [r7, #8]
 800086e:	f000 f827 	bl	80008c0 <processAudio>
 8000872:	ed87 0a01 	vstr	s0, [r7, #4]
		int_output = deNormalizeAudio(normalized_output) ;
 8000876:	ed97 0a01 	vldr	s0, [r7, #4]
 800087a:	f7ff ffbb 	bl	80007f4 <deNormalizeAudio>
 800087e:	4603      	mov	r3, r0
 8000880:	807b      	strh	r3, [r7, #2]
		process_out_buffer[2*i] = int_output;
 8000882:	4b0e      	ldr	r3, [pc, #56]	@ (80008bc <processHalfBuffer+0x90>)
 8000884:	681a      	ldr	r2, [r3, #0]
 8000886:	89fb      	ldrh	r3, [r7, #14]
 8000888:	009b      	lsls	r3, r3, #2
 800088a:	4413      	add	r3, r2
 800088c:	887a      	ldrh	r2, [r7, #2]
 800088e:	801a      	strh	r2, [r3, #0]
		process_out_buffer[2*i+1] = int_output;
 8000890:	4b0a      	ldr	r3, [pc, #40]	@ (80008bc <processHalfBuffer+0x90>)
 8000892:	681a      	ldr	r2, [r3, #0]
 8000894:	89fb      	ldrh	r3, [r7, #14]
 8000896:	009b      	lsls	r3, r3, #2
 8000898:	3302      	adds	r3, #2
 800089a:	4413      	add	r3, r2
 800089c:	887a      	ldrh	r2, [r7, #2]
 800089e:	801a      	strh	r2, [r3, #0]
	for (i=0; i<BUFFER_SIZE/2; i++)
 80008a0:	89fb      	ldrh	r3, [r7, #14]
 80008a2:	3301      	adds	r3, #1
 80008a4:	81fb      	strh	r3, [r7, #14]
 80008a6:	89fb      	ldrh	r3, [r7, #14]
 80008a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80008ac:	d3d0      	bcc.n	8000850 <processHalfBuffer+0x24>
	}

	return;
 80008ae:	bf00      	nop
}
 80008b0:	3710      	adds	r7, #16
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	20000000 	.word	0x20000000
 80008bc:	20000004 	.word	0x20000004

080008c0 <processAudio>:

/*
 * Placeholder audio processing function that applies no effect
 */
float processAudio(float input)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	ed87 0a01 	vstr	s0, [r7, #4]
	switch (CURRENT_FILTER)
 80008ca:	4b1e      	ldr	r3, [pc, #120]	@ (8000944 <processAudio+0x84>)
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	2b03      	cmp	r3, #3
 80008d0:	d82a      	bhi.n	8000928 <processAudio+0x68>
 80008d2:	a201      	add	r2, pc, #4	@ (adr r2, 80008d8 <processAudio+0x18>)
 80008d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008d8:	080008e9 	.word	0x080008e9
 80008dc:	080008f9 	.word	0x080008f9
 80008e0:	08000909 	.word	0x08000909
 80008e4:	08000919 	.word	0x08000919
	{
		case DARTH_VADER:
			return apply_darthvader(&dv, input);
 80008e8:	ed97 0a01 	vldr	s0, [r7, #4]
 80008ec:	4816      	ldr	r0, [pc, #88]	@ (8000948 <processAudio+0x88>)
 80008ee:	f000 fbdb 	bl	80010a8 <apply_darthvader>
 80008f2:	eef0 7a40 	vmov.f32	s15, s0
 80008f6:	e020      	b.n	800093a <processAudio+0x7a>
			break;

		case OPTIMUS_PRIME:
			return apply_reverb(&optimus_prime, input);
 80008f8:	ed97 0a01 	vldr	s0, [r7, #4]
 80008fc:	4813      	ldr	r0, [pc, #76]	@ (800094c <processAudio+0x8c>)
 80008fe:	f000 f9b9 	bl	8000c74 <apply_reverb>
 8000902:	eef0 7a40 	vmov.f32	s15, s0
 8000906:	e018      	b.n	800093a <processAudio+0x7a>
			break;

		case LOW_PASS:
			return apply_lpf(&lpf, input);
 8000908:	ed97 0a01 	vldr	s0, [r7, #4]
 800090c:	4810      	ldr	r0, [pc, #64]	@ (8000950 <processAudio+0x90>)
 800090e:	f000 f932 	bl	8000b76 <apply_lpf>
 8000912:	eef0 7a40 	vmov.f32	s15, s0
 8000916:	e010      	b.n	800093a <processAudio+0x7a>
			break;

		case HIGH_PASS:
			return apply_hpf(&hpf, input);
 8000918:	ed97 0a01 	vldr	s0, [r7, #4]
 800091c:	480d      	ldr	r0, [pc, #52]	@ (8000954 <processAudio+0x94>)
 800091e:	f000 f954 	bl	8000bca <apply_hpf>
 8000922:	eef0 7a40 	vmov.f32	s15, s0
 8000926:	e008      	b.n	800093a <processAudio+0x7a>
			break;

		default:
			CURRENT_FILTER = 0;
 8000928:	4b06      	ldr	r3, [pc, #24]	@ (8000944 <processAudio+0x84>)
 800092a:	2200      	movs	r2, #0
 800092c:	701a      	strb	r2, [r3, #0]
			return processAudio(input);
 800092e:	ed97 0a01 	vldr	s0, [r7, #4]
 8000932:	f7ff ffc5 	bl	80008c0 <processAudio>
 8000936:	eef0 7a40 	vmov.f32	s15, s0
//
//		case ECHO:
//			return apply_echo(&echo, input);
//			break;
	}
}
 800093a:	eeb0 0a67 	vmov.f32	s0, s15
 800093e:	3708      	adds	r7, #8
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	2000465c 	.word	0x2000465c
 8000948:	20002800 	.word	0x20002800
 800094c:	200018f0 	.word	0x200018f0
 8000950:	200018dc 	.word	0x200018dc
 8000954:	200018e4 	.word	0x200018e4

08000958 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	607b      	str	r3, [r7, #4]
 8000962:	4b17      	ldr	r3, [pc, #92]	@ (80009c0 <MX_DMA_Init+0x68>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000966:	4a16      	ldr	r2, [pc, #88]	@ (80009c0 <MX_DMA_Init+0x68>)
 8000968:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800096c:	6313      	str	r3, [r2, #48]	@ 0x30
 800096e:	4b14      	ldr	r3, [pc, #80]	@ (80009c0 <MX_DMA_Init+0x68>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000972:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000976:	607b      	str	r3, [r7, #4]
 8000978:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	603b      	str	r3, [r7, #0]
 800097e:	4b10      	ldr	r3, [pc, #64]	@ (80009c0 <MX_DMA_Init+0x68>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000982:	4a0f      	ldr	r2, [pc, #60]	@ (80009c0 <MX_DMA_Init+0x68>)
 8000984:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000988:	6313      	str	r3, [r2, #48]	@ 0x30
 800098a:	4b0d      	ldr	r3, [pc, #52]	@ (80009c0 <MX_DMA_Init+0x68>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000992:	603b      	str	r3, [r7, #0]
 8000994:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000996:	2200      	movs	r2, #0
 8000998:	2100      	movs	r1, #0
 800099a:	200f      	movs	r0, #15
 800099c:	f001 fc85 	bl	80022aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80009a0:	200f      	movs	r0, #15
 80009a2:	f001 fc9e 	bl	80022e2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80009a6:	2200      	movs	r2, #0
 80009a8:	2100      	movs	r1, #0
 80009aa:	2038      	movs	r0, #56	@ 0x38
 80009ac:	f001 fc7d 	bl	80022aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80009b0:	2038      	movs	r0, #56	@ 0x38
 80009b2:	f001 fc96 	bl	80022e2 <HAL_NVIC_EnableIRQ>

}
 80009b6:	bf00      	nop
 80009b8:	3708      	adds	r7, #8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	40023800 	.word	0x40023800

080009c4 <lpf_init>:
// ---------------------------
// Filter init functions
// ---------------------------

// Initialize the low-pass filter
void lpf_init(LPF *f, float cutoff_freq, float sample_rate) {
 80009c4:	b480      	push	{r7}
 80009c6:	b087      	sub	sp, #28
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	60f8      	str	r0, [r7, #12]
 80009cc:	ed87 0a02 	vstr	s0, [r7, #8]
 80009d0:	edc7 0a01 	vstr	s1, [r7, #4]
	float dt = 1.0f / sample_rate;                  // Time step
 80009d4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80009d8:	ed97 7a01 	vldr	s14, [r7, #4]
 80009dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80009e0:	edc7 7a05 	vstr	s15, [r7, #20]
    float RC = 1.0f / (2.0f * M_PI * cutoff_freq);  // RC time constant
 80009e4:	edd7 7a02 	vldr	s15, [r7, #8]
 80009e8:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8000a2c <lpf_init+0x68>
 80009ec:	ee27 7a87 	vmul.f32	s14, s15, s14
 80009f0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80009f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80009f8:	edc7 7a04 	vstr	s15, [r7, #16]
    f->alpha = dt / (RC + dt);                      // Alpha coefficient
 80009fc:	ed97 7a04 	vldr	s14, [r7, #16]
 8000a00:	edd7 7a05 	vldr	s15, [r7, #20]
 8000a04:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000a08:	edd7 6a05 	vldr	s13, [r7, #20]
 8000a0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	edc3 7a00 	vstr	s15, [r3]
    f->prev = 0.0f;                                 // Previous output sample
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	f04f 0200 	mov.w	r2, #0
 8000a1c:	605a      	str	r2, [r3, #4]
}
 8000a1e:	bf00      	nop
 8000a20:	371c      	adds	r7, #28
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	40c90fdb 	.word	0x40c90fdb

08000a30 <hpf_init>:

void hpf_init(HPF *f, float cutoff_freq, float sample_rate) {
 8000a30:	b480      	push	{r7}
 8000a32:	b087      	sub	sp, #28
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	60f8      	str	r0, [r7, #12]
 8000a38:	ed87 0a02 	vstr	s0, [r7, #8]
 8000a3c:	edc7 0a01 	vstr	s1, [r7, #4]
    float dt = 1.0f / sample_rate;                  // Time step
 8000a40:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8000a44:	ed97 7a01 	vldr	s14, [r7, #4]
 8000a48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a4c:	edc7 7a05 	vstr	s15, [r7, #20]
    float RC = 1.0f / (2.0f * M_PI * cutoff_freq);  // RC time constant
 8000a50:	edd7 7a02 	vldr	s15, [r7, #8]
 8000a54:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8000aa0 <hpf_init+0x70>
 8000a58:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000a5c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8000a60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a64:	edc7 7a04 	vstr	s15, [r7, #16]
    f->alpha = RC / (RC + dt);                      // Alpha coefficient
 8000a68:	ed97 7a04 	vldr	s14, [r7, #16]
 8000a6c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000a70:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000a74:	edd7 6a04 	vldr	s13, [r7, #16]
 8000a78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	edc3 7a00 	vstr	s15, [r3]
    f->prev_x = 0.0f;                               // Previous input sample
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	f04f 0200 	mov.w	r2, #0
 8000a88:	605a      	str	r2, [r3, #4]
    f->prev_y = 0.0f;                               // Previous output sample
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	f04f 0200 	mov.w	r2, #0
 8000a90:	609a      	str	r2, [r3, #8]
}
 8000a92:	bf00      	nop
 8000a94:	371c      	adds	r7, #28
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	40c90fdb 	.word	0x40c90fdb

08000aa4 <reverb_init>:
    e->decay = decay;                                                               // Set decay factor
    memset(e->buffer, 0, sizeof(e->buffer));                                        // Clear buffer
}

// Initialize the reverb effect
void reverb_init(Reverb* r, float delay_ms, float feedback, float mix, float sample_rate) {
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b088      	sub	sp, #32
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6178      	str	r0, [r7, #20]
 8000aac:	ed87 0a04 	vstr	s0, [r7, #16]
 8000ab0:	edc7 0a03 	vstr	s1, [r7, #12]
 8000ab4:	ed87 1a02 	vstr	s2, [r7, #8]
 8000ab8:	edc7 1a01 	vstr	s3, [r7, #4]
    int delay_samples = (int)(sample_rate * delay_ms / 1000.0f);                // Convert delay time to samples
 8000abc:	ed97 7a01 	vldr	s14, [r7, #4]
 8000ac0:	edd7 7a04 	vldr	s15, [r7, #16]
 8000ac4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ac8:	eddf 6a16 	vldr	s13, [pc, #88]	@ 8000b24 <reverb_init+0x80>
 8000acc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ad0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ad4:	ee17 3a90 	vmov	r3, s15
 8000ad8:	61fb      	str	r3, [r7, #28]
    if (delay_samples > MAX_DELAY_SAMPLES) delay_samples = MAX_DELAY_SAMPLES;   // Clamp to max size
 8000ada:	69fb      	ldr	r3, [r7, #28]
 8000adc:	f5b3 7f70 	cmp.w	r3, #960	@ 0x3c0
 8000ae0:	dd02      	ble.n	8000ae8 <reverb_init+0x44>
 8000ae2:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8000ae6:	61fb      	str	r3, [r7, #28]
    r->size = delay_samples;                                                    // Set size
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	69fa      	ldr	r2, [r7, #28]
 8000aec:	f8c3 2f00 	str.w	r2, [r3, #3840]	@ 0xf00
    r->index = 0;                                                               // Reset index
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	2200      	movs	r2, #0
 8000af4:	f8c3 2f04 	str.w	r2, [r3, #3844]	@ 0xf04
    r->feedback = feedback;                                                     // Set feedback amount                                 
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	f603 7308 	addw	r3, r3, #3848	@ 0xf08
 8000afe:	68fa      	ldr	r2, [r7, #12]
 8000b00:	601a      	str	r2, [r3, #0]
    r->mix = mix;                                                               // Set mix amount                                   
 8000b02:	697b      	ldr	r3, [r7, #20]
 8000b04:	f603 730c 	addw	r3, r3, #3852	@ 0xf0c
 8000b08:	68ba      	ldr	r2, [r7, #8]
 8000b0a:	601a      	str	r2, [r3, #0]
    memset(r->buffer, 0, sizeof(r->buffer));                                    // Clear buffer
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 8000b12:	2100      	movs	r1, #0
 8000b14:	4618      	mov	r0, r3
 8000b16:	f004 f879 	bl	8004c0c <memset>
}
 8000b1a:	bf00      	nop
 8000b1c:	3720      	adds	r7, #32
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	447a0000 	.word	0x447a0000

08000b28 <pitchshifter_init>:

// Initialize the pitch shifter
// pitch_factor: e.g. 0.7 for ~7 semitones down
void pitchshifter_init(PitchShifter* ps, float pitch_factor, float sample_rate) {
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b084      	sub	sp, #16
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	60f8      	str	r0, [r7, #12]
 8000b30:	ed87 0a02 	vstr	s0, [r7, #8]
 8000b34:	edc7 0a01 	vstr	s1, [r7, #4]
    memset(ps->buffer, 0, sizeof(ps->buffer));  // Clear buffer
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 8000b3e:	2100      	movs	r1, #0
 8000b40:	4618      	mov	r0, r3
 8000b42:	f004 f863 	bl	8004c0c <memset>
    ps->write_index = 0;                        // Reset write index
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	2200      	movs	r2, #0
 8000b4a:	f8c3 2f00 	str.w	r2, [r3, #3840]	@ 0xf00
    ps->read_index = 0.0f;                      // Reset read index
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	f603 7304 	addw	r3, r3, #3844	@ 0xf04
 8000b54:	f04f 0200 	mov.w	r2, #0
 8000b58:	601a      	str	r2, [r3, #0]
    ps->pitch_factor = pitch_factor;            // Set pitch factor
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	f603 7308 	addw	r3, r3, #3848	@ 0xf08
 8000b60:	68ba      	ldr	r2, [r7, #8]
 8000b62:	601a      	str	r2, [r3, #0]
    ps->size = MAX_DELAY_SAMPLES;               // Set size to max delay samples
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	f44f 7270 	mov.w	r2, #960	@ 0x3c0
 8000b6a:	f8c3 2f0c 	str.w	r2, [r3, #3852]	@ 0xf0c
}
 8000b6e:	bf00      	nop
 8000b70:	3710      	adds	r7, #16
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}

08000b76 <apply_lpf>:
// ---------------------------
// Filter apply functions
// ---------------------------

// Apply low-pass filter
float apply_lpf(LPF *f, float x) {
 8000b76:	b480      	push	{r7}
 8000b78:	b085      	sub	sp, #20
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	6078      	str	r0, [r7, #4]
 8000b7e:	ed87 0a00 	vstr	s0, [r7]
    float y = f->alpha * x + (1.0f - f->alpha) * f->prev; // Apply low-pass filter formula
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	ed93 7a00 	vldr	s14, [r3]
 8000b88:	edd7 7a00 	vldr	s15, [r7]
 8000b8c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	edd3 7a00 	vldr	s15, [r3]
 8000b96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8000b9a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	edd3 7a01 	vldr	s15, [r3, #4]
 8000ba4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ba8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bac:	edc7 7a03 	vstr	s15, [r7, #12]
    f->prev = y;                                          // Update previous output sample
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	68fa      	ldr	r2, [r7, #12]
 8000bb4:	605a      	str	r2, [r3, #4]
    return y;
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	ee07 3a90 	vmov	s15, r3
}
 8000bbc:	eeb0 0a67 	vmov.f32	s0, s15
 8000bc0:	3714      	adds	r7, #20
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr

08000bca <apply_hpf>:

float apply_hpf(HPF *f, float x) {
 8000bca:	b480      	push	{r7}
 8000bcc:	b085      	sub	sp, #20
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	6078      	str	r0, [r7, #4]
 8000bd2:	ed87 0a00 	vstr	s0, [r7]
    float y = f->alpha * (f->prev_y + x - f->prev_x);   // Apply high-pass filter formula
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	ed93 7a00 	vldr	s14, [r3]
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	edd3 6a02 	vldr	s13, [r3, #8]
 8000be2:	edd7 7a00 	vldr	s15, [r7]
 8000be6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	edd3 7a01 	vldr	s15, [r3, #4]
 8000bf0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000bf4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000bf8:	edc7 7a03 	vstr	s15, [r7, #12]
    f->prev_x = x;                                      // Update previous input sample
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	683a      	ldr	r2, [r7, #0]
 8000c00:	605a      	str	r2, [r3, #4]
    f->prev_y = y;                                      // Update previous output sample
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	68fa      	ldr	r2, [r7, #12]
 8000c06:	609a      	str	r2, [r3, #8]
    return y;
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	ee07 3a90 	vmov	s15, r3
}
 8000c0e:	eeb0 0a67 	vmov.f32	s0, s15
 8000c12:	3714      	adds	r7, #20
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr

08000c1c <apply_distortion>:

float apply_distortion(float x, float threshold) {
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	ed87 0a01 	vstr	s0, [r7, #4]
 8000c26:	edc7 0a00 	vstr	s1, [r7]
    if (x > threshold) return threshold;    // Clamp to threshold
 8000c2a:	ed97 7a01 	vldr	s14, [r7, #4]
 8000c2e:	edd7 7a00 	vldr	s15, [r7]
 8000c32:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000c36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c3a:	dd02      	ble.n	8000c42 <apply_distortion+0x26>
 8000c3c:	edd7 7a00 	vldr	s15, [r7]
 8000c40:	e011      	b.n	8000c66 <apply_distortion+0x4a>
    if (x < -threshold) return -threshold;  // Clamp to negative threshold
 8000c42:	edd7 7a00 	vldr	s15, [r7]
 8000c46:	eef1 7a67 	vneg.f32	s15, s15
 8000c4a:	ed97 7a01 	vldr	s14, [r7, #4]
 8000c4e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000c52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c56:	d504      	bpl.n	8000c62 <apply_distortion+0x46>
 8000c58:	edd7 7a00 	vldr	s15, [r7]
 8000c5c:	eef1 7a67 	vneg.f32	s15, s15
 8000c60:	e001      	b.n	8000c66 <apply_distortion+0x4a>
    return x;
 8000c62:	edd7 7a01 	vldr	s15, [r7, #4]
}
 8000c66:	eeb0 0a67 	vmov.f32	s0, s15
 8000c6a:	370c      	adds	r7, #12
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr

08000c74 <apply_reverb>:
    e->index = (e->index + 1) % e->size;    // Increment index circularly

    return y;
}

float apply_reverb(Reverb* r, float x) {
 8000c74:	b480      	push	{r7}
 8000c76:	b085      	sub	sp, #20
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
 8000c7c:	ed87 0a00 	vstr	s0, [r7]
    float delayed = r->buffer[r->index];                // Get delayed sample
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	f8d3 3f04 	ldr.w	r3, [r3, #3844]	@ 0xf04
 8000c86:	687a      	ldr	r2, [r7, #4]
 8000c88:	009b      	lsls	r3, r3, #2
 8000c8a:	4413      	add	r3, r2
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	60fb      	str	r3, [r7, #12]
    float y = x * (1.0f - r->mix) + delayed * r->mix;   // Mix input with delayed sample
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	f603 730c 	addw	r3, r3, #3852	@ 0xf0c
 8000c96:	edd3 7a00 	vldr	s15, [r3]
 8000c9a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000c9e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000ca2:	edd7 7a00 	vldr	s15, [r7]
 8000ca6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	f603 730c 	addw	r3, r3, #3852	@ 0xf0c
 8000cb0:	edd3 6a00 	vldr	s13, [r3]
 8000cb4:	edd7 7a03 	vldr	s15, [r7, #12]
 8000cb8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000cbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cc0:	edc7 7a02 	vstr	s15, [r7, #8]

    r->buffer[r->index] = x + delayed * r->feedback;    // Store new sample in buffer
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	f603 7308 	addw	r3, r3, #3848	@ 0xf08
 8000cca:	ed93 7a00 	vldr	s14, [r3]
 8000cce:	edd7 7a03 	vldr	s15, [r7, #12]
 8000cd2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	f8d3 3f04 	ldr.w	r3, [r3, #3844]	@ 0xf04
 8000cdc:	edd7 7a00 	vldr	s15, [r7]
 8000ce0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ce4:	687a      	ldr	r2, [r7, #4]
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	4413      	add	r3, r2
 8000cea:	edc3 7a00 	vstr	s15, [r3]
    r->index = (r->index + 1) % r->size;                // Increment index circularly
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	f8d3 3f04 	ldr.w	r3, [r3, #3844]	@ 0xf04
 8000cf4:	3301      	adds	r3, #1
 8000cf6:	687a      	ldr	r2, [r7, #4]
 8000cf8:	f8d2 2f00 	ldr.w	r2, [r2, #3840]	@ 0xf00
 8000cfc:	fb93 f1f2 	sdiv	r1, r3, r2
 8000d00:	fb01 f202 	mul.w	r2, r1, r2
 8000d04:	1a9a      	subs	r2, r3, r2
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	f8c3 2f04 	str.w	r2, [r3, #3844]	@ 0xf04

    return y;
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	ee07 3a90 	vmov	s15, r3
}
 8000d12:	eeb0 0a67 	vmov.f32	s0, s15
 8000d16:	3714      	adds	r7, #20
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr

08000d20 <lerp>:

// Linear interpolation helper
static float lerp(float a, float b, float t) {
 8000d20:	b480      	push	{r7}
 8000d22:	b085      	sub	sp, #20
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	ed87 0a03 	vstr	s0, [r7, #12]
 8000d2a:	edc7 0a02 	vstr	s1, [r7, #8]
 8000d2e:	ed87 1a01 	vstr	s2, [r7, #4]
    return a + t * (b - a);
 8000d32:	ed97 7a02 	vldr	s14, [r7, #8]
 8000d36:	edd7 7a03 	vldr	s15, [r7, #12]
 8000d3a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000d3e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d42:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d46:	edd7 7a03 	vldr	s15, [r7, #12]
 8000d4a:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8000d4e:	eeb0 0a67 	vmov.f32	s0, s15
 8000d52:	3714      	adds	r7, #20
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr

08000d5c <apply_pitchshifter>:

// Process one sample with pitch shifting down
float apply_pitchshifter(PitchShifter* ps, float input) {
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b086      	sub	sp, #24
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	ed87 0a00 	vstr	s0, [r7]
    ps->buffer[ps->write_index] = input;                    // Store input sample in buffer 
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	f8d3 3f00 	ldr.w	r3, [r3, #3840]	@ 0xf00
 8000d6e:	687a      	ldr	r2, [r7, #4]
 8000d70:	009b      	lsls	r3, r3, #2
 8000d72:	4413      	add	r3, r2
 8000d74:	683a      	ldr	r2, [r7, #0]
 8000d76:	601a      	str	r2, [r3, #0]

    // Calculate read index
    float output = 0.0f;                                    // Read sample at slower rate for pitch down
 8000d78:	f04f 0300 	mov.w	r3, #0
 8000d7c:	617b      	str	r3, [r7, #20]
    int idx1 = (int)ps->read_index;                         // Get integer part of read index
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	f603 7304 	addw	r3, r3, #3844	@ 0xf04
 8000d84:	edd3 7a00 	vldr	s15, [r3]
 8000d88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d8c:	ee17 3a90 	vmov	r3, s15
 8000d90:	613b      	str	r3, [r7, #16]
    int idx2 = (idx1 + 1) % ps->size;                       // Get next index circularly
 8000d92:	693b      	ldr	r3, [r7, #16]
 8000d94:	3301      	adds	r3, #1
 8000d96:	687a      	ldr	r2, [r7, #4]
 8000d98:	f8d2 2f0c 	ldr.w	r2, [r2, #3852]	@ 0xf0c
 8000d9c:	fb93 f1f2 	sdiv	r1, r3, r2
 8000da0:	fb01 f202 	mul.w	r2, r1, r2
 8000da4:	1a9b      	subs	r3, r3, r2
 8000da6:	60fb      	str	r3, [r7, #12]
    float frac = ps->read_index - idx1;                     // Fractional part for interpolation
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	f603 7304 	addw	r3, r3, #3844	@ 0xf04
 8000dae:	ed93 7a00 	vldr	s14, [r3]
 8000db2:	693b      	ldr	r3, [r7, #16]
 8000db4:	ee07 3a90 	vmov	s15, r3
 8000db8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000dbc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000dc0:	edc7 7a02 	vstr	s15, [r7, #8]

    // Linear interpolate between two samples
    output = lerp(ps->buffer[idx1], ps->buffer[idx2], frac);
 8000dc4:	687a      	ldr	r2, [r7, #4]
 8000dc6:	693b      	ldr	r3, [r7, #16]
 8000dc8:	009b      	lsls	r3, r3, #2
 8000dca:	4413      	add	r3, r2
 8000dcc:	edd3 7a00 	vldr	s15, [r3]
 8000dd0:	687a      	ldr	r2, [r7, #4]
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	009b      	lsls	r3, r3, #2
 8000dd6:	4413      	add	r3, r2
 8000dd8:	ed93 7a00 	vldr	s14, [r3]
 8000ddc:	ed97 1a02 	vldr	s2, [r7, #8]
 8000de0:	eef0 0a47 	vmov.f32	s1, s14
 8000de4:	eeb0 0a67 	vmov.f32	s0, s15
 8000de8:	f7ff ff9a 	bl	8000d20 <lerp>
 8000dec:	ed87 0a05 	vstr	s0, [r7, #20]

    // Increment write index
    ps->write_index = (ps->write_index + 1) % ps->size;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	f8d3 3f00 	ldr.w	r3, [r3, #3840]	@ 0xf00
 8000df6:	3301      	adds	r3, #1
 8000df8:	687a      	ldr	r2, [r7, #4]
 8000dfa:	f8d2 2f0c 	ldr.w	r2, [r2, #3852]	@ 0xf0c
 8000dfe:	fb93 f1f2 	sdiv	r1, r3, r2
 8000e02:	fb01 f202 	mul.w	r2, r1, r2
 8000e06:	1a9a      	subs	r2, r3, r2
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	f8c3 2f00 	str.w	r2, [r3, #3840]	@ 0xf00

    // Increment read index slower for pitch down
    ps->read_index += ps->pitch_factor;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	f603 7304 	addw	r3, r3, #3844	@ 0xf04
 8000e14:	ed93 7a00 	vldr	s14, [r3]
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	f603 7308 	addw	r3, r3, #3848	@ 0xf08
 8000e1e:	edd3 7a00 	vldr	s15, [r3]
 8000e22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	f603 7304 	addw	r3, r3, #3844	@ 0xf04
 8000e2c:	edc3 7a00 	vstr	s15, [r3]
    if (ps->read_index >= ps->size) {
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	f603 7304 	addw	r3, r3, #3844	@ 0xf04
 8000e36:	ed93 7a00 	vldr	s14, [r3]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	f8d3 3f0c 	ldr.w	r3, [r3, #3852]	@ 0xf0c
 8000e40:	ee07 3a90 	vmov	s15, r3
 8000e44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e48:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000e4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e50:	db12      	blt.n	8000e78 <apply_pitchshifter+0x11c>
        ps->read_index -= ps->size;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	f603 7304 	addw	r3, r3, #3844	@ 0xf04
 8000e58:	ed93 7a00 	vldr	s14, [r3]
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	f8d3 3f0c 	ldr.w	r3, [r3, #3852]	@ 0xf0c
 8000e62:	ee07 3a90 	vmov	s15, r3
 8000e66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	f603 7304 	addw	r3, r3, #3844	@ 0xf04
 8000e74:	edc3 7a00 	vstr	s15, [r3]
    }

    return output;
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	ee07 3a90 	vmov	s15, r3
}
 8000e7e:	eeb0 0a67 	vmov.f32	s0, s15
 8000e82:	3718      	adds	r7, #24
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}

08000e88 <equalizer_init>:
// ---------------------------

void equalizer_init(Equalizer* eq,
                    float low_gain, float mid_gain, float high_gain,
                    float low_cutoff, float high_cutoff,
                    float sample_rate) {
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b088      	sub	sp, #32
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	61f8      	str	r0, [r7, #28]
 8000e90:	ed87 0a06 	vstr	s0, [r7, #24]
 8000e94:	edc7 0a05 	vstr	s1, [r7, #20]
 8000e98:	ed87 1a04 	vstr	s2, [r7, #16]
 8000e9c:	edc7 1a03 	vstr	s3, [r7, #12]
 8000ea0:	ed87 2a02 	vstr	s4, [r7, #8]
 8000ea4:	edc7 2a01 	vstr	s5, [r7, #4]
    eq->low_gain = low_gain;    // Set gains for each band
 8000ea8:	69fb      	ldr	r3, [r7, #28]
 8000eaa:	69ba      	ldr	r2, [r7, #24]
 8000eac:	629a      	str	r2, [r3, #40]	@ 0x28
    eq->mid_gain = mid_gain;    // Mid band gain
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	697a      	ldr	r2, [r7, #20]
 8000eb2:	62da      	str	r2, [r3, #44]	@ 0x2c
    eq->high_gain = high_gain;  // High band gain
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	631a      	str	r2, [r3, #48]	@ 0x30

    // Initialize filters
    lpf_init(&eq->lpf, low_cutoff, sample_rate);        // Low band
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	edd7 0a01 	vldr	s1, [r7, #4]
 8000ec0:	ed97 0a03 	vldr	s0, [r7, #12]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff fd7d 	bl	80009c4 <lpf_init>
    hpf_init(&eq->hpf, high_cutoff, sample_rate);       // High band
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	3308      	adds	r3, #8
 8000ece:	edd7 0a01 	vldr	s1, [r7, #4]
 8000ed2:	ed97 0a02 	vldr	s0, [r7, #8]
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f7ff fdaa 	bl	8000a30 <hpf_init>

    hpf_init(&eq->mid_hpf, low_cutoff, sample_rate);    // Mid band = Bandpass (HPF + LPF)
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	3314      	adds	r3, #20
 8000ee0:	edd7 0a01 	vldr	s1, [r7, #4]
 8000ee4:	ed97 0a03 	vldr	s0, [r7, #12]
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f7ff fda1 	bl	8000a30 <hpf_init>
    lpf_init(&eq->mid_lpf, high_cutoff, sample_rate);   // Mid band = Bandpass (HPF + LPF)
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	3320      	adds	r3, #32
 8000ef2:	edd7 0a01 	vldr	s1, [r7, #4]
 8000ef6:	ed97 0a02 	vldr	s0, [r7, #8]
 8000efa:	4618      	mov	r0, r3
 8000efc:	f7ff fd62 	bl	80009c4 <lpf_init>
}
 8000f00:	bf00      	nop
 8000f02:	3720      	adds	r7, #32
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <darthvader_init>:
                     float low_cutoff, float high_cutoff,
                     float pitch_factor, 
                     float reverb_delay_ms, float reverb_feedback,float reverb_mix, 
                     float distortion_threshold,
                     float volume_gain,
                     float sample_rate) {
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b08e      	sub	sp, #56	@ 0x38
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6378      	str	r0, [r7, #52]	@ 0x34
 8000f10:	ed87 0a0c 	vstr	s0, [r7, #48]	@ 0x30
 8000f14:	edc7 0a0b 	vstr	s1, [r7, #44]	@ 0x2c
 8000f18:	ed87 1a0a 	vstr	s2, [r7, #40]	@ 0x28
 8000f1c:	edc7 1a09 	vstr	s3, [r7, #36]	@ 0x24
 8000f20:	ed87 2a08 	vstr	s4, [r7, #32]
 8000f24:	edc7 2a07 	vstr	s5, [r7, #28]
 8000f28:	ed87 3a06 	vstr	s6, [r7, #24]
 8000f2c:	edc7 3a05 	vstr	s7, [r7, #20]
 8000f30:	ed87 4a04 	vstr	s8, [r7, #16]
 8000f34:	edc7 4a03 	vstr	s9, [r7, #12]
 8000f38:	ed87 5a02 	vstr	s10, [r7, #8]
 8000f3c:	edc7 5a01 	vstr	s11, [r7, #4]

    dv->distortion_threshold = distortion_threshold; // Set distortion threshold
 8000f40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000f46:	f603 6354 	addw	r3, r3, #3668	@ 0xe54
 8000f4a:	68fa      	ldr	r2, [r7, #12]
 8000f4c:	601a      	str	r2, [r3, #0]
    dv->volume_gain = volume_gain;                   // Set volume gain
 8000f4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f50:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000f54:	f603 6358 	addw	r3, r3, #3672	@ 0xe58
 8000f58:	68ba      	ldr	r2, [r7, #8]
 8000f5a:	601a      	str	r2, [r3, #0]

    equalizer_init(&dv->eq, low_gain, mid_gain, high_gain, low_cutoff, high_cutoff, sample_rate);
 8000f5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f5e:	edd7 2a01 	vldr	s5, [r7, #4]
 8000f62:	ed97 2a08 	vldr	s4, [r7, #32]
 8000f66:	edd7 1a09 	vldr	s3, [r7, #36]	@ 0x24
 8000f6a:	ed97 1a0a 	vldr	s2, [r7, #40]	@ 0x28
 8000f6e:	edd7 0a0b 	vldr	s1, [r7, #44]	@ 0x2c
 8000f72:	ed97 0a0c 	vldr	s0, [r7, #48]	@ 0x30
 8000f76:	4618      	mov	r0, r3
 8000f78:	f7ff ff86 	bl	8000e88 <equalizer_init>
    pitchshifter_init(&dv->ps, pitch_factor, sample_rate);
 8000f7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f7e:	3334      	adds	r3, #52	@ 0x34
 8000f80:	edd7 0a01 	vldr	s1, [r7, #4]
 8000f84:	ed97 0a07 	vldr	s0, [r7, #28]
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f7ff fdcd 	bl	8000b28 <pitchshifter_init>
    reverb_init(&dv->reverb, reverb_delay_ms, reverb_feedback, reverb_mix, sample_rate);
 8000f8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f90:	f603 7344 	addw	r3, r3, #3908	@ 0xf44
 8000f94:	edd7 1a01 	vldr	s3, [r7, #4]
 8000f98:	ed97 1a04 	vldr	s2, [r7, #16]
 8000f9c:	edd7 0a05 	vldr	s1, [r7, #20]
 8000fa0:	ed97 0a06 	vldr	s0, [r7, #24]
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff fd7d 	bl	8000aa4 <reverb_init>
}
 8000faa:	bf00      	nop
 8000fac:	3738      	adds	r7, #56	@ 0x38
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}

08000fb2 <apply_equalizer>:

// ---------------------------
// Custom Filter Apply Functions
// ---------------------------

float apply_equalizer(Equalizer* eq, float x) {
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	b086      	sub	sp, #24
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	6078      	str	r0, [r7, #4]
 8000fba:	ed87 0a00 	vstr	s0, [r7]
    // Low band: low-pass only
    float low = apply_lpf(&eq->lpf, x);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	ed97 0a00 	vldr	s0, [r7]
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff fdd6 	bl	8000b76 <apply_lpf>
 8000fca:	ed87 0a05 	vstr	s0, [r7, #20]

    // High band: high-pass only
    float high = apply_hpf(&eq->hpf, x);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	3308      	adds	r3, #8
 8000fd2:	ed97 0a00 	vldr	s0, [r7]
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f7ff fdf7 	bl	8000bca <apply_hpf>
 8000fdc:	ed87 0a04 	vstr	s0, [r7, #16]

    // Mid band: band-pass (HPF followed by LPF)
    float mid = apply_hpf(&eq->mid_hpf, x);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	3314      	adds	r3, #20
 8000fe4:	ed97 0a00 	vldr	s0, [r7]
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff fdee 	bl	8000bca <apply_hpf>
 8000fee:	ed87 0a03 	vstr	s0, [r7, #12]
    mid = apply_lpf(&eq->mid_lpf, mid);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	3320      	adds	r3, #32
 8000ff6:	ed97 0a03 	vldr	s0, [r7, #12]
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f7ff fdbb 	bl	8000b76 <apply_lpf>
 8001000:	ed87 0a03 	vstr	s0, [r7, #12]

    // Apply gain
    return low * eq->low_gain + mid * eq->mid_gain + high * eq->high_gain;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 800100a:	edd7 7a05 	vldr	s15, [r7, #20]
 800100e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 8001018:	edd7 7a03 	vldr	s15, [r7, #12]
 800101c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001020:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 800102a:	edd7 7a04 	vldr	s15, [r7, #16]
 800102e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001032:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001036:	eeb0 0a67 	vmov.f32	s0, s15
 800103a:	3718      	adds	r7, #24
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}

08001040 <apply_volume_gain>:

// Function to increase volume of a single audio sample
float apply_volume_gain(float sample, float gain) {
 8001040:	b480      	push	{r7}
 8001042:	b085      	sub	sp, #20
 8001044:	af00      	add	r7, sp, #0
 8001046:	ed87 0a01 	vstr	s0, [r7, #4]
 800104a:	edc7 0a00 	vstr	s1, [r7]
    // Apply gain to the sample
    float amplified = sample * gain;
 800104e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001052:	edd7 7a00 	vldr	s15, [r7]
 8001056:	ee67 7a27 	vmul.f32	s15, s14, s15
 800105a:	edc7 7a03 	vstr	s15, [r7, #12]

    // Clamp the result to the normalized range [-1.0f, 1.0f] to avoid clipping
    if (amplified > 1.0f) {
 800105e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001062:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001066:	eef4 7ac7 	vcmpe.f32	s15, s14
 800106a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800106e:	dd03      	ble.n	8001078 <apply_volume_gain+0x38>
        amplified = 1.0f;
 8001070:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001074:	60fb      	str	r3, [r7, #12]
 8001076:	e00a      	b.n	800108e <apply_volume_gain+0x4e>
    } else if (amplified < -1.0f) {
 8001078:	edd7 7a03 	vldr	s15, [r7, #12]
 800107c:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8001080:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001088:	d501      	bpl.n	800108e <apply_volume_gain+0x4e>
        amplified = -1.0f;
 800108a:	4b06      	ldr	r3, [pc, #24]	@ (80010a4 <apply_volume_gain+0x64>)
 800108c:	60fb      	str	r3, [r7, #12]
    }

    return amplified;
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	ee07 3a90 	vmov	s15, r3
}
 8001094:	eeb0 0a67 	vmov.f32	s0, s15
 8001098:	3714      	adds	r7, #20
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	bf800000 	.word	0xbf800000

080010a8 <apply_darthvader>:

float apply_darthvader(DarthVader* dv, float x) {
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	ed87 0a00 	vstr	s0, [r7]

    x = apply_pitchshifter(&dv->ps, x);                 // Apply pitch shifter
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	3334      	adds	r3, #52	@ 0x34
 80010b8:	ed97 0a00 	vldr	s0, [r7]
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff fe4d 	bl	8000d5c <apply_pitchshifter>
 80010c2:	ed87 0a00 	vstr	s0, [r7]
    x = apply_distortion(x, dv->distortion_threshold);  // Apply distortion
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80010cc:	f603 6354 	addw	r3, r3, #3668	@ 0xe54
 80010d0:	edd3 7a00 	vldr	s15, [r3]
 80010d4:	eef0 0a67 	vmov.f32	s1, s15
 80010d8:	ed97 0a00 	vldr	s0, [r7]
 80010dc:	f7ff fd9e 	bl	8000c1c <apply_distortion>
 80010e0:	ed87 0a00 	vstr	s0, [r7]
	x = apply_equalizer(&dv->eq, x);                    // then equalizer
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	ed97 0a00 	vldr	s0, [r7]
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff ff61 	bl	8000fb2 <apply_equalizer>
 80010f0:	ed87 0a00 	vstr	s0, [r7]
	x = apply_reverb(&dv->reverb, x);                   // reverb
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	f603 7344 	addw	r3, r3, #3908	@ 0xf44
 80010fa:	ed97 0a00 	vldr	s0, [r7]
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff fdb8 	bl	8000c74 <apply_reverb>
 8001104:	ed87 0a00 	vstr	s0, [r7]
    x = apply_volume_gain(x, dv->volume_gain);          // volume gain last
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800110e:	f603 6358 	addw	r3, r3, #3672	@ 0xe58
 8001112:	edd3 7a00 	vldr	s15, [r3]
 8001116:	eef0 0a67 	vmov.f32	s1, s15
 800111a:	ed97 0a00 	vldr	s0, [r7]
 800111e:	f7ff ff8f 	bl	8001040 <apply_volume_gain>
 8001122:	ed87 0a00 	vstr	s0, [r7]

    return x;
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	ee07 3a90 	vmov	s15, r3
}
 800112c:	eeb0 0a67 	vmov.f32	s0, s15
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
	...

08001138 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b088      	sub	sp, #32
 800113c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113e:	f107 030c 	add.w	r3, r7, #12
 8001142:	2200      	movs	r2, #0
 8001144:	601a      	str	r2, [r3, #0]
 8001146:	605a      	str	r2, [r3, #4]
 8001148:	609a      	str	r2, [r3, #8]
 800114a:	60da      	str	r2, [r3, #12]
 800114c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	60bb      	str	r3, [r7, #8]
 8001152:	4b2b      	ldr	r3, [pc, #172]	@ (8001200 <MX_GPIO_Init+0xc8>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001156:	4a2a      	ldr	r2, [pc, #168]	@ (8001200 <MX_GPIO_Init+0xc8>)
 8001158:	f043 0304 	orr.w	r3, r3, #4
 800115c:	6313      	str	r3, [r2, #48]	@ 0x30
 800115e:	4b28      	ldr	r3, [pc, #160]	@ (8001200 <MX_GPIO_Init+0xc8>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001162:	f003 0304 	and.w	r3, r3, #4
 8001166:	60bb      	str	r3, [r7, #8]
 8001168:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	607b      	str	r3, [r7, #4]
 800116e:	4b24      	ldr	r3, [pc, #144]	@ (8001200 <MX_GPIO_Init+0xc8>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001172:	4a23      	ldr	r2, [pc, #140]	@ (8001200 <MX_GPIO_Init+0xc8>)
 8001174:	f043 0301 	orr.w	r3, r3, #1
 8001178:	6313      	str	r3, [r2, #48]	@ 0x30
 800117a:	4b21      	ldr	r3, [pc, #132]	@ (8001200 <MX_GPIO_Init+0xc8>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117e:	f003 0301 	and.w	r3, r3, #1
 8001182:	607b      	str	r3, [r7, #4]
 8001184:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001186:	2300      	movs	r3, #0
 8001188:	603b      	str	r3, [r7, #0]
 800118a:	4b1d      	ldr	r3, [pc, #116]	@ (8001200 <MX_GPIO_Init+0xc8>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118e:	4a1c      	ldr	r2, [pc, #112]	@ (8001200 <MX_GPIO_Init+0xc8>)
 8001190:	f043 0302 	orr.w	r3, r3, #2
 8001194:	6313      	str	r3, [r2, #48]	@ 0x30
 8001196:	4b1a      	ldr	r3, [pc, #104]	@ (8001200 <MX_GPIO_Init+0xc8>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800119a:	f003 0302 	and.w	r3, r3, #2
 800119e:	603b      	str	r3, [r7, #0]
 80011a0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80011a2:	2200      	movs	r2, #0
 80011a4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011a8:	4816      	ldr	r0, [pc, #88]	@ (8001204 <MX_GPIO_Init+0xcc>)
 80011aa:	f001 fda9 	bl	8002d00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80011ae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b4:	2301      	movs	r3, #1
 80011b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b8:	2300      	movs	r3, #0
 80011ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011bc:	2300      	movs	r3, #0
 80011be:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80011c0:	f107 030c 	add.w	r3, r7, #12
 80011c4:	4619      	mov	r1, r3
 80011c6:	480f      	ldr	r0, [pc, #60]	@ (8001204 <MX_GPIO_Init+0xcc>)
 80011c8:	f001 fc16 	bl	80029f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY_Pin */
  GPIO_InitStruct.Pin = KEY_Pin;
 80011cc:	2301      	movs	r3, #1
 80011ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011d0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80011d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011d6:	2301      	movs	r3, #1
 80011d8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 80011da:	f107 030c 	add.w	r3, r7, #12
 80011de:	4619      	mov	r1, r3
 80011e0:	4809      	ldr	r0, [pc, #36]	@ (8001208 <MX_GPIO_Init+0xd0>)
 80011e2:	f001 fc09 	bl	80029f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80011e6:	2200      	movs	r2, #0
 80011e8:	2100      	movs	r1, #0
 80011ea:	2006      	movs	r0, #6
 80011ec:	f001 f85d 	bl	80022aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80011f0:	2006      	movs	r0, #6
 80011f2:	f001 f876 	bl	80022e2 <HAL_NVIC_EnableIRQ>

}
 80011f6:	bf00      	nop
 80011f8:	3720      	adds	r7, #32
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	40023800 	.word	0x40023800
 8001204:	40020800 	.word	0x40020800
 8001208:	40020000 	.word	0x40020000

0800120c <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_tx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8001210:	4b13      	ldr	r3, [pc, #76]	@ (8001260 <MX_I2S2_Init+0x54>)
 8001212:	4a14      	ldr	r2, [pc, #80]	@ (8001264 <MX_I2S2_Init+0x58>)
 8001214:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8001216:	4b12      	ldr	r3, [pc, #72]	@ (8001260 <MX_I2S2_Init+0x54>)
 8001218:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800121c:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800121e:	4b10      	ldr	r3, [pc, #64]	@ (8001260 <MX_I2S2_Init+0x54>)
 8001220:	2200      	movs	r2, #0
 8001222:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001224:	4b0e      	ldr	r3, [pc, #56]	@ (8001260 <MX_I2S2_Init+0x54>)
 8001226:	2200      	movs	r2, #0
 8001228:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800122a:	4b0d      	ldr	r3, [pc, #52]	@ (8001260 <MX_I2S2_Init+0x54>)
 800122c:	2200      	movs	r2, #0
 800122e:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8001230:	4b0b      	ldr	r3, [pc, #44]	@ (8001260 <MX_I2S2_Init+0x54>)
 8001232:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8001236:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8001238:	4b09      	ldr	r3, [pc, #36]	@ (8001260 <MX_I2S2_Init+0x54>)
 800123a:	2200      	movs	r2, #0
 800123c:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 800123e:	4b08      	ldr	r3, [pc, #32]	@ (8001260 <MX_I2S2_Init+0x54>)
 8001240:	2200      	movs	r2, #0
 8001242:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001244:	4b06      	ldr	r3, [pc, #24]	@ (8001260 <MX_I2S2_Init+0x54>)
 8001246:	2200      	movs	r2, #0
 8001248:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800124a:	4805      	ldr	r0, [pc, #20]	@ (8001260 <MX_I2S2_Init+0x54>)
 800124c:	f001 fda4 	bl	8002d98 <HAL_I2S_Init>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 8001256:	f000 f937 	bl	80014c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 800125a:	bf00      	nop
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	20004660 	.word	0x20004660
 8001264:	40003800 	.word	0x40003800

08001268 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b090      	sub	sp, #64	@ 0x40
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001270:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	605a      	str	r2, [r3, #4]
 800127a:	609a      	str	r2, [r3, #8]
 800127c:	60da      	str	r2, [r3, #12]
 800127e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001280:	f107 0314 	add.w	r3, r7, #20
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	605a      	str	r2, [r3, #4]
 800128a:	609a      	str	r2, [r3, #8]
 800128c:	60da      	str	r2, [r3, #12]
 800128e:	611a      	str	r2, [r3, #16]
 8001290:	615a      	str	r2, [r3, #20]
  if(i2sHandle->Instance==SPI2)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a3b      	ldr	r2, [pc, #236]	@ (8001384 <HAL_I2S_MspInit+0x11c>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d16e      	bne.n	800137a <HAL_I2S_MspInit+0x112>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800129c:	2301      	movs	r3, #1
 800129e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80012a0:	23c0      	movs	r3, #192	@ 0xc0
 80012a2:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 16;
 80012a4:	2310      	movs	r3, #16
 80012a6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80012a8:	2302      	movs	r3, #2
 80012aa:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012ac:	f107 0314 	add.w	r3, r7, #20
 80012b0:	4618      	mov	r0, r3
 80012b2:	f002 ff23 	bl	80040fc <HAL_RCCEx_PeriphCLKConfig>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <HAL_I2S_MspInit+0x58>
    {
      Error_Handler();
 80012bc:	f000 f904 	bl	80014c8 <Error_Handler>
    }

    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80012c0:	2300      	movs	r3, #0
 80012c2:	613b      	str	r3, [r7, #16]
 80012c4:	4b30      	ldr	r3, [pc, #192]	@ (8001388 <HAL_I2S_MspInit+0x120>)
 80012c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012c8:	4a2f      	ldr	r2, [pc, #188]	@ (8001388 <HAL_I2S_MspInit+0x120>)
 80012ca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80012d0:	4b2d      	ldr	r3, [pc, #180]	@ (8001388 <HAL_I2S_MspInit+0x120>)
 80012d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012d8:	613b      	str	r3, [r7, #16]
 80012da:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012dc:	2300      	movs	r3, #0
 80012de:	60fb      	str	r3, [r7, #12]
 80012e0:	4b29      	ldr	r3, [pc, #164]	@ (8001388 <HAL_I2S_MspInit+0x120>)
 80012e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e4:	4a28      	ldr	r2, [pc, #160]	@ (8001388 <HAL_I2S_MspInit+0x120>)
 80012e6:	f043 0302 	orr.w	r3, r3, #2
 80012ea:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ec:	4b26      	ldr	r3, [pc, #152]	@ (8001388 <HAL_I2S_MspInit+0x120>)
 80012ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f0:	f003 0302 	and.w	r3, r3, #2
 80012f4:	60fb      	str	r3, [r7, #12]
 80012f6:	68fb      	ldr	r3, [r7, #12]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80012f8:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 80012fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fe:	2302      	movs	r3, #2
 8001300:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001302:	2300      	movs	r3, #0
 8001304:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001306:	2300      	movs	r3, #0
 8001308:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800130a:	2305      	movs	r3, #5
 800130c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800130e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001312:	4619      	mov	r1, r3
 8001314:	481d      	ldr	r0, [pc, #116]	@ (800138c <HAL_I2S_MspInit+0x124>)
 8001316:	f001 fb6f 	bl	80029f8 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 800131a:	4b1d      	ldr	r3, [pc, #116]	@ (8001390 <HAL_I2S_MspInit+0x128>)
 800131c:	4a1d      	ldr	r2, [pc, #116]	@ (8001394 <HAL_I2S_MspInit+0x12c>)
 800131e:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8001320:	4b1b      	ldr	r3, [pc, #108]	@ (8001390 <HAL_I2S_MspInit+0x128>)
 8001322:	2200      	movs	r2, #0
 8001324:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001326:	4b1a      	ldr	r3, [pc, #104]	@ (8001390 <HAL_I2S_MspInit+0x128>)
 8001328:	2240      	movs	r2, #64	@ 0x40
 800132a:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800132c:	4b18      	ldr	r3, [pc, #96]	@ (8001390 <HAL_I2S_MspInit+0x128>)
 800132e:	2200      	movs	r2, #0
 8001330:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001332:	4b17      	ldr	r3, [pc, #92]	@ (8001390 <HAL_I2S_MspInit+0x128>)
 8001334:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001338:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800133a:	4b15      	ldr	r3, [pc, #84]	@ (8001390 <HAL_I2S_MspInit+0x128>)
 800133c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001340:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001342:	4b13      	ldr	r3, [pc, #76]	@ (8001390 <HAL_I2S_MspInit+0x128>)
 8001344:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001348:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 800134a:	4b11      	ldr	r3, [pc, #68]	@ (8001390 <HAL_I2S_MspInit+0x128>)
 800134c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001350:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001352:	4b0f      	ldr	r3, [pc, #60]	@ (8001390 <HAL_I2S_MspInit+0x128>)
 8001354:	2200      	movs	r2, #0
 8001356:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001358:	4b0d      	ldr	r3, [pc, #52]	@ (8001390 <HAL_I2S_MspInit+0x128>)
 800135a:	2200      	movs	r2, #0
 800135c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800135e:	480c      	ldr	r0, [pc, #48]	@ (8001390 <HAL_I2S_MspInit+0x128>)
 8001360:	f000 ffda 	bl	8002318 <HAL_DMA_Init>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <HAL_I2S_MspInit+0x106>
    {
      Error_Handler();
 800136a:	f000 f8ad 	bl	80014c8 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmatx,hdma_spi2_tx);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4a07      	ldr	r2, [pc, #28]	@ (8001390 <HAL_I2S_MspInit+0x128>)
 8001372:	639a      	str	r2, [r3, #56]	@ 0x38
 8001374:	4a06      	ldr	r2, [pc, #24]	@ (8001390 <HAL_I2S_MspInit+0x128>)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800137a:	bf00      	nop
 800137c:	3740      	adds	r7, #64	@ 0x40
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	40003800 	.word	0x40003800
 8001388:	40023800 	.word	0x40023800
 800138c:	40020400 	.word	0x40020400
 8001390:	200046a8 	.word	0x200046a8
 8001394:	40026070 	.word	0x40026070

08001398 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  filters_init();
 800139c:	f7ff f97a 	bl	8000694 <filters_init>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013a0:	f000 fa30 	bl	8001804 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013a4:	f000 f826 	bl	80013f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013a8:	f7ff fec6 	bl	8001138 <MX_GPIO_Init>
  MX_DMA_Init();
 80013ac:	f7ff fad4 	bl	8000958 <MX_DMA_Init>
  MX_ADC1_Init();
 80013b0:	f7ff f8a8 	bl	8000504 <MX_ADC1_Init>
  MX_TIM2_Init();
 80013b4:	f000 f98a 	bl	80016cc <MX_TIM2_Init>
  MX_I2S2_Init();
 80013b8:	f7ff ff28 	bl	800120c <MX_I2S2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 80013bc:	4808      	ldr	r0, [pc, #32]	@ (80013e0 <main+0x48>)
 80013be:	f003 f83f 	bl	8004440 <HAL_TIM_Base_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) IN_BUFFER, BUFFER_SIZE/2);
 80013c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80013c6:	4907      	ldr	r1, [pc, #28]	@ (80013e4 <main+0x4c>)
 80013c8:	4807      	ldr	r0, [pc, #28]	@ (80013e8 <main+0x50>)
 80013ca:	f000 fad1 	bl	8001970 <HAL_ADC_Start_DMA>
  HAL_I2S_Transmit_DMA(&hi2s2, (uint16_t*) OUT_BUFFER, BUFFER_SIZE*2);
 80013ce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80013d2:	4906      	ldr	r1, [pc, #24]	@ (80013ec <main+0x54>)
 80013d4:	4806      	ldr	r0, [pc, #24]	@ (80013f0 <main+0x58>)
 80013d6:	f001 fe1f 	bl	8003018 <HAL_I2S_Transmit_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80013da:	bf00      	nop
 80013dc:	e7fd      	b.n	80013da <main+0x42>
 80013de:	bf00      	nop
 80013e0:	2000470c 	.word	0x2000470c
 80013e4:	200000dc 	.word	0x200000dc
 80013e8:	20000034 	.word	0x20000034
 80013ec:	200008dc 	.word	0x200008dc
 80013f0:	20004660 	.word	0x20004660

080013f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b094      	sub	sp, #80	@ 0x50
 80013f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013fa:	f107 0320 	add.w	r3, r7, #32
 80013fe:	2230      	movs	r2, #48	@ 0x30
 8001400:	2100      	movs	r1, #0
 8001402:	4618      	mov	r0, r3
 8001404:	f003 fc02 	bl	8004c0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001408:	f107 030c 	add.w	r3, r7, #12
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	605a      	str	r2, [r3, #4]
 8001412:	609a      	str	r2, [r3, #8]
 8001414:	60da      	str	r2, [r3, #12]
 8001416:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001418:	2300      	movs	r3, #0
 800141a:	60bb      	str	r3, [r7, #8]
 800141c:	4b28      	ldr	r3, [pc, #160]	@ (80014c0 <SystemClock_Config+0xcc>)
 800141e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001420:	4a27      	ldr	r2, [pc, #156]	@ (80014c0 <SystemClock_Config+0xcc>)
 8001422:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001426:	6413      	str	r3, [r2, #64]	@ 0x40
 8001428:	4b25      	ldr	r3, [pc, #148]	@ (80014c0 <SystemClock_Config+0xcc>)
 800142a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800142c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001430:	60bb      	str	r3, [r7, #8]
 8001432:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001434:	2300      	movs	r3, #0
 8001436:	607b      	str	r3, [r7, #4]
 8001438:	4b22      	ldr	r3, [pc, #136]	@ (80014c4 <SystemClock_Config+0xd0>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a21      	ldr	r2, [pc, #132]	@ (80014c4 <SystemClock_Config+0xd0>)
 800143e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001442:	6013      	str	r3, [r2, #0]
 8001444:	4b1f      	ldr	r3, [pc, #124]	@ (80014c4 <SystemClock_Config+0xd0>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800144c:	607b      	str	r3, [r7, #4]
 800144e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001450:	2302      	movs	r3, #2
 8001452:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001454:	2301      	movs	r3, #1
 8001456:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001458:	2310      	movs	r3, #16
 800145a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800145c:	2302      	movs	r3, #2
 800145e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001460:	2300      	movs	r3, #0
 8001462:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001464:	2308      	movs	r3, #8
 8001466:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001468:	2360      	movs	r3, #96	@ 0x60
 800146a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800146c:	2302      	movs	r3, #2
 800146e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001470:	2304      	movs	r3, #4
 8001472:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001474:	f107 0320 	add.w	r3, r7, #32
 8001478:	4618      	mov	r0, r3
 800147a:	f002 fa1b 	bl	80038b4 <HAL_RCC_OscConfig>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001484:	f000 f820 	bl	80014c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001488:	230f      	movs	r3, #15
 800148a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800148c:	2302      	movs	r3, #2
 800148e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001490:	2380      	movs	r3, #128	@ 0x80
 8001492:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001494:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001498:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800149a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800149e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80014a0:	f107 030c 	add.w	r3, r7, #12
 80014a4:	2101      	movs	r1, #1
 80014a6:	4618      	mov	r0, r3
 80014a8:	f002 fc7c 	bl	8003da4 <HAL_RCC_ClockConfig>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80014b2:	f000 f809 	bl	80014c8 <Error_Handler>
  }
}
 80014b6:	bf00      	nop
 80014b8:	3750      	adds	r7, #80	@ 0x50
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	40023800 	.word	0x40023800
 80014c4:	40007000 	.word	0x40007000

080014c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014cc:	b672      	cpsid	i
}
 80014ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014d0:	bf00      	nop
 80014d2:	e7fd      	b.n	80014d0 <Error_Handler+0x8>

080014d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014da:	2300      	movs	r3, #0
 80014dc:	607b      	str	r3, [r7, #4]
 80014de:	4b10      	ldr	r3, [pc, #64]	@ (8001520 <HAL_MspInit+0x4c>)
 80014e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014e2:	4a0f      	ldr	r2, [pc, #60]	@ (8001520 <HAL_MspInit+0x4c>)
 80014e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80014ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001520 <HAL_MspInit+0x4c>)
 80014ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014f2:	607b      	str	r3, [r7, #4]
 80014f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014f6:	2300      	movs	r3, #0
 80014f8:	603b      	str	r3, [r7, #0]
 80014fa:	4b09      	ldr	r3, [pc, #36]	@ (8001520 <HAL_MspInit+0x4c>)
 80014fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014fe:	4a08      	ldr	r2, [pc, #32]	@ (8001520 <HAL_MspInit+0x4c>)
 8001500:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001504:	6413      	str	r3, [r2, #64]	@ 0x40
 8001506:	4b06      	ldr	r3, [pc, #24]	@ (8001520 <HAL_MspInit+0x4c>)
 8001508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800150a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800150e:	603b      	str	r3, [r7, #0]
 8001510:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001512:	bf00      	nop
 8001514:	370c      	adds	r7, #12
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	40023800 	.word	0x40023800

08001524 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001528:	bf00      	nop
 800152a:	e7fd      	b.n	8001528 <NMI_Handler+0x4>

0800152c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001530:	bf00      	nop
 8001532:	e7fd      	b.n	8001530 <HardFault_Handler+0x4>

08001534 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001538:	bf00      	nop
 800153a:	e7fd      	b.n	8001538 <MemManage_Handler+0x4>

0800153c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001540:	bf00      	nop
 8001542:	e7fd      	b.n	8001540 <BusFault_Handler+0x4>

08001544 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001548:	bf00      	nop
 800154a:	e7fd      	b.n	8001548 <UsageFault_Handler+0x4>

0800154c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001550:	bf00      	nop
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr

0800155a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800155a:	b480      	push	{r7}
 800155c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800155e:	bf00      	nop
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800156c:	bf00      	nop
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr

08001576 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001576:	b580      	push	{r7, lr}
 8001578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800157a:	f000 f995 	bl	80018a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800157e:	bf00      	nop
 8001580:	bd80      	pop	{r7, pc}

08001582 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001582:	b580      	push	{r7, lr}
 8001584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY_Pin);
 8001586:	2001      	movs	r0, #1
 8001588:	f001 fbee 	bl	8002d68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800158c:	bf00      	nop
 800158e:	bd80      	pop	{r7, pc}

08001590 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001594:	4802      	ldr	r0, [pc, #8]	@ (80015a0 <DMA1_Stream4_IRQHandler+0x10>)
 8001596:	f000 ffc5 	bl	8002524 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800159a:	bf00      	nop
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	200046a8 	.word	0x200046a8

080015a4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80015a8:	4802      	ldr	r0, [pc, #8]	@ (80015b4 <TIM2_IRQHandler+0x10>)
 80015aa:	f002 ffa3 	bl	80044f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80015ae:	bf00      	nop
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	2000470c 	.word	0x2000470c

080015b8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80015bc:	4802      	ldr	r0, [pc, #8]	@ (80015c8 <DMA2_Stream0_IRQHandler+0x10>)
 80015be:	f000 ffb1 	bl	8002524 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80015c2:	bf00      	nop
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	2000007c 	.word	0x2000007c

080015cc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Callback (uint16_t GPIO_Pin)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	4603      	mov	r3, r0
 80015d4:	80fb      	strh	r3, [r7, #6]
	CURRENT_FILTER++;
 80015d6:	4b06      	ldr	r3, [pc, #24]	@ (80015f0 <HAL_GPIO_EXTI_Callback+0x24>)
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	3301      	adds	r3, #1
 80015dc:	b2da      	uxtb	r2, r3
 80015de:	4b04      	ldr	r3, [pc, #16]	@ (80015f0 <HAL_GPIO_EXTI_Callback+0x24>)
 80015e0:	701a      	strb	r2, [r3, #0]
}
 80015e2:	bf00      	nop
 80015e4:	370c      	adds	r7, #12
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	2000465c 	.word	0x2000465c

080015f4 <HAL_I2S_TxHalfCpltCallback>:


uint16_t count = 0;
void HAL_I2S_TxHalfCpltCallback (I2S_HandleTypeDef * hi2s)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
	process_in_buffer = &(IN_BUFFER[0]);
 80015fc:	4b08      	ldr	r3, [pc, #32]	@ (8001620 <HAL_I2S_TxHalfCpltCallback+0x2c>)
 80015fe:	4a09      	ldr	r2, [pc, #36]	@ (8001624 <HAL_I2S_TxHalfCpltCallback+0x30>)
 8001600:	601a      	str	r2, [r3, #0]
	process_out_buffer = &(OUT_BUFFER[0]);
 8001602:	4b09      	ldr	r3, [pc, #36]	@ (8001628 <HAL_I2S_TxHalfCpltCallback+0x34>)
 8001604:	4a09      	ldr	r2, [pc, #36]	@ (800162c <HAL_I2S_TxHalfCpltCallback+0x38>)
 8001606:	601a      	str	r2, [r3, #0]
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &(IN_BUFFER[BUFFER_SIZE/2]), BUFFER_SIZE/2);
 8001608:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800160c:	4908      	ldr	r1, [pc, #32]	@ (8001630 <HAL_I2S_TxHalfCpltCallback+0x3c>)
 800160e:	4809      	ldr	r0, [pc, #36]	@ (8001634 <HAL_I2S_TxHalfCpltCallback+0x40>)
 8001610:	f000 f9ae 	bl	8001970 <HAL_ADC_Start_DMA>
	processHalfBuffer();
 8001614:	f7ff f90a 	bl	800082c <processHalfBuffer>
}
 8001618:	bf00      	nop
 800161a:	3708      	adds	r7, #8
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	20000000 	.word	0x20000000
 8001624:	200000dc 	.word	0x200000dc
 8001628:	20000004 	.word	0x20000004
 800162c:	200008dc 	.word	0x200008dc
 8001630:	200004dc 	.word	0x200004dc
 8001634:	20000034 	.word	0x20000034

08001638 <HAL_I2S_TxCpltCallback>:

void HAL_I2S_TxCpltCallback (I2S_HandleTypeDef * hi2s)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
	count++;
 8001640:	4b11      	ldr	r3, [pc, #68]	@ (8001688 <HAL_I2S_TxCpltCallback+0x50>)
 8001642:	881b      	ldrh	r3, [r3, #0]
 8001644:	3301      	adds	r3, #1
 8001646:	b29a      	uxth	r2, r3
 8001648:	4b0f      	ldr	r3, [pc, #60]	@ (8001688 <HAL_I2S_TxCpltCallback+0x50>)
 800164a:	801a      	strh	r2, [r3, #0]
	if (count==48)
 800164c:	4b0e      	ldr	r3, [pc, #56]	@ (8001688 <HAL_I2S_TxCpltCallback+0x50>)
 800164e:	881b      	ldrh	r3, [r3, #0]
 8001650:	2b30      	cmp	r3, #48	@ 0x30
 8001652:	d107      	bne.n	8001664 <HAL_I2S_TxCpltCallback+0x2c>
	{
		count = 0;
 8001654:	4b0c      	ldr	r3, [pc, #48]	@ (8001688 <HAL_I2S_TxCpltCallback+0x50>)
 8001656:	2200      	movs	r2, #0
 8001658:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800165a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800165e:	480b      	ldr	r0, [pc, #44]	@ (800168c <HAL_I2S_TxCpltCallback+0x54>)
 8001660:	f001 fb67 	bl	8002d32 <HAL_GPIO_TogglePin>
	}
	process_in_buffer = &(IN_BUFFER[BUFFER_SIZE/2]);
 8001664:	4b0a      	ldr	r3, [pc, #40]	@ (8001690 <HAL_I2S_TxCpltCallback+0x58>)
 8001666:	4a0b      	ldr	r2, [pc, #44]	@ (8001694 <HAL_I2S_TxCpltCallback+0x5c>)
 8001668:	601a      	str	r2, [r3, #0]
	process_out_buffer = &(OUT_BUFFER[BUFFER_SIZE]);
 800166a:	4b0b      	ldr	r3, [pc, #44]	@ (8001698 <HAL_I2S_TxCpltCallback+0x60>)
 800166c:	4a0b      	ldr	r2, [pc, #44]	@ (800169c <HAL_I2S_TxCpltCallback+0x64>)
 800166e:	601a      	str	r2, [r3, #0]
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &(IN_BUFFER[0]), BUFFER_SIZE/2);
 8001670:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001674:	490a      	ldr	r1, [pc, #40]	@ (80016a0 <HAL_I2S_TxCpltCallback+0x68>)
 8001676:	480b      	ldr	r0, [pc, #44]	@ (80016a4 <HAL_I2S_TxCpltCallback+0x6c>)
 8001678:	f000 f97a 	bl	8001970 <HAL_ADC_Start_DMA>
	processHalfBuffer();
 800167c:	f7ff f8d6 	bl	800082c <processHalfBuffer>
}
 8001680:	bf00      	nop
 8001682:	3708      	adds	r7, #8
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	20004708 	.word	0x20004708
 800168c:	40020800 	.word	0x40020800
 8001690:	20000000 	.word	0x20000000
 8001694:	200004dc 	.word	0x200004dc
 8001698:	20000004 	.word	0x20000004
 800169c:	200010dc 	.word	0x200010dc
 80016a0:	200000dc 	.word	0x200000dc
 80016a4:	20000034 	.word	0x20000034

080016a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016ac:	4b06      	ldr	r3, [pc, #24]	@ (80016c8 <SystemInit+0x20>)
 80016ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016b2:	4a05      	ldr	r2, [pc, #20]	@ (80016c8 <SystemInit+0x20>)
 80016b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016bc:	bf00      	nop
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	e000ed00 	.word	0xe000ed00

080016cc <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b086      	sub	sp, #24
 80016d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016d2:	f107 0308 	add.w	r3, r7, #8
 80016d6:	2200      	movs	r2, #0
 80016d8:	601a      	str	r2, [r3, #0]
 80016da:	605a      	str	r2, [r3, #4]
 80016dc:	609a      	str	r2, [r3, #8]
 80016de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016e0:	463b      	mov	r3, r7
 80016e2:	2200      	movs	r2, #0
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016e8:	4b1d      	ldr	r3, [pc, #116]	@ (8001760 <MX_TIM2_Init+0x94>)
 80016ea:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80016ee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80016f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001760 <MX_TIM2_Init+0x94>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001760 <MX_TIM2_Init+0x94>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 501;
 80016fc:	4b18      	ldr	r3, [pc, #96]	@ (8001760 <MX_TIM2_Init+0x94>)
 80016fe:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8001702:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001704:	4b16      	ldr	r3, [pc, #88]	@ (8001760 <MX_TIM2_Init+0x94>)
 8001706:	2200      	movs	r2, #0
 8001708:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800170a:	4b15      	ldr	r3, [pc, #84]	@ (8001760 <MX_TIM2_Init+0x94>)
 800170c:	2200      	movs	r2, #0
 800170e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001710:	4813      	ldr	r0, [pc, #76]	@ (8001760 <MX_TIM2_Init+0x94>)
 8001712:	f002 fe45 	bl	80043a0 <HAL_TIM_Base_Init>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800171c:	f7ff fed4 	bl	80014c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001720:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001724:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001726:	f107 0308 	add.w	r3, r7, #8
 800172a:	4619      	mov	r1, r3
 800172c:	480c      	ldr	r0, [pc, #48]	@ (8001760 <MX_TIM2_Init+0x94>)
 800172e:	f002 ffd1 	bl	80046d4 <HAL_TIM_ConfigClockSource>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001738:	f7ff fec6 	bl	80014c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800173c:	2320      	movs	r3, #32
 800173e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001740:	2300      	movs	r3, #0
 8001742:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001744:	463b      	mov	r3, r7
 8001746:	4619      	mov	r1, r3
 8001748:	4805      	ldr	r0, [pc, #20]	@ (8001760 <MX_TIM2_Init+0x94>)
 800174a:	f003 f9dd 	bl	8004b08 <HAL_TIMEx_MasterConfigSynchronization>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001754:	f7ff feb8 	bl	80014c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001758:	bf00      	nop
 800175a:	3718      	adds	r7, #24
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	2000470c 	.word	0x2000470c

08001764 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001774:	d115      	bne.n	80017a2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001776:	2300      	movs	r3, #0
 8001778:	60fb      	str	r3, [r7, #12]
 800177a:	4b0c      	ldr	r3, [pc, #48]	@ (80017ac <HAL_TIM_Base_MspInit+0x48>)
 800177c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800177e:	4a0b      	ldr	r2, [pc, #44]	@ (80017ac <HAL_TIM_Base_MspInit+0x48>)
 8001780:	f043 0301 	orr.w	r3, r3, #1
 8001784:	6413      	str	r3, [r2, #64]	@ 0x40
 8001786:	4b09      	ldr	r3, [pc, #36]	@ (80017ac <HAL_TIM_Base_MspInit+0x48>)
 8001788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800178a:	f003 0301 	and.w	r3, r3, #1
 800178e:	60fb      	str	r3, [r7, #12]
 8001790:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001792:	2200      	movs	r2, #0
 8001794:	2100      	movs	r1, #0
 8001796:	201c      	movs	r0, #28
 8001798:	f000 fd87 	bl	80022aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800179c:	201c      	movs	r0, #28
 800179e:	f000 fda0 	bl	80022e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80017a2:	bf00      	nop
 80017a4:	3710      	adds	r7, #16
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	40023800 	.word	0x40023800

080017b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80017b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80017e8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017b4:	f7ff ff78 	bl	80016a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017b8:	480c      	ldr	r0, [pc, #48]	@ (80017ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017ba:	490d      	ldr	r1, [pc, #52]	@ (80017f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017bc:	4a0d      	ldr	r2, [pc, #52]	@ (80017f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017c0:	e002      	b.n	80017c8 <LoopCopyDataInit>

080017c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017c6:	3304      	adds	r3, #4

080017c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017cc:	d3f9      	bcc.n	80017c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017ce:	4a0a      	ldr	r2, [pc, #40]	@ (80017f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017d0:	4c0a      	ldr	r4, [pc, #40]	@ (80017fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80017d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017d4:	e001      	b.n	80017da <LoopFillZerobss>

080017d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017d8:	3204      	adds	r2, #4

080017da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017dc:	d3fb      	bcc.n	80017d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017de:	f003 fa1d 	bl	8004c1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017e2:	f7ff fdd9 	bl	8001398 <main>
  bx  lr    
 80017e6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80017e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017f0:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80017f4:	08004ca4 	.word	0x08004ca4
  ldr r2, =_sbss
 80017f8:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80017fc:	20004758 	.word	0x20004758

08001800 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001800:	e7fe      	b.n	8001800 <ADC_IRQHandler>
	...

08001804 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001808:	4b0e      	ldr	r3, [pc, #56]	@ (8001844 <HAL_Init+0x40>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a0d      	ldr	r2, [pc, #52]	@ (8001844 <HAL_Init+0x40>)
 800180e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001812:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001814:	4b0b      	ldr	r3, [pc, #44]	@ (8001844 <HAL_Init+0x40>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a0a      	ldr	r2, [pc, #40]	@ (8001844 <HAL_Init+0x40>)
 800181a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800181e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001820:	4b08      	ldr	r3, [pc, #32]	@ (8001844 <HAL_Init+0x40>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a07      	ldr	r2, [pc, #28]	@ (8001844 <HAL_Init+0x40>)
 8001826:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800182a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800182c:	2003      	movs	r0, #3
 800182e:	f000 fd31 	bl	8002294 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001832:	200f      	movs	r0, #15
 8001834:	f000 f808 	bl	8001848 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001838:	f7ff fe4c 	bl	80014d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800183c:	2300      	movs	r3, #0
}
 800183e:	4618      	mov	r0, r3
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	40023c00 	.word	0x40023c00

08001848 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001850:	4b12      	ldr	r3, [pc, #72]	@ (800189c <HAL_InitTick+0x54>)
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	4b12      	ldr	r3, [pc, #72]	@ (80018a0 <HAL_InitTick+0x58>)
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	4619      	mov	r1, r3
 800185a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800185e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001862:	fbb2 f3f3 	udiv	r3, r2, r3
 8001866:	4618      	mov	r0, r3
 8001868:	f000 fd49 	bl	80022fe <HAL_SYSTICK_Config>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e00e      	b.n	8001894 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2b0f      	cmp	r3, #15
 800187a:	d80a      	bhi.n	8001892 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800187c:	2200      	movs	r2, #0
 800187e:	6879      	ldr	r1, [r7, #4]
 8001880:	f04f 30ff 	mov.w	r0, #4294967295
 8001884:	f000 fd11 	bl	80022aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001888:	4a06      	ldr	r2, [pc, #24]	@ (80018a4 <HAL_InitTick+0x5c>)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800188e:	2300      	movs	r3, #0
 8001890:	e000      	b.n	8001894 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
}
 8001894:	4618      	mov	r0, r3
 8001896:	3708      	adds	r7, #8
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	2000000c 	.word	0x2000000c
 80018a0:	20000014 	.word	0x20000014
 80018a4:	20000010 	.word	0x20000010

080018a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018ac:	4b06      	ldr	r3, [pc, #24]	@ (80018c8 <HAL_IncTick+0x20>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	461a      	mov	r2, r3
 80018b2:	4b06      	ldr	r3, [pc, #24]	@ (80018cc <HAL_IncTick+0x24>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4413      	add	r3, r2
 80018b8:	4a04      	ldr	r2, [pc, #16]	@ (80018cc <HAL_IncTick+0x24>)
 80018ba:	6013      	str	r3, [r2, #0]
}
 80018bc:	bf00      	nop
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	20000014 	.word	0x20000014
 80018cc:	20004754 	.word	0x20004754

080018d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  return uwTick;
 80018d4:	4b03      	ldr	r3, [pc, #12]	@ (80018e4 <HAL_GetTick+0x14>)
 80018d6:	681b      	ldr	r3, [r3, #0]
}
 80018d8:	4618      	mov	r0, r3
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	20004754 	.word	0x20004754

080018e8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018f0:	2300      	movs	r3, #0
 80018f2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d101      	bne.n	80018fe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e033      	b.n	8001966 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001902:	2b00      	cmp	r3, #0
 8001904:	d109      	bne.n	800191a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f7fe fe4e 	bl	80005a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2200      	movs	r2, #0
 8001910:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2200      	movs	r2, #0
 8001916:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800191e:	f003 0310 	and.w	r3, r3, #16
 8001922:	2b00      	cmp	r3, #0
 8001924:	d118      	bne.n	8001958 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800192a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800192e:	f023 0302 	bic.w	r3, r3, #2
 8001932:	f043 0202 	orr.w	r2, r3, #2
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f000 fa5c 	bl	8001df8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2200      	movs	r2, #0
 8001944:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800194a:	f023 0303 	bic.w	r3, r3, #3
 800194e:	f043 0201 	orr.w	r2, r3, #1
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	641a      	str	r2, [r3, #64]	@ 0x40
 8001956:	e001      	b.n	800195c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2200      	movs	r2, #0
 8001960:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001964:	7bfb      	ldrb	r3, [r7, #15]
}
 8001966:	4618      	mov	r0, r3
 8001968:	3710      	adds	r7, #16
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
	...

08001970 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b088      	sub	sp, #32
 8001974:	af00      	add	r7, sp, #0
 8001976:	60f8      	str	r0, [r7, #12]
 8001978:	60b9      	str	r1, [r7, #8]
 800197a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800197c:	2300      	movs	r3, #0
 800197e:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001980:	2300      	movs	r3, #0
 8001982:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800198a:	2b01      	cmp	r3, #1
 800198c:	d101      	bne.n	8001992 <HAL_ADC_Start_DMA+0x22>
 800198e:	2302      	movs	r3, #2
 8001990:	e0d0      	b.n	8001b34 <HAL_ADC_Start_DMA+0x1c4>
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	2201      	movs	r2, #1
 8001996:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	f003 0301 	and.w	r3, r3, #1
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d018      	beq.n	80019da <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	689a      	ldr	r2, [r3, #8]
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f042 0201 	orr.w	r2, r2, #1
 80019b6:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80019b8:	4b60      	ldr	r3, [pc, #384]	@ (8001b3c <HAL_ADC_Start_DMA+0x1cc>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a60      	ldr	r2, [pc, #384]	@ (8001b40 <HAL_ADC_Start_DMA+0x1d0>)
 80019be:	fba2 2303 	umull	r2, r3, r2, r3
 80019c2:	0c9a      	lsrs	r2, r3, #18
 80019c4:	4613      	mov	r3, r2
 80019c6:	005b      	lsls	r3, r3, #1
 80019c8:	4413      	add	r3, r2
 80019ca:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 80019cc:	e002      	b.n	80019d4 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	3b01      	subs	r3, #1
 80019d2:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d1f9      	bne.n	80019ce <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80019e8:	d107      	bne.n	80019fa <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	689a      	ldr	r2, [r3, #8]
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80019f8:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	f003 0301 	and.w	r3, r3, #1
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	f040 8088 	bne.w	8001b1a <HAL_ADC_Start_DMA+0x1aa>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a0e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001a12:	f023 0301 	bic.w	r3, r3, #1
 8001a16:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d007      	beq.n	8001a3c <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a30:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001a34:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a40:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001a48:	d106      	bne.n	8001a58 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a4e:	f023 0206 	bic.w	r2, r3, #6
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	645a      	str	r2, [r3, #68]	@ 0x44
 8001a56:	e002      	b.n	8001a5e <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	2200      	movs	r2, #0
 8001a62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a66:	4b37      	ldr	r3, [pc, #220]	@ (8001b44 <HAL_ADC_Start_DMA+0x1d4>)
 8001a68:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a6e:	4a36      	ldr	r2, [pc, #216]	@ (8001b48 <HAL_ADC_Start_DMA+0x1d8>)
 8001a70:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a76:	4a35      	ldr	r2, [pc, #212]	@ (8001b4c <HAL_ADC_Start_DMA+0x1dc>)
 8001a78:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a7e:	4a34      	ldr	r2, [pc, #208]	@ (8001b50 <HAL_ADC_Start_DMA+0x1e0>)
 8001a80:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001a8a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	685a      	ldr	r2, [r3, #4]
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001a9a:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	689a      	ldr	r2, [r3, #8]
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001aaa:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	334c      	adds	r3, #76	@ 0x4c
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	68ba      	ldr	r2, [r7, #8]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	f000 fcda 	bl	8002474 <HAL_DMA_Start_IT>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001ac4:	69bb      	ldr	r3, [r7, #24]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f003 031f 	and.w	r3, r3, #31
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d10f      	bne.n	8001af0 <HAL_ADC_Start_DMA+0x180>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d129      	bne.n	8001b32 <HAL_ADC_Start_DMA+0x1c2>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	689a      	ldr	r2, [r3, #8]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001aec:	609a      	str	r2, [r3, #8]
 8001aee:	e020      	b.n	8001b32 <HAL_ADC_Start_DMA+0x1c2>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a17      	ldr	r2, [pc, #92]	@ (8001b54 <HAL_ADC_Start_DMA+0x1e4>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d11b      	bne.n	8001b32 <HAL_ADC_Start_DMA+0x1c2>
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d114      	bne.n	8001b32 <HAL_ADC_Start_DMA+0x1c2>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	689a      	ldr	r2, [r3, #8]
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001b16:	609a      	str	r2, [r3, #8]
 8001b18:	e00b      	b.n	8001b32 <HAL_ADC_Start_DMA+0x1c2>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b1e:	f043 0210 	orr.w	r2, r3, #16
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b2a:	f043 0201 	orr.w	r2, r3, #1
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 8001b32:	7ffb      	ldrb	r3, [r7, #31]
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3720      	adds	r7, #32
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	2000000c 	.word	0x2000000c
 8001b40:	431bde83 	.word	0x431bde83
 8001b44:	40012300 	.word	0x40012300
 8001b48:	08001ff1 	.word	0x08001ff1
 8001b4c:	080020ab 	.word	0x080020ab
 8001b50:	080020c7 	.word	0x080020c7
 8001b54:	40012000 	.word	0x40012000

08001b58 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001b60:	bf00      	nop
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr

08001b6c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001b74:	bf00      	nop
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr

08001b80 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001b88:	bf00      	nop
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr

08001b94 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b085      	sub	sp, #20
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d101      	bne.n	8001bb0 <HAL_ADC_ConfigChannel+0x1c>
 8001bac:	2302      	movs	r3, #2
 8001bae:	e113      	b.n	8001dd8 <HAL_ADC_ConfigChannel+0x244>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2b09      	cmp	r3, #9
 8001bbe:	d925      	bls.n	8001c0c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	68d9      	ldr	r1, [r3, #12]
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	b29b      	uxth	r3, r3
 8001bcc:	461a      	mov	r2, r3
 8001bce:	4613      	mov	r3, r2
 8001bd0:	005b      	lsls	r3, r3, #1
 8001bd2:	4413      	add	r3, r2
 8001bd4:	3b1e      	subs	r3, #30
 8001bd6:	2207      	movs	r2, #7
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	43da      	mvns	r2, r3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	400a      	ands	r2, r1
 8001be4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	68d9      	ldr	r1, [r3, #12]
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	689a      	ldr	r2, [r3, #8]
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	b29b      	uxth	r3, r3
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	005b      	lsls	r3, r3, #1
 8001bfc:	4403      	add	r3, r0
 8001bfe:	3b1e      	subs	r3, #30
 8001c00:	409a      	lsls	r2, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	430a      	orrs	r2, r1
 8001c08:	60da      	str	r2, [r3, #12]
 8001c0a:	e022      	b.n	8001c52 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	6919      	ldr	r1, [r3, #16]
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	461a      	mov	r2, r3
 8001c1a:	4613      	mov	r3, r2
 8001c1c:	005b      	lsls	r3, r3, #1
 8001c1e:	4413      	add	r3, r2
 8001c20:	2207      	movs	r2, #7
 8001c22:	fa02 f303 	lsl.w	r3, r2, r3
 8001c26:	43da      	mvns	r2, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	400a      	ands	r2, r1
 8001c2e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	6919      	ldr	r1, [r3, #16]
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	689a      	ldr	r2, [r3, #8]
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	b29b      	uxth	r3, r3
 8001c40:	4618      	mov	r0, r3
 8001c42:	4603      	mov	r3, r0
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	4403      	add	r3, r0
 8001c48:	409a      	lsls	r2, r3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	430a      	orrs	r2, r1
 8001c50:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	2b06      	cmp	r3, #6
 8001c58:	d824      	bhi.n	8001ca4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	685a      	ldr	r2, [r3, #4]
 8001c64:	4613      	mov	r3, r2
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	4413      	add	r3, r2
 8001c6a:	3b05      	subs	r3, #5
 8001c6c:	221f      	movs	r2, #31
 8001c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c72:	43da      	mvns	r2, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	400a      	ands	r2, r1
 8001c7a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	b29b      	uxth	r3, r3
 8001c88:	4618      	mov	r0, r3
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	685a      	ldr	r2, [r3, #4]
 8001c8e:	4613      	mov	r3, r2
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	4413      	add	r3, r2
 8001c94:	3b05      	subs	r3, #5
 8001c96:	fa00 f203 	lsl.w	r2, r0, r3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	430a      	orrs	r2, r1
 8001ca0:	635a      	str	r2, [r3, #52]	@ 0x34
 8001ca2:	e04c      	b.n	8001d3e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	2b0c      	cmp	r3, #12
 8001caa:	d824      	bhi.n	8001cf6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	685a      	ldr	r2, [r3, #4]
 8001cb6:	4613      	mov	r3, r2
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	4413      	add	r3, r2
 8001cbc:	3b23      	subs	r3, #35	@ 0x23
 8001cbe:	221f      	movs	r2, #31
 8001cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc4:	43da      	mvns	r2, r3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	400a      	ands	r2, r1
 8001ccc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	4618      	mov	r0, r3
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685a      	ldr	r2, [r3, #4]
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	4413      	add	r3, r2
 8001ce6:	3b23      	subs	r3, #35	@ 0x23
 8001ce8:	fa00 f203 	lsl.w	r2, r0, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	430a      	orrs	r2, r1
 8001cf2:	631a      	str	r2, [r3, #48]	@ 0x30
 8001cf4:	e023      	b.n	8001d3e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685a      	ldr	r2, [r3, #4]
 8001d00:	4613      	mov	r3, r2
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	4413      	add	r3, r2
 8001d06:	3b41      	subs	r3, #65	@ 0x41
 8001d08:	221f      	movs	r2, #31
 8001d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0e:	43da      	mvns	r2, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	400a      	ands	r2, r1
 8001d16:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	b29b      	uxth	r3, r3
 8001d24:	4618      	mov	r0, r3
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	685a      	ldr	r2, [r3, #4]
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	4413      	add	r3, r2
 8001d30:	3b41      	subs	r3, #65	@ 0x41
 8001d32:	fa00 f203 	lsl.w	r2, r0, r3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	430a      	orrs	r2, r1
 8001d3c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d3e:	4b29      	ldr	r3, [pc, #164]	@ (8001de4 <HAL_ADC_ConfigChannel+0x250>)
 8001d40:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a28      	ldr	r2, [pc, #160]	@ (8001de8 <HAL_ADC_ConfigChannel+0x254>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d10f      	bne.n	8001d6c <HAL_ADC_ConfigChannel+0x1d8>
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2b12      	cmp	r3, #18
 8001d52:	d10b      	bne.n	8001d6c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a1d      	ldr	r2, [pc, #116]	@ (8001de8 <HAL_ADC_ConfigChannel+0x254>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d12b      	bne.n	8001dce <HAL_ADC_ConfigChannel+0x23a>
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a1c      	ldr	r2, [pc, #112]	@ (8001dec <HAL_ADC_ConfigChannel+0x258>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d003      	beq.n	8001d88 <HAL_ADC_ConfigChannel+0x1f4>
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	2b11      	cmp	r3, #17
 8001d86:	d122      	bne.n	8001dce <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a11      	ldr	r2, [pc, #68]	@ (8001dec <HAL_ADC_ConfigChannel+0x258>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d111      	bne.n	8001dce <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001daa:	4b11      	ldr	r3, [pc, #68]	@ (8001df0 <HAL_ADC_ConfigChannel+0x25c>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a11      	ldr	r2, [pc, #68]	@ (8001df4 <HAL_ADC_ConfigChannel+0x260>)
 8001db0:	fba2 2303 	umull	r2, r3, r2, r3
 8001db4:	0c9a      	lsrs	r2, r3, #18
 8001db6:	4613      	mov	r3, r2
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	4413      	add	r3, r2
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001dc0:	e002      	b.n	8001dc8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	3b01      	subs	r3, #1
 8001dc6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d1f9      	bne.n	8001dc2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001dd6:	2300      	movs	r3, #0
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3714      	adds	r7, #20
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr
 8001de4:	40012300 	.word	0x40012300
 8001de8:	40012000 	.word	0x40012000
 8001dec:	10000012 	.word	0x10000012
 8001df0:	2000000c 	.word	0x2000000c
 8001df4:	431bde83 	.word	0x431bde83

08001df8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b085      	sub	sp, #20
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e00:	4b79      	ldr	r3, [pc, #484]	@ (8001fe8 <ADC_Init+0x1f0>)
 8001e02:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	685a      	ldr	r2, [r3, #4]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	431a      	orrs	r2, r3
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	685a      	ldr	r2, [r3, #4]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001e2c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	6859      	ldr	r1, [r3, #4]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	691b      	ldr	r3, [r3, #16]
 8001e38:	021a      	lsls	r2, r3, #8
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	430a      	orrs	r2, r1
 8001e40:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	685a      	ldr	r2, [r3, #4]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001e50:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	6859      	ldr	r1, [r3, #4]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	689a      	ldr	r2, [r3, #8]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	430a      	orrs	r2, r1
 8001e62:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	689a      	ldr	r2, [r3, #8]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e72:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	6899      	ldr	r1, [r3, #8]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	68da      	ldr	r2, [r3, #12]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	430a      	orrs	r2, r1
 8001e84:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e8a:	4a58      	ldr	r2, [pc, #352]	@ (8001fec <ADC_Init+0x1f4>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d022      	beq.n	8001ed6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	689a      	ldr	r2, [r3, #8]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001e9e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	6899      	ldr	r1, [r3, #8]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	430a      	orrs	r2, r1
 8001eb0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	689a      	ldr	r2, [r3, #8]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001ec0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	6899      	ldr	r1, [r3, #8]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	430a      	orrs	r2, r1
 8001ed2:	609a      	str	r2, [r3, #8]
 8001ed4:	e00f      	b.n	8001ef6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	689a      	ldr	r2, [r3, #8]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001ee4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	689a      	ldr	r2, [r3, #8]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001ef4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	689a      	ldr	r2, [r3, #8]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f022 0202 	bic.w	r2, r2, #2
 8001f04:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	6899      	ldr	r1, [r3, #8]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	7e1b      	ldrb	r3, [r3, #24]
 8001f10:	005a      	lsls	r2, r3, #1
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	430a      	orrs	r2, r1
 8001f18:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d01b      	beq.n	8001f5c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	685a      	ldr	r2, [r3, #4]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001f32:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	685a      	ldr	r2, [r3, #4]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001f42:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	6859      	ldr	r1, [r3, #4]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	035a      	lsls	r2, r3, #13
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	430a      	orrs	r2, r1
 8001f58:	605a      	str	r2, [r3, #4]
 8001f5a:	e007      	b.n	8001f6c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	685a      	ldr	r2, [r3, #4]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f6a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001f7a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	69db      	ldr	r3, [r3, #28]
 8001f86:	3b01      	subs	r3, #1
 8001f88:	051a      	lsls	r2, r3, #20
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	430a      	orrs	r2, r1
 8001f90:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	689a      	ldr	r2, [r3, #8]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001fa0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	6899      	ldr	r1, [r3, #8]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001fae:	025a      	lsls	r2, r3, #9
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	430a      	orrs	r2, r1
 8001fb6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	689a      	ldr	r2, [r3, #8]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001fc6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	6899      	ldr	r1, [r3, #8]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	695b      	ldr	r3, [r3, #20]
 8001fd2:	029a      	lsls	r2, r3, #10
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	430a      	orrs	r2, r1
 8001fda:	609a      	str	r2, [r3, #8]
}
 8001fdc:	bf00      	nop
 8001fde:	3714      	adds	r7, #20
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr
 8001fe8:	40012300 	.word	0x40012300
 8001fec:	0f000001 	.word	0x0f000001

08001ff0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ffc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002002:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002006:	2b00      	cmp	r3, #0
 8002008:	d13c      	bne.n	8002084 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800200e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d12b      	bne.n	800207c <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002028:	2b00      	cmp	r3, #0
 800202a:	d127      	bne.n	800207c <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002032:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002036:	2b00      	cmp	r3, #0
 8002038:	d006      	beq.n	8002048 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002044:	2b00      	cmp	r3, #0
 8002046:	d119      	bne.n	800207c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	685a      	ldr	r2, [r3, #4]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f022 0220 	bic.w	r2, r2, #32
 8002056:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800205c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002068:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d105      	bne.n	800207c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002074:	f043 0201 	orr.w	r2, r3, #1
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800207c:	68f8      	ldr	r0, [r7, #12]
 800207e:	f7ff fd6b 	bl	8001b58 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002082:	e00e      	b.n	80020a2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002088:	f003 0310 	and.w	r3, r3, #16
 800208c:	2b00      	cmp	r3, #0
 800208e:	d003      	beq.n	8002098 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002090:	68f8      	ldr	r0, [r7, #12]
 8002092:	f7ff fd75 	bl	8001b80 <HAL_ADC_ErrorCallback>
}
 8002096:	e004      	b.n	80020a2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800209c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	4798      	blx	r3
}
 80020a2:	bf00      	nop
 80020a4:	3710      	adds	r7, #16
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}

080020aa <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80020aa:	b580      	push	{r7, lr}
 80020ac:	b084      	sub	sp, #16
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020b6:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80020b8:	68f8      	ldr	r0, [r7, #12]
 80020ba:	f7ff fd57 	bl	8001b6c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80020be:	bf00      	nop
 80020c0:	3710      	adds	r7, #16
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}

080020c6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80020c6:	b580      	push	{r7, lr}
 80020c8:	b084      	sub	sp, #16
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020d2:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2240      	movs	r2, #64	@ 0x40
 80020d8:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020de:	f043 0204 	orr.w	r2, r3, #4
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80020e6:	68f8      	ldr	r0, [r7, #12]
 80020e8:	f7ff fd4a 	bl	8001b80 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80020ec:	bf00      	nop
 80020ee:	3710      	adds	r7, #16
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b085      	sub	sp, #20
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f003 0307 	and.w	r3, r3, #7
 8002102:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002104:	4b0c      	ldr	r3, [pc, #48]	@ (8002138 <__NVIC_SetPriorityGrouping+0x44>)
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800210a:	68ba      	ldr	r2, [r7, #8]
 800210c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002110:	4013      	ands	r3, r2
 8002112:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800211c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002120:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002124:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002126:	4a04      	ldr	r2, [pc, #16]	@ (8002138 <__NVIC_SetPriorityGrouping+0x44>)
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	60d3      	str	r3, [r2, #12]
}
 800212c:	bf00      	nop
 800212e:	3714      	adds	r7, #20
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr
 8002138:	e000ed00 	.word	0xe000ed00

0800213c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002140:	4b04      	ldr	r3, [pc, #16]	@ (8002154 <__NVIC_GetPriorityGrouping+0x18>)
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	0a1b      	lsrs	r3, r3, #8
 8002146:	f003 0307 	and.w	r3, r3, #7
}
 800214a:	4618      	mov	r0, r3
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr
 8002154:	e000ed00 	.word	0xe000ed00

08002158 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	4603      	mov	r3, r0
 8002160:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002166:	2b00      	cmp	r3, #0
 8002168:	db0b      	blt.n	8002182 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800216a:	79fb      	ldrb	r3, [r7, #7]
 800216c:	f003 021f 	and.w	r2, r3, #31
 8002170:	4907      	ldr	r1, [pc, #28]	@ (8002190 <__NVIC_EnableIRQ+0x38>)
 8002172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002176:	095b      	lsrs	r3, r3, #5
 8002178:	2001      	movs	r0, #1
 800217a:	fa00 f202 	lsl.w	r2, r0, r2
 800217e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002182:	bf00      	nop
 8002184:	370c      	adds	r7, #12
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	e000e100 	.word	0xe000e100

08002194 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	4603      	mov	r3, r0
 800219c:	6039      	str	r1, [r7, #0]
 800219e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	db0a      	blt.n	80021be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	b2da      	uxtb	r2, r3
 80021ac:	490c      	ldr	r1, [pc, #48]	@ (80021e0 <__NVIC_SetPriority+0x4c>)
 80021ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b2:	0112      	lsls	r2, r2, #4
 80021b4:	b2d2      	uxtb	r2, r2
 80021b6:	440b      	add	r3, r1
 80021b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021bc:	e00a      	b.n	80021d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	b2da      	uxtb	r2, r3
 80021c2:	4908      	ldr	r1, [pc, #32]	@ (80021e4 <__NVIC_SetPriority+0x50>)
 80021c4:	79fb      	ldrb	r3, [r7, #7]
 80021c6:	f003 030f 	and.w	r3, r3, #15
 80021ca:	3b04      	subs	r3, #4
 80021cc:	0112      	lsls	r2, r2, #4
 80021ce:	b2d2      	uxtb	r2, r2
 80021d0:	440b      	add	r3, r1
 80021d2:	761a      	strb	r2, [r3, #24]
}
 80021d4:	bf00      	nop
 80021d6:	370c      	adds	r7, #12
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr
 80021e0:	e000e100 	.word	0xe000e100
 80021e4:	e000ed00 	.word	0xe000ed00

080021e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b089      	sub	sp, #36	@ 0x24
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	60b9      	str	r1, [r7, #8]
 80021f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	f003 0307 	and.w	r3, r3, #7
 80021fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	f1c3 0307 	rsb	r3, r3, #7
 8002202:	2b04      	cmp	r3, #4
 8002204:	bf28      	it	cs
 8002206:	2304      	movcs	r3, #4
 8002208:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	3304      	adds	r3, #4
 800220e:	2b06      	cmp	r3, #6
 8002210:	d902      	bls.n	8002218 <NVIC_EncodePriority+0x30>
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	3b03      	subs	r3, #3
 8002216:	e000      	b.n	800221a <NVIC_EncodePriority+0x32>
 8002218:	2300      	movs	r3, #0
 800221a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800221c:	f04f 32ff 	mov.w	r2, #4294967295
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	fa02 f303 	lsl.w	r3, r2, r3
 8002226:	43da      	mvns	r2, r3
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	401a      	ands	r2, r3
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002230:	f04f 31ff 	mov.w	r1, #4294967295
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	fa01 f303 	lsl.w	r3, r1, r3
 800223a:	43d9      	mvns	r1, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002240:	4313      	orrs	r3, r2
         );
}
 8002242:	4618      	mov	r0, r3
 8002244:	3724      	adds	r7, #36	@ 0x24
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
	...

08002250 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	3b01      	subs	r3, #1
 800225c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002260:	d301      	bcc.n	8002266 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002262:	2301      	movs	r3, #1
 8002264:	e00f      	b.n	8002286 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002266:	4a0a      	ldr	r2, [pc, #40]	@ (8002290 <SysTick_Config+0x40>)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	3b01      	subs	r3, #1
 800226c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800226e:	210f      	movs	r1, #15
 8002270:	f04f 30ff 	mov.w	r0, #4294967295
 8002274:	f7ff ff8e 	bl	8002194 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002278:	4b05      	ldr	r3, [pc, #20]	@ (8002290 <SysTick_Config+0x40>)
 800227a:	2200      	movs	r2, #0
 800227c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800227e:	4b04      	ldr	r3, [pc, #16]	@ (8002290 <SysTick_Config+0x40>)
 8002280:	2207      	movs	r2, #7
 8002282:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002284:	2300      	movs	r3, #0
}
 8002286:	4618      	mov	r0, r3
 8002288:	3708      	adds	r7, #8
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	e000e010 	.word	0xe000e010

08002294 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f7ff ff29 	bl	80020f4 <__NVIC_SetPriorityGrouping>
}
 80022a2:	bf00      	nop
 80022a4:	3708      	adds	r7, #8
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}

080022aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022aa:	b580      	push	{r7, lr}
 80022ac:	b086      	sub	sp, #24
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	4603      	mov	r3, r0
 80022b2:	60b9      	str	r1, [r7, #8]
 80022b4:	607a      	str	r2, [r7, #4]
 80022b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022b8:	2300      	movs	r3, #0
 80022ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022bc:	f7ff ff3e 	bl	800213c <__NVIC_GetPriorityGrouping>
 80022c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	68b9      	ldr	r1, [r7, #8]
 80022c6:	6978      	ldr	r0, [r7, #20]
 80022c8:	f7ff ff8e 	bl	80021e8 <NVIC_EncodePriority>
 80022cc:	4602      	mov	r2, r0
 80022ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022d2:	4611      	mov	r1, r2
 80022d4:	4618      	mov	r0, r3
 80022d6:	f7ff ff5d 	bl	8002194 <__NVIC_SetPriority>
}
 80022da:	bf00      	nop
 80022dc:	3718      	adds	r7, #24
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}

080022e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022e2:	b580      	push	{r7, lr}
 80022e4:	b082      	sub	sp, #8
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	4603      	mov	r3, r0
 80022ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7ff ff31 	bl	8002158 <__NVIC_EnableIRQ>
}
 80022f6:	bf00      	nop
 80022f8:	3708      	adds	r7, #8
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}

080022fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022fe:	b580      	push	{r7, lr}
 8002300:	b082      	sub	sp, #8
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f7ff ffa2 	bl	8002250 <SysTick_Config>
 800230c:	4603      	mov	r3, r0
}
 800230e:	4618      	mov	r0, r3
 8002310:	3708      	adds	r7, #8
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
	...

08002318 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b086      	sub	sp, #24
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002320:	2300      	movs	r3, #0
 8002322:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002324:	f7ff fad4 	bl	80018d0 <HAL_GetTick>
 8002328:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d101      	bne.n	8002334 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e099      	b.n	8002468 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2202      	movs	r2, #2
 8002338:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2200      	movs	r2, #0
 8002340:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f022 0201 	bic.w	r2, r2, #1
 8002352:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002354:	e00f      	b.n	8002376 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002356:	f7ff fabb 	bl	80018d0 <HAL_GetTick>
 800235a:	4602      	mov	r2, r0
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	2b05      	cmp	r3, #5
 8002362:	d908      	bls.n	8002376 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2220      	movs	r2, #32
 8002368:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2203      	movs	r2, #3
 800236e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e078      	b.n	8002468 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0301 	and.w	r3, r3, #1
 8002380:	2b00      	cmp	r3, #0
 8002382:	d1e8      	bne.n	8002356 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800238c:	697a      	ldr	r2, [r7, #20]
 800238e:	4b38      	ldr	r3, [pc, #224]	@ (8002470 <HAL_DMA_Init+0x158>)
 8002390:	4013      	ands	r3, r2
 8002392:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685a      	ldr	r2, [r3, #4]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	691b      	ldr	r3, [r3, #16]
 80023a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	699b      	ldr	r3, [r3, #24]
 80023b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6a1b      	ldr	r3, [r3, #32]
 80023c0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023c2:	697a      	ldr	r2, [r7, #20]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023cc:	2b04      	cmp	r3, #4
 80023ce:	d107      	bne.n	80023e0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023d8:	4313      	orrs	r3, r2
 80023da:	697a      	ldr	r2, [r7, #20]
 80023dc:	4313      	orrs	r3, r2
 80023de:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	697a      	ldr	r2, [r7, #20]
 80023e6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	695b      	ldr	r3, [r3, #20]
 80023ee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	f023 0307 	bic.w	r3, r3, #7
 80023f6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023fc:	697a      	ldr	r2, [r7, #20]
 80023fe:	4313      	orrs	r3, r2
 8002400:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002406:	2b04      	cmp	r3, #4
 8002408:	d117      	bne.n	800243a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800240e:	697a      	ldr	r2, [r7, #20]
 8002410:	4313      	orrs	r3, r2
 8002412:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002418:	2b00      	cmp	r3, #0
 800241a:	d00e      	beq.n	800243a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f000 fa6f 	bl	8002900 <DMA_CheckFifoParam>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d008      	beq.n	800243a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2240      	movs	r2, #64	@ 0x40
 800242c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2201      	movs	r2, #1
 8002432:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002436:	2301      	movs	r3, #1
 8002438:	e016      	b.n	8002468 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	697a      	ldr	r2, [r7, #20]
 8002440:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f000 fa26 	bl	8002894 <DMA_CalcBaseAndBitshift>
 8002448:	4603      	mov	r3, r0
 800244a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002450:	223f      	movs	r2, #63	@ 0x3f
 8002452:	409a      	lsls	r2, r3
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2200      	movs	r2, #0
 800245c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2201      	movs	r2, #1
 8002462:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002466:	2300      	movs	r3, #0
}
 8002468:	4618      	mov	r0, r3
 800246a:	3718      	adds	r7, #24
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	f010803f 	.word	0xf010803f

08002474 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b086      	sub	sp, #24
 8002478:	af00      	add	r7, sp, #0
 800247a:	60f8      	str	r0, [r7, #12]
 800247c:	60b9      	str	r1, [r7, #8]
 800247e:	607a      	str	r2, [r7, #4]
 8002480:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002482:	2300      	movs	r3, #0
 8002484:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800248a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002492:	2b01      	cmp	r3, #1
 8002494:	d101      	bne.n	800249a <HAL_DMA_Start_IT+0x26>
 8002496:	2302      	movs	r3, #2
 8002498:	e040      	b.n	800251c <HAL_DMA_Start_IT+0xa8>
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2201      	movs	r2, #1
 800249e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d12f      	bne.n	800250e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2202      	movs	r2, #2
 80024b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2200      	movs	r2, #0
 80024ba:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	68b9      	ldr	r1, [r7, #8]
 80024c2:	68f8      	ldr	r0, [r7, #12]
 80024c4:	f000 f9b8 	bl	8002838 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024cc:	223f      	movs	r2, #63	@ 0x3f
 80024ce:	409a      	lsls	r2, r3
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f042 0216 	orr.w	r2, r2, #22
 80024e2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d007      	beq.n	80024fc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f042 0208 	orr.w	r2, r2, #8
 80024fa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f042 0201 	orr.w	r2, r2, #1
 800250a:	601a      	str	r2, [r3, #0]
 800250c:	e005      	b.n	800251a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2200      	movs	r2, #0
 8002512:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002516:	2302      	movs	r3, #2
 8002518:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800251a:	7dfb      	ldrb	r3, [r7, #23]
}
 800251c:	4618      	mov	r0, r3
 800251e:	3718      	adds	r7, #24
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}

08002524 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b086      	sub	sp, #24
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800252c:	2300      	movs	r3, #0
 800252e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002530:	4b8e      	ldr	r3, [pc, #568]	@ (800276c <HAL_DMA_IRQHandler+0x248>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a8e      	ldr	r2, [pc, #568]	@ (8002770 <HAL_DMA_IRQHandler+0x24c>)
 8002536:	fba2 2303 	umull	r2, r3, r2, r3
 800253a:	0a9b      	lsrs	r3, r3, #10
 800253c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002542:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800254e:	2208      	movs	r2, #8
 8002550:	409a      	lsls	r2, r3
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	4013      	ands	r3, r2
 8002556:	2b00      	cmp	r3, #0
 8002558:	d01a      	beq.n	8002590 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 0304 	and.w	r3, r3, #4
 8002564:	2b00      	cmp	r3, #0
 8002566:	d013      	beq.n	8002590 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f022 0204 	bic.w	r2, r2, #4
 8002576:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800257c:	2208      	movs	r2, #8
 800257e:	409a      	lsls	r2, r3
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002588:	f043 0201 	orr.w	r2, r3, #1
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002594:	2201      	movs	r2, #1
 8002596:	409a      	lsls	r2, r3
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	4013      	ands	r3, r2
 800259c:	2b00      	cmp	r3, #0
 800259e:	d012      	beq.n	80025c6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	695b      	ldr	r3, [r3, #20]
 80025a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d00b      	beq.n	80025c6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025b2:	2201      	movs	r2, #1
 80025b4:	409a      	lsls	r2, r3
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025be:	f043 0202 	orr.w	r2, r3, #2
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025ca:	2204      	movs	r2, #4
 80025cc:	409a      	lsls	r2, r3
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	4013      	ands	r3, r2
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d012      	beq.n	80025fc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0302 	and.w	r3, r3, #2
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d00b      	beq.n	80025fc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025e8:	2204      	movs	r2, #4
 80025ea:	409a      	lsls	r2, r3
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025f4:	f043 0204 	orr.w	r2, r3, #4
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002600:	2210      	movs	r2, #16
 8002602:	409a      	lsls	r2, r3
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	4013      	ands	r3, r2
 8002608:	2b00      	cmp	r3, #0
 800260a:	d043      	beq.n	8002694 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0308 	and.w	r3, r3, #8
 8002616:	2b00      	cmp	r3, #0
 8002618:	d03c      	beq.n	8002694 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800261e:	2210      	movs	r2, #16
 8002620:	409a      	lsls	r2, r3
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d018      	beq.n	8002666 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d108      	bne.n	8002654 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002646:	2b00      	cmp	r3, #0
 8002648:	d024      	beq.n	8002694 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	4798      	blx	r3
 8002652:	e01f      	b.n	8002694 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002658:	2b00      	cmp	r3, #0
 800265a:	d01b      	beq.n	8002694 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	4798      	blx	r3
 8002664:	e016      	b.n	8002694 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002670:	2b00      	cmp	r3, #0
 8002672:	d107      	bne.n	8002684 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f022 0208 	bic.w	r2, r2, #8
 8002682:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002688:	2b00      	cmp	r3, #0
 800268a:	d003      	beq.n	8002694 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002698:	2220      	movs	r2, #32
 800269a:	409a      	lsls	r2, r3
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	4013      	ands	r3, r2
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	f000 808f 	beq.w	80027c4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0310 	and.w	r3, r3, #16
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	f000 8087 	beq.w	80027c4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026ba:	2220      	movs	r2, #32
 80026bc:	409a      	lsls	r2, r3
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	2b05      	cmp	r3, #5
 80026cc:	d136      	bne.n	800273c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f022 0216 	bic.w	r2, r2, #22
 80026dc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	695a      	ldr	r2, [r3, #20]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80026ec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d103      	bne.n	80026fe <HAL_DMA_IRQHandler+0x1da>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d007      	beq.n	800270e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f022 0208 	bic.w	r2, r2, #8
 800270c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002712:	223f      	movs	r2, #63	@ 0x3f
 8002714:	409a      	lsls	r2, r3
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2201      	movs	r2, #1
 800271e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800272e:	2b00      	cmp	r3, #0
 8002730:	d07e      	beq.n	8002830 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	4798      	blx	r3
        }
        return;
 800273a:	e079      	b.n	8002830 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d01d      	beq.n	8002786 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d10d      	bne.n	8002774 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800275c:	2b00      	cmp	r3, #0
 800275e:	d031      	beq.n	80027c4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	4798      	blx	r3
 8002768:	e02c      	b.n	80027c4 <HAL_DMA_IRQHandler+0x2a0>
 800276a:	bf00      	nop
 800276c:	2000000c 	.word	0x2000000c
 8002770:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002778:	2b00      	cmp	r3, #0
 800277a:	d023      	beq.n	80027c4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	4798      	blx	r3
 8002784:	e01e      	b.n	80027c4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002790:	2b00      	cmp	r3, #0
 8002792:	d10f      	bne.n	80027b4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f022 0210 	bic.w	r2, r2, #16
 80027a2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2201      	movs	r2, #1
 80027a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2200      	movs	r2, #0
 80027b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d003      	beq.n	80027c4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d032      	beq.n	8002832 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027d0:	f003 0301 	and.w	r3, r3, #1
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d022      	beq.n	800281e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2205      	movs	r2, #5
 80027dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f022 0201 	bic.w	r2, r2, #1
 80027ee:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	3301      	adds	r3, #1
 80027f4:	60bb      	str	r3, [r7, #8]
 80027f6:	697a      	ldr	r2, [r7, #20]
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d307      	bcc.n	800280c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0301 	and.w	r3, r3, #1
 8002806:	2b00      	cmp	r3, #0
 8002808:	d1f2      	bne.n	80027f0 <HAL_DMA_IRQHandler+0x2cc>
 800280a:	e000      	b.n	800280e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800280c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2201      	movs	r2, #1
 8002812:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2200      	movs	r2, #0
 800281a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002822:	2b00      	cmp	r3, #0
 8002824:	d005      	beq.n	8002832 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	4798      	blx	r3
 800282e:	e000      	b.n	8002832 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002830:	bf00      	nop
    }
  }
}
 8002832:	3718      	adds	r7, #24
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}

08002838 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002838:	b480      	push	{r7}
 800283a:	b085      	sub	sp, #20
 800283c:	af00      	add	r7, sp, #0
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	60b9      	str	r1, [r7, #8]
 8002842:	607a      	str	r2, [r7, #4]
 8002844:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002854:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	683a      	ldr	r2, [r7, #0]
 800285c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	2b40      	cmp	r3, #64	@ 0x40
 8002864:	d108      	bne.n	8002878 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	68ba      	ldr	r2, [r7, #8]
 8002874:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002876:	e007      	b.n	8002888 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	68ba      	ldr	r2, [r7, #8]
 800287e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	60da      	str	r2, [r3, #12]
}
 8002888:	bf00      	nop
 800288a:	3714      	adds	r7, #20
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr

08002894 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002894:	b480      	push	{r7}
 8002896:	b085      	sub	sp, #20
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	3b10      	subs	r3, #16
 80028a4:	4a14      	ldr	r2, [pc, #80]	@ (80028f8 <DMA_CalcBaseAndBitshift+0x64>)
 80028a6:	fba2 2303 	umull	r2, r3, r2, r3
 80028aa:	091b      	lsrs	r3, r3, #4
 80028ac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80028ae:	4a13      	ldr	r2, [pc, #76]	@ (80028fc <DMA_CalcBaseAndBitshift+0x68>)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	4413      	add	r3, r2
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	461a      	mov	r2, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2b03      	cmp	r3, #3
 80028c0:	d909      	bls.n	80028d6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80028ca:	f023 0303 	bic.w	r3, r3, #3
 80028ce:	1d1a      	adds	r2, r3, #4
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	659a      	str	r2, [r3, #88]	@ 0x58
 80028d4:	e007      	b.n	80028e6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80028de:	f023 0303 	bic.w	r3, r3, #3
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3714      	adds	r7, #20
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop
 80028f8:	aaaaaaab 	.word	0xaaaaaaab
 80028fc:	08004c8c 	.word	0x08004c8c

08002900 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002900:	b480      	push	{r7}
 8002902:	b085      	sub	sp, #20
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002908:	2300      	movs	r3, #0
 800290a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002910:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	699b      	ldr	r3, [r3, #24]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d11f      	bne.n	800295a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	2b03      	cmp	r3, #3
 800291e:	d856      	bhi.n	80029ce <DMA_CheckFifoParam+0xce>
 8002920:	a201      	add	r2, pc, #4	@ (adr r2, 8002928 <DMA_CheckFifoParam+0x28>)
 8002922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002926:	bf00      	nop
 8002928:	08002939 	.word	0x08002939
 800292c:	0800294b 	.word	0x0800294b
 8002930:	08002939 	.word	0x08002939
 8002934:	080029cf 	.word	0x080029cf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800293c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d046      	beq.n	80029d2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002948:	e043      	b.n	80029d2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800294e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002952:	d140      	bne.n	80029d6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002958:	e03d      	b.n	80029d6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	699b      	ldr	r3, [r3, #24]
 800295e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002962:	d121      	bne.n	80029a8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	2b03      	cmp	r3, #3
 8002968:	d837      	bhi.n	80029da <DMA_CheckFifoParam+0xda>
 800296a:	a201      	add	r2, pc, #4	@ (adr r2, 8002970 <DMA_CheckFifoParam+0x70>)
 800296c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002970:	08002981 	.word	0x08002981
 8002974:	08002987 	.word	0x08002987
 8002978:	08002981 	.word	0x08002981
 800297c:	08002999 	.word	0x08002999
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	73fb      	strb	r3, [r7, #15]
      break;
 8002984:	e030      	b.n	80029e8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800298a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d025      	beq.n	80029de <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002996:	e022      	b.n	80029de <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800299c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80029a0:	d11f      	bne.n	80029e2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80029a6:	e01c      	b.n	80029e2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d903      	bls.n	80029b6 <DMA_CheckFifoParam+0xb6>
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	2b03      	cmp	r3, #3
 80029b2:	d003      	beq.n	80029bc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80029b4:	e018      	b.n	80029e8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	73fb      	strb	r3, [r7, #15]
      break;
 80029ba:	e015      	b.n	80029e8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029c0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d00e      	beq.n	80029e6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	73fb      	strb	r3, [r7, #15]
      break;
 80029cc:	e00b      	b.n	80029e6 <DMA_CheckFifoParam+0xe6>
      break;
 80029ce:	bf00      	nop
 80029d0:	e00a      	b.n	80029e8 <DMA_CheckFifoParam+0xe8>
      break;
 80029d2:	bf00      	nop
 80029d4:	e008      	b.n	80029e8 <DMA_CheckFifoParam+0xe8>
      break;
 80029d6:	bf00      	nop
 80029d8:	e006      	b.n	80029e8 <DMA_CheckFifoParam+0xe8>
      break;
 80029da:	bf00      	nop
 80029dc:	e004      	b.n	80029e8 <DMA_CheckFifoParam+0xe8>
      break;
 80029de:	bf00      	nop
 80029e0:	e002      	b.n	80029e8 <DMA_CheckFifoParam+0xe8>
      break;   
 80029e2:	bf00      	nop
 80029e4:	e000      	b.n	80029e8 <DMA_CheckFifoParam+0xe8>
      break;
 80029e6:	bf00      	nop
    }
  } 
  
  return status; 
 80029e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3714      	adds	r7, #20
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop

080029f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b089      	sub	sp, #36	@ 0x24
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a02:	2300      	movs	r3, #0
 8002a04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a06:	2300      	movs	r3, #0
 8002a08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a0e:	2300      	movs	r3, #0
 8002a10:	61fb      	str	r3, [r7, #28]
 8002a12:	e159      	b.n	8002cc8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a14:	2201      	movs	r2, #1
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	697a      	ldr	r2, [r7, #20]
 8002a24:	4013      	ands	r3, r2
 8002a26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a28:	693a      	ldr	r2, [r7, #16]
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	f040 8148 	bne.w	8002cc2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	f003 0303 	and.w	r3, r3, #3
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d005      	beq.n	8002a4a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d130      	bne.n	8002aac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	005b      	lsls	r3, r3, #1
 8002a54:	2203      	movs	r2, #3
 8002a56:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5a:	43db      	mvns	r3, r3
 8002a5c:	69ba      	ldr	r2, [r7, #24]
 8002a5e:	4013      	ands	r3, r2
 8002a60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	68da      	ldr	r2, [r3, #12]
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	005b      	lsls	r3, r3, #1
 8002a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6e:	69ba      	ldr	r2, [r7, #24]
 8002a70:	4313      	orrs	r3, r2
 8002a72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	69ba      	ldr	r2, [r7, #24]
 8002a78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a80:	2201      	movs	r2, #1
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	fa02 f303 	lsl.w	r3, r2, r3
 8002a88:	43db      	mvns	r3, r3
 8002a8a:	69ba      	ldr	r2, [r7, #24]
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	091b      	lsrs	r3, r3, #4
 8002a96:	f003 0201 	and.w	r2, r3, #1
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa0:	69ba      	ldr	r2, [r7, #24]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	69ba      	ldr	r2, [r7, #24]
 8002aaa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f003 0303 	and.w	r3, r3, #3
 8002ab4:	2b03      	cmp	r3, #3
 8002ab6:	d017      	beq.n	8002ae8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	005b      	lsls	r3, r3, #1
 8002ac2:	2203      	movs	r2, #3
 8002ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac8:	43db      	mvns	r3, r3
 8002aca:	69ba      	ldr	r2, [r7, #24]
 8002acc:	4013      	ands	r3, r2
 8002ace:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	689a      	ldr	r2, [r3, #8]
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	005b      	lsls	r3, r3, #1
 8002ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8002adc:	69ba      	ldr	r2, [r7, #24]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	69ba      	ldr	r2, [r7, #24]
 8002ae6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f003 0303 	and.w	r3, r3, #3
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d123      	bne.n	8002b3c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	08da      	lsrs	r2, r3, #3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	3208      	adds	r2, #8
 8002afc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b00:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	f003 0307 	and.w	r3, r3, #7
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	220f      	movs	r2, #15
 8002b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b10:	43db      	mvns	r3, r3
 8002b12:	69ba      	ldr	r2, [r7, #24]
 8002b14:	4013      	ands	r3, r2
 8002b16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	691a      	ldr	r2, [r3, #16]
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	f003 0307 	and.w	r3, r3, #7
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	fa02 f303 	lsl.w	r3, r2, r3
 8002b28:	69ba      	ldr	r2, [r7, #24]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	08da      	lsrs	r2, r3, #3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	3208      	adds	r2, #8
 8002b36:	69b9      	ldr	r1, [r7, #24]
 8002b38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	005b      	lsls	r3, r3, #1
 8002b46:	2203      	movs	r2, #3
 8002b48:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4c:	43db      	mvns	r3, r3
 8002b4e:	69ba      	ldr	r2, [r7, #24]
 8002b50:	4013      	ands	r3, r2
 8002b52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f003 0203 	and.w	r2, r3, #3
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	005b      	lsls	r3, r3, #1
 8002b60:	fa02 f303 	lsl.w	r3, r2, r3
 8002b64:	69ba      	ldr	r2, [r7, #24]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	69ba      	ldr	r2, [r7, #24]
 8002b6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	f000 80a2 	beq.w	8002cc2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b7e:	2300      	movs	r3, #0
 8002b80:	60fb      	str	r3, [r7, #12]
 8002b82:	4b57      	ldr	r3, [pc, #348]	@ (8002ce0 <HAL_GPIO_Init+0x2e8>)
 8002b84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b86:	4a56      	ldr	r2, [pc, #344]	@ (8002ce0 <HAL_GPIO_Init+0x2e8>)
 8002b88:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b8e:	4b54      	ldr	r3, [pc, #336]	@ (8002ce0 <HAL_GPIO_Init+0x2e8>)
 8002b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b96:	60fb      	str	r3, [r7, #12]
 8002b98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b9a:	4a52      	ldr	r2, [pc, #328]	@ (8002ce4 <HAL_GPIO_Init+0x2ec>)
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	089b      	lsrs	r3, r3, #2
 8002ba0:	3302      	adds	r3, #2
 8002ba2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	f003 0303 	and.w	r3, r3, #3
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	220f      	movs	r2, #15
 8002bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb6:	43db      	mvns	r3, r3
 8002bb8:	69ba      	ldr	r2, [r7, #24]
 8002bba:	4013      	ands	r3, r2
 8002bbc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a49      	ldr	r2, [pc, #292]	@ (8002ce8 <HAL_GPIO_Init+0x2f0>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d019      	beq.n	8002bfa <HAL_GPIO_Init+0x202>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a48      	ldr	r2, [pc, #288]	@ (8002cec <HAL_GPIO_Init+0x2f4>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d013      	beq.n	8002bf6 <HAL_GPIO_Init+0x1fe>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a47      	ldr	r2, [pc, #284]	@ (8002cf0 <HAL_GPIO_Init+0x2f8>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d00d      	beq.n	8002bf2 <HAL_GPIO_Init+0x1fa>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a46      	ldr	r2, [pc, #280]	@ (8002cf4 <HAL_GPIO_Init+0x2fc>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d007      	beq.n	8002bee <HAL_GPIO_Init+0x1f6>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a45      	ldr	r2, [pc, #276]	@ (8002cf8 <HAL_GPIO_Init+0x300>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d101      	bne.n	8002bea <HAL_GPIO_Init+0x1f2>
 8002be6:	2304      	movs	r3, #4
 8002be8:	e008      	b.n	8002bfc <HAL_GPIO_Init+0x204>
 8002bea:	2307      	movs	r3, #7
 8002bec:	e006      	b.n	8002bfc <HAL_GPIO_Init+0x204>
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e004      	b.n	8002bfc <HAL_GPIO_Init+0x204>
 8002bf2:	2302      	movs	r3, #2
 8002bf4:	e002      	b.n	8002bfc <HAL_GPIO_Init+0x204>
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e000      	b.n	8002bfc <HAL_GPIO_Init+0x204>
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	69fa      	ldr	r2, [r7, #28]
 8002bfe:	f002 0203 	and.w	r2, r2, #3
 8002c02:	0092      	lsls	r2, r2, #2
 8002c04:	4093      	lsls	r3, r2
 8002c06:	69ba      	ldr	r2, [r7, #24]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c0c:	4935      	ldr	r1, [pc, #212]	@ (8002ce4 <HAL_GPIO_Init+0x2ec>)
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	089b      	lsrs	r3, r3, #2
 8002c12:	3302      	adds	r3, #2
 8002c14:	69ba      	ldr	r2, [r7, #24]
 8002c16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c1a:	4b38      	ldr	r3, [pc, #224]	@ (8002cfc <HAL_GPIO_Init+0x304>)
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	43db      	mvns	r3, r3
 8002c24:	69ba      	ldr	r2, [r7, #24]
 8002c26:	4013      	ands	r3, r2
 8002c28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d003      	beq.n	8002c3e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002c36:	69ba      	ldr	r2, [r7, #24]
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c3e:	4a2f      	ldr	r2, [pc, #188]	@ (8002cfc <HAL_GPIO_Init+0x304>)
 8002c40:	69bb      	ldr	r3, [r7, #24]
 8002c42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c44:	4b2d      	ldr	r3, [pc, #180]	@ (8002cfc <HAL_GPIO_Init+0x304>)
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	43db      	mvns	r3, r3
 8002c4e:	69ba      	ldr	r2, [r7, #24]
 8002c50:	4013      	ands	r3, r2
 8002c52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d003      	beq.n	8002c68 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002c60:	69ba      	ldr	r2, [r7, #24]
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c68:	4a24      	ldr	r2, [pc, #144]	@ (8002cfc <HAL_GPIO_Init+0x304>)
 8002c6a:	69bb      	ldr	r3, [r7, #24]
 8002c6c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c6e:	4b23      	ldr	r3, [pc, #140]	@ (8002cfc <HAL_GPIO_Init+0x304>)
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	43db      	mvns	r3, r3
 8002c78:	69ba      	ldr	r2, [r7, #24]
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d003      	beq.n	8002c92 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002c8a:	69ba      	ldr	r2, [r7, #24]
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c92:	4a1a      	ldr	r2, [pc, #104]	@ (8002cfc <HAL_GPIO_Init+0x304>)
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c98:	4b18      	ldr	r3, [pc, #96]	@ (8002cfc <HAL_GPIO_Init+0x304>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	43db      	mvns	r3, r3
 8002ca2:	69ba      	ldr	r2, [r7, #24]
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d003      	beq.n	8002cbc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002cb4:	69ba      	ldr	r2, [r7, #24]
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002cbc:	4a0f      	ldr	r2, [pc, #60]	@ (8002cfc <HAL_GPIO_Init+0x304>)
 8002cbe:	69bb      	ldr	r3, [r7, #24]
 8002cc0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	3301      	adds	r3, #1
 8002cc6:	61fb      	str	r3, [r7, #28]
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	2b0f      	cmp	r3, #15
 8002ccc:	f67f aea2 	bls.w	8002a14 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002cd0:	bf00      	nop
 8002cd2:	bf00      	nop
 8002cd4:	3724      	adds	r7, #36	@ 0x24
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr
 8002cde:	bf00      	nop
 8002ce0:	40023800 	.word	0x40023800
 8002ce4:	40013800 	.word	0x40013800
 8002ce8:	40020000 	.word	0x40020000
 8002cec:	40020400 	.word	0x40020400
 8002cf0:	40020800 	.word	0x40020800
 8002cf4:	40020c00 	.word	0x40020c00
 8002cf8:	40021000 	.word	0x40021000
 8002cfc:	40013c00 	.word	0x40013c00

08002d00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	460b      	mov	r3, r1
 8002d0a:	807b      	strh	r3, [r7, #2]
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d10:	787b      	ldrb	r3, [r7, #1]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d003      	beq.n	8002d1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d16:	887a      	ldrh	r2, [r7, #2]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d1c:	e003      	b.n	8002d26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d1e:	887b      	ldrh	r3, [r7, #2]
 8002d20:	041a      	lsls	r2, r3, #16
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	619a      	str	r2, [r3, #24]
}
 8002d26:	bf00      	nop
 8002d28:	370c      	adds	r7, #12
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr

08002d32 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d32:	b480      	push	{r7}
 8002d34:	b085      	sub	sp, #20
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
 8002d3a:	460b      	mov	r3, r1
 8002d3c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	695b      	ldr	r3, [r3, #20]
 8002d42:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002d44:	887a      	ldrh	r2, [r7, #2]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	4013      	ands	r3, r2
 8002d4a:	041a      	lsls	r2, r3, #16
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	43d9      	mvns	r1, r3
 8002d50:	887b      	ldrh	r3, [r7, #2]
 8002d52:	400b      	ands	r3, r1
 8002d54:	431a      	orrs	r2, r3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	619a      	str	r2, [r3, #24]
}
 8002d5a:	bf00      	nop
 8002d5c:	3714      	adds	r7, #20
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr
	...

08002d68 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	4603      	mov	r3, r0
 8002d70:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002d72:	4b08      	ldr	r3, [pc, #32]	@ (8002d94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d74:	695a      	ldr	r2, [r3, #20]
 8002d76:	88fb      	ldrh	r3, [r7, #6]
 8002d78:	4013      	ands	r3, r2
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d006      	beq.n	8002d8c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002d7e:	4a05      	ldr	r2, [pc, #20]	@ (8002d94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d80:	88fb      	ldrh	r3, [r7, #6]
 8002d82:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002d84:	88fb      	ldrh	r3, [r7, #6]
 8002d86:	4618      	mov	r0, r3
 8002d88:	f7fe fc20 	bl	80015cc <HAL_GPIO_EXTI_Callback>
  }
}
 8002d8c:	bf00      	nop
 8002d8e:	3708      	adds	r7, #8
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	40013c00 	.word	0x40013c00

08002d98 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b088      	sub	sp, #32
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d101      	bne.n	8002daa <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e128      	b.n	8002ffc <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d109      	bne.n	8002dca <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4a90      	ldr	r2, [pc, #576]	@ (8003004 <HAL_I2S_Init+0x26c>)
 8002dc2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f7fe fa4f 	bl	8001268 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2202      	movs	r2, #2
 8002dce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	69db      	ldr	r3, [r3, #28]
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	6812      	ldr	r2, [r2, #0]
 8002ddc:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002de0:	f023 030f 	bic.w	r3, r3, #15
 8002de4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	2202      	movs	r2, #2
 8002dec:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	695b      	ldr	r3, [r3, #20]
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d060      	beq.n	8002eb8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	68db      	ldr	r3, [r3, #12]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d102      	bne.n	8002e04 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002dfe:	2310      	movs	r3, #16
 8002e00:	617b      	str	r3, [r7, #20]
 8002e02:	e001      	b.n	8002e08 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002e04:	2320      	movs	r3, #32
 8002e06:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	2b20      	cmp	r3, #32
 8002e0e:	d802      	bhi.n	8002e16 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	005b      	lsls	r3, r3, #1
 8002e14:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002e16:	2001      	movs	r0, #1
 8002e18:	f001 fa60 	bl	80042dc <HAL_RCCEx_GetPeriphCLKFreq>
 8002e1c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	691b      	ldr	r3, [r3, #16]
 8002e22:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e26:	d125      	bne.n	8002e74 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d010      	beq.n	8002e52 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	68fa      	ldr	r2, [r7, #12]
 8002e36:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	4413      	add	r3, r2
 8002e40:	005b      	lsls	r3, r3, #1
 8002e42:	461a      	mov	r2, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	695b      	ldr	r3, [r3, #20]
 8002e48:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e4c:	3305      	adds	r3, #5
 8002e4e:	613b      	str	r3, [r7, #16]
 8002e50:	e01f      	b.n	8002e92 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	00db      	lsls	r3, r3, #3
 8002e56:	68fa      	ldr	r2, [r7, #12]
 8002e58:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	4413      	add	r3, r2
 8002e62:	005b      	lsls	r3, r3, #1
 8002e64:	461a      	mov	r2, r3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	695b      	ldr	r3, [r3, #20]
 8002e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e6e:	3305      	adds	r3, #5
 8002e70:	613b      	str	r3, [r7, #16]
 8002e72:	e00e      	b.n	8002e92 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002e74:	68fa      	ldr	r2, [r7, #12]
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	4413      	add	r3, r2
 8002e82:	005b      	lsls	r3, r3, #1
 8002e84:	461a      	mov	r2, r3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	695b      	ldr	r3, [r3, #20]
 8002e8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e8e:	3305      	adds	r3, #5
 8002e90:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	4a5c      	ldr	r2, [pc, #368]	@ (8003008 <HAL_I2S_Init+0x270>)
 8002e96:	fba2 2303 	umull	r2, r3, r2, r3
 8002e9a:	08db      	lsrs	r3, r3, #3
 8002e9c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	f003 0301 	and.w	r3, r3, #1
 8002ea4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002ea6:	693a      	ldr	r2, [r7, #16]
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	085b      	lsrs	r3, r3, #1
 8002eae:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002eb0:	69bb      	ldr	r3, [r7, #24]
 8002eb2:	021b      	lsls	r3, r3, #8
 8002eb4:	61bb      	str	r3, [r7, #24]
 8002eb6:	e003      	b.n	8002ec0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002eb8:	2302      	movs	r3, #2
 8002eba:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d902      	bls.n	8002ecc <HAL_I2S_Init+0x134>
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	2bff      	cmp	r3, #255	@ 0xff
 8002eca:	d907      	bls.n	8002edc <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ed0:	f043 0210 	orr.w	r2, r3, #16
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e08f      	b.n	8002ffc <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	691a      	ldr	r2, [r3, #16]
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	ea42 0103 	orr.w	r1, r2, r3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	69fa      	ldr	r2, [r7, #28]
 8002eec:	430a      	orrs	r2, r1
 8002eee:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	69db      	ldr	r3, [r3, #28]
 8002ef6:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002efa:	f023 030f 	bic.w	r3, r3, #15
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	6851      	ldr	r1, [r2, #4]
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	6892      	ldr	r2, [r2, #8]
 8002f06:	4311      	orrs	r1, r2
 8002f08:	687a      	ldr	r2, [r7, #4]
 8002f0a:	68d2      	ldr	r2, [r2, #12]
 8002f0c:	4311      	orrs	r1, r2
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	6992      	ldr	r2, [r2, #24]
 8002f12:	430a      	orrs	r2, r1
 8002f14:	431a      	orrs	r2, r3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f1e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6a1b      	ldr	r3, [r3, #32]
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d161      	bne.n	8002fec <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	4a38      	ldr	r2, [pc, #224]	@ (800300c <HAL_I2S_Init+0x274>)
 8002f2c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a37      	ldr	r2, [pc, #220]	@ (8003010 <HAL_I2S_Init+0x278>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d101      	bne.n	8002f3c <HAL_I2S_Init+0x1a4>
 8002f38:	4b36      	ldr	r3, [pc, #216]	@ (8003014 <HAL_I2S_Init+0x27c>)
 8002f3a:	e001      	b.n	8002f40 <HAL_I2S_Init+0x1a8>
 8002f3c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002f40:	69db      	ldr	r3, [r3, #28]
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	6812      	ldr	r2, [r2, #0]
 8002f46:	4932      	ldr	r1, [pc, #200]	@ (8003010 <HAL_I2S_Init+0x278>)
 8002f48:	428a      	cmp	r2, r1
 8002f4a:	d101      	bne.n	8002f50 <HAL_I2S_Init+0x1b8>
 8002f4c:	4a31      	ldr	r2, [pc, #196]	@ (8003014 <HAL_I2S_Init+0x27c>)
 8002f4e:	e001      	b.n	8002f54 <HAL_I2S_Init+0x1bc>
 8002f50:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8002f54:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002f58:	f023 030f 	bic.w	r3, r3, #15
 8002f5c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a2b      	ldr	r2, [pc, #172]	@ (8003010 <HAL_I2S_Init+0x278>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d101      	bne.n	8002f6c <HAL_I2S_Init+0x1d4>
 8002f68:	4b2a      	ldr	r3, [pc, #168]	@ (8003014 <HAL_I2S_Init+0x27c>)
 8002f6a:	e001      	b.n	8002f70 <HAL_I2S_Init+0x1d8>
 8002f6c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002f70:	2202      	movs	r2, #2
 8002f72:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a25      	ldr	r2, [pc, #148]	@ (8003010 <HAL_I2S_Init+0x278>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d101      	bne.n	8002f82 <HAL_I2S_Init+0x1ea>
 8002f7e:	4b25      	ldr	r3, [pc, #148]	@ (8003014 <HAL_I2S_Init+0x27c>)
 8002f80:	e001      	b.n	8002f86 <HAL_I2S_Init+0x1ee>
 8002f82:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002f86:	69db      	ldr	r3, [r3, #28]
 8002f88:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f92:	d003      	beq.n	8002f9c <HAL_I2S_Init+0x204>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d103      	bne.n	8002fa4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8002f9c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002fa0:	613b      	str	r3, [r7, #16]
 8002fa2:	e001      	b.n	8002fa8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	699b      	ldr	r3, [r3, #24]
 8002fc4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	b29a      	uxth	r2, r3
 8002fca:	897b      	ldrh	r3, [r7, #10]
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002fd4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a0d      	ldr	r2, [pc, #52]	@ (8003010 <HAL_I2S_Init+0x278>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d101      	bne.n	8002fe4 <HAL_I2S_Init+0x24c>
 8002fe0:	4b0c      	ldr	r3, [pc, #48]	@ (8003014 <HAL_I2S_Init+0x27c>)
 8002fe2:	e001      	b.n	8002fe8 <HAL_I2S_Init+0x250>
 8002fe4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002fe8:	897a      	ldrh	r2, [r7, #10]
 8002fea:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8002ffa:	2300      	movs	r3, #0
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3720      	adds	r7, #32
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}
 8003004:	080032ed 	.word	0x080032ed
 8003008:	cccccccd 	.word	0xcccccccd
 800300c:	08003401 	.word	0x08003401
 8003010:	40003800 	.word	0x40003800
 8003014:	40003400 	.word	0x40003400

08003018 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b086      	sub	sp, #24
 800301c:	af00      	add	r7, sp, #0
 800301e:	60f8      	str	r0, [r7, #12]
 8003020:	60b9      	str	r1, [r7, #8]
 8003022:	4613      	mov	r3, r2
 8003024:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d002      	beq.n	8003032 <HAL_I2S_Transmit_DMA+0x1a>
 800302c:	88fb      	ldrh	r3, [r7, #6]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d101      	bne.n	8003036 <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e08a      	b.n	800314c <HAL_I2S_Transmit_DMA+0x134>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800303c:	b2db      	uxtb	r3, r3
 800303e:	2b01      	cmp	r3, #1
 8003040:	d001      	beq.n	8003046 <HAL_I2S_Transmit_DMA+0x2e>
  {
    return HAL_BUSY;
 8003042:	2302      	movs	r3, #2
 8003044:	e082      	b.n	800314c <HAL_I2S_Transmit_DMA+0x134>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800304c:	b2db      	uxtb	r3, r3
 800304e:	2b01      	cmp	r3, #1
 8003050:	d101      	bne.n	8003056 <HAL_I2S_Transmit_DMA+0x3e>
 8003052:	2302      	movs	r3, #2
 8003054:	e07a      	b.n	800314c <HAL_I2S_Transmit_DMA+0x134>
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2201      	movs	r2, #1
 800305a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2203      	movs	r2, #3
 8003062:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2200      	movs	r2, #0
 800306a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pTxBuffPtr = pData;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	68ba      	ldr	r2, [r7, #8]
 8003070:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	69db      	ldr	r3, [r3, #28]
 8003078:	f003 0307 	and.w	r3, r3, #7
 800307c:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	2b03      	cmp	r3, #3
 8003082:	d002      	beq.n	800308a <HAL_I2S_Transmit_DMA+0x72>
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	2b05      	cmp	r3, #5
 8003088:	d10a      	bne.n	80030a0 <HAL_I2S_Transmit_DMA+0x88>
  {
    hi2s->TxXferSize = (Size << 1U);
 800308a:	88fb      	ldrh	r3, [r7, #6]
 800308c:	005b      	lsls	r3, r3, #1
 800308e:	b29a      	uxth	r2, r3
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 8003094:	88fb      	ldrh	r3, [r7, #6]
 8003096:	005b      	lsls	r3, r3, #1
 8003098:	b29a      	uxth	r2, r3
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800309e:	e005      	b.n	80030ac <HAL_I2S_Transmit_DMA+0x94>
  }
  else
  {
    hi2s->TxXferSize = Size;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	88fa      	ldrh	r2, [r7, #6]
 80030a4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	88fa      	ldrh	r2, [r7, #6]
 80030aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030b0:	4a28      	ldr	r2, [pc, #160]	@ (8003154 <HAL_I2S_Transmit_DMA+0x13c>)
 80030b2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030b8:	4a27      	ldr	r2, [pc, #156]	@ (8003158 <HAL_I2S_Transmit_DMA+0x140>)
 80030ba:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030c0:	4a26      	ldr	r2, [pc, #152]	@ (800315c <HAL_I2S_Transmit_DMA+0x144>)
 80030c2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80030cc:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80030d4:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030da:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80030dc:	f7ff f9ca 	bl	8002474 <HAL_DMA_Start_IT>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d00f      	beq.n	8003106 <HAL_I2S_Transmit_DMA+0xee>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030ea:	f043 0208 	orr.w	r2, r3, #8
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2201      	movs	r2, #1
 80030f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2200      	movs	r2, #0
 80030fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e022      	b.n	800314c <HAL_I2S_Transmit_DMA+0x134>
  }

  __HAL_UNLOCK(hi2s);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2200      	movs	r2, #0
 800310a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f003 0302 	and.w	r3, r3, #2
 8003118:	2b00      	cmp	r3, #0
 800311a:	d107      	bne.n	800312c <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	685a      	ldr	r2, [r3, #4]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f042 0202 	orr.w	r2, r2, #2
 800312a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	69db      	ldr	r3, [r3, #28]
 8003132:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003136:	2b00      	cmp	r3, #0
 8003138:	d107      	bne.n	800314a <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	69da      	ldr	r2, [r3, #28]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003148:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 800314a:	2300      	movs	r3, #0
}
 800314c:	4618      	mov	r0, r3
 800314e:	3718      	adds	r7, #24
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}
 8003154:	080031cb 	.word	0x080031cb
 8003158:	08003189 	.word	0x08003189
 800315c:	080031e7 	.word	0x080031e7

08003160 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003168:	bf00      	nop
 800316a:	370c      	adds	r7, #12
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr

08003174 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800317c:	bf00      	nop
 800317e:	370c      	adds	r7, #12
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b084      	sub	sp, #16
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003194:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	69db      	ldr	r3, [r3, #28]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d10e      	bne.n	80031bc <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	685a      	ldr	r2, [r3, #4]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f022 0202 	bic.w	r2, r2, #2
 80031ac:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2200      	movs	r2, #0
 80031b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2201      	movs	r2, #1
 80031b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 80031bc:	68f8      	ldr	r0, [r7, #12]
 80031be:	f7fe fa3b 	bl	8001638 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80031c2:	bf00      	nop
 80031c4:	3710      	adds	r7, #16
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}

080031ca <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80031ca:	b580      	push	{r7, lr}
 80031cc:	b084      	sub	sp, #16
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031d6:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 80031d8:	68f8      	ldr	r0, [r7, #12]
 80031da:	f7fe fa0b 	bl	80015f4 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80031de:	bf00      	nop
 80031e0:	3710      	adds	r7, #16
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}

080031e6 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 80031e6:	b580      	push	{r7, lr}
 80031e8:	b084      	sub	sp, #16
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031f2:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	685a      	ldr	r2, [r3, #4]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f022 0203 	bic.w	r2, r2, #3
 8003202:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2200      	movs	r2, #0
 8003208:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2200      	movs	r2, #0
 800320e:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800321c:	f043 0208 	orr.w	r2, r3, #8
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8003224:	68f8      	ldr	r0, [r7, #12]
 8003226:	f7ff ffa5 	bl	8003174 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800322a:	bf00      	nop
 800322c:	3710      	adds	r7, #16
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}

08003232 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003232:	b580      	push	{r7, lr}
 8003234:	b082      	sub	sp, #8
 8003236:	af00      	add	r7, sp, #0
 8003238:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800323e:	881a      	ldrh	r2, [r3, #0]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800324a:	1c9a      	adds	r2, r3, #2
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003254:	b29b      	uxth	r3, r3
 8003256:	3b01      	subs	r3, #1
 8003258:	b29a      	uxth	r2, r3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003262:	b29b      	uxth	r3, r3
 8003264:	2b00      	cmp	r3, #0
 8003266:	d10e      	bne.n	8003286 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	685a      	ldr	r2, [r3, #4]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003276:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2201      	movs	r2, #1
 800327c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	f7fe f9d9 	bl	8001638 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003286:	bf00      	nop
 8003288:	3708      	adds	r7, #8
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}

0800328e <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800328e:	b580      	push	{r7, lr}
 8003290:	b082      	sub	sp, #8
 8003292:	af00      	add	r7, sp, #0
 8003294:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	68da      	ldr	r2, [r3, #12]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032a0:	b292      	uxth	r2, r2
 80032a2:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032a8:	1c9a      	adds	r2, r3, #2
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	3b01      	subs	r3, #1
 80032b6:	b29a      	uxth	r2, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d10e      	bne.n	80032e4 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	685a      	ldr	r2, [r3, #4]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80032d4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2201      	movs	r2, #1
 80032da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f7ff ff3e 	bl	8003160 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80032e4:	bf00      	nop
 80032e6:	3708      	adds	r7, #8
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}

080032ec <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b086      	sub	sp, #24
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003302:	b2db      	uxtb	r3, r3
 8003304:	2b04      	cmp	r3, #4
 8003306:	d13a      	bne.n	800337e <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	f003 0301 	and.w	r3, r3, #1
 800330e:	2b01      	cmp	r3, #1
 8003310:	d109      	bne.n	8003326 <I2S_IRQHandler+0x3a>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800331c:	2b40      	cmp	r3, #64	@ 0x40
 800331e:	d102      	bne.n	8003326 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f7ff ffb4 	bl	800328e <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800332c:	2b40      	cmp	r3, #64	@ 0x40
 800332e:	d126      	bne.n	800337e <I2S_IRQHandler+0x92>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	f003 0320 	and.w	r3, r3, #32
 800333a:	2b20      	cmp	r3, #32
 800333c:	d11f      	bne.n	800337e <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	685a      	ldr	r2, [r3, #4]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800334c:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800334e:	2300      	movs	r3, #0
 8003350:	613b      	str	r3, [r7, #16]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	613b      	str	r3, [r7, #16]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	613b      	str	r3, [r7, #16]
 8003362:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003370:	f043 0202 	orr.w	r2, r3, #2
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f7ff fefb 	bl	8003174 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003384:	b2db      	uxtb	r3, r3
 8003386:	2b03      	cmp	r3, #3
 8003388:	d136      	bne.n	80033f8 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	f003 0302 	and.w	r3, r3, #2
 8003390:	2b02      	cmp	r3, #2
 8003392:	d109      	bne.n	80033a8 <I2S_IRQHandler+0xbc>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800339e:	2b80      	cmp	r3, #128	@ 0x80
 80033a0:	d102      	bne.n	80033a8 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f7ff ff45 	bl	8003232 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	f003 0308 	and.w	r3, r3, #8
 80033ae:	2b08      	cmp	r3, #8
 80033b0:	d122      	bne.n	80033f8 <I2S_IRQHandler+0x10c>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f003 0320 	and.w	r3, r3, #32
 80033bc:	2b20      	cmp	r3, #32
 80033be:	d11b      	bne.n	80033f8 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	685a      	ldr	r2, [r3, #4]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80033ce:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80033d0:	2300      	movs	r3, #0
 80033d2:	60fb      	str	r3, [r7, #12]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	60fb      	str	r3, [r7, #12]
 80033dc:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2201      	movs	r2, #1
 80033e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033ea:	f043 0204 	orr.w	r2, r3, #4
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f7ff febe 	bl	8003174 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80033f8:	bf00      	nop
 80033fa:	3718      	adds	r7, #24
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}

08003400 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b088      	sub	sp, #32
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a92      	ldr	r2, [pc, #584]	@ (8003660 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d101      	bne.n	800341e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800341a:	4b92      	ldr	r3, [pc, #584]	@ (8003664 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800341c:	e001      	b.n	8003422 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800341e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a8b      	ldr	r2, [pc, #556]	@ (8003660 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d101      	bne.n	800343c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003438:	4b8a      	ldr	r3, [pc, #552]	@ (8003664 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800343a:	e001      	b.n	8003440 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800343c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800344c:	d004      	beq.n	8003458 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	2b00      	cmp	r3, #0
 8003454:	f040 8099 	bne.w	800358a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	f003 0302 	and.w	r3, r3, #2
 800345e:	2b02      	cmp	r3, #2
 8003460:	d107      	bne.n	8003472 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003468:	2b00      	cmp	r3, #0
 800346a:	d002      	beq.n	8003472 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f000 f925 	bl	80036bc <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003472:	69bb      	ldr	r3, [r7, #24]
 8003474:	f003 0301 	and.w	r3, r3, #1
 8003478:	2b01      	cmp	r3, #1
 800347a:	d107      	bne.n	800348c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003482:	2b00      	cmp	r3, #0
 8003484:	d002      	beq.n	800348c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f000 f9c8 	bl	800381c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800348c:	69bb      	ldr	r3, [r7, #24]
 800348e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003492:	2b40      	cmp	r3, #64	@ 0x40
 8003494:	d13a      	bne.n	800350c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	f003 0320 	and.w	r3, r3, #32
 800349c:	2b00      	cmp	r3, #0
 800349e:	d035      	beq.n	800350c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a6e      	ldr	r2, [pc, #440]	@ (8003660 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d101      	bne.n	80034ae <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80034aa:	4b6e      	ldr	r3, [pc, #440]	@ (8003664 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80034ac:	e001      	b.n	80034b2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80034ae:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80034b2:	685a      	ldr	r2, [r3, #4]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4969      	ldr	r1, [pc, #420]	@ (8003660 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80034ba:	428b      	cmp	r3, r1
 80034bc:	d101      	bne.n	80034c2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80034be:	4b69      	ldr	r3, [pc, #420]	@ (8003664 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80034c0:	e001      	b.n	80034c6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80034c2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80034c6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80034ca:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	685a      	ldr	r2, [r3, #4]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80034da:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80034dc:	2300      	movs	r3, #0
 80034de:	60fb      	str	r3, [r7, #12]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	60fb      	str	r3, [r7, #12]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	60fb      	str	r3, [r7, #12]
 80034f0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2201      	movs	r2, #1
 80034f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034fe:	f043 0202 	orr.w	r2, r3, #2
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f7ff fe34 	bl	8003174 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	f003 0308 	and.w	r3, r3, #8
 8003512:	2b08      	cmp	r3, #8
 8003514:	f040 80c3 	bne.w	800369e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	f003 0320 	and.w	r3, r3, #32
 800351e:	2b00      	cmp	r3, #0
 8003520:	f000 80bd 	beq.w	800369e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	685a      	ldr	r2, [r3, #4]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003532:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a49      	ldr	r2, [pc, #292]	@ (8003660 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d101      	bne.n	8003542 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800353e:	4b49      	ldr	r3, [pc, #292]	@ (8003664 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003540:	e001      	b.n	8003546 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003542:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003546:	685a      	ldr	r2, [r3, #4]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4944      	ldr	r1, [pc, #272]	@ (8003660 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800354e:	428b      	cmp	r3, r1
 8003550:	d101      	bne.n	8003556 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003552:	4b44      	ldr	r3, [pc, #272]	@ (8003664 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003554:	e001      	b.n	800355a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003556:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800355a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800355e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003560:	2300      	movs	r3, #0
 8003562:	60bb      	str	r3, [r7, #8]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	60bb      	str	r3, [r7, #8]
 800356c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2201      	movs	r2, #1
 8003572:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800357a:	f043 0204 	orr.w	r2, r3, #4
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f7ff fdf6 	bl	8003174 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003588:	e089      	b.n	800369e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800358a:	69bb      	ldr	r3, [r7, #24]
 800358c:	f003 0302 	and.w	r3, r3, #2
 8003590:	2b02      	cmp	r3, #2
 8003592:	d107      	bne.n	80035a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800359a:	2b00      	cmp	r3, #0
 800359c:	d002      	beq.n	80035a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f000 f8be 	bl	8003720 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	f003 0301 	and.w	r3, r3, #1
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d107      	bne.n	80035be <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d002      	beq.n	80035be <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f000 f8fd 	bl	80037b8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035c4:	2b40      	cmp	r3, #64	@ 0x40
 80035c6:	d12f      	bne.n	8003628 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	f003 0320 	and.w	r3, r3, #32
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d02a      	beq.n	8003628 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	685a      	ldr	r2, [r3, #4]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80035e0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a1e      	ldr	r2, [pc, #120]	@ (8003660 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d101      	bne.n	80035f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80035ec:	4b1d      	ldr	r3, [pc, #116]	@ (8003664 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80035ee:	e001      	b.n	80035f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80035f0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80035f4:	685a      	ldr	r2, [r3, #4]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4919      	ldr	r1, [pc, #100]	@ (8003660 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80035fc:	428b      	cmp	r3, r1
 80035fe:	d101      	bne.n	8003604 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003600:	4b18      	ldr	r3, [pc, #96]	@ (8003664 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003602:	e001      	b.n	8003608 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003604:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003608:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800360c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2201      	movs	r2, #1
 8003612:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800361a:	f043 0202 	orr.w	r2, r3, #2
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f7ff fda6 	bl	8003174 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003628:	69bb      	ldr	r3, [r7, #24]
 800362a:	f003 0308 	and.w	r3, r3, #8
 800362e:	2b08      	cmp	r3, #8
 8003630:	d136      	bne.n	80036a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	f003 0320 	and.w	r3, r3, #32
 8003638:	2b00      	cmp	r3, #0
 800363a:	d031      	beq.n	80036a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a07      	ldr	r2, [pc, #28]	@ (8003660 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d101      	bne.n	800364a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003646:	4b07      	ldr	r3, [pc, #28]	@ (8003664 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003648:	e001      	b.n	800364e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800364a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800364e:	685a      	ldr	r2, [r3, #4]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4902      	ldr	r1, [pc, #8]	@ (8003660 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003656:	428b      	cmp	r3, r1
 8003658:	d106      	bne.n	8003668 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800365a:	4b02      	ldr	r3, [pc, #8]	@ (8003664 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800365c:	e006      	b.n	800366c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800365e:	bf00      	nop
 8003660:	40003800 	.word	0x40003800
 8003664:	40003400 	.word	0x40003400
 8003668:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800366c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003670:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	685a      	ldr	r2, [r3, #4]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003680:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2201      	movs	r2, #1
 8003686:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800368e:	f043 0204 	orr.w	r2, r3, #4
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f7ff fd6c 	bl	8003174 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800369c:	e000      	b.n	80036a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800369e:	bf00      	nop
}
 80036a0:	bf00      	nop
 80036a2:	3720      	adds	r7, #32
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}

080036a8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80036b0:	bf00      	nop
 80036b2:	370c      	adds	r7, #12
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr

080036bc <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b082      	sub	sp, #8
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036c8:	1c99      	adds	r1, r3, #2
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	6251      	str	r1, [r2, #36]	@ 0x24
 80036ce:	881a      	ldrh	r2, [r3, #0]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036da:	b29b      	uxth	r3, r3
 80036dc:	3b01      	subs	r3, #1
 80036de:	b29a      	uxth	r2, r3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d113      	bne.n	8003716 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	685a      	ldr	r2, [r3, #4]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80036fc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003702:	b29b      	uxth	r3, r3
 8003704:	2b00      	cmp	r3, #0
 8003706:	d106      	bne.n	8003716 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f7ff ffc9 	bl	80036a8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003716:	bf00      	nop
 8003718:	3708      	adds	r7, #8
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
	...

08003720 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800372c:	1c99      	adds	r1, r3, #2
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	6251      	str	r1, [r2, #36]	@ 0x24
 8003732:	8819      	ldrh	r1, [r3, #0]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a1d      	ldr	r2, [pc, #116]	@ (80037b0 <I2SEx_TxISR_I2SExt+0x90>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d101      	bne.n	8003742 <I2SEx_TxISR_I2SExt+0x22>
 800373e:	4b1d      	ldr	r3, [pc, #116]	@ (80037b4 <I2SEx_TxISR_I2SExt+0x94>)
 8003740:	e001      	b.n	8003746 <I2SEx_TxISR_I2SExt+0x26>
 8003742:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003746:	460a      	mov	r2, r1
 8003748:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800374e:	b29b      	uxth	r3, r3
 8003750:	3b01      	subs	r3, #1
 8003752:	b29a      	uxth	r2, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800375c:	b29b      	uxth	r3, r3
 800375e:	2b00      	cmp	r3, #0
 8003760:	d121      	bne.n	80037a6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a12      	ldr	r2, [pc, #72]	@ (80037b0 <I2SEx_TxISR_I2SExt+0x90>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d101      	bne.n	8003770 <I2SEx_TxISR_I2SExt+0x50>
 800376c:	4b11      	ldr	r3, [pc, #68]	@ (80037b4 <I2SEx_TxISR_I2SExt+0x94>)
 800376e:	e001      	b.n	8003774 <I2SEx_TxISR_I2SExt+0x54>
 8003770:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003774:	685a      	ldr	r2, [r3, #4]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	490d      	ldr	r1, [pc, #52]	@ (80037b0 <I2SEx_TxISR_I2SExt+0x90>)
 800377c:	428b      	cmp	r3, r1
 800377e:	d101      	bne.n	8003784 <I2SEx_TxISR_I2SExt+0x64>
 8003780:	4b0c      	ldr	r3, [pc, #48]	@ (80037b4 <I2SEx_TxISR_I2SExt+0x94>)
 8003782:	e001      	b.n	8003788 <I2SEx_TxISR_I2SExt+0x68>
 8003784:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003788:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800378c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003792:	b29b      	uxth	r3, r3
 8003794:	2b00      	cmp	r3, #0
 8003796:	d106      	bne.n	80037a6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2201      	movs	r2, #1
 800379c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f7ff ff81 	bl	80036a8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80037a6:	bf00      	nop
 80037a8:	3708      	adds	r7, #8
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	40003800 	.word	0x40003800
 80037b4:	40003400 	.word	0x40003400

080037b8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b082      	sub	sp, #8
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	68d8      	ldr	r0, [r3, #12]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037ca:	1c99      	adds	r1, r3, #2
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80037d0:	b282      	uxth	r2, r0
 80037d2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80037d8:	b29b      	uxth	r3, r3
 80037da:	3b01      	subs	r3, #1
 80037dc:	b29a      	uxth	r2, r3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d113      	bne.n	8003814 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	685a      	ldr	r2, [r3, #4]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80037fa:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003800:	b29b      	uxth	r3, r3
 8003802:	2b00      	cmp	r3, #0
 8003804:	d106      	bne.n	8003814 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2201      	movs	r2, #1
 800380a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f7ff ff4a 	bl	80036a8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003814:	bf00      	nop
 8003816:	3708      	adds	r7, #8
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}

0800381c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a20      	ldr	r2, [pc, #128]	@ (80038ac <I2SEx_RxISR_I2SExt+0x90>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d101      	bne.n	8003832 <I2SEx_RxISR_I2SExt+0x16>
 800382e:	4b20      	ldr	r3, [pc, #128]	@ (80038b0 <I2SEx_RxISR_I2SExt+0x94>)
 8003830:	e001      	b.n	8003836 <I2SEx_RxISR_I2SExt+0x1a>
 8003832:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003836:	68d8      	ldr	r0, [r3, #12]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800383c:	1c99      	adds	r1, r3, #2
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8003842:	b282      	uxth	r2, r0
 8003844:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800384a:	b29b      	uxth	r3, r3
 800384c:	3b01      	subs	r3, #1
 800384e:	b29a      	uxth	r2, r3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003858:	b29b      	uxth	r3, r3
 800385a:	2b00      	cmp	r3, #0
 800385c:	d121      	bne.n	80038a2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a12      	ldr	r2, [pc, #72]	@ (80038ac <I2SEx_RxISR_I2SExt+0x90>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d101      	bne.n	800386c <I2SEx_RxISR_I2SExt+0x50>
 8003868:	4b11      	ldr	r3, [pc, #68]	@ (80038b0 <I2SEx_RxISR_I2SExt+0x94>)
 800386a:	e001      	b.n	8003870 <I2SEx_RxISR_I2SExt+0x54>
 800386c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003870:	685a      	ldr	r2, [r3, #4]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	490d      	ldr	r1, [pc, #52]	@ (80038ac <I2SEx_RxISR_I2SExt+0x90>)
 8003878:	428b      	cmp	r3, r1
 800387a:	d101      	bne.n	8003880 <I2SEx_RxISR_I2SExt+0x64>
 800387c:	4b0c      	ldr	r3, [pc, #48]	@ (80038b0 <I2SEx_RxISR_I2SExt+0x94>)
 800387e:	e001      	b.n	8003884 <I2SEx_RxISR_I2SExt+0x68>
 8003880:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003884:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003888:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800388e:	b29b      	uxth	r3, r3
 8003890:	2b00      	cmp	r3, #0
 8003892:	d106      	bne.n	80038a2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f7ff ff03 	bl	80036a8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80038a2:	bf00      	nop
 80038a4:	3708      	adds	r7, #8
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	40003800 	.word	0x40003800
 80038b0:	40003400 	.word	0x40003400

080038b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b086      	sub	sp, #24
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d101      	bne.n	80038c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e267      	b.n	8003d96 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0301 	and.w	r3, r3, #1
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d075      	beq.n	80039be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80038d2:	4b88      	ldr	r3, [pc, #544]	@ (8003af4 <HAL_RCC_OscConfig+0x240>)
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	f003 030c 	and.w	r3, r3, #12
 80038da:	2b04      	cmp	r3, #4
 80038dc:	d00c      	beq.n	80038f8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038de:	4b85      	ldr	r3, [pc, #532]	@ (8003af4 <HAL_RCC_OscConfig+0x240>)
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80038e6:	2b08      	cmp	r3, #8
 80038e8:	d112      	bne.n	8003910 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038ea:	4b82      	ldr	r3, [pc, #520]	@ (8003af4 <HAL_RCC_OscConfig+0x240>)
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80038f6:	d10b      	bne.n	8003910 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038f8:	4b7e      	ldr	r3, [pc, #504]	@ (8003af4 <HAL_RCC_OscConfig+0x240>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003900:	2b00      	cmp	r3, #0
 8003902:	d05b      	beq.n	80039bc <HAL_RCC_OscConfig+0x108>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d157      	bne.n	80039bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e242      	b.n	8003d96 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003918:	d106      	bne.n	8003928 <HAL_RCC_OscConfig+0x74>
 800391a:	4b76      	ldr	r3, [pc, #472]	@ (8003af4 <HAL_RCC_OscConfig+0x240>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a75      	ldr	r2, [pc, #468]	@ (8003af4 <HAL_RCC_OscConfig+0x240>)
 8003920:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003924:	6013      	str	r3, [r2, #0]
 8003926:	e01d      	b.n	8003964 <HAL_RCC_OscConfig+0xb0>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003930:	d10c      	bne.n	800394c <HAL_RCC_OscConfig+0x98>
 8003932:	4b70      	ldr	r3, [pc, #448]	@ (8003af4 <HAL_RCC_OscConfig+0x240>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a6f      	ldr	r2, [pc, #444]	@ (8003af4 <HAL_RCC_OscConfig+0x240>)
 8003938:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800393c:	6013      	str	r3, [r2, #0]
 800393e:	4b6d      	ldr	r3, [pc, #436]	@ (8003af4 <HAL_RCC_OscConfig+0x240>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a6c      	ldr	r2, [pc, #432]	@ (8003af4 <HAL_RCC_OscConfig+0x240>)
 8003944:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003948:	6013      	str	r3, [r2, #0]
 800394a:	e00b      	b.n	8003964 <HAL_RCC_OscConfig+0xb0>
 800394c:	4b69      	ldr	r3, [pc, #420]	@ (8003af4 <HAL_RCC_OscConfig+0x240>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a68      	ldr	r2, [pc, #416]	@ (8003af4 <HAL_RCC_OscConfig+0x240>)
 8003952:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003956:	6013      	str	r3, [r2, #0]
 8003958:	4b66      	ldr	r3, [pc, #408]	@ (8003af4 <HAL_RCC_OscConfig+0x240>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a65      	ldr	r2, [pc, #404]	@ (8003af4 <HAL_RCC_OscConfig+0x240>)
 800395e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003962:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d013      	beq.n	8003994 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800396c:	f7fd ffb0 	bl	80018d0 <HAL_GetTick>
 8003970:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003972:	e008      	b.n	8003986 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003974:	f7fd ffac 	bl	80018d0 <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	2b64      	cmp	r3, #100	@ 0x64
 8003980:	d901      	bls.n	8003986 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	e207      	b.n	8003d96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003986:	4b5b      	ldr	r3, [pc, #364]	@ (8003af4 <HAL_RCC_OscConfig+0x240>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d0f0      	beq.n	8003974 <HAL_RCC_OscConfig+0xc0>
 8003992:	e014      	b.n	80039be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003994:	f7fd ff9c 	bl	80018d0 <HAL_GetTick>
 8003998:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800399a:	e008      	b.n	80039ae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800399c:	f7fd ff98 	bl	80018d0 <HAL_GetTick>
 80039a0:	4602      	mov	r2, r0
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	2b64      	cmp	r3, #100	@ 0x64
 80039a8:	d901      	bls.n	80039ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e1f3      	b.n	8003d96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039ae:	4b51      	ldr	r3, [pc, #324]	@ (8003af4 <HAL_RCC_OscConfig+0x240>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d1f0      	bne.n	800399c <HAL_RCC_OscConfig+0xe8>
 80039ba:	e000      	b.n	80039be <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 0302 	and.w	r3, r3, #2
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d063      	beq.n	8003a92 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80039ca:	4b4a      	ldr	r3, [pc, #296]	@ (8003af4 <HAL_RCC_OscConfig+0x240>)
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	f003 030c 	and.w	r3, r3, #12
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d00b      	beq.n	80039ee <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039d6:	4b47      	ldr	r3, [pc, #284]	@ (8003af4 <HAL_RCC_OscConfig+0x240>)
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80039de:	2b08      	cmp	r3, #8
 80039e0:	d11c      	bne.n	8003a1c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039e2:	4b44      	ldr	r3, [pc, #272]	@ (8003af4 <HAL_RCC_OscConfig+0x240>)
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d116      	bne.n	8003a1c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039ee:	4b41      	ldr	r3, [pc, #260]	@ (8003af4 <HAL_RCC_OscConfig+0x240>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 0302 	and.w	r3, r3, #2
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d005      	beq.n	8003a06 <HAL_RCC_OscConfig+0x152>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	68db      	ldr	r3, [r3, #12]
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d001      	beq.n	8003a06 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e1c7      	b.n	8003d96 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a06:	4b3b      	ldr	r3, [pc, #236]	@ (8003af4 <HAL_RCC_OscConfig+0x240>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	691b      	ldr	r3, [r3, #16]
 8003a12:	00db      	lsls	r3, r3, #3
 8003a14:	4937      	ldr	r1, [pc, #220]	@ (8003af4 <HAL_RCC_OscConfig+0x240>)
 8003a16:	4313      	orrs	r3, r2
 8003a18:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a1a:	e03a      	b.n	8003a92 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d020      	beq.n	8003a66 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a24:	4b34      	ldr	r3, [pc, #208]	@ (8003af8 <HAL_RCC_OscConfig+0x244>)
 8003a26:	2201      	movs	r2, #1
 8003a28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a2a:	f7fd ff51 	bl	80018d0 <HAL_GetTick>
 8003a2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a30:	e008      	b.n	8003a44 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a32:	f7fd ff4d 	bl	80018d0 <HAL_GetTick>
 8003a36:	4602      	mov	r2, r0
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d901      	bls.n	8003a44 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a40:	2303      	movs	r3, #3
 8003a42:	e1a8      	b.n	8003d96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a44:	4b2b      	ldr	r3, [pc, #172]	@ (8003af4 <HAL_RCC_OscConfig+0x240>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0302 	and.w	r3, r3, #2
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d0f0      	beq.n	8003a32 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a50:	4b28      	ldr	r3, [pc, #160]	@ (8003af4 <HAL_RCC_OscConfig+0x240>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	691b      	ldr	r3, [r3, #16]
 8003a5c:	00db      	lsls	r3, r3, #3
 8003a5e:	4925      	ldr	r1, [pc, #148]	@ (8003af4 <HAL_RCC_OscConfig+0x240>)
 8003a60:	4313      	orrs	r3, r2
 8003a62:	600b      	str	r3, [r1, #0]
 8003a64:	e015      	b.n	8003a92 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a66:	4b24      	ldr	r3, [pc, #144]	@ (8003af8 <HAL_RCC_OscConfig+0x244>)
 8003a68:	2200      	movs	r2, #0
 8003a6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a6c:	f7fd ff30 	bl	80018d0 <HAL_GetTick>
 8003a70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a72:	e008      	b.n	8003a86 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a74:	f7fd ff2c 	bl	80018d0 <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d901      	bls.n	8003a86 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e187      	b.n	8003d96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a86:	4b1b      	ldr	r3, [pc, #108]	@ (8003af4 <HAL_RCC_OscConfig+0x240>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0302 	and.w	r3, r3, #2
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d1f0      	bne.n	8003a74 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0308 	and.w	r3, r3, #8
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d036      	beq.n	8003b0c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	695b      	ldr	r3, [r3, #20]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d016      	beq.n	8003ad4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003aa6:	4b15      	ldr	r3, [pc, #84]	@ (8003afc <HAL_RCC_OscConfig+0x248>)
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aac:	f7fd ff10 	bl	80018d0 <HAL_GetTick>
 8003ab0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ab2:	e008      	b.n	8003ac6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ab4:	f7fd ff0c 	bl	80018d0 <HAL_GetTick>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	2b02      	cmp	r3, #2
 8003ac0:	d901      	bls.n	8003ac6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e167      	b.n	8003d96 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ac6:	4b0b      	ldr	r3, [pc, #44]	@ (8003af4 <HAL_RCC_OscConfig+0x240>)
 8003ac8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003aca:	f003 0302 	and.w	r3, r3, #2
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d0f0      	beq.n	8003ab4 <HAL_RCC_OscConfig+0x200>
 8003ad2:	e01b      	b.n	8003b0c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ad4:	4b09      	ldr	r3, [pc, #36]	@ (8003afc <HAL_RCC_OscConfig+0x248>)
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ada:	f7fd fef9 	bl	80018d0 <HAL_GetTick>
 8003ade:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ae0:	e00e      	b.n	8003b00 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ae2:	f7fd fef5 	bl	80018d0 <HAL_GetTick>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	1ad3      	subs	r3, r2, r3
 8003aec:	2b02      	cmp	r3, #2
 8003aee:	d907      	bls.n	8003b00 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003af0:	2303      	movs	r3, #3
 8003af2:	e150      	b.n	8003d96 <HAL_RCC_OscConfig+0x4e2>
 8003af4:	40023800 	.word	0x40023800
 8003af8:	42470000 	.word	0x42470000
 8003afc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b00:	4b88      	ldr	r3, [pc, #544]	@ (8003d24 <HAL_RCC_OscConfig+0x470>)
 8003b02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b04:	f003 0302 	and.w	r3, r3, #2
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d1ea      	bne.n	8003ae2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 0304 	and.w	r3, r3, #4
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	f000 8097 	beq.w	8003c48 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b1e:	4b81      	ldr	r3, [pc, #516]	@ (8003d24 <HAL_RCC_OscConfig+0x470>)
 8003b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d10f      	bne.n	8003b4a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	60bb      	str	r3, [r7, #8]
 8003b2e:	4b7d      	ldr	r3, [pc, #500]	@ (8003d24 <HAL_RCC_OscConfig+0x470>)
 8003b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b32:	4a7c      	ldr	r2, [pc, #496]	@ (8003d24 <HAL_RCC_OscConfig+0x470>)
 8003b34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b38:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b3a:	4b7a      	ldr	r3, [pc, #488]	@ (8003d24 <HAL_RCC_OscConfig+0x470>)
 8003b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b42:	60bb      	str	r3, [r7, #8]
 8003b44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b46:	2301      	movs	r3, #1
 8003b48:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b4a:	4b77      	ldr	r3, [pc, #476]	@ (8003d28 <HAL_RCC_OscConfig+0x474>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d118      	bne.n	8003b88 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b56:	4b74      	ldr	r3, [pc, #464]	@ (8003d28 <HAL_RCC_OscConfig+0x474>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a73      	ldr	r2, [pc, #460]	@ (8003d28 <HAL_RCC_OscConfig+0x474>)
 8003b5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b62:	f7fd feb5 	bl	80018d0 <HAL_GetTick>
 8003b66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b68:	e008      	b.n	8003b7c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b6a:	f7fd feb1 	bl	80018d0 <HAL_GetTick>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	2b02      	cmp	r3, #2
 8003b76:	d901      	bls.n	8003b7c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	e10c      	b.n	8003d96 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b7c:	4b6a      	ldr	r3, [pc, #424]	@ (8003d28 <HAL_RCC_OscConfig+0x474>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d0f0      	beq.n	8003b6a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d106      	bne.n	8003b9e <HAL_RCC_OscConfig+0x2ea>
 8003b90:	4b64      	ldr	r3, [pc, #400]	@ (8003d24 <HAL_RCC_OscConfig+0x470>)
 8003b92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b94:	4a63      	ldr	r2, [pc, #396]	@ (8003d24 <HAL_RCC_OscConfig+0x470>)
 8003b96:	f043 0301 	orr.w	r3, r3, #1
 8003b9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b9c:	e01c      	b.n	8003bd8 <HAL_RCC_OscConfig+0x324>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	2b05      	cmp	r3, #5
 8003ba4:	d10c      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x30c>
 8003ba6:	4b5f      	ldr	r3, [pc, #380]	@ (8003d24 <HAL_RCC_OscConfig+0x470>)
 8003ba8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003baa:	4a5e      	ldr	r2, [pc, #376]	@ (8003d24 <HAL_RCC_OscConfig+0x470>)
 8003bac:	f043 0304 	orr.w	r3, r3, #4
 8003bb0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bb2:	4b5c      	ldr	r3, [pc, #368]	@ (8003d24 <HAL_RCC_OscConfig+0x470>)
 8003bb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bb6:	4a5b      	ldr	r2, [pc, #364]	@ (8003d24 <HAL_RCC_OscConfig+0x470>)
 8003bb8:	f043 0301 	orr.w	r3, r3, #1
 8003bbc:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bbe:	e00b      	b.n	8003bd8 <HAL_RCC_OscConfig+0x324>
 8003bc0:	4b58      	ldr	r3, [pc, #352]	@ (8003d24 <HAL_RCC_OscConfig+0x470>)
 8003bc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bc4:	4a57      	ldr	r2, [pc, #348]	@ (8003d24 <HAL_RCC_OscConfig+0x470>)
 8003bc6:	f023 0301 	bic.w	r3, r3, #1
 8003bca:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bcc:	4b55      	ldr	r3, [pc, #340]	@ (8003d24 <HAL_RCC_OscConfig+0x470>)
 8003bce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bd0:	4a54      	ldr	r2, [pc, #336]	@ (8003d24 <HAL_RCC_OscConfig+0x470>)
 8003bd2:	f023 0304 	bic.w	r3, r3, #4
 8003bd6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d015      	beq.n	8003c0c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003be0:	f7fd fe76 	bl	80018d0 <HAL_GetTick>
 8003be4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003be6:	e00a      	b.n	8003bfe <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003be8:	f7fd fe72 	bl	80018d0 <HAL_GetTick>
 8003bec:	4602      	mov	r2, r0
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d901      	bls.n	8003bfe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e0cb      	b.n	8003d96 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bfe:	4b49      	ldr	r3, [pc, #292]	@ (8003d24 <HAL_RCC_OscConfig+0x470>)
 8003c00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c02:	f003 0302 	and.w	r3, r3, #2
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d0ee      	beq.n	8003be8 <HAL_RCC_OscConfig+0x334>
 8003c0a:	e014      	b.n	8003c36 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c0c:	f7fd fe60 	bl	80018d0 <HAL_GetTick>
 8003c10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c12:	e00a      	b.n	8003c2a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c14:	f7fd fe5c 	bl	80018d0 <HAL_GetTick>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d901      	bls.n	8003c2a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	e0b5      	b.n	8003d96 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c2a:	4b3e      	ldr	r3, [pc, #248]	@ (8003d24 <HAL_RCC_OscConfig+0x470>)
 8003c2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c2e:	f003 0302 	and.w	r3, r3, #2
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d1ee      	bne.n	8003c14 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003c36:	7dfb      	ldrb	r3, [r7, #23]
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d105      	bne.n	8003c48 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c3c:	4b39      	ldr	r3, [pc, #228]	@ (8003d24 <HAL_RCC_OscConfig+0x470>)
 8003c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c40:	4a38      	ldr	r2, [pc, #224]	@ (8003d24 <HAL_RCC_OscConfig+0x470>)
 8003c42:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c46:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	699b      	ldr	r3, [r3, #24]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	f000 80a1 	beq.w	8003d94 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c52:	4b34      	ldr	r3, [pc, #208]	@ (8003d24 <HAL_RCC_OscConfig+0x470>)
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	f003 030c 	and.w	r3, r3, #12
 8003c5a:	2b08      	cmp	r3, #8
 8003c5c:	d05c      	beq.n	8003d18 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	699b      	ldr	r3, [r3, #24]
 8003c62:	2b02      	cmp	r3, #2
 8003c64:	d141      	bne.n	8003cea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c66:	4b31      	ldr	r3, [pc, #196]	@ (8003d2c <HAL_RCC_OscConfig+0x478>)
 8003c68:	2200      	movs	r2, #0
 8003c6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c6c:	f7fd fe30 	bl	80018d0 <HAL_GetTick>
 8003c70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c72:	e008      	b.n	8003c86 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c74:	f7fd fe2c 	bl	80018d0 <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	d901      	bls.n	8003c86 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e087      	b.n	8003d96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c86:	4b27      	ldr	r3, [pc, #156]	@ (8003d24 <HAL_RCC_OscConfig+0x470>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d1f0      	bne.n	8003c74 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	69da      	ldr	r2, [r3, #28]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a1b      	ldr	r3, [r3, #32]
 8003c9a:	431a      	orrs	r2, r3
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ca0:	019b      	lsls	r3, r3, #6
 8003ca2:	431a      	orrs	r2, r3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ca8:	085b      	lsrs	r3, r3, #1
 8003caa:	3b01      	subs	r3, #1
 8003cac:	041b      	lsls	r3, r3, #16
 8003cae:	431a      	orrs	r2, r3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cb4:	061b      	lsls	r3, r3, #24
 8003cb6:	491b      	ldr	r1, [pc, #108]	@ (8003d24 <HAL_RCC_OscConfig+0x470>)
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cbc:	4b1b      	ldr	r3, [pc, #108]	@ (8003d2c <HAL_RCC_OscConfig+0x478>)
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cc2:	f7fd fe05 	bl	80018d0 <HAL_GetTick>
 8003cc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cc8:	e008      	b.n	8003cdc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cca:	f7fd fe01 	bl	80018d0 <HAL_GetTick>
 8003cce:	4602      	mov	r2, r0
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	1ad3      	subs	r3, r2, r3
 8003cd4:	2b02      	cmp	r3, #2
 8003cd6:	d901      	bls.n	8003cdc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003cd8:	2303      	movs	r3, #3
 8003cda:	e05c      	b.n	8003d96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cdc:	4b11      	ldr	r3, [pc, #68]	@ (8003d24 <HAL_RCC_OscConfig+0x470>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d0f0      	beq.n	8003cca <HAL_RCC_OscConfig+0x416>
 8003ce8:	e054      	b.n	8003d94 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cea:	4b10      	ldr	r3, [pc, #64]	@ (8003d2c <HAL_RCC_OscConfig+0x478>)
 8003cec:	2200      	movs	r2, #0
 8003cee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cf0:	f7fd fdee 	bl	80018d0 <HAL_GetTick>
 8003cf4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cf6:	e008      	b.n	8003d0a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cf8:	f7fd fdea 	bl	80018d0 <HAL_GetTick>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	2b02      	cmp	r3, #2
 8003d04:	d901      	bls.n	8003d0a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	e045      	b.n	8003d96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d0a:	4b06      	ldr	r3, [pc, #24]	@ (8003d24 <HAL_RCC_OscConfig+0x470>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d1f0      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x444>
 8003d16:	e03d      	b.n	8003d94 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	699b      	ldr	r3, [r3, #24]
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d107      	bne.n	8003d30 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e038      	b.n	8003d96 <HAL_RCC_OscConfig+0x4e2>
 8003d24:	40023800 	.word	0x40023800
 8003d28:	40007000 	.word	0x40007000
 8003d2c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d30:	4b1b      	ldr	r3, [pc, #108]	@ (8003da0 <HAL_RCC_OscConfig+0x4ec>)
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	699b      	ldr	r3, [r3, #24]
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d028      	beq.n	8003d90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d121      	bne.n	8003d90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d11a      	bne.n	8003d90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d5a:	68fa      	ldr	r2, [r7, #12]
 8003d5c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003d60:	4013      	ands	r3, r2
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003d66:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d111      	bne.n	8003d90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d76:	085b      	lsrs	r3, r3, #1
 8003d78:	3b01      	subs	r3, #1
 8003d7a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d107      	bne.n	8003d90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d8a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d001      	beq.n	8003d94 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e000      	b.n	8003d96 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003d94:	2300      	movs	r3, #0
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3718      	adds	r7, #24
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	40023800 	.word	0x40023800

08003da4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b084      	sub	sp, #16
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d101      	bne.n	8003db8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e0cc      	b.n	8003f52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003db8:	4b68      	ldr	r3, [pc, #416]	@ (8003f5c <HAL_RCC_ClockConfig+0x1b8>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0307 	and.w	r3, r3, #7
 8003dc0:	683a      	ldr	r2, [r7, #0]
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d90c      	bls.n	8003de0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dc6:	4b65      	ldr	r3, [pc, #404]	@ (8003f5c <HAL_RCC_ClockConfig+0x1b8>)
 8003dc8:	683a      	ldr	r2, [r7, #0]
 8003dca:	b2d2      	uxtb	r2, r2
 8003dcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dce:	4b63      	ldr	r3, [pc, #396]	@ (8003f5c <HAL_RCC_ClockConfig+0x1b8>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 0307 	and.w	r3, r3, #7
 8003dd6:	683a      	ldr	r2, [r7, #0]
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d001      	beq.n	8003de0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e0b8      	b.n	8003f52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0302 	and.w	r3, r3, #2
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d020      	beq.n	8003e2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 0304 	and.w	r3, r3, #4
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d005      	beq.n	8003e04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003df8:	4b59      	ldr	r3, [pc, #356]	@ (8003f60 <HAL_RCC_ClockConfig+0x1bc>)
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	4a58      	ldr	r2, [pc, #352]	@ (8003f60 <HAL_RCC_ClockConfig+0x1bc>)
 8003dfe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003e02:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 0308 	and.w	r3, r3, #8
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d005      	beq.n	8003e1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e10:	4b53      	ldr	r3, [pc, #332]	@ (8003f60 <HAL_RCC_ClockConfig+0x1bc>)
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	4a52      	ldr	r2, [pc, #328]	@ (8003f60 <HAL_RCC_ClockConfig+0x1bc>)
 8003e16:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003e1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e1c:	4b50      	ldr	r3, [pc, #320]	@ (8003f60 <HAL_RCC_ClockConfig+0x1bc>)
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	494d      	ldr	r1, [pc, #308]	@ (8003f60 <HAL_RCC_ClockConfig+0x1bc>)
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 0301 	and.w	r3, r3, #1
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d044      	beq.n	8003ec4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d107      	bne.n	8003e52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e42:	4b47      	ldr	r3, [pc, #284]	@ (8003f60 <HAL_RCC_ClockConfig+0x1bc>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d119      	bne.n	8003e82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e07f      	b.n	8003f52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	2b02      	cmp	r3, #2
 8003e58:	d003      	beq.n	8003e62 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e5e:	2b03      	cmp	r3, #3
 8003e60:	d107      	bne.n	8003e72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e62:	4b3f      	ldr	r3, [pc, #252]	@ (8003f60 <HAL_RCC_ClockConfig+0x1bc>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d109      	bne.n	8003e82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e06f      	b.n	8003f52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e72:	4b3b      	ldr	r3, [pc, #236]	@ (8003f60 <HAL_RCC_ClockConfig+0x1bc>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 0302 	and.w	r3, r3, #2
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d101      	bne.n	8003e82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e067      	b.n	8003f52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e82:	4b37      	ldr	r3, [pc, #220]	@ (8003f60 <HAL_RCC_ClockConfig+0x1bc>)
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	f023 0203 	bic.w	r2, r3, #3
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	4934      	ldr	r1, [pc, #208]	@ (8003f60 <HAL_RCC_ClockConfig+0x1bc>)
 8003e90:	4313      	orrs	r3, r2
 8003e92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e94:	f7fd fd1c 	bl	80018d0 <HAL_GetTick>
 8003e98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e9a:	e00a      	b.n	8003eb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e9c:	f7fd fd18 	bl	80018d0 <HAL_GetTick>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d901      	bls.n	8003eb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	e04f      	b.n	8003f52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eb2:	4b2b      	ldr	r3, [pc, #172]	@ (8003f60 <HAL_RCC_ClockConfig+0x1bc>)
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	f003 020c 	and.w	r2, r3, #12
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d1eb      	bne.n	8003e9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ec4:	4b25      	ldr	r3, [pc, #148]	@ (8003f5c <HAL_RCC_ClockConfig+0x1b8>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 0307 	and.w	r3, r3, #7
 8003ecc:	683a      	ldr	r2, [r7, #0]
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d20c      	bcs.n	8003eec <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ed2:	4b22      	ldr	r3, [pc, #136]	@ (8003f5c <HAL_RCC_ClockConfig+0x1b8>)
 8003ed4:	683a      	ldr	r2, [r7, #0]
 8003ed6:	b2d2      	uxtb	r2, r2
 8003ed8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eda:	4b20      	ldr	r3, [pc, #128]	@ (8003f5c <HAL_RCC_ClockConfig+0x1b8>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0307 	and.w	r3, r3, #7
 8003ee2:	683a      	ldr	r2, [r7, #0]
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d001      	beq.n	8003eec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e032      	b.n	8003f52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0304 	and.w	r3, r3, #4
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d008      	beq.n	8003f0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ef8:	4b19      	ldr	r3, [pc, #100]	@ (8003f60 <HAL_RCC_ClockConfig+0x1bc>)
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	4916      	ldr	r1, [pc, #88]	@ (8003f60 <HAL_RCC_ClockConfig+0x1bc>)
 8003f06:	4313      	orrs	r3, r2
 8003f08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0308 	and.w	r3, r3, #8
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d009      	beq.n	8003f2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f16:	4b12      	ldr	r3, [pc, #72]	@ (8003f60 <HAL_RCC_ClockConfig+0x1bc>)
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	691b      	ldr	r3, [r3, #16]
 8003f22:	00db      	lsls	r3, r3, #3
 8003f24:	490e      	ldr	r1, [pc, #56]	@ (8003f60 <HAL_RCC_ClockConfig+0x1bc>)
 8003f26:	4313      	orrs	r3, r2
 8003f28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003f2a:	f000 f821 	bl	8003f70 <HAL_RCC_GetSysClockFreq>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	4b0b      	ldr	r3, [pc, #44]	@ (8003f60 <HAL_RCC_ClockConfig+0x1bc>)
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	091b      	lsrs	r3, r3, #4
 8003f36:	f003 030f 	and.w	r3, r3, #15
 8003f3a:	490a      	ldr	r1, [pc, #40]	@ (8003f64 <HAL_RCC_ClockConfig+0x1c0>)
 8003f3c:	5ccb      	ldrb	r3, [r1, r3]
 8003f3e:	fa22 f303 	lsr.w	r3, r2, r3
 8003f42:	4a09      	ldr	r2, [pc, #36]	@ (8003f68 <HAL_RCC_ClockConfig+0x1c4>)
 8003f44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003f46:	4b09      	ldr	r3, [pc, #36]	@ (8003f6c <HAL_RCC_ClockConfig+0x1c8>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f7fd fc7c 	bl	8001848 <HAL_InitTick>

  return HAL_OK;
 8003f50:	2300      	movs	r3, #0
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3710      	adds	r7, #16
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	bf00      	nop
 8003f5c:	40023c00 	.word	0x40023c00
 8003f60:	40023800 	.word	0x40023800
 8003f64:	08004c7c 	.word	0x08004c7c
 8003f68:	2000000c 	.word	0x2000000c
 8003f6c:	20000010 	.word	0x20000010

08003f70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f74:	b090      	sub	sp, #64	@ 0x40
 8003f76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003f80:	2300      	movs	r3, #0
 8003f82:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003f84:	2300      	movs	r3, #0
 8003f86:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f88:	4b59      	ldr	r3, [pc, #356]	@ (80040f0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	f003 030c 	and.w	r3, r3, #12
 8003f90:	2b08      	cmp	r3, #8
 8003f92:	d00d      	beq.n	8003fb0 <HAL_RCC_GetSysClockFreq+0x40>
 8003f94:	2b08      	cmp	r3, #8
 8003f96:	f200 80a1 	bhi.w	80040dc <HAL_RCC_GetSysClockFreq+0x16c>
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d002      	beq.n	8003fa4 <HAL_RCC_GetSysClockFreq+0x34>
 8003f9e:	2b04      	cmp	r3, #4
 8003fa0:	d003      	beq.n	8003faa <HAL_RCC_GetSysClockFreq+0x3a>
 8003fa2:	e09b      	b.n	80040dc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003fa4:	4b53      	ldr	r3, [pc, #332]	@ (80040f4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003fa6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003fa8:	e09b      	b.n	80040e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003faa:	4b53      	ldr	r3, [pc, #332]	@ (80040f8 <HAL_RCC_GetSysClockFreq+0x188>)
 8003fac:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003fae:	e098      	b.n	80040e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003fb0:	4b4f      	ldr	r3, [pc, #316]	@ (80040f0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003fb8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003fba:	4b4d      	ldr	r3, [pc, #308]	@ (80040f0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d028      	beq.n	8004018 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fc6:	4b4a      	ldr	r3, [pc, #296]	@ (80040f0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	099b      	lsrs	r3, r3, #6
 8003fcc:	2200      	movs	r2, #0
 8003fce:	623b      	str	r3, [r7, #32]
 8003fd0:	627a      	str	r2, [r7, #36]	@ 0x24
 8003fd2:	6a3b      	ldr	r3, [r7, #32]
 8003fd4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003fd8:	2100      	movs	r1, #0
 8003fda:	4b47      	ldr	r3, [pc, #284]	@ (80040f8 <HAL_RCC_GetSysClockFreq+0x188>)
 8003fdc:	fb03 f201 	mul.w	r2, r3, r1
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	fb00 f303 	mul.w	r3, r0, r3
 8003fe6:	4413      	add	r3, r2
 8003fe8:	4a43      	ldr	r2, [pc, #268]	@ (80040f8 <HAL_RCC_GetSysClockFreq+0x188>)
 8003fea:	fba0 1202 	umull	r1, r2, r0, r2
 8003fee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003ff0:	460a      	mov	r2, r1
 8003ff2:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003ff4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ff6:	4413      	add	r3, r2
 8003ff8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ffa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	61bb      	str	r3, [r7, #24]
 8004000:	61fa      	str	r2, [r7, #28]
 8004002:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004006:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800400a:	f7fc f8e5 	bl	80001d8 <__aeabi_uldivmod>
 800400e:	4602      	mov	r2, r0
 8004010:	460b      	mov	r3, r1
 8004012:	4613      	mov	r3, r2
 8004014:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004016:	e053      	b.n	80040c0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004018:	4b35      	ldr	r3, [pc, #212]	@ (80040f0 <HAL_RCC_GetSysClockFreq+0x180>)
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	099b      	lsrs	r3, r3, #6
 800401e:	2200      	movs	r2, #0
 8004020:	613b      	str	r3, [r7, #16]
 8004022:	617a      	str	r2, [r7, #20]
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800402a:	f04f 0b00 	mov.w	fp, #0
 800402e:	4652      	mov	r2, sl
 8004030:	465b      	mov	r3, fp
 8004032:	f04f 0000 	mov.w	r0, #0
 8004036:	f04f 0100 	mov.w	r1, #0
 800403a:	0159      	lsls	r1, r3, #5
 800403c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004040:	0150      	lsls	r0, r2, #5
 8004042:	4602      	mov	r2, r0
 8004044:	460b      	mov	r3, r1
 8004046:	ebb2 080a 	subs.w	r8, r2, sl
 800404a:	eb63 090b 	sbc.w	r9, r3, fp
 800404e:	f04f 0200 	mov.w	r2, #0
 8004052:	f04f 0300 	mov.w	r3, #0
 8004056:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800405a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800405e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004062:	ebb2 0408 	subs.w	r4, r2, r8
 8004066:	eb63 0509 	sbc.w	r5, r3, r9
 800406a:	f04f 0200 	mov.w	r2, #0
 800406e:	f04f 0300 	mov.w	r3, #0
 8004072:	00eb      	lsls	r3, r5, #3
 8004074:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004078:	00e2      	lsls	r2, r4, #3
 800407a:	4614      	mov	r4, r2
 800407c:	461d      	mov	r5, r3
 800407e:	eb14 030a 	adds.w	r3, r4, sl
 8004082:	603b      	str	r3, [r7, #0]
 8004084:	eb45 030b 	adc.w	r3, r5, fp
 8004088:	607b      	str	r3, [r7, #4]
 800408a:	f04f 0200 	mov.w	r2, #0
 800408e:	f04f 0300 	mov.w	r3, #0
 8004092:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004096:	4629      	mov	r1, r5
 8004098:	028b      	lsls	r3, r1, #10
 800409a:	4621      	mov	r1, r4
 800409c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80040a0:	4621      	mov	r1, r4
 80040a2:	028a      	lsls	r2, r1, #10
 80040a4:	4610      	mov	r0, r2
 80040a6:	4619      	mov	r1, r3
 80040a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040aa:	2200      	movs	r2, #0
 80040ac:	60bb      	str	r3, [r7, #8]
 80040ae:	60fa      	str	r2, [r7, #12]
 80040b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80040b4:	f7fc f890 	bl	80001d8 <__aeabi_uldivmod>
 80040b8:	4602      	mov	r2, r0
 80040ba:	460b      	mov	r3, r1
 80040bc:	4613      	mov	r3, r2
 80040be:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80040c0:	4b0b      	ldr	r3, [pc, #44]	@ (80040f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	0c1b      	lsrs	r3, r3, #16
 80040c6:	f003 0303 	and.w	r3, r3, #3
 80040ca:	3301      	adds	r3, #1
 80040cc:	005b      	lsls	r3, r3, #1
 80040ce:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80040d0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80040d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040d8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80040da:	e002      	b.n	80040e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80040dc:	4b05      	ldr	r3, [pc, #20]	@ (80040f4 <HAL_RCC_GetSysClockFreq+0x184>)
 80040de:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80040e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3740      	adds	r7, #64	@ 0x40
 80040e8:	46bd      	mov	sp, r7
 80040ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040ee:	bf00      	nop
 80040f0:	40023800 	.word	0x40023800
 80040f4:	00f42400 	.word	0x00f42400
 80040f8:	017d7840 	.word	0x017d7840

080040fc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b086      	sub	sp, #24
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004104:	2300      	movs	r3, #0
 8004106:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004108:	2300      	movs	r3, #0
 800410a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0301 	and.w	r3, r3, #1
 8004114:	2b00      	cmp	r3, #0
 8004116:	d105      	bne.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004120:	2b00      	cmp	r3, #0
 8004122:	d038      	beq.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004124:	4b68      	ldr	r3, [pc, #416]	@ (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004126:	2200      	movs	r2, #0
 8004128:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800412a:	f7fd fbd1 	bl	80018d0 <HAL_GetTick>
 800412e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004130:	e008      	b.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004132:	f7fd fbcd 	bl	80018d0 <HAL_GetTick>
 8004136:	4602      	mov	r2, r0
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	1ad3      	subs	r3, r2, r3
 800413c:	2b02      	cmp	r3, #2
 800413e:	d901      	bls.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004140:	2303      	movs	r3, #3
 8004142:	e0bd      	b.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004144:	4b61      	ldr	r3, [pc, #388]	@ (80042cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800414c:	2b00      	cmp	r3, #0
 800414e:	d1f0      	bne.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	685a      	ldr	r2, [r3, #4]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	019b      	lsls	r3, r3, #6
 800415a:	431a      	orrs	r2, r3
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	071b      	lsls	r3, r3, #28
 8004162:	495a      	ldr	r1, [pc, #360]	@ (80042cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004164:	4313      	orrs	r3, r2
 8004166:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800416a:	4b57      	ldr	r3, [pc, #348]	@ (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800416c:	2201      	movs	r2, #1
 800416e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004170:	f7fd fbae 	bl	80018d0 <HAL_GetTick>
 8004174:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004176:	e008      	b.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004178:	f7fd fbaa 	bl	80018d0 <HAL_GetTick>
 800417c:	4602      	mov	r2, r0
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	2b02      	cmp	r3, #2
 8004184:	d901      	bls.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004186:	2303      	movs	r3, #3
 8004188:	e09a      	b.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800418a:	4b50      	ldr	r3, [pc, #320]	@ (80042cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004192:	2b00      	cmp	r3, #0
 8004194:	d0f0      	beq.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 0302 	and.w	r3, r3, #2
 800419e:	2b00      	cmp	r3, #0
 80041a0:	f000 8083 	beq.w	80042aa <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80041a4:	2300      	movs	r3, #0
 80041a6:	60fb      	str	r3, [r7, #12]
 80041a8:	4b48      	ldr	r3, [pc, #288]	@ (80042cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ac:	4a47      	ldr	r2, [pc, #284]	@ (80042cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80041b4:	4b45      	ldr	r3, [pc, #276]	@ (80042cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041bc:	60fb      	str	r3, [r7, #12]
 80041be:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80041c0:	4b43      	ldr	r3, [pc, #268]	@ (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a42      	ldr	r2, [pc, #264]	@ (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80041c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041ca:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80041cc:	f7fd fb80 	bl	80018d0 <HAL_GetTick>
 80041d0:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80041d2:	e008      	b.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041d4:	f7fd fb7c 	bl	80018d0 <HAL_GetTick>
 80041d8:	4602      	mov	r2, r0
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	2b02      	cmp	r3, #2
 80041e0:	d901      	bls.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	e06c      	b.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80041e6:	4b3a      	ldr	r3, [pc, #232]	@ (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d0f0      	beq.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80041f2:	4b36      	ldr	r3, [pc, #216]	@ (80042cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041fa:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d02f      	beq.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	691b      	ldr	r3, [r3, #16]
 8004206:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800420a:	693a      	ldr	r2, [r7, #16]
 800420c:	429a      	cmp	r2, r3
 800420e:	d028      	beq.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004210:	4b2e      	ldr	r3, [pc, #184]	@ (80042cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004212:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004214:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004218:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800421a:	4b2e      	ldr	r3, [pc, #184]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800421c:	2201      	movs	r2, #1
 800421e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004220:	4b2c      	ldr	r3, [pc, #176]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004222:	2200      	movs	r2, #0
 8004224:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004226:	4a29      	ldr	r2, [pc, #164]	@ (80042cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800422c:	4b27      	ldr	r3, [pc, #156]	@ (80042cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800422e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004230:	f003 0301 	and.w	r3, r3, #1
 8004234:	2b01      	cmp	r3, #1
 8004236:	d114      	bne.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004238:	f7fd fb4a 	bl	80018d0 <HAL_GetTick>
 800423c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800423e:	e00a      	b.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004240:	f7fd fb46 	bl	80018d0 <HAL_GetTick>
 8004244:	4602      	mov	r2, r0
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	1ad3      	subs	r3, r2, r3
 800424a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800424e:	4293      	cmp	r3, r2
 8004250:	d901      	bls.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8004252:	2303      	movs	r3, #3
 8004254:	e034      	b.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004256:	4b1d      	ldr	r3, [pc, #116]	@ (80042cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004258:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800425a:	f003 0302 	and.w	r3, r3, #2
 800425e:	2b00      	cmp	r3, #0
 8004260:	d0ee      	beq.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	691b      	ldr	r3, [r3, #16]
 8004266:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800426a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800426e:	d10d      	bne.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x190>
 8004270:	4b16      	ldr	r3, [pc, #88]	@ (80042cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	691b      	ldr	r3, [r3, #16]
 800427c:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004280:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004284:	4911      	ldr	r1, [pc, #68]	@ (80042cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004286:	4313      	orrs	r3, r2
 8004288:	608b      	str	r3, [r1, #8]
 800428a:	e005      	b.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 800428c:	4b0f      	ldr	r3, [pc, #60]	@ (80042cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	4a0e      	ldr	r2, [pc, #56]	@ (80042cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004292:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004296:	6093      	str	r3, [r2, #8]
 8004298:	4b0c      	ldr	r3, [pc, #48]	@ (80042cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800429a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	691b      	ldr	r3, [r3, #16]
 80042a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042a4:	4909      	ldr	r1, [pc, #36]	@ (80042cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042a6:	4313      	orrs	r3, r2
 80042a8:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0308 	and.w	r3, r3, #8
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d003      	beq.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	7d1a      	ldrb	r2, [r3, #20]
 80042ba:	4b07      	ldr	r3, [pc, #28]	@ (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80042bc:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80042be:	2300      	movs	r3, #0
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3718      	adds	r7, #24
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}
 80042c8:	42470068 	.word	0x42470068
 80042cc:	40023800 	.word	0x40023800
 80042d0:	40007000 	.word	0x40007000
 80042d4:	42470e40 	.word	0x42470e40
 80042d8:	424711e0 	.word	0x424711e0

080042dc <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80042dc:	b480      	push	{r7}
 80042de:	b087      	sub	sp, #28
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80042e4:	2300      	movs	r3, #0
 80042e6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80042e8:	2300      	movs	r3, #0
 80042ea:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80042ec:	2300      	movs	r3, #0
 80042ee:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80042f0:	2300      	movs	r3, #0
 80042f2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d141      	bne.n	800437e <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80042fa:	4b25      	ldr	r3, [pc, #148]	@ (8004390 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004302:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d006      	beq.n	8004318 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004310:	d131      	bne.n	8004376 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004312:	4b20      	ldr	r3, [pc, #128]	@ (8004394 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004314:	617b      	str	r3, [r7, #20]
          break;
 8004316:	e031      	b.n	800437c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004318:	4b1d      	ldr	r3, [pc, #116]	@ (8004390 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004320:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004324:	d109      	bne.n	800433a <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004326:	4b1a      	ldr	r3, [pc, #104]	@ (8004390 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004328:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800432c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004330:	4a19      	ldr	r2, [pc, #100]	@ (8004398 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004332:	fbb2 f3f3 	udiv	r3, r2, r3
 8004336:	613b      	str	r3, [r7, #16]
 8004338:	e008      	b.n	800434c <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800433a:	4b15      	ldr	r3, [pc, #84]	@ (8004390 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800433c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004340:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004344:	4a15      	ldr	r2, [pc, #84]	@ (800439c <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8004346:	fbb2 f3f3 	udiv	r3, r2, r3
 800434a:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800434c:	4b10      	ldr	r3, [pc, #64]	@ (8004390 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800434e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004352:	099b      	lsrs	r3, r3, #6
 8004354:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	fb02 f303 	mul.w	r3, r2, r3
 800435e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004360:	4b0b      	ldr	r3, [pc, #44]	@ (8004390 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004362:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004366:	0f1b      	lsrs	r3, r3, #28
 8004368:	f003 0307 	and.w	r3, r3, #7
 800436c:	68ba      	ldr	r2, [r7, #8]
 800436e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004372:	617b      	str	r3, [r7, #20]
          break;
 8004374:	e002      	b.n	800437c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8004376:	2300      	movs	r3, #0
 8004378:	617b      	str	r3, [r7, #20]
          break;
 800437a:	bf00      	nop
        }
      }
      break;
 800437c:	e000      	b.n	8004380 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
    }
    default:
    {
      break;
 800437e:	bf00      	nop
    }
  }
  return frequency;
 8004380:	697b      	ldr	r3, [r7, #20]
}
 8004382:	4618      	mov	r0, r3
 8004384:	371c      	adds	r7, #28
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr
 800438e:	bf00      	nop
 8004390:	40023800 	.word	0x40023800
 8004394:	00bb8000 	.word	0x00bb8000
 8004398:	017d7840 	.word	0x017d7840
 800439c:	00f42400 	.word	0x00f42400

080043a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b082      	sub	sp, #8
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d101      	bne.n	80043b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e041      	b.n	8004436 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d106      	bne.n	80043cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f7fd f9cc 	bl	8001764 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2202      	movs	r2, #2
 80043d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	3304      	adds	r3, #4
 80043dc:	4619      	mov	r1, r3
 80043de:	4610      	mov	r0, r2
 80043e0:	f000 fa72 	bl	80048c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2201      	movs	r2, #1
 80043e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2201      	movs	r2, #1
 8004410:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2201      	movs	r2, #1
 8004418:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2201      	movs	r2, #1
 8004420:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2201      	movs	r2, #1
 8004430:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004434:	2300      	movs	r3, #0
}
 8004436:	4618      	mov	r0, r3
 8004438:	3708      	adds	r7, #8
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
	...

08004440 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004440:	b480      	push	{r7}
 8004442:	b085      	sub	sp, #20
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800444e:	b2db      	uxtb	r3, r3
 8004450:	2b01      	cmp	r3, #1
 8004452:	d001      	beq.n	8004458 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	e03c      	b.n	80044d2 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2202      	movs	r2, #2
 800445c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a1e      	ldr	r2, [pc, #120]	@ (80044e0 <HAL_TIM_Base_Start+0xa0>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d018      	beq.n	800449c <HAL_TIM_Base_Start+0x5c>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004472:	d013      	beq.n	800449c <HAL_TIM_Base_Start+0x5c>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a1a      	ldr	r2, [pc, #104]	@ (80044e4 <HAL_TIM_Base_Start+0xa4>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d00e      	beq.n	800449c <HAL_TIM_Base_Start+0x5c>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a19      	ldr	r2, [pc, #100]	@ (80044e8 <HAL_TIM_Base_Start+0xa8>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d009      	beq.n	800449c <HAL_TIM_Base_Start+0x5c>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a17      	ldr	r2, [pc, #92]	@ (80044ec <HAL_TIM_Base_Start+0xac>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d004      	beq.n	800449c <HAL_TIM_Base_Start+0x5c>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a16      	ldr	r2, [pc, #88]	@ (80044f0 <HAL_TIM_Base_Start+0xb0>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d111      	bne.n	80044c0 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	f003 0307 	and.w	r3, r3, #7
 80044a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2b06      	cmp	r3, #6
 80044ac:	d010      	beq.n	80044d0 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f042 0201 	orr.w	r2, r2, #1
 80044bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044be:	e007      	b.n	80044d0 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f042 0201 	orr.w	r2, r2, #1
 80044ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044d0:	2300      	movs	r3, #0
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3714      	adds	r7, #20
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr
 80044de:	bf00      	nop
 80044e0:	40010000 	.word	0x40010000
 80044e4:	40000400 	.word	0x40000400
 80044e8:	40000800 	.word	0x40000800
 80044ec:	40000c00 	.word	0x40000c00
 80044f0:	40014000 	.word	0x40014000

080044f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b084      	sub	sp, #16
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	68db      	ldr	r3, [r3, #12]
 8004502:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	691b      	ldr	r3, [r3, #16]
 800450a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	f003 0302 	and.w	r3, r3, #2
 8004512:	2b00      	cmp	r3, #0
 8004514:	d020      	beq.n	8004558 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	f003 0302 	and.w	r3, r3, #2
 800451c:	2b00      	cmp	r3, #0
 800451e:	d01b      	beq.n	8004558 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f06f 0202 	mvn.w	r2, #2
 8004528:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2201      	movs	r2, #1
 800452e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	699b      	ldr	r3, [r3, #24]
 8004536:	f003 0303 	and.w	r3, r3, #3
 800453a:	2b00      	cmp	r3, #0
 800453c:	d003      	beq.n	8004546 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f000 f9a3 	bl	800488a <HAL_TIM_IC_CaptureCallback>
 8004544:	e005      	b.n	8004552 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f000 f995 	bl	8004876 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f000 f9a6 	bl	800489e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	f003 0304 	and.w	r3, r3, #4
 800455e:	2b00      	cmp	r3, #0
 8004560:	d020      	beq.n	80045a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	f003 0304 	and.w	r3, r3, #4
 8004568:	2b00      	cmp	r3, #0
 800456a:	d01b      	beq.n	80045a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f06f 0204 	mvn.w	r2, #4
 8004574:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2202      	movs	r2, #2
 800457a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	699b      	ldr	r3, [r3, #24]
 8004582:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004586:	2b00      	cmp	r3, #0
 8004588:	d003      	beq.n	8004592 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f000 f97d 	bl	800488a <HAL_TIM_IC_CaptureCallback>
 8004590:	e005      	b.n	800459e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f000 f96f 	bl	8004876 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f000 f980 	bl	800489e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	f003 0308 	and.w	r3, r3, #8
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d020      	beq.n	80045f0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	f003 0308 	and.w	r3, r3, #8
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d01b      	beq.n	80045f0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f06f 0208 	mvn.w	r2, #8
 80045c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2204      	movs	r2, #4
 80045c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	69db      	ldr	r3, [r3, #28]
 80045ce:	f003 0303 	and.w	r3, r3, #3
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d003      	beq.n	80045de <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f000 f957 	bl	800488a <HAL_TIM_IC_CaptureCallback>
 80045dc:	e005      	b.n	80045ea <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f000 f949 	bl	8004876 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	f000 f95a 	bl	800489e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	f003 0310 	and.w	r3, r3, #16
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d020      	beq.n	800463c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	f003 0310 	and.w	r3, r3, #16
 8004600:	2b00      	cmp	r3, #0
 8004602:	d01b      	beq.n	800463c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f06f 0210 	mvn.w	r2, #16
 800460c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2208      	movs	r2, #8
 8004612:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	69db      	ldr	r3, [r3, #28]
 800461a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800461e:	2b00      	cmp	r3, #0
 8004620:	d003      	beq.n	800462a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f000 f931 	bl	800488a <HAL_TIM_IC_CaptureCallback>
 8004628:	e005      	b.n	8004636 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f000 f923 	bl	8004876 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f000 f934 	bl	800489e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2200      	movs	r2, #0
 800463a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	f003 0301 	and.w	r3, r3, #1
 8004642:	2b00      	cmp	r3, #0
 8004644:	d00c      	beq.n	8004660 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	f003 0301 	and.w	r3, r3, #1
 800464c:	2b00      	cmp	r3, #0
 800464e:	d007      	beq.n	8004660 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f06f 0201 	mvn.w	r2, #1
 8004658:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f000 f901 	bl	8004862 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004666:	2b00      	cmp	r3, #0
 8004668:	d00c      	beq.n	8004684 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004670:	2b00      	cmp	r3, #0
 8004672:	d007      	beq.n	8004684 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800467c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f000 faba 	bl	8004bf8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800468a:	2b00      	cmp	r3, #0
 800468c:	d00c      	beq.n	80046a8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004694:	2b00      	cmp	r3, #0
 8004696:	d007      	beq.n	80046a8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80046a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f000 f905 	bl	80048b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	f003 0320 	and.w	r3, r3, #32
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d00c      	beq.n	80046cc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	f003 0320 	and.w	r3, r3, #32
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d007      	beq.n	80046cc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f06f 0220 	mvn.w	r2, #32
 80046c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f000 fa8c 	bl	8004be4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80046cc:	bf00      	nop
 80046ce:	3710      	adds	r7, #16
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}

080046d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b084      	sub	sp, #16
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046de:	2300      	movs	r3, #0
 80046e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d101      	bne.n	80046f0 <HAL_TIM_ConfigClockSource+0x1c>
 80046ec:	2302      	movs	r3, #2
 80046ee:	e0b4      	b.n	800485a <HAL_TIM_ConfigClockSource+0x186>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2202      	movs	r2, #2
 80046fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800470e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004716:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	68ba      	ldr	r2, [r7, #8]
 800471e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004728:	d03e      	beq.n	80047a8 <HAL_TIM_ConfigClockSource+0xd4>
 800472a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800472e:	f200 8087 	bhi.w	8004840 <HAL_TIM_ConfigClockSource+0x16c>
 8004732:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004736:	f000 8086 	beq.w	8004846 <HAL_TIM_ConfigClockSource+0x172>
 800473a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800473e:	d87f      	bhi.n	8004840 <HAL_TIM_ConfigClockSource+0x16c>
 8004740:	2b70      	cmp	r3, #112	@ 0x70
 8004742:	d01a      	beq.n	800477a <HAL_TIM_ConfigClockSource+0xa6>
 8004744:	2b70      	cmp	r3, #112	@ 0x70
 8004746:	d87b      	bhi.n	8004840 <HAL_TIM_ConfigClockSource+0x16c>
 8004748:	2b60      	cmp	r3, #96	@ 0x60
 800474a:	d050      	beq.n	80047ee <HAL_TIM_ConfigClockSource+0x11a>
 800474c:	2b60      	cmp	r3, #96	@ 0x60
 800474e:	d877      	bhi.n	8004840 <HAL_TIM_ConfigClockSource+0x16c>
 8004750:	2b50      	cmp	r3, #80	@ 0x50
 8004752:	d03c      	beq.n	80047ce <HAL_TIM_ConfigClockSource+0xfa>
 8004754:	2b50      	cmp	r3, #80	@ 0x50
 8004756:	d873      	bhi.n	8004840 <HAL_TIM_ConfigClockSource+0x16c>
 8004758:	2b40      	cmp	r3, #64	@ 0x40
 800475a:	d058      	beq.n	800480e <HAL_TIM_ConfigClockSource+0x13a>
 800475c:	2b40      	cmp	r3, #64	@ 0x40
 800475e:	d86f      	bhi.n	8004840 <HAL_TIM_ConfigClockSource+0x16c>
 8004760:	2b30      	cmp	r3, #48	@ 0x30
 8004762:	d064      	beq.n	800482e <HAL_TIM_ConfigClockSource+0x15a>
 8004764:	2b30      	cmp	r3, #48	@ 0x30
 8004766:	d86b      	bhi.n	8004840 <HAL_TIM_ConfigClockSource+0x16c>
 8004768:	2b20      	cmp	r3, #32
 800476a:	d060      	beq.n	800482e <HAL_TIM_ConfigClockSource+0x15a>
 800476c:	2b20      	cmp	r3, #32
 800476e:	d867      	bhi.n	8004840 <HAL_TIM_ConfigClockSource+0x16c>
 8004770:	2b00      	cmp	r3, #0
 8004772:	d05c      	beq.n	800482e <HAL_TIM_ConfigClockSource+0x15a>
 8004774:	2b10      	cmp	r3, #16
 8004776:	d05a      	beq.n	800482e <HAL_TIM_ConfigClockSource+0x15a>
 8004778:	e062      	b.n	8004840 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800478a:	f000 f99d 	bl	8004ac8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800479c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	68ba      	ldr	r2, [r7, #8]
 80047a4:	609a      	str	r2, [r3, #8]
      break;
 80047a6:	e04f      	b.n	8004848 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80047b8:	f000 f986 	bl	8004ac8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	689a      	ldr	r2, [r3, #8]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80047ca:	609a      	str	r2, [r3, #8]
      break;
 80047cc:	e03c      	b.n	8004848 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047da:	461a      	mov	r2, r3
 80047dc:	f000 f8fa 	bl	80049d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	2150      	movs	r1, #80	@ 0x50
 80047e6:	4618      	mov	r0, r3
 80047e8:	f000 f953 	bl	8004a92 <TIM_ITRx_SetConfig>
      break;
 80047ec:	e02c      	b.n	8004848 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80047fa:	461a      	mov	r2, r3
 80047fc:	f000 f919 	bl	8004a32 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	2160      	movs	r1, #96	@ 0x60
 8004806:	4618      	mov	r0, r3
 8004808:	f000 f943 	bl	8004a92 <TIM_ITRx_SetConfig>
      break;
 800480c:	e01c      	b.n	8004848 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800481a:	461a      	mov	r2, r3
 800481c:	f000 f8da 	bl	80049d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	2140      	movs	r1, #64	@ 0x40
 8004826:	4618      	mov	r0, r3
 8004828:	f000 f933 	bl	8004a92 <TIM_ITRx_SetConfig>
      break;
 800482c:	e00c      	b.n	8004848 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4619      	mov	r1, r3
 8004838:	4610      	mov	r0, r2
 800483a:	f000 f92a 	bl	8004a92 <TIM_ITRx_SetConfig>
      break;
 800483e:	e003      	b.n	8004848 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	73fb      	strb	r3, [r7, #15]
      break;
 8004844:	e000      	b.n	8004848 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004846:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2201      	movs	r2, #1
 800484c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004858:	7bfb      	ldrb	r3, [r7, #15]
}
 800485a:	4618      	mov	r0, r3
 800485c:	3710      	adds	r7, #16
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}

08004862 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004862:	b480      	push	{r7}
 8004864:	b083      	sub	sp, #12
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800486a:	bf00      	nop
 800486c:	370c      	adds	r7, #12
 800486e:	46bd      	mov	sp, r7
 8004870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004874:	4770      	bx	lr

08004876 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004876:	b480      	push	{r7}
 8004878:	b083      	sub	sp, #12
 800487a:	af00      	add	r7, sp, #0
 800487c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800487e:	bf00      	nop
 8004880:	370c      	adds	r7, #12
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr

0800488a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800488a:	b480      	push	{r7}
 800488c:	b083      	sub	sp, #12
 800488e:	af00      	add	r7, sp, #0
 8004890:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004892:	bf00      	nop
 8004894:	370c      	adds	r7, #12
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr

0800489e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800489e:	b480      	push	{r7}
 80048a0:	b083      	sub	sp, #12
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80048a6:	bf00      	nop
 80048a8:	370c      	adds	r7, #12
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr

080048b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80048b2:	b480      	push	{r7}
 80048b4:	b083      	sub	sp, #12
 80048b6:	af00      	add	r7, sp, #0
 80048b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80048ba:	bf00      	nop
 80048bc:	370c      	adds	r7, #12
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr
	...

080048c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b085      	sub	sp, #20
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
 80048d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	4a37      	ldr	r2, [pc, #220]	@ (80049b8 <TIM_Base_SetConfig+0xf0>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d00f      	beq.n	8004900 <TIM_Base_SetConfig+0x38>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048e6:	d00b      	beq.n	8004900 <TIM_Base_SetConfig+0x38>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	4a34      	ldr	r2, [pc, #208]	@ (80049bc <TIM_Base_SetConfig+0xf4>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d007      	beq.n	8004900 <TIM_Base_SetConfig+0x38>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	4a33      	ldr	r2, [pc, #204]	@ (80049c0 <TIM_Base_SetConfig+0xf8>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d003      	beq.n	8004900 <TIM_Base_SetConfig+0x38>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	4a32      	ldr	r2, [pc, #200]	@ (80049c4 <TIM_Base_SetConfig+0xfc>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d108      	bne.n	8004912 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004906:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	68fa      	ldr	r2, [r7, #12]
 800490e:	4313      	orrs	r3, r2
 8004910:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	4a28      	ldr	r2, [pc, #160]	@ (80049b8 <TIM_Base_SetConfig+0xf0>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d01b      	beq.n	8004952 <TIM_Base_SetConfig+0x8a>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004920:	d017      	beq.n	8004952 <TIM_Base_SetConfig+0x8a>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	4a25      	ldr	r2, [pc, #148]	@ (80049bc <TIM_Base_SetConfig+0xf4>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d013      	beq.n	8004952 <TIM_Base_SetConfig+0x8a>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	4a24      	ldr	r2, [pc, #144]	@ (80049c0 <TIM_Base_SetConfig+0xf8>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d00f      	beq.n	8004952 <TIM_Base_SetConfig+0x8a>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4a23      	ldr	r2, [pc, #140]	@ (80049c4 <TIM_Base_SetConfig+0xfc>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d00b      	beq.n	8004952 <TIM_Base_SetConfig+0x8a>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4a22      	ldr	r2, [pc, #136]	@ (80049c8 <TIM_Base_SetConfig+0x100>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d007      	beq.n	8004952 <TIM_Base_SetConfig+0x8a>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	4a21      	ldr	r2, [pc, #132]	@ (80049cc <TIM_Base_SetConfig+0x104>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d003      	beq.n	8004952 <TIM_Base_SetConfig+0x8a>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	4a20      	ldr	r2, [pc, #128]	@ (80049d0 <TIM_Base_SetConfig+0x108>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d108      	bne.n	8004964 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004958:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	68db      	ldr	r3, [r3, #12]
 800495e:	68fa      	ldr	r2, [r7, #12]
 8004960:	4313      	orrs	r3, r2
 8004962:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	695b      	ldr	r3, [r3, #20]
 800496e:	4313      	orrs	r3, r2
 8004970:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	689a      	ldr	r2, [r3, #8]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a0c      	ldr	r2, [pc, #48]	@ (80049b8 <TIM_Base_SetConfig+0xf0>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d103      	bne.n	8004992 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	691a      	ldr	r2, [r3, #16]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f043 0204 	orr.w	r2, r3, #4
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2201      	movs	r2, #1
 80049a2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	68fa      	ldr	r2, [r7, #12]
 80049a8:	601a      	str	r2, [r3, #0]
}
 80049aa:	bf00      	nop
 80049ac:	3714      	adds	r7, #20
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr
 80049b6:	bf00      	nop
 80049b8:	40010000 	.word	0x40010000
 80049bc:	40000400 	.word	0x40000400
 80049c0:	40000800 	.word	0x40000800
 80049c4:	40000c00 	.word	0x40000c00
 80049c8:	40014000 	.word	0x40014000
 80049cc:	40014400 	.word	0x40014400
 80049d0:	40014800 	.word	0x40014800

080049d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b087      	sub	sp, #28
 80049d8:	af00      	add	r7, sp, #0
 80049da:	60f8      	str	r0, [r7, #12]
 80049dc:	60b9      	str	r1, [r7, #8]
 80049de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6a1b      	ldr	r3, [r3, #32]
 80049e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	6a1b      	ldr	r3, [r3, #32]
 80049ea:	f023 0201 	bic.w	r2, r3, #1
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	699b      	ldr	r3, [r3, #24]
 80049f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80049fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	011b      	lsls	r3, r3, #4
 8004a04:	693a      	ldr	r2, [r7, #16]
 8004a06:	4313      	orrs	r3, r2
 8004a08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	f023 030a 	bic.w	r3, r3, #10
 8004a10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a12:	697a      	ldr	r2, [r7, #20]
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	693a      	ldr	r2, [r7, #16]
 8004a1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	697a      	ldr	r2, [r7, #20]
 8004a24:	621a      	str	r2, [r3, #32]
}
 8004a26:	bf00      	nop
 8004a28:	371c      	adds	r7, #28
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr

08004a32 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a32:	b480      	push	{r7}
 8004a34:	b087      	sub	sp, #28
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	60f8      	str	r0, [r7, #12]
 8004a3a:	60b9      	str	r1, [r7, #8]
 8004a3c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	6a1b      	ldr	r3, [r3, #32]
 8004a42:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	6a1b      	ldr	r3, [r3, #32]
 8004a48:	f023 0210 	bic.w	r2, r3, #16
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	699b      	ldr	r3, [r3, #24]
 8004a54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004a5c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	031b      	lsls	r3, r3, #12
 8004a62:	693a      	ldr	r2, [r7, #16]
 8004a64:	4313      	orrs	r3, r2
 8004a66:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004a6e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	011b      	lsls	r3, r3, #4
 8004a74:	697a      	ldr	r2, [r7, #20]
 8004a76:	4313      	orrs	r3, r2
 8004a78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	693a      	ldr	r2, [r7, #16]
 8004a7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	697a      	ldr	r2, [r7, #20]
 8004a84:	621a      	str	r2, [r3, #32]
}
 8004a86:	bf00      	nop
 8004a88:	371c      	adds	r7, #28
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr

08004a92 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a92:	b480      	push	{r7}
 8004a94:	b085      	sub	sp, #20
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	6078      	str	r0, [r7, #4]
 8004a9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004aa8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004aaa:	683a      	ldr	r2, [r7, #0]
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	f043 0307 	orr.w	r3, r3, #7
 8004ab4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	68fa      	ldr	r2, [r7, #12]
 8004aba:	609a      	str	r2, [r3, #8]
}
 8004abc:	bf00      	nop
 8004abe:	3714      	adds	r7, #20
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr

08004ac8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b087      	sub	sp, #28
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	60f8      	str	r0, [r7, #12]
 8004ad0:	60b9      	str	r1, [r7, #8]
 8004ad2:	607a      	str	r2, [r7, #4]
 8004ad4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004ae2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	021a      	lsls	r2, r3, #8
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	431a      	orrs	r2, r3
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	4313      	orrs	r3, r2
 8004af0:	697a      	ldr	r2, [r7, #20]
 8004af2:	4313      	orrs	r3, r2
 8004af4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	697a      	ldr	r2, [r7, #20]
 8004afa:	609a      	str	r2, [r3, #8]
}
 8004afc:	bf00      	nop
 8004afe:	371c      	adds	r7, #28
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr

08004b08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b085      	sub	sp, #20
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d101      	bne.n	8004b20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b1c:	2302      	movs	r3, #2
 8004b1e:	e050      	b.n	8004bc2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2201      	movs	r2, #1
 8004b24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2202      	movs	r2, #2
 8004b2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	68fa      	ldr	r2, [r7, #12]
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	68fa      	ldr	r2, [r7, #12]
 8004b58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a1c      	ldr	r2, [pc, #112]	@ (8004bd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d018      	beq.n	8004b96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b6c:	d013      	beq.n	8004b96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a18      	ldr	r2, [pc, #96]	@ (8004bd4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d00e      	beq.n	8004b96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a16      	ldr	r2, [pc, #88]	@ (8004bd8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d009      	beq.n	8004b96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a15      	ldr	r2, [pc, #84]	@ (8004bdc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d004      	beq.n	8004b96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a13      	ldr	r2, [pc, #76]	@ (8004be0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d10c      	bne.n	8004bb0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b9c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	68ba      	ldr	r2, [r7, #8]
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	68ba      	ldr	r2, [r7, #8]
 8004bae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004bc0:	2300      	movs	r3, #0
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3714      	adds	r7, #20
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bcc:	4770      	bx	lr
 8004bce:	bf00      	nop
 8004bd0:	40010000 	.word	0x40010000
 8004bd4:	40000400 	.word	0x40000400
 8004bd8:	40000800 	.word	0x40000800
 8004bdc:	40000c00 	.word	0x40000c00
 8004be0:	40014000 	.word	0x40014000

08004be4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b083      	sub	sp, #12
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004bec:	bf00      	nop
 8004bee:	370c      	adds	r7, #12
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf6:	4770      	bx	lr

08004bf8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b083      	sub	sp, #12
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c00:	bf00      	nop
 8004c02:	370c      	adds	r7, #12
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr

08004c0c <memset>:
 8004c0c:	4402      	add	r2, r0
 8004c0e:	4603      	mov	r3, r0
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d100      	bne.n	8004c16 <memset+0xa>
 8004c14:	4770      	bx	lr
 8004c16:	f803 1b01 	strb.w	r1, [r3], #1
 8004c1a:	e7f9      	b.n	8004c10 <memset+0x4>

08004c1c <__libc_init_array>:
 8004c1c:	b570      	push	{r4, r5, r6, lr}
 8004c1e:	4d0d      	ldr	r5, [pc, #52]	@ (8004c54 <__libc_init_array+0x38>)
 8004c20:	4c0d      	ldr	r4, [pc, #52]	@ (8004c58 <__libc_init_array+0x3c>)
 8004c22:	1b64      	subs	r4, r4, r5
 8004c24:	10a4      	asrs	r4, r4, #2
 8004c26:	2600      	movs	r6, #0
 8004c28:	42a6      	cmp	r6, r4
 8004c2a:	d109      	bne.n	8004c40 <__libc_init_array+0x24>
 8004c2c:	4d0b      	ldr	r5, [pc, #44]	@ (8004c5c <__libc_init_array+0x40>)
 8004c2e:	4c0c      	ldr	r4, [pc, #48]	@ (8004c60 <__libc_init_array+0x44>)
 8004c30:	f000 f818 	bl	8004c64 <_init>
 8004c34:	1b64      	subs	r4, r4, r5
 8004c36:	10a4      	asrs	r4, r4, #2
 8004c38:	2600      	movs	r6, #0
 8004c3a:	42a6      	cmp	r6, r4
 8004c3c:	d105      	bne.n	8004c4a <__libc_init_array+0x2e>
 8004c3e:	bd70      	pop	{r4, r5, r6, pc}
 8004c40:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c44:	4798      	blx	r3
 8004c46:	3601      	adds	r6, #1
 8004c48:	e7ee      	b.n	8004c28 <__libc_init_array+0xc>
 8004c4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c4e:	4798      	blx	r3
 8004c50:	3601      	adds	r6, #1
 8004c52:	e7f2      	b.n	8004c3a <__libc_init_array+0x1e>
 8004c54:	08004c9c 	.word	0x08004c9c
 8004c58:	08004c9c 	.word	0x08004c9c
 8004c5c:	08004c9c 	.word	0x08004c9c
 8004c60:	08004ca0 	.word	0x08004ca0

08004c64 <_init>:
 8004c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c66:	bf00      	nop
 8004c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c6a:	bc08      	pop	{r3}
 8004c6c:	469e      	mov	lr, r3
 8004c6e:	4770      	bx	lr

08004c70 <_fini>:
 8004c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c72:	bf00      	nop
 8004c74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c76:	bc08      	pop	{r3}
 8004c78:	469e      	mov	lr, r3
 8004c7a:	4770      	bx	lr
